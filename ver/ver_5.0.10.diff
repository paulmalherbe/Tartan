=== modified file '.bzrignore'
--- .bzrignore	2015-02-11 16:45:23 +0000
+++ .bzrignore	2015-03-21 07:23:50 +0000
@@ -65,6 +65,6 @@
 doc/nfs_setup.rst
 doc/nut_ups.odt
 doc/vnc_setup.rst
-doc/volmoed_client.txt
+doc/volmoed_client.sh
 .idea
 Tartan-5.pidaproject

=== modified file 'bkm/bk1010.py'
--- bkm/bk1010.py	2015-02-07 06:31:11 +0000
+++ bkm/bk1010.py	2015-03-18 11:37:25 +0000
@@ -221,11 +221,11 @@
 
     def doSch(self, *args):
         cols = [
-            ("bkno", "Number", 7, "UI"),
+            ("bkno", "Number", 7, "UI", "F"),
             ("sname", "Surname", 20, "TX", "Y"),
-            ("names", "Names", 20, "TX"),
-            ("group", "Group", 30, "TX"),
-            ("arrive", "Arrival-Dt", 10, "D1")]
+            ("names", "Names", 20, "TX", "F"),
+            ("group", "Group", 30, "TX", "F"),
+            ("arrive", "Arrival-Dt", 10, "d1")]
         data = self.sql.getRec(
             tables=["bkmmst", "bkmcon"],
             cols=[
@@ -233,11 +233,15 @@
                 "bkm_group", "bkm_arrive"],
             where=[
                 ("bkm_cono", "=", self.opts["conum"]),
-                ("bkm_depart", ">=", self.start),
                 ("bkc_cono=bkm_cono",),
                 ("bkc_ccode=bkm_ccode",)],
             order="bkc_sname, bkc_names")
-        sc = SelectChoice(self.cal.window, "Select Booking", cols, data)
+        self.cal.window.withdraw()
+        self.opts["mf"].window.deiconify()
+        sc = SelectChoice(self.opts["mf"].window, "Select Booking", cols, data,
+            fltr=self.opts["mf"])
+        self.opts["mf"].window.withdraw()
+        self.cal.window.deiconify()
         if sc.selection:
             self.number = int(sc.selection[1])
             self.opts["mf"].closeLoop()

=== modified file 'bkm/bk3040.py'
--- bkm/bk3040.py	2015-02-07 06:31:11 +0000
+++ bkm/bk3040.py	2015-03-12 10:05:41 +0000
@@ -184,7 +184,8 @@
             ("bkc_ccode", "=", cod.work),
             ("bkt_cono=bkc_cono",),
             ("bkt_number", "=", num.work),
-            ("bkt_type", "<>", 1)]
+            ("bkt_type", "<>", 1),
+            ("bkt_curdt", "<=", self.cutoff)]
         grp = "bkc_sname, bkc_names"
         rec = self.sql.getRec(tables=["bkmcon", "bkmtrn"], cols=col,
             where=whr, group=grp, limit=1)

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2014-12-30 15:37:38 +0000
+++ bwl/bc2010.py	2015-03-13 10:14:59 +0000
@@ -120,9 +120,6 @@
         self.ratem = CCD(bwlctl["ctb_ratem"], "UD", 6.2)
         self.ratev = CCD(bwlctl["ctb_ratev"], "UD", 6.2)
         self.greens = bwlctl["ctb_greens"]
-        # Set font as big as possible
-        self.dfs = self.opts["mf"].rcdic["dfs"]
-        self.doSetFont()
         t = time.localtime()
         self.sysdt = ((t[0] * 10000) + (t[1] * 100) + t[2])
         if t[3] >= 12:
@@ -202,10 +199,16 @@
             ("Exit",None,self.doExit,1,None,None,None,2))
         tnd = ((self.doEnd,"y"), (self.doEnd,"n"))
         txt = (self.doExit, self.doExit)
+        # Set font as big as possible
+        self.dfs = self.opts["mf"].rcdic["dfs"]
+        self.doSetFont()
+        # Create dialog
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
             tags=tag, eflds=fld, butt=but, tend=tnd, txit=txt, eframe=True,
             notabs=True)
+        # Set new font
         self.nfs = self.opts["mf"].rcdic["dfs"]
+        self.doSetFont(self.nfs)
 
     def doDate(self, frt, pag, r, c, p, i, w):
         self.date = w
@@ -668,7 +671,10 @@
 
     def doModify(self, widget=None):
         self.modify = True
-        self.df.focusField("T", 1, 5)
+        if self.dbase in ("C", "P"):
+            self.df.focusField("T", 1, 5)
+        else:
+            self.df.focusField("T", 1, 6)
 
     def doDraw(self, widget=None):
         if self.drawn:

=== modified file 'crs/cr2010.py'
--- crs/cr2010.py	2015-02-11 16:45:23 +0000
+++ crs/cr2010.py	2015-03-20 07:32:19 +0000
@@ -14,8 +14,8 @@
 """
 
 import time
-from TartanClasses import AgeAll, ASD, Batches, GetCtl, PwdConfirm, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import AgeAll, ASD, Batches, GetCtl, LoanInterest
+from TartanClasses import PwdConfirm, Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, chkCtlAcc, getVatRate
 from tartanFunctions import paymentDate, showError
 from tartanWork import crtrtp
@@ -36,8 +36,8 @@
             return
         # Create SQL Object
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "ctlvmf", "ctlvrf",
-            "ctlvtf", "crsmst", "crstrn", "genint", "genmst", "gentrn"],
-            prog=__name__)
+            "ctlvtf", "crsmst", "crstrn", "genint", "genmst", "gentrn",
+            "waglmf", "wagltf"], prog=__name__)
         if self.sql.error:
             return
         # Check for Company record
@@ -66,14 +66,14 @@
         self.glint = crsctl["ctc_glint"]
         self.glinp = crsctl["ctc_glinp"]
         if self.glint == "Y":
-            ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
-            if not ctlctl:
+            self.ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
+            if not self.ctlctl:
                 return
             ctls = ["crs_ctl", "vat_ctl", "dis_rec"]
-            if self.gc.chkRec(self.opts["conum"], ctlctl, ctls):
+            if self.gc.chkRec(self.opts["conum"], self.ctlctl, ctls):
                 return
-            self.crsctl = ctlctl["crs_ctl"]
-            self.disrec = ctlctl["dis_rec"]
+            self.crsctl = self.ctlctl["crs_ctl"]
+            self.disrec = self.ctlctl["dis_rec"]
         # Batch Header
         self.batchHeader()
         if not self.bh.batno:
@@ -131,6 +131,34 @@
                 ("vtm_code", "", 0, "C"),
                 ("vtm_desc", "", 0, "Description", "Y")),
             "where": [("vtm_cono", "=", self.opts["conum"])]}
+        wgm = {
+            "stype": "R",
+            "tables": ("wagmst",),
+            "cols": (
+                ("wgm_empno", "", 0, "EmpNo"),
+                ("wgm_sname", "", 0, "Surname", "Y"),
+                ("wgm_fname", "", 0, "Names")),
+            "where": [("wgm_cono", "=", self.opts["conum"])]}
+        lnm = {
+            "stype": "R",
+            "tables": ("waglmf",),
+            "cols": (
+                ("wlm_loan", "", 0, "Ln"),
+                ("wlm_desc", "", 0, "Description", "Y")),
+            "where": [("wlm_cono", "=", self.opts["conum"])],
+            "whera": (("C", "wlm_empno", 0),),
+            "index": 0}
+        ced = {
+            "stype": "R",
+            "tables": ("wagedc",),
+            "cols": (
+                ("ced_type", "", 0, "T"),
+                ("ced_code", "", 0, "Cde"),
+                ("ced_desc", "", 0, "Description", "Y")),
+            "where": [
+                ("ced_cono", "=", self.opts["conum"]),
+                ("ced_type", "=", "D")],
+            "index": 1}
         viw = {
             "stype": "R",
             "tables": ("crstrn",),
@@ -144,7 +172,8 @@
                 ("crt_cono", "=", self.opts["conum"]),
                 ("crt_type", "=", self.opts["rtn"]),
                 ("crt_batch", "=", self.bh.batno)],
-            "order": "crt_seq"}
+            "order": "crt_seq",
+            "comnd": self.doView}
         fld = [
             (("T",0,0,0),"OUI",9,"Batch %s Quantity" % self.bh.batno),
             (("T",0,0,0),"OSD",13.2,"Value"),
@@ -191,6 +220,25 @@
                     "","N",self.doAllDet,None,None,("notblank",))])
             if not self.incoac:
                 fld[9][1] = "OUI"
+            if self.opts["rtn"] in (1, 4) and "wag_slc" in self.ctlctl:
+                fld.extend([
+                    (("T",3,0,0),"OSD",13.2,"Unallocated Balance"),
+                    (("C",3,0,0),"IUI",5,"EmpNo","Employee Number",
+                        0,"N",self.doEmpNum,wgm,None,None),
+                    (("C",3,0,1),"ONA",20,"Name"),
+                    (("C",3,0,2),"IUI",2,"Ln","Loan Number",
+                        "","N",self.doLonNum,lnm,None,("notzero",)),
+                    (("C",3,0,3),"INA",20,"Description","",
+                        "","N",self.doLonDes,None,None,("notblank",)),
+                    (("C",3,0,4),"ISD",13.2,"Amount","",
+                        "","N",self.doLonAmt,None,None,("efld",)),
+                    (("C",3,0,5),"IUI",3,"Cde","Deduction Code",
+                        "","N",self.doLonCod,ced,None,("efld",)),
+                    (("C",3,0,6),"ONA",20,"Description"),
+                    (("C",3,0,7),"IUD",6.2,"Intr-%","Interest Rate",
+                        "","N",self.doLonInt,None,None,None),
+                    (("C",3,0,8),"IUD",12.2,"Ded-Amt","Deduction Amount",
+                        "","N",self.doLonDed,None,None,("efld",))])
         else:
             fld[3][2] = 20
             fld.extend([
@@ -227,12 +275,19 @@
             tag.append(("Allocation", None, None, None))
             cnd.append((self.endPage2,"y"))
             cxt.append(self.exitPage2)
+            if self.opts["rtn"] in (1, 4) and "wag_slc" in self.ctlctl:
+                tag.append(("Loans", None, None, None))
+                cnd.append((self.endPage3,"y"))
+                cxt.append(self.exitPage3)
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tags=tag,
             cend=cnd, cxit=cxt, butt=but)
         self.df.loadEntry("T", 0, 0, data=self.bh.batqty)
         self.df.loadEntry("T", 0, 1, data=self.bh.batval)
         self.df.focusField("C", 1, 1)
 
+    def doView(self, *event):
+        self.df.focusField("C", 1, 1)
+
     def doCrsAcc(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_terms",
             "crm_termsb", "crm_stday", "crm_pydis", "crm_glac"],
@@ -251,7 +306,7 @@
             "=", w)], limit=1)
         if acc:
             return "Transaction Already Exists"
-        self.ref1 = w
+        self.trnref = w
 
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
@@ -382,22 +437,22 @@
         # General Ledger Control Transaction (Creditors)
         val = float(ASD(0) - ASD(self.amt) - ASD(self.dis))
         data = (self.opts["conum"], self.crsctl, self.curdt, self.trndat,
-            self.glt, self.ref1, self.bh.batno, val, 0.00, self.trndet,
+            self.glt, self.trnref, self.bh.batno, val, 0.00, self.trndet,
             "N", "", self.recon, self.opts["capnm"], self.sysdtw, 0)
         self.sql.insRec("gentrn", data=data)
         # General Ledger Control Transaction (Bank)
         if self.opts["rtn"] in (2, 5):
             data = (self.opts["conum"], self.bh.acc, self.curdt, self.trndat,
-                self.glt, self.ref1, self.bh.batno, self.amt, 0.00,
+                self.glt, self.trnref, self.bh.batno, self.amt, 0.00,
                 self.trndet, "N", "", self.recon, self.opts["capnm"],
                 self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
             # General Ledger Control Transaction (Discount)
             if self.dis:
                 data = (self.opts["conum"], self.disrec, self.curdt,
-                    self.trndat, self.glt, self.ref1, self.bh.batno, self.dis,
-                    0.00, self.trndet, "N", "", self.recon, self.opts["capnm"],
-                    self.sysdtw, 0)
+                    self.trndat, self.glt, self.trnref, self.bh.batno,
+                    self.dis, 0.00, self.trndet, "N", "", self.recon,
+                    self.opts["capnm"], self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
 
     def doAgeNormal(self, widget=None):
@@ -419,7 +474,7 @@
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"],  system="crs", agetyp=atype,
             agekey=[self.opts["conum"], self.cracno, self.opts["rtn"],
-            self.ref1, self.curdt, self.amt, self.dis])
+            self.trnref, self.curdt, self.amt, self.dis])
         self.agecan = age.cancel
         if self.ageloop:
             self.opts["mf"].closeLoop()
@@ -441,6 +496,9 @@
                 ("cti_inco", "=", self.opts["conum"])], limit=1)
             if not acc:
                 return "Invalid Company, No Intercompany Record 2"
+        self.ctlctl = self.gc.getCtl("ctlctl", w)
+        if not self.ctlctl:
+            return "rf"
         self.allcoy = w
         self.df.loadEntry(frt, pag, p+1, data=self.glac)
 
@@ -451,7 +509,11 @@
             "=", self.genacc)], limit=1)
         if not acc:
             return "Invalid G/L Account"
-        if acc[1] == "N":
+        self.loan = False
+        if "wag_slc" in self.ctlctl and self.genacc == self.ctlctl["wag_slc"]:
+            # Staff Loan
+            self.loan = True
+        elif acc[1] == "N":
             cf = PwdConfirm(self.opts["mf"], conum=self.allcoy, system="GEN",
                 code="NoPost")
             if not cf.pwd or cf.flag == "no":
@@ -471,7 +533,7 @@
         ctlctl = self.gc.getCtl("ctlctl", self.allcoy, error=False)
         if not ctlctl:
             return "Missing ctlctl Record for Company"
-        if self.gc.chkRec(self.opts["conum"], ctlctl, ["vat_ctl"]):
+        if self.gc.chkRec(self.allcoy, ctlctl, ["vat_ctl"]):
             return "Missing or Invalid Control Record"
         self.convat = ctlctl["vat_ctl"]
         acc = getVatRate(self.sql, self.allcoy, w, self.trndat)
@@ -494,6 +556,9 @@
         else:
             self.df.loadEntry(frt, pag, p, data=incamt)
         self.df.loadEntry(frt, pag, p+1, data=self.allvat)
+        if not self.allvat:
+            self.df.loadEntry(frt, pag, p+1, data=self.name)
+            return "sk1"
 
     def doAllVat(self, frt, pag, r, c, p, i, w):
         if (self.allamt < 0 and w > 0) or (self.allamt > 0 and w < 0):
@@ -514,19 +579,30 @@
             ok = askQuestion(self.opts["mf"].body, head="Cancel",
                 mess="Are You Certain You Want to Cancel This Entry?")
         if ok == "yes":
+            pag = self.df.pag
             self.cancel = True
             self.opts["mf"].dbm.rollbackDbase()
             if self.batupd:
                 self.updateBatch(rev=True)
-            if self.glint == "Y" and self.opts["rtn"] not in (2, 5):
-                self.df.clearFrame("C", 2)
+            for pg in range(self.df.pgs, 1, -1):
+                self.df.clearFrame("C", pg)
             self.df.selPage("Transaction")
             row = int((self.df.last[1][1] - 1) / self.df.colq[1])
             col = (row * self.df.colq[1]) + 1
             self.df.focusField("C", 1, col)
+            if pag == 3:
+                self.opts["mf"].closeLoop()
 
     def endPage2(self):
         self.updateTables2()
+        if self.loan:
+            self.othtot = self.allamt
+            self.df.selPage("Loans")
+            self.df.loadEntry("T", 3, 0, data=self.othtot)
+            self.df.focusField("C", 3, 1)
+            self.opts["mf"].startLoop()
+            if self.cancel:
+                return
         self.allocated = float(ASD(self.allocated) + ASD(self.allamt) + \
             ASD(self.allvat))
         if self.allocated == self.trnamt:
@@ -565,7 +641,7 @@
     def restDebitCredit(self, amt, vat):
         # VAT Transaction (ctlvtf)
         data = (self.allcoy, self.vatcode, "I", self.curdt, "C",
-            self.opts["rtn"], self.bh.batno, self.ref1, self.trndat,
+            self.opts["rtn"], self.bh.batno, self.trnref, self.trndat,
             self.cracno, self.alldet, amt, vat, 0, self.opts["capnm"],
             self.sysdtw, 0)
         self.sql.insRec("ctlvtf", data=data)
@@ -573,19 +649,19 @@
             return
         # General Ledger Transaction (Expense)
         data = (self.allcoy, self.genacc, self.curdt, self.trndat,
-            self.glt, self.ref1, self.bh.batno, amt, vat, self.alldet,
+            self.glt, self.trnref, self.bh.batno, amt, vat, self.alldet,
             self.vatcode, "", 0, self.opts["capnm"], self.sysdtw, 0)
         self.sql.insRec("gentrn", data=data)
         # General Ledger Transaction (Intercompany)
         if self.allcoy != self.opts["conum"]:
             # General Ledger Transaction (Intercompany From)
             acc = self.sql.getRec(tables="genint", cols=["cti_acno"],
-                where=[("cti_cono", "=", self.opts["conum"]), ("cti_inco", "=",
-                self.allcoy)], limit=1)[0]
+                where=[("cti_cono", "=", self.opts["conum"]),
+                ("cti_inco", "=", self.allcoy)], limit=1)[0]
             val = float(ASD(amt) + ASD(vat))
             data = (self.opts["conum"], acc, self.curdt, self.trndat, self.glt,
-                self.ref1, self.bh.batno, val, 0.00, self.alldet, "N",
-                "", 0, self.opts["capnm"], self.sysdtw, 0)
+                self.trnref, self.bh.batno, val, 0.00, self.alldet, "N", "", 0,
+                self.opts["capnm"], self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
             # General Ledger Transaction (Intercompany To)
             acc = self.sql.getRec(tables="genint", cols=["cti_acno"],
@@ -593,13 +669,13 @@
                 self.opts["conum"])], limit=1)[0]
             val = float(ASD(0) - ASD(amt) - ASD(vat))
             data = (self.allcoy, acc, self.curdt, self.trndat, self.glt,
-                self.ref1, self.bh.batno, val, 0.00, self.alldet, "N",
+                self.trnref, self.bh.batno, val, 0.00, self.alldet, "N",
                 "", 0, self.opts["capnm"], self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
         if vat:
             # General Ledger Control Transaction (V.A.T.)
             data = (self.allcoy, self.convat, self.curdt, self.trndat,
-                self.glt, self.ref1, self.bh.batno, vat, 0.00, self.alldet,
+                self.glt, self.trnref, self.bh.batno, vat, 0.00, self.alldet,
                 "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
         self.vat = float(ASD(self.vat) + ASD(vat))
@@ -610,17 +686,17 @@
     def doCrsTrn(self):
         # Creditors Ledger Transaction
         paydt = paymentDate(self.base, self.stdt, self.term, self.trndat)
-        data = [self.opts["conum"], self.cracno, self.opts["rtn"], self.ref1,
-            self.bh.batno, self.trndat, "", self.amt, self.vat, self.per,
-            self.curdt, paydt, "Y", self.amt, self.trndet, self.vatcode, "N",
-            self.opts["capnm"], self.sysdtw, 0]
+        data = [self.opts["conum"], self.cracno, self.opts["rtn"],
+            self.trnref, self.bh.batno, self.trndat, "", self.amt, self.vat,
+            self.per, self.curdt, paydt, "Y", self.amt, self.trndet,
+            self.vatcode, "N", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("crstrn", data=data)
         if not self.dis:
             return
-        data = [self.opts["conum"], self.cracno, 6, self.ref1, self.bh.batno,
-            self.trndat, "", self.dis, self.vat, 0, self.curdt, paydt,
-            "Y", self.dis, self.trndet, self.vatcode, "N", self.opts["capnm"],
-            self.sysdtw, 0]
+        data = [self.opts["conum"], self.cracno, 6, self.trnref,
+            self.bh.batno, self.trndat, "", self.dis, self.vat,
+            0, self.curdt, paydt, "Y", self.dis, self.trndet,
+            self.vatcode, "N", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("crstrn", data=data)
 
     def updateBatch(self, rev=False):
@@ -642,4 +718,101 @@
         callModule(self.opts["mf"], self.df, "cr1010", coy=(self.opts["conum"],
             self.opts["conam"]), period=None, user=self.opts["capnm"])
 
+    def doEmpNum(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
+            where=[("wgm_cono", "=", self.allcoy), ("wgm_empno", "=", w)],
+            limit=1)
+        if not acc:
+            return "Invalid Employee Number"
+        self.empnum = w
+        empnam = "%s, %s" % (acc[0], acc[1].split()[0])
+        self.df.loadEntry("C", pag, p+1, data=empnam)
+
+    def doLonNum(self, frt, pag, r, c, p, i, w):
+        self.lonnum = w
+        acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
+            "=", self.allcoy), ("wlm_empno", "=", self.empnum),
+            ("wlm_loan", "=", self.lonnum)], limit=1)
+        if not acc:
+            ok = askQuestion(self.opts["mf"].body, head="New Loan",
+                mess="Is This a New Loan?", default="no")
+            if ok == "yes":
+                self.newlon = True
+        else:
+            self.newlon = False
+            self.londes = acc[self.sql.waglmf_col.index("wlm_desc")]
+            self.loncod = acc[self.sql.waglmf_col.index("wlm_ded_code")]
+            self.lonrte = acc[self.sql.waglmf_col.index("wlm_int_per")]
+            self.londat = acc[self.sql.waglmf_col.index("wlm_start_date")]
+            self.londed = acc[self.sql.waglmf_col.index("wlm_ded_amt")]
+            self.df.loadEntry(frt, pag, p+1, data=self.londes)
+            return "sk1"
+
+    def doLonDes(self, frt, pag, r, c, p, i, w):
+        self.londes = w
+
+    def doLonAmt(self, frt, pag, r, c, p, i, w):
+        self.lonamt = w
+        if not self.lonamt:
+            self.lonamt = self.othtot
+        self.df.loadEntry(frt, pag, p, data=self.lonamt)
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+1, data=self.loncod)
+
+    def doLonCod(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="wagedc", cols=["ced_desc"],
+            where=[("ced_cono", "=", self.allcoy), ("ced_type",
+            "=", "D"), ("ced_code", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Code"
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        self.loncod = w
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+2, data=self.lonrte)
+
+    def doLonInt(self, frt, pag, r, c, p, i, w):
+        self.newrte = w
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+2, data=self.londed)
+
+    def doLonDed(self, frt, pag, r, c, p, i, w):
+        self.londed = w
+
+    def endPage3(self):
+        if self.opts["rtn"] == 4:
+            tramt = float(ASD(0.0) - ASD(self.lonamt))
+        else:
+            tramt = self.lonamt
+        self.othtot = float(ASD(self.othtot) - ASD(self.lonamt))
+        if self.newlon:
+            # Loans Ledger Masterfile
+            self.othrtn = 2
+            cap = self.lonamt
+            self.sql.insRec("waglmf", data=[self.allcoy, self.empnum,
+                self.lonnum, self.londes, self.loncod, self.newrte,
+                self.trndat, self.londed])
+        else:
+            # Loans Ledger Interest
+            self.othrtn = 3
+            cap = 0.00
+            LoanInterest(self.opts["mf"].dbm, self.opts["period"][1][0],
+                self.allcoy, self.empnum, self.lonnum, self.lonrte,
+                self.londat, self.trndat, self.bh.batno, self.curdt,
+                capnm=self.opts["capnm"], update="Y",
+                glctls=(self.ctlctl["wag_slc"], self.ctlctl["wag_sli"]))
+        # Loans Ledger Transaction
+        data = [self.allcoy, self.empnum, self.lonnum, self.bh.batno,
+            self.othrtn, self.trndat, self.trnref, tramt, cap, self.londed,
+            self.newrte, self.curdt, self.alldet, "", self.opts["capnm"],
+            self.sysdtw, 0]
+        self.sql.insRec("wagltf", data=data)
+        if self.othtot:
+            self.df.loadEntry("T", 3, 0, data=self.othtot)
+            self.df.advanceLine(3)
+        else:
+            self.opts["mf"].closeLoop()
+
+    def exitPage3(self):
+        self.df.focusField("C", 3, self.df.col)
+
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'crs/cr3080.py'
--- crs/cr3080.py	2015-02-11 16:45:23 +0000
+++ crs/cr3080.py	2015-03-20 09:12:53 +0000
@@ -343,11 +343,15 @@
         if not d[0][c.index("balance")]:
             return "Transaction Has No Balance"
         self.exref = w
+        self.exdte = d[0][c.index("crt_paydt")]
+        self.examt = d[0][c.index("crt_payamt")]
         for pos, fld in enumerate(col):
             self.ex.loadEntry(frt, pag, p+1+pos, data=d[0][c.index(fld)])
 
     def doExInd(self, frt, pag, r, c, p, i, w):
         self.exind = w
+        if self.exind == "N":
+            return "nd"
 
     def doExDte(self, frt, pag, r, c, p, i, w):
         self.exdte = w

=== modified file 'csv/ctllog_fld.csv'
--- csv/ctllog_fld.csv	2015-02-22 09:42:02 +0000
+++ csv/ctllog_fld.csv	2015-03-10 18:12:34 +0000
@@ -1,6 +1,6 @@
 0,"clg_login","TX","20.0","Login Name","Login-Name"
 1,"clg_user","TX","20.0","User Name","User-Name"
-2,"clg_prog","TX","20.0","Program Name","Program-Name"
+2,"clg_prog","NA","6.0","Program Name","Program-Name"
 3,"clg_type","UI","2.0","Transaction Type","TT"
 4,"clg_cono","UI","3.0","Company Number","Coy"
 5,"clg_period","UI","3.0","Financial Period","Per"

=== modified file 'doc/CR.rst'
--- doc/CR.rst	2014-03-28 07:32:49 +0000
+++ doc/CR.rst	2015-03-20 11:33:05 +0000
@@ -68,6 +68,13 @@
     + **V.A.T.** - The V.A.T. amount of the allocation.
     + **Details** - The details of the allocation.
     + Continue allocating the transaction until fully allocated.
++ **Loans** - This screen only applies if Salaries and Wages are integrated with the G/L and the loans control account has been entered in the `Allocation` screen.
+    + **EmpNo** - The employees number.
+    + **Ln** - The loan number.
+    + **Amount** - The loan amount allocated to this employee.
+    + **Cde** - The new deduction record to be associated with this loan.
+    + **Intr-%** - The new interest rate to apply to this loan.
+    + **Ded-Amt** - The new total amount to be deducted from earnings to settle this loan.
 
 Receipts and Payments (CR)
 ++++++++++++++++++++++++++
@@ -148,7 +155,6 @@
 + **P** - Y to pay the transaction else N.
 + **Pay-Date** - The date the transaction becomes payable.
 + **Pay-Amount** - The amount to be paid.
-+
 
 Name and Address Labels (CR)
 ++++++++++++++++++++++++++++

=== modified file 'doc/Changes.rst'
--- doc/Changes.rst	2015-03-09 16:02:16 +0000
+++ doc/Changes.rst	2015-03-09 16:02:25 +0000
@@ -1,3 +1,13 @@
+ver_5.0.9
+=========
+1) Fixed some minor problems arising from the booking's manager.
+2) Included the 2016 P.A.Y.E. rates.
+3) Updated the reference manual.
+
+Note:
+-----
+You can only upgrade to this version if your current version is 4.1.10 or later
+
 ver_5.0.8
 =========
 1) Fixed some minor problems arising from the booking's manager.

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2015-03-09 16:02:16 +0000
+++ doc/Downloads.rst	2015-03-21 07:39:56 +0000
@@ -11,16 +11,16 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.0.9 and was released on the 9th March, 2015.
+The latest version of Tartan is 5.0.10 and was released on the 21st March, 2015.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.0.9.tar.gz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.0.10.tar.gz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tar.gz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tar.gz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tar.gz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.0.9.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.0.10.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe

=== modified file 'doc/GL.rst'
--- doc/GL.rst	2015-02-27 11:57:15 +0000
+++ doc/GL.rst	2015-03-20 12:51:12 +0000
@@ -21,8 +21,8 @@
 
 Once all accounts have been created, you should print a list of them by selecting `Chart of Accounts (GL)`_ from the reporting menu, and check that all accounts have been created correctly.
 
-Control Accounts
-++++++++++++++++
+Control Accounts (GL)
++++++++++++++++++++++
 This routine is used to create control accounts for the company. Control accounts are accounts that the system needs to know about in order to create double sided entries. You must create at least one bank as well as the retained income control records but preferably most of the others as well.
 
 If you elected to **automatically populate** while creating masterfile records this would already have been done for you.
@@ -33,16 +33,16 @@
 + **Import Format** - If you are going to import bank statements you must select the format you will be downloading or else `None` for no imports. The preferred format for internet banking is the OFX, or Open Financial eXchange, format.
 + **Date Format** - If you entered an import format, select the applicable date format. The date format for OFX is CCYYMMDD.
 
-Inter Company Records
-+++++++++++++++++++++
+Inter Company Records (GL)
+++++++++++++++++++++++++++
 This routine only applies to systems which have multiple companies. This allows one to capture transactions in one company directly into another company's accounts e.g. capture a payment made by company one for a telephone account for company two. For the purposes of simplicity lets assume that we are presently in company 1's ledger and want to integrate company 2.
 
 + **Coy-Num** - The other company's number i.e. 2
 + **Acc-Num-1** - Company 2's inter company loan account number in company 1.
 + **Acc-Num-2** - Company 1's inter company loan account number in company 2.
 
-Standard Journals
-+++++++++++++++++
+Standard Journals (GL)
+++++++++++++++++++++++
 Use this routine to create, amend and delete standard journals.
 
 The following fields need more explanation:
@@ -222,8 +222,8 @@
 + **Printer Name** - The printer name to print on or None.
 + **E-Mail Address** - An email address to send the report to or leave blank.
 
-Bank Import Control
-+++++++++++++++++++
+Bank Import Control (GL)
+++++++++++++++++++++++++
 Use this routine to create, amend and delete bank import control records. These records are used when importing bank statements to automatically create transactions for recurring entries e.g. charges, fees, interest, stop orders etc.
 
 + **Bank Account** - The G/L account number for the bank.
@@ -284,7 +284,7 @@
     + **Ref-No2** - A further reference number if applicable.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this account.
-+ **Assets** - This only applies if the `Acc-Num` is one of the asset's control accounts.
++ **Assets** - This only applies if the `Acc-Num` is one of the asset control accounts.
     + **Grp** - The asset's group code.
     + **Cod-Num** - The asset's code.
     + **M** - The transaction type i.e. New purchase, improvement, write off, depreciation or sale of asset.
@@ -293,6 +293,13 @@
 + **Books** - This only applies if the `Acc-Num` is the booking control account.
     + **Bkm-Num** - The booking number.
     + **Amount** - The amount of the allocation.
++ **Loans** - This only applies if the `Acc-Num` is the staff loans control account.
+    + **EmpNo** - The employee number.
+    + **Ln** - The loan number.
+    + **Amount** - The amount of the loan.
+    + **Cde** - The new deduction code to use to repay the loan.
+    + **Intr-%** - The new interest rate to apply to the loan.
+    + **Ded-Amt** - The new amount to be deducted from earnings to repay the loan.
 
 If you have allocated the transaction to a creditor's or debtor's account you might be required to age the amount as described in `Ageing Transactions`_ above.
 
@@ -317,7 +324,7 @@
 
 Standard Journal Entries (GL)
 +++++++++++++++++++++++++++++
-Use this routine to raise standard journal entries as created using `Standard Journals`_.
+Use this routine to raise standard journal entries as created using `Standard Journals (GL)`_.
 
 As with most data capture routines you will first have to enter the `Batch Details`_ after which the following fields apply:
 
@@ -332,7 +339,7 @@
 As with most data capture routines you will first have to enter the `Batch Details`_.  The following buttons will then be available:
 
 + **Exit** - This exits out of the capture routine as per using the <Escape> key.
-+ **Import Bank File** - This routine is used to import a bank statement file as described under `Control Accounts`_.
++ **Import Bank File** - This routine is used to import a bank statement file as described under `Control Accounts (GL)`_.
 
     Once you have selected the file to import the system will automatically flag all transactions which already exist on your database.
 
@@ -440,8 +447,8 @@
 * **Bank Account** - The bank account number.
 * **Accounting Period** - The relevant period in the financial year.
 
-Imported Bank Statements
-++++++++++++++++++++++++
+Imported Bank Statements (GL)
++++++++++++++++++++++++++++++
 Use this routine to produce a report of imported bank statements.
 
 + **Bank Account** - Bank account number.

=== modified file 'doc/MD.rst'
--- doc/MD.rst	2015-03-09 16:02:16 +0000
+++ doc/MD.rst	2015-03-21 07:39:55 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.0.9
+:Version:   5.0.10
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== added file 'doc/Rnehol.rst'
--- doc/Rnehol.rst	1970-01-01 00:00:00 +0000
+++ doc/Rnehol.rst	2015-03-21 07:28:47 +0000
@@ -0,0 +1,2148 @@
+==============================
+ Tartan Systems - User Manual
+==============================
+
+:Version:   5.0.9
+:Author:    Paul Malherbe
+:Contact:   paul@tartan.co.za
+:Home:      http://www.tartan.co.za
+:Copyright: Paul Malherbe (C) 2004-2015.
+:Licence:   Free use of this software and all it's modules is granted under the terms of the License.
+
+:Note: This document is not intended as an accounting manual. It is primarily a manual for people with some accounting expertise to learn how to use Tartan as an accounting tool.
+
+.. contents:: **Table of Contents**
+
+.. raw:: pdf
+
+   PageBreak
+
+About
+-----
+Tartan Systems started out in 1981 as a suite of programs I wrote in COBOL and until 1994 ran on various platforms including CPM, RSX11M, MSDOS, AT&T UNIX and SCO.
+
+In 1994 I discovered LINUX and when iBCS2 became available I modified the systems to run under LINUX and continue doing so until today.
+
+In 2003 I started looking around for another programming language in which I could rewrite the systems to   run under LINUX as well as Windows without having to recompile etc. Also I was getting irritated with having to compile using SCO.
+
+Eventually I decided on the following:
+
++ Python_ as the programming language
++ Tkinter_ for the graphical user interface
++ Reportlab_ to generate reports
++ Pychart_ to generate charts and graphs
++ PostgreSQL_, MySQL_, Firebird_ and Pysqlite_ as supported relational databases
+
+In 2005, version 3, I changed the graphical user interface to PyGtk, a python wrapper for the Gtk library.
+
+In 2011, version 4, I dropped support for windows 9x and also replaced reportlab with pyfpdf.
+
+In 2015, version 5, I replaced PyGtk with Tkinter and ttk.
+
+.. _Python: http://www.python.org
+.. _Tkinter: http://www.python.org/topics/tkinter
+.. _Reportlab: http://www.reportlab.org
+.. _Pychart: http://www.hpl.hp.com/personal/Yasushi_Saito/pychart
+.. _PostgreSQL: http://www.postgresql.org
+.. _MySQL: http://dev.mysql.com
+.. _Firebird: http://www.firebirdsql.org
+.. _Pysqlite: http://code.google.com/p/pysqlite
+
+Installation Procedure
+----------------------
+Linux and Source
+~~~~~~~~~~~~~~~~
+Ensure that the following dependencies are installed on your system:
+
++ python >= 2.7.5 and < 3.0.0
++ python-tk >= 2.7.5 and < 3.0.0
++ python-imaging >= 2.3.0
++ python-pil >= 2.3.0
++ python-pil.imagetk >= 2.3.0
+
+Additionally, the following dependencies should also be installed using pip:
+
++ odfpy >= 0.9.6
++ markdown >= 2.0
++ Python-Chart >= 1.39
++ xlrd >= 0.7.1
++ xlwt >= 0.7.1
+
+And, depending on your database needs, one of:
+
++ Pysqlite >= 2.6.3
+
+or one of:
+
++ Postgresql >= 8.4.0
++ Psycopg2 >= 2.0.4
+
+or one of:
+
++ Mysql >= 5.0.1
++ Mysql-python >= 1.2.0
+
+Download the following file from ftp://ftp.tartan.co.za
+
++ Tartan_5.x.x.tar.gz
+
+Extract Tartan_5.x.x.tar.gz into a directory of your choice as follows:
+
++ cd your.directory && tar -xvzf Tartan_5.x.x.tar.gz
+
+Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
+
+Windows Binary
+~~~~~~~~~~~~~~
+Download the following files from ftp://ftp.tartan.co.za or if you are in possession of a CD this is not necessary.
+
++ Tartan_full_5.x.x.exe
+
+Install Tartan_full_5.x.x.exe by browsing to it and double clicking and then accept the defaults, except, also agree to creating an icon on your desktop.
+
+Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
+
+Startup Procedure
+-----------------
+Linux and Source
+~~~~~~~~~~~~~~~~
+Start Tartan by entering the following command:
+
+    `python -OO program_path/ms0000.py [options]`
+
+To find out what the available command line options are, use the -h option.
+
+Windows Binary
+~~~~~~~~~~~~~~
+.. NOTE::
+
+  Users must first perform the following steps:
+
+    1) Right click on the Tartan shortcut icon.
+    2) Select `Properties` on the menu. A dialogue box will appear on the screen.
+    3) Click the `Advanced` button under the Shortcut tab in the dialogue box.
+    4) Check the `Run as administrator` box.
+    5) Click the `OK` button (or press Enter on your keyboard if the button is highlighted by default).
+    6) Finish by clicking `Apply` and then `OK`. Your preferences have been saved. Next time you open the shortcut to the application you performed the task for your computer will no longer require administrative permission.
+
+Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `c:\Tartan\prg` directory and double clicking on the `ms0000[.exe]` file.
+
+Both
+~~~~
+The first time you run Tartan you will automatically be taken to `Preferences`_ where you will have to enter various parameters relating to your installation. After saving the preferences and restarting Tartan you will be prompted to create the database. Once the database has been created you will have to create the System record as per `System Record Maintenance`_ as well as a Company record as per `Company Records Maintenance`_.
+
+Status Line
+-----------
+Please note that when using Tartan your available options will be highlighted on the status line at the bottom left hand side of the screen. Please read this carefully before asking for assistance.
+
+Common Keyboard Functions
+-------------------------
+Throughout the various modules comprising **Tartan Systems** the following keys are used to perform certain functions. These options will always be highlighted in the `Status Line`_ at the bottom of the screen. The most common ones are:
+
++ **Enter**  - Accept keyboard input.
++ **Esc**    - Exit a module or go to a previous entry field.
++ **F1**     - Record Selection used with most data input routines.
++ **F5**     - Record Deletion used with record maintenance routines.
++ **F9**     - Input Termination used with multi-line text input.
+
+In addition to the above keys all underlined characters on notebook tags and buttons can be used, in conjunction with the <Alt> key, as shortcuts e.g <Alt-s> to open the System menu.
+
+Common Routines
+---------------
+There are various common routines. Rather than continually describing them they will be described once here only.
+
+User Validation
+~~~~~~~~~~~~~~~
+If no users have been created using the `User's Maintenance`_ routine on the `System`_ menu and no password has been allocated to the **admin** user, the system will automatically log in using **admin** as the user name. In all other cases a user must log in by entering a valid name and password. If no password exists for the **admin** user a password should be created as soon as possible using the `Change Password`_ routine on the System_ menu.
+
+Company Selection
+~~~~~~~~~~~~~~~~~
+For every routine which is company specific and where you have more than 1 company, you will be required to select the relevant company. In some cases you will also have to enter a financial period. Please note that you will not always be prompted for the financial period as this only applies to routines which require it. Also note that for both selections there is a `F1 Record Selection` option as per `Common Keyboard Functions`_.
+
+Batch Details
+~~~~~~~~~~~~~
+Most data capture routines require you to enter batch details. The reason for a batch is ease of balancing and the resolution of errors made during data capture. After you exit a data capture routine a totals summary will be displayed. If there is a discrepancy between the expected and entered values all the various systems have a routine to print the batch details thus enabling you to determine where the error is and therefore to correct it.
+
++ **Batch Number** - Any 7 character unique alphanumeric code.
++ **Capture Date (CCYYMMDD)** - The date that this batch was first created.
++ **Current Period (CCYYMM)** - The financial period of this batch.
++ **Number of Entries** - The total number of entries comprising this batch, if known, else 0.
++ **Value of Entries** - The total value of entries comprising this batch, if known, else 0.
++ **Batched By** - The initials of the person who pre-listed the batch.
++ **Captured By** - The initials of the person who created the batch.
++ **Multiple Date Allocations** - Whether or not the postings are to be allocated according to the transaction date and not the current period.
++ **Bank Control** - For all batches in general ledger and other systems integrated with the general ledger, that affect the bank accounts, enter the bank control code.
+
+Ageing Transactions
+~~~~~~~~~~~~~~~~~~~
+While capturing transactions for various systems you will be required to allocate the amount to existing outstanding transactions for ageing purposes.
+
+There are four different methods of ageing a transaction:
+
++ **Normal** - This will display a list of all outstanding transactions on the account and you will be able to allocate at random until the full amount has been allocated.
+
+    + Select a transaction to allocate against by either clicking on the required line or moving the cursor to the required line and hitting the `Enter` key.
+    + Enter the allocation amount.
+    + Accept the allocation amount by either clicking on the `Apply` button or by hitting the `Enter` key.
+    + The amount will be allocated and the `Balance` will show the unallocated portion.
+    + Continue these steps until the full amount has been allocated. In the event of a balance remaining which cannot be allocated, hitting the `Esc` key or clicking on the `Exit` button will exit the routine leaving the balance as unallocated.
+
++ **History** - This is identical to `Normal` above but the available transactions will include previously fully allocated ones thus enabling you to reallocate transactions.
++ **Oldest** - This will automatically allocate the amount against outstanding transactions, starting from the oldest transaction, until either the amount has been fully allocated or there are no more outstanding transactions in which case the balance will remain as unallocated.
++ **Current** - This will leave the full transaction as unallocated.
+
+Printer Selection
+~~~~~~~~~~~~~~~~~
+Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record Maintenance`_ record.
+
+* **Output** - Select the required output option.
+* **Printer Name** - If you selected `Print`, enter the printer name.
+* **E-Mail Report** - If available, select whether or not to email the report.
+* **E-Mail Address** - If available, enter the email address, if more than one, comma separate them.
+
+Error Messages
+--------------
+Should an error message occur and there is a file named *errors.txt* in the `Work Path` as created in `Preferences`_. Please email the file to errors@tartan.co.za after which you may delete it.
+
+Menus and Sub Menus
+-------------------
+Please note that depending on the system modules selected when creating the company records, as detailed in `Company Records Maintenance`_, and the security level of the user, some of the menus detailed below might not appear.
+
+System
+~~~~~~
+Please note that depending on the security level of the user some of these routines might not be available.
+
+Change User
+...........
+Use this routine to change the current user. Selecting it will log the current user out and the new user can then log in as per `User Validation`_.
+
+Change Password
+...............
+Select this routine to change the logged in user's password. The user can change the password by first entering the old password followed by the new password twice, for confirmation.
+
+User's Maintenance
+..................
+Use this routine to create or amend user's records, permissions etc.
+
++ **User Name** - You must enter the user's login name. In the case of existing users the screen will be populated with existing data.
++ **Full Name** - The full name of the user.
++ **User Password** - It is not necessary to enter passwords as users must change their own using `Change Password`_, after logging in.
++ **Copy Existing User** - Use this to copy all permissions of an existing user.
++ **Valid Companies** - The valid company's field is for limiting a user's access to specific companies and is a comma separated list of company numbers e.g. 1,2,3,4.
++ **Security Level** - The Security levels are as follows:
+
+    + **0** - Enquiries Only
+    + **1** - 0 plus Reporting
+    + **2** - 1 plus Data Capture
+    + **3** - 2 plus File Maintenance
+    + **4** - 3 plus Month End Routines
+    + **5** - 4 plus Control Routines
+    + **6** - 5 plus Financial Year End Routine
+    + **9** - Supervisor level, Everything
+
++ The following fields are used to control which companies, systems and modules are available, only by password, to this user:
+
+    + **Coy** - A company number or zero for all companies
+    + **SS** - The system code
+    + **Prog** - A program module or blank for all modules of a system
+    + **Password** - The password. If the password is left blank it is the same as denying the selection i.e. The user will not be able to select the module(s).
+    + **Check Password** - If the password is not blank then enter the password again for verification
+
+**Examples**
+
+.. csv-table::
+  :header: "Coy", "SS", "Prog", "Password", "Meaning"
+  :widths: 5, 5, 6, 10, 50
+
+  "0", "gl", "    ", "    ", "All general ledger modules for all companies would be denied."
+  "0", "gl", "2032", "    ", "General ledger payments data capture for all companies would be denied."
+  "0", "gl", "    ", "abcd", "All general ledger modules for all companies would require the password `abcd`."
+  "0", "gl", "2032", "abcd", "General ledger payments data capture for all companies would require the password `abcd`."
+
+Upgrade System
+..............
+Select this routine to check if there are upgrades to Tartan and if so to install them.
+
+* **Update Type** - Select whether to check the Tartan ftp site or a local LAN location. If Local is selected you will be able to browse for a location which will default to whatever is set in the *Upgrade Path* directory as set during the `Preferences`_ routine.
+
+* If there is an update and you want to upgrade, click on the `Update` button.
+
+Update File Formats
+...................
+If you have performed an upgrade of Tartan you will have to perform this routine as well. This routine will automatically update all table formats in the database. If you have more than one database (rcfile), you must perform this routine for each database.
+
+Copy Tables
+...........
+Use this routine to copy tables from one profile/database to another one.
+
+* **RC File From** - Enter the full path of the rcfile of the database to copy from.
+* **Whole Database** - Yes or No, If No is selected a list of tables will be displayed after confirmation. Tick all tables to be copied and then the Accept button.
+
+Backup Database
+...............
+Select this routine to create a backup of the current database. These backups will reside in the *Backup Path* directory as created using the `Preferences`_ routine. Each backup will further reside in a sub directory named after the name of the database and a further sub directory named `arch`.
+
+Restore Database
+................
+Select this routine to restore a previous backup.
+
++ **Type** - Select a Full or Partial restore.
++ **Archive** - Select the relevant archive to restore from.
++ **All Companies** - `Yes` or `Include/Exclude` some companies.
++ **Companies** - Comma separated list of companies to include or exclude.
++ **All Systems** - `Yes` or `Include/Exclude` some systems.
++ **Systems** - Comma separated list of systems to include or exclude.
+
+Please note that unless you really know what you are doing it is very dangerous to restore individual systems as your data could become unbalanced because of integration and table relationships.
+
+If you are doing a full restore and the database already exists you will be asked whether to drop it first. Unless you are sure of what you are doing select No.
+
+Preferences
+...........
+Use this routine to configure Tartan, however, depending on your security level, some of the options might not be available to you.
+
++ **Configuration File** - This is the full path of your configuration file. Every user can have his or her own file. This file, by default, is placed in the user's home directory or, in Windows, the root directory of the Tartan installation e.g. `C:\\Tartan`. If you want to change this default, you must set an environment variable as **TARTANRC=path-to-rcfile** or use the command line option **-r path-to-rcfile**.
+
++ **Database**
+
+    + **Database Engine** - This is the database being used and must be one of PostgreSQL, SQLite, MySQL or Firebird. The recommended one for single user installations is SQLite and PostgreSQL for multi-user installations.
+    + **Database Name** - This can be any single word name defaulting to **tartan**.
+    + **Host Name** - This is the host name of the Server. This is not used with SQLite.
+    + **Files Directory** - This is only used for SQLite and Firebird database engines and is the directory where the database will be created.
+    + **Port Number** - This is the port number the database uses. Leaving this blank will enable the database default port.
+    + **Administrator** - This is the name used to connect to the database. This is not used with SQLite.
+    + **Password** - This is the password of the user. This is not necessary with SQLite.
+
++ **General**
+
+    + **Program Path** - This is the path where the programs reside.
+    + **Backup Path** - This is the path where backups of the database will be stored.
+    + **Work Path** - This is the path of the work directory. All temporary files will be created in this directory.
+    + **Upgrade Path** - This is the path where any upgrades will be stored.
+    + **PDF Viewer** - This is the full path of the program used to display pdf files.  The default for LINUX is **xpdf** and Windows is **SumatraPDF**. Other recommended programs for windows are **Foxit Reader** and **AcroRd32** version 4.05.
+    + **Print Command** - This is the full path of the print program used to print postscript files. The LINUX default is **lpr** and Windows is **SumatraPDF**. Other recommended programs for windows are **Foxit Reader** and **AcroRd32** version 4.05.
+    + **PS Converter** - This is the full path of the program needed to convert pdf files to postscript. The LINUX default is **pdftops** and the Windows one is **blank**.  If this field is left blank, no conversion will take place and the print routine will have to be able to print pdf files directly e.g. where one of `SumatraPDF`, `Foxit Reader` or `Acrobat Reader` has been selected as the printer.
+    + **CSV Reader** - This is the full path of the program used to read csv and xls file formats.
+    + **Screen Geometry** - This defaults to the suggested geometry for your screen. Entering a zero will achieve the same result.
+    + **Screen Placement** - Where the Tartan Window must be placed on the monitor i.e. Left, Centre or Right.
+    + **Show Tartan Image** - Whether to display the Tartan image on the Main Menu screen.
+    + **Enforce Confirm** - Whether confirmation is required on the completion of data entry.
+    + **Auto-completion** - Whether auto-completion will be available. This means that as you enter data, and if there are available options, these will appear in a box below the entry field for selection.
+    + **Tool-tips** - Whether tool-tips will display as you hover your cursor over certain entry fields.
+    + **Error Alarm** - Whether or not to sound an audible alarm with errors. This can be No, Yes or Multimedia. Use Multimedia if you do not have an internal speaker.
+
++ **Dialog**
+
+    + **Menu Font**
+        + **Name** - This is the font family to be used for all menu items.
+        + **Size** - This is font size to be used for all menu items.
+    + **Default Font**
+        + **Name** - This is the font family to be used in all other cases.
+        + **Size** - This is font size to be used in all other cases.
+    + **Theme** - The theme to be used. The default theme is `clam`.
+    + **Colour Scheme** - The colour scheme to be used. The default scheme is `Red`.
+    + **Normal**
+        + **FG** - The normal label and button foreground colour.
+        + **BG** - The normal label and button background colour.
+    + **Focus**
+        + **FG** - The focused button foreground colour.
+        + **BG** - The focused button background colour.
+    + **Disable**
+        + **FG** - The disabled button foreground colour.
+        + **BG** - The disabled button background colour.
+    + **Booking Query**
+        + **FG** - The booking manager calendar query foreground colour.
+        + **BG** - The booking manager calendar query background colour.
+    + **Booking Confirmed**
+        + **FG** - The booking manager calendar confirm foreground colour.
+        + **BG** - The booking manager calendar confirm background colour.
+    + **Booking Settled**
+        + **FG** - The booking manager calendar settle foreground colour.
+        + **BG** - The booking manager calendar settle background colour.
+
+If this is a new installation you will be prompted to Create the Database after which you will need to create a `System Record` and at least one `Company Record`.
+
+Quit
+....
+Select this to exit Tartan.
+
+Control
+~~~~~~~
+System Record Maintenance
+.........................
+This routine is used to create or amend a system control record by entering the following:
+
+    + **Years to Keep History** - Enter the number of years that historical data must be retained. Enter a 0 for infinity.
+    + **Enforce Passwords** - Select Yes or No.
+    + **Minimum Characters** - If you elected to enforce passwords enter the minimum number of characters that the passwords must consist of.
+    + **Maximum Life (Days)** - If you elected to enforce passwords enter the maximum number of days that the passwords will be valid for.
+    + **Backup History (Days)** - Enter the maximum number of days that backups will be retained. Enter 0 for infinity.
+    + **SMTP Server** - If you have email then enter your SMTP server's address e.g. smtp.mweb.co.za or smtp.saix.net or smtp.vodacom.co.za
+    + **SMTP Security** - Select the appropriate security method.
+    + **SMTP Authentication** - Select the appropriate authentication method.
+    + **SMTP Port Number** - Select the appropriate smtp port number.
+    + **SMTP Username** - If your smtp server requires a username enter it here.
+    + **SMTP Password** - If your smtp server requires a password enter it here.
+    + **SMS Service** - Select Yes or No. In order to use the SMS facility. You will first have to register with www.smsportal.co.za in order to get a username and password.
+    + **SMS Username** - Enter the user name for the service.
+    + **SMS Password** - Enter the password for the service.
+    + **G/L Departments** - Whether to allow departmental financial reporting.
+    + **Number of Digits** - The number of digits the department code uses in the account numbers i.e. if you enter 3 then the first 3 digits of the 7 digit account number will be reserved for the department code.
+
+Company Records Maintenance
+...........................
+This routine is used to create or amend company records, at least one company, number 1, must be created.
+
+While most of the fields are self explanatory the following are of note:
+
++ **E-Mail Address** - Your default email address.
++ **V.A.T. Default** - Any alphanumeric character. If the code, except **N** which is used for no V.A.T., has not previously been created you will be prompted to create one as in `V.A.T. Records Maintenance`_.
++ **Systems** - You must tick all the systems that you would like to enable otherwise they will not appear on your menu.
++ **Logo** - You can select an image file to be used as the letterhead for invoices, statements and remittance advices. this file should be a jpg file.
+
+After creating a **new** company record you will be prompted for the initial financial period's starting and ending dates e.g. 20060301 and 20070228.
+
+Department Records Maintenance
+..............................
+Use this routine to create department records if departments were enabled in the Systems Record.
+
++ **Department** - The department code.
++ **Name** - The name of the department.
+
+Module Passwords Maintenance
+............................
+Use this routine to set passwords to override certain security limitations e.g. locked general ledger account, inhibit the sale of items at prices under cost or inhibit sales to a debtor exceeding their credit limit.
+
++ **Company** - Enter the company number or 0 for all companies.
++ **System** - The relevant system code. F1 will show all system codes.
++ **Code** - The relevant restrictions code. F1 will show existing overrides and the `All Codes` button will show all available restrictions.
++ **Password** - The password required to override this restriction.
+
+Module Passwords Listing
+........................
+Use this routine to produce a report of the modules and passwords created using `Module Passwords Maintenance`_.
+
+V.A.T. Records Maintenance
+..........................
+Use this routine to create, amend or delete value added tax records.
+
++ **V,A.T. Code** - A single character V.A.T. code.
++ **Description** - A description of the code.
++ **Category** - The category of the code as follows:
+
+    + **C** for Capital Items
+    + **N** for Non Vattable Items
+    + **S** for Standard V.A.T. Codes
+    + **X** for X Rated Items
+    + **Z** for Zero Rated Items
+
++ **Date** - The starting date of the current rate.
++ **Rate** - The current rate.
+
+V.A.T. Statement
+................
+Use this routine to produce a value added tax statement for a specific period.
+
+Enter all relevant details according to the prompts. The following fields need more explanation:
+
++ **Starting Period** - Enter the starting period or 0 to take all unflagged transactions into account.
++ **Flag Items as Paid** - This option is only available if the `Starting Period` is 0. If you select `Yes` then all transactions will be flagged as paid with the date in the next field. To reprint a previous report select `Reprint` with the date to be reprinted in the `Payment Date` field.
+
+Email Log Report
+................
+Use this routine to print a report of emails sent by the system.
+
+Financial Year End Routine
+..........................
+Use this routine to end a financial period. This will create opening balances in the next financial period and if you elect to Finalise the period it will disable any further postings to the applicable period and any previous periods.
+
+Change Year End Date
+....................
+Use this routine to change the financial year end date from a specific period.
+
+.. raw:: pdf
+
+    PageBreak
+
+General Ledger
+~~~~~~~~~~~~~~
+File Maintenance (GL)
+.....................
+Control Record (GL)
++++++++++++++++++++
+This routine is used to create or amend a company's control record.
+
++ **Departments** - Yes or No (Not used at present)
++ **Number of Digits** - Number of leading digits used for department codes.
+
+Masterfile Records (GL)
++++++++++++++++++++++++
+This routine is used to create or amend general ledger account records. For a new company you can **automatically populate** the company with standard accounts and reports by selecting the `Populate` button. You can also import a chart of accounts by selecting the `Import` button in which case the file must be in `csv` or `xls` format and must contain all the fields as listed below.
+
++ **Acc-Num** - The account number of the record. This is a numeric field and can have up to 7 digits. There is nothing special about this number it is only used to access the record.
++ **Account Type** - Select the applicable account type for the record.
++ **Description** - The account's description up to 30 characters in length.
++ **Allow Postings** - Whether or not direct postings are allowed to this account. Normally direct postings are not allowed to control accounts of subsidiary ledgers, e.g. Debtor's as they should be generated in the subsidiary ledger.
++ **Tax Default** - The V.A.T. code normally associated with postings to this account.
+
+Once all accounts have been created, you should print a list of them by selecting `Chart of Accounts (GL)`_ from the reporting menu, and check that all accounts have been created correctly.
+
+Control Accounts (GL)
++++++++++++++++++++++
+This routine is used to create control accounts for the company. Control accounts are accounts that the system needs to know about in order to create double sided entries. You must create at least one bank as well as the retained income control records but preferably most of the others as well.
+
+If you elected to **automatically populate** while creating masterfile records this would already have been done for you.
+
++ **Code** - Enter a valid control code e.g. **bank_1**. If you press F1 you  will be given a list of available codes which you can select from.
++ **G/L Acc-Num** - Enter the applicable general ledger account number for this code.
++ **Bank Account** - If the code is a bank account then you can enter the bank's account number here. This is required for importing bank statements.
++ **Import Format** - If you are going to import bank statements you must select the format you will be downloading or else `None` for no imports. The preferred format for internet banking is the OFX, or Open Financial eXchange, format.
++ **Date Format** - If you entered an import format, select the applicable date format. The date format for OFX is CCYYMMDD.
+
+Inter Company Records (GL)
+++++++++++++++++++++++++++
+This routine only applies to systems which have multiple companies. This allows one to capture transactions in one company directly into another company's accounts e.g. capture a payment made by company one for a telephone account for company two. For the purposes of simplicity lets assume that we are presently in company 1's ledger and want to integrate company 2.
+
++ **Coy-Num** - The other company's number i.e. 2
++ **Acc-Num-1** - Company 2's inter company loan account number in company 1.
++ **Acc-Num-2** - Company 1's inter company loan account number in company 2.
+
+Standard Journals (GL)
+++++++++++++++++++++++
+Use this routine to create, amend and delete standard journals.
+
+The following fields need more explanation:
+
++ **Freq** - This is the frequency with which this journal is raised:
+
+    + **M** - Monthly
+    + **3** - Quarterly
+    + **6** - Biannually
+    + **Y** - Annually
+
++ **Start** - The first period this journal is to be raised, (CCYYMM)
++ **End** - The last period this journal is to be raised, (CCYYMM)
+
+Please note that you will not be able to end this routine until the debits equal the credits. Credits are entered as minus amounts.
+
+Report Generator (GL)
++++++++++++++++++++++
+Use this routine to create, amend and delete `Financial Statements (GL)`_ report formats.
+
++ **Company** - The company number or a 0 to create a general report for all companies.
++ **Report** - The report number. After this point certain options are available.
+    + **Re-Sequence** - This re-sequences the whole report starting from 1
+    + **Copy** - This allows you to copy an existing report
+        + **Company Number** - The company number of the existing report
+        + **Report Number** - The number of the existing report
+    + **Print** - This allows you to print the report layout
++ **Type** - The type of report to create:
+    + **B** - Balance Sheet
+    + **P** - Profit and Loss
+    + **O** - Any Other type of report
++ **Heading** - The report heading.
++ **Sequence**
+    + **Seq-Num** - The report sequence number. To insert lines use decimals.
+    + **Sequence Type** - The sequence type as follows.
++ **Heading (H)**
+    + **Description** - The heading detail.
+    + **Highlight** - Whether to print the heading in bold characters.
+    + **New Page** - Whether to print the heading on a new page.
+    + **Ignore Account Type** - In the case of B and P report types, when the account type changes the heading will automatically also change. To ignore this action select this option.
++ **Ledger (L)**
+    + **From Account** - The first account in a range of accounts.
+    + **To Account** - The last account in a range or 0 for only the first account.
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Include Opening Balance** - Whether to include the opening balance.
+    + **Accumulate Month Values** - Whether to accumulate the month values. This only applies to (M)onthly report types.
+    + **Print Values**
+        + **Yes** - Print
+        + **No** - Do not print
+        + **Debit** - Only print if the value is positive
+        + **Credit** - Only print of the value is negative
+    + **Normal Sign**
+        + **Positive** - The value for this account is normally positive
+        + **Negative** - The value for this account is normally negative
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the totals
+        + **Subtract** - Subtract the value from the totals
+        + **Ignore** - Do not add nor subtract the value
+    + **Ignore Account Type** - In the case of B and P report types, when the account type changes the heading will automatically also change. To ignore this action select this option.
+    + **Store Amount** - Whether you want to store the value for later
+    + **Storage Number** - The number to use when storing the value
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the storage
+        + **Subtract** - Subtract the value from the storage
+        + **Ignore** - Do not add nor subtract the value
++ **Group (G)** - This is used to group a number of accounts together
+    + **Group Number** - The group number
+    + **Description** - The group description
+    + **From Account** - The first account in a range of accounts.
+    + **To Account** - The last account in a range or 0 for only the first account.
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Include Opening Balance** - Whether to include the opening balance.
+    + **Accumulate Month Values** - Whether to accumulate the month values. This only applies to (M)onthly report types.
+    + **Print Values**
+        + **Yes** - Print
+        + **No** - Do not print
+        + **Debit** - Only print if the value is positive
+        + **Credit** - Only print of the value is negative
+    + **Normal Sign**
+        + **Positive** - The value for this account is normally positive
+        + **Negative** - The value for this account is normally negative
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the totals
+        + **Subtract** - Subtract the value from the totals
+        + **Ignore** - Do not add nor subtract the value
+    + **Ignore Account Type** - In the case of B and P report types, when the account type changes the heading will automatically also change. To ignore this action select this option.
+    + **Store Amount** - Whether you want to store the value for later
+    + **Storage Number** - The number to use when storing the value
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the totals
+        + **Subtract** - Subtract the value from the totals
+        + **Ignore** - Do not add nor subtract the value
+    + **Chart Label**
++ **Stored (S)**
+    + **Description** - The description of the stored value
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Print Values**
+        + **Yes** - Print
+        + **No** - Do not print
+        + **Debit** - Only print if the value is positive
+        + **Credit** - Only print of the value is negative
+    + **Normal Sign**
+        + **Positive** - The value for this account is normally positive
+        + **Negative** - The value for this account is normally negative
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the totals
+        + **Subtract** - Subtract the value from the totals
+        + **Ignore** - Do not add nor subtract the value
+    + **Clear Stored Value** - Whether to zero the stored amount
+    + **Storage Number** - The stored value's number
+    + **Percentage of Stored Value** - The percentage of the stored value to print
++ **Total (T)** - All values are automatically added into or subtracted from totals numbered from 1 to 9.
+    + **Description** - To description of the total or blank
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Total Level** - The total number to print
+    + **Print Values**
+        + **Yes** - Print
+        + **No** - Do not print
+        + **Debit** - Only print if the value is positive
+        + **Credit** - Only print of the value is negative
+    + **Normal Sign**
+        + **Positive** - The value for this account is normally positive
+        + **Negative** - The value for this account is normally negative
+    + **Clear Total** - Whether to zero the total
+    + **Store Amount** - Whether you want to store the value for later
+    + **Storage Number** - The number to use when storing the value
+    + **Add, Subtract or Ignore**
+        + **Add** - Add the value in the totals
+        + **Subtract** - Subtract the value from the totals
+        + **Ignore** - Do not add nor subtract the value
+    + **Chart Label**
++ **Uline (U)**
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Underline Type**
+        + **Single** - Single line
+        + **Double** - Double line
+        + **Blank** - Blank line
++ **Calc (C)** - Not Yet Implemented:
++ **Percent (P)** - This is a percentage of one stored amount against another stored amount.
+    + **Description** - The description of the percentage
+    + **Highlight** - Whether to print the line in bold characters.
+    + **Storage Number** - The first stored amount
+    + **Storage Number** - The second stored amount
+
+Detail Records (GL)
++++++++++++++++++++
+Use this routine to create, amend and delete detail records used by `Financial Statements (GL)`_ report formats.
+
++ **Code** - A sequential number for the detail record.
++ **Description** - A description of the detail.
+
+For each month in the financial year enter the following:
+
++ **Period** - A financial period i.e. CCYYMM
++ **Value** - A value for the period.
+
+Stream Records (GL)
++++++++++++++++++++
+Use this routine to create, amend and delete stream records used by `Financial Statements (GL)`_ report formats.
+
++ **Stream Number** - A sequential number for the stream record.
++ **Description** - A description of the stream.
+
+For each report in the stream enter the following:
+
++ **Seq** - A sequence number starting at 0.
++ **T** - The report type, S(mall), L(arge), M(onthly) or C(ustom).
++ **CN** - If the report type is a C then this is the custom report number.
++ **C** - Consolidation code, Y or N.
++ **Rep** - Report number.
++ **G** - General report, Y or N.
++ **V** - Report contents, V(alues), B(udgets), C(ombined) or D(etail).
++ **Cod** - For contents type D, enter the applicable detail code.
++ **Z** - Ignore zeros, Y or N.
++ **O** - Print the options line on report, Y or N.
++ **N** - Print account numbers on the report, Y or N.
++ **Printer Name** - The printer name to print on or None.
++ **E-Mail Address** - An email address to send the report to or leave blank.
+
+Bank Import Control (GL)
+++++++++++++++++++++++++
+Use this routine to create, amend and delete bank import control records. These records are used when importing bank statements to automatically create transactions for recurring entries e.g. charges, fees, interest, stop orders etc.
+
++ **Bank Account** - The G/L account number for the bank.
++ **Memo Code** - This is a 5 digit sequential number of the record. Entering a zero will automatically allocated the next number.
++ **Memo Desc Contains** - This together with the next two fields are used to correctly identify the transaction using the description appearing on the bank statement.
++ **Transaction Type** - Payment or deposit.
++ **Allocation Company** - The company number to be debited or credited.
++ **Allocation Account** - The account number to be debited or credited.
++ **Chn** - The chain store code if the account number is the debtor's control account.
++ **Acc-Num** - If the account number is the creditor's or debtor's account enter the relevant creditor's or debtor's account number.
++ **Ageing Code** - If the account number is the creditor's or debtor's account select how to age the amount.
++ **Vat Code** - Enter the applicable V.A.T. code.
+
+Data Capture (GL)
+.................
+Opening Balances (GL)
++++++++++++++++++++++
+Use this routine to capture initial opening balances. You can also import these balances by selecting the `Import File` button in which case the file must be in `csv` or `xls` format and must contain the account number and balance fields.
+
+* **Acc-Num** - The account number.
+* **Balance** - The opening balance.
+
+Budgets (GL)
+++++++++++++
+Use this routine to capture monthly budgets for a specific financial period. You can also import budgets by selecting the `Import File` button in which case the file must be in `csv` or `xls` format and must contain all the fields as detailed in the prompt when you hover your cursor over the button. There is also an `Auto Populate` button which will create budgets based on the previous year's actual plus or minus a standard rate.
+
+* **Acc-Num** - The account number.
+* **F** - `M` to enter a monthly budget or `A` to enter an annual budget amount.
+* **Period** - If `M` was selected then enter the period i.e. YYYYMM.
+* **Budget** - The budget value.
+
+Sales, Payments, Petty Cash, Purchases and Receipts (GL)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+These data capture routines are similar in operation and therefore I will handle them together. Please note that if subsidiary books are integrated i.e. creditors and debtors, purchases and sales will not be available and an error message will be displayed if you attempt to access them.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screens and fields apply:
+
++ **Transaction**
+    + **Reference** - The document's reference number.
+    + **Date** - The date of the document.
+    + **Amount** - The total inclusive value of the document.
+    + **Details** - The description of the document.
++ **Allocation**
+    + **Coy** - The company number in multi company installations.
+    + **Acc-Num** - The general ledger account number to debit or credit.
+    + **Alloc-Amt** - The inclusive amount to be allocated to this account.
+    + **V** - The applicable V.A.T. code to apply to this allocation.
+    + **VAT-Amount** - The V.A.T. amount, which can be overridden.
+    + **Details** - The description of the allocation.
++ **Creditors** - This only applies if the `Acc-Num` is the creditor's control account and the transaction type is payments or receipts.
+    + **Acc-Num** - The creditor's account number.
+    + **Ref-No2** - A further reference number if applicable.
+    + **Discount** - A discount amount.
+    + **Amount** - The amount to be allocated to this account.
++ **Debtors** - This only applies if the `Acc-Num` is the debtor's control account and the transaction type is payments or receipts.
+    + **Chn** - The chain store code, if chain stores apply.
+    + **Acc-Num** - The debtor's account number.
+    + **Ref-No2** - A further reference number if applicable.
+    + **Discount** - A discount amount.
+    + **Amount** - The amount to be allocated to this account.
++ **Assets** - This only applies if the `Acc-Num` is one of the asset control accounts.
+    + **Grp** - The asset's group code.
+    + **Cod-Num** - The asset's code.
+    + **M** - The transaction type i.e. New purchase, improvement, write off, depreciation or sale of asset.
+    + **Amount** - The amount of the allocation.
+    + **Details** - The description of the allocation.
++ **Books** - This only applies if the `Acc-Num` is the booking control account.
+    + **Bkm-Num** - The booking number.
+    + **Amount** - The amount of the allocation.
++ **Loans** - This only applies if the `Acc-Num` is the staff loans control account.
+    + **EmpNo** - The employee number.
+    + **Ln** - The loan number.
+    + **Amount** - The amount of the loan.
+    + **Cde** - The new deduction code to use to repay the loan.
+    + **Intr-%** - The new interest rate to apply to the loan.
+    + **Ded-Amt** - The new amount to be deducted from earnings to repay the loan.
+
+If you have allocated the transaction to a creditor's or debtor's account you might be required to age the amount as described in `Ageing Transactions`_ above.
+
+Manual Journal Entries (GL)
++++++++++++++++++++++++++++
+Use this routine to capture manual journal entries. You can also import journals by selecting the `Import File` button in which case the file must be in `csv` or `xls` format and must contain all the fields as detailed in the prompt when you hover your cursor over the button.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following fields apply:
+
++ **Ref-Num** - The journal number.
++ **Date** - The date of the journal.
++ **Coy** - The company number in multi company installations.
++ **Acc-Num** - The general ledger account number to debit or credit.
++ **Amount** - The inclusive amount of the journal.
++ **V** - The applicable V.A.T. code to apply to this journal.
++ **VAT-Amt** - The V.A.T. amount, which can be overridden.
++ **Details** - The description of the journal.
+
+The *List All* button will show you all the postings captured, including those which have scrolled off the screen, for checking purposes.
+
+Please note that you will not be able to exit this routine until the debits equal the credits. Credits are entered as minus amounts.
+
+Standard Journal Entries (GL)
++++++++++++++++++++++++++++++
+Use this routine to raise standard journal entries as created using `Standard Journals (GL)`_.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following fields apply:
+
++ **Frequency** - Select the frequency of the journals to be raised.
++ **All Journals** - Select whether to raise all journals for the selected frequency.
++ **All Periods** - Select whether to raise journals for all periods from the start of the current financial period up to and including the batch header period.
+
+Bank Statements (GL)
+++++++++++++++++++++
+Use this routine to capture bank statements. This is to facilitate reconciling the bank accounts with the bank statements. This routine can also used to capture receipts, payments and journal entries affecting the bank account e.g. all entries on the bank statement not yet entered into the bank account can be processed during this routine.
+
+As with most data capture routines you will first have to enter the `Batch Details`_.  The following buttons will then be available:
+
++ **Exit** - This exits out of the capture routine as per using the <Escape> key.
++ **Import Bank File** - This routine is used to import a bank statement file as described under `Control Accounts (GL)`_.
+
+    Once you have selected the file to import the system will automatically flag all transactions which already exist on your database.
+
+    If there are more than one transaction satisfying the comparison criteria these transactions will be displayed and you will have to select the transaction to be flagged. Should none of the transactions be the correct one, click the `Quit` button to skip allocating it.
+
+    While importing, if a duplicate record is detected, i.e. a possible duplication of the import file, a message will be displayed giving you the choice of importing it or not.
+
+    At the end of the import process a screen will be displayed showing all unallocated transactions. You must now capture these transactions as per the next option i.e. `Process Bank Data`.
+
++ **Process Bank Data** - This routine is to continue an import which was suspended for whatever reason. This is also the procedure for capturing unallocated transactions from the previous option i.e. `Import Bank File`. A screen showing all the unallocated transactions will display.
+
+  Select a transaction to process by clicking on it or moving the cursor to it and hitting the `Enter` key.  Continue from the `Details` field in the following section.
+
++ **Manual Entries** - Use this procedure to enter the bank statement manually. If there are unallocated records from a previous import then this will be highlighted and you will first have to allocated these using the `Process Bank Data` routine, before continuing.
+
+    + **T** - Enter the transaction type i.e. (P)ayment, (D)eposit or (J)ournal.
+    + **Ref-Num** - Enter the reference number. If the transaction already exists on your database it will be flagged as either paid or received i.e. will not appear on the bank reconciliation statement. If the transaction does not already exist you can capture it by entering the following fields:
+
+    + **Date** - Enter the transaction date.
+    + **Amount** - Enter the transaction amount.
+    + **Details** - The details for this transaction.
+
+    You will then be asked to confirm your entry and if you do so you will be able to allocate the transaction as in `Sales, Payments, Petty Cash, Purchases and Receipts (GL)`_ above.
+
+Reporting (GL)
+..............
+Batch Error Listing (GL)
+++++++++++++++++++++++++
+Use this routine to print any unbalanced batches.
+
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
+
+Transaction Audit Trail (GL)
+++++++++++++++++++++++++++++
+Use this routine to print lists of transactions either by financial period or date of capture.
+
++ **Period Type** - Financial or Capture.
++ **Starting Period** - The first financial period to include in the report.
++ **Ending Period** - The last financial period to include in the report.
++ **Starting Date** - The from date to include in the report.
++ **Ending Date** - The to date to include in the report.
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
++ **Totals Only** - Yes or No.
++ **Include Other Companies** - Whether or not to include other companies. If yes, you will be prompted at a later stage to select which other companies to include.
+
+Account Statements (GL)
++++++++++++++++++++++++
+Use this routine to produce statements for individual ledger accounts.
+
+* **Whole File** - `Yes` for all accounts, `Range` for a range of accounts or `Singles` to select individual accounts.
+* **From Account** - If range was selected enter the starting account number.
+* **To Account** - If range was selected enter the ending account number.
+* **Starting Period** - The starting financial period in the financial year.
+* **Ending Period** - The ending financial period in the financial year.
+* **Separate Pages** - Select whether or not to print each account on a new page.
+
+Trial Balance (GL)
+++++++++++++++++++
+Use this routine to produce a trial balance.
+
+* **Opening Balances Only** - Select whether or not to only print opening balances.
+* **Include Opening Balances** - Select whether or not to include opening balances.
+* **Starting Period** - The starting financial period in the financial year.
+* **Ending Period** - The ending financial period in the financial year.
+* **Ignore Zero Balances** - Select whether or not to ignore zero balances.
+
+Financial Statements (GL)
++++++++++++++++++++++++++
+Use this routine to produce financial statements using the information as set up with `Report Generator (GL)`_.
+
+* **Ending Period** - The last period, in the financial year, to take into account.
+* **Stream Number** - To print the reports as enumerated in a stream record as created using `Stream Records (GL)`_.
+* **Report Type** - Select the relevant report type.
+* **Consolidate Companies** - Select whether or not to print a consolidated report. This is only applicable in a multi company installation.
+* **Report Number** - The relevant report number as created using `Report Generator (GL)`_.
+* **General Report** - Select whether or not the report is a general report.
+* **Contents** - Select which values to use in the report.
+* **Detail Code** - If `Detail` was selected above, enter the detail code as created using `Detail Records (GL)`_.
+* **Ignore Zeros** - Select whether or not to ignore lines with zero balances.
+* **Print Options** - Select whether or not to include the selected options on the report heading.
+* **Account Numbers** - Select whether or not to include the account numbers in the report.
+
+Chart of Accounts (GL)
+++++++++++++++++++++++
+Use this routine to produce a chart of accounts.
+
+* **Sort Order** - Select the order by which the report must be sorted.
+
+Notes Listing (GL)
+++++++++++++++++++
+Use this routine to print any notes on the general ledger accounts.
+
++ **Action Flag** - Normal or Urgent.
++ **From Capture Date** - The starting creation date.
++ **To Capture Date** - The ending creation date.
++ **From Action Date** - The starting action date.
++ **To Action Date** - The ending action date.
+
+Bank Reconciliation (GL)
+++++++++++++++++++++++++
+Use this routine to produce a bank reconciliation statement.
+
+* **Bank Account** - The bank account number.
+* **Accounting Period** - The relevant period in the financial year.
+
+Imported Bank Statements (GL)
++++++++++++++++++++++++++++++
+Use this routine to produce a report of imported bank statements.
+
++ **Bank Account** - Bank account number.
++ **From Date** - The starting date.
++ **To Date** - The ending date.
++ **Unallocated Only** - Whether to only print entries which have not yet been allocated.
+
+Toolbox (GL)
+............
+Change Account Numbers (GL)
++++++++++++++++++++++++++++
+Use this routine to change account numbers within a company.
+
+* **Old Number** - The current account number to change.
+* **New Number** - The new account number. It must not already exist.
+
+Copy Masterfile Records (GL)
+++++++++++++++++++++++++++++
+Use this routine to copy accounts from another company.
+
+* **Copy From Company** - The company number from which to copy.
+* **Include ...** - Select what additional data is to be copied.
+
+Integrated Controls Report (GL)
++++++++++++++++++++++++++++++++
+Use this routine to produce a report showing the balance status of integrated systems and their respective control accounts.
+
+* **Cut Off Period** - The relevant period in the financial year.
+
+Intercompany Accounts Report (GL)
++++++++++++++++++++++++++++++++++
+Use this routine to produce a report showing the balance status of intercompany accounts in a multi company installation.
+
+Initialise Bank Reconciliation (GL)
++++++++++++++++++++++++++++++++++++
+Use this routine to initialise the bank reconciliation.
+
+* **Bank Account** - The bank account number.
+* **Last Period** - The last reconciled period.
+* **Clear History** - Select whether or not to mark all transactions up to the `Last Period` as being cleared through the bank.
+
+Now capture all the outstanding transactions as at the `Last Period`.
+
+* **T** - The transaction type.
+* **Ref-Num** - The transaction reference number.
+
+Interrogation (GL)
+..................
+This routine is for querying individual general ledger accounts.
+
+.. raw:: pdf
+
+    PageBreak
+
+Asset's Register
+~~~~~~~~~~~~~~~~
+File Maintenance (AR)
+.....................
+Control Record (AR)
++++++++++++++++++++
+Use this routine to create an asset's register control record.
+
++ **G/L Integration** - Yes to integrate else No.
++ **Receiver Dep** - Yes to have separate depreciation rates for the receiver.
+
+Depreciation Codes (AR)
++++++++++++++++++++++++
+Use this routine to create asset's register depreciation codes.
+
++  **Code** - Enter a code which can be up to 3 alphanumeric characters.
++  **Description** - Enter a description for the depreciation type.
++  **Type** - Select the type of depreciation, straight line or diminishing balance, for company and receiver, if applicable.
++  **Rates** - Enter the depreciation rates for company and receiver, if applicable, as follows:
+    + **Year 1** - The first year's rate
+    + **Years 2-7** - The following year's rates if applicable
+
+Group Records (AR)
+++++++++++++++++++
+Use this routine to create group records as follows:
+
++ **Asset Group** - Enter a code which can be up to 3 alphanumeric characters.
++ **Description** - Enter a description for the group.
++ **Depreciation Code** - Enter a depreciation code, as created in `Depreciation Codes (AR)`_ above, for the group.
++ If integrated with general ledger you must enter the following account numbers:
+
+    + **Asset Account** - This is the B/S Asset Account.
+    + **Accum Account** - This is the B/S Accumulated Depreciation Account.
+    + **Expense Account** - This is the P&L Depreciation Expense Account.
+
+Masterfile Records
+++++++++++++++++++
+Use this routine to edit an asset's description or depreciation code.
+
++ **Group** - Enter the asset group.
++ **Code** - Enter the asset code.
++ **Description** - Enter the asset description.
++ **Depreciation Code** - Enter the asset depreciation code.
+
+Data Capture
+............
+Opening Balances (AR)
++++++++++++++++++++++
+Use this routine to capture all existing assets.
+
++ **Take-on Date** - This would normally be the end of the previous financial period but must always be the last day of the month otherwise there will be problems when the next depreciation run is made.
++ You can now either import a csv or xls file, in the correct format, by clicking on the `Import File` button or capture the assets manually.
+
+    + **GRP** - Enter the asset group as created in `Group Records (AR)`_.
+    + **Cod-Num** - Enter the asset code or number which can be up to 7 alphanumeric characters.
+    + **Description** - Enter the description of the asset.
+    + **Dep** - Enter the depreciation code to be applied to this asset. It will default to the group depreciation code but can also be a different one.
+    + **Purch-Date** - Enter the original date of purchase of the asset.
+    + **Cost** - Enter the total cost of the asset including any improvements and write-offs.
+    + **Coy-Dep** - Enter the total company depreciation up to the take-on date,
+    + **Rec-Dep** - Enter the total receiver depreciation, if applicable, up to the take-on date.
+
+Payments, Receipts and Journal Entries
+++++++++++++++++++++++++++++++++++++++
+Use these routines to capture all asset movements as and when required. In addition, if integrated with the G/L, assets can also be captured while capturing Payments and Receipts by allocating to the asset account as entered in `Group Records (AR)`_.
+
+Depreciation
+++++++++++++
+Use this routine to raise depreciation, as and when required.
+
++ **Cut-off Period** - Enter the last month period to take into account. Once you have confirmed the cut-off period the system will automatically determine the last period for which depreciation has been raised and then raise depreciation for each following month up to the cut-off period.
+
+Reporting
+.........
+Groups Listing
+++++++++++++++
+Use this routine to produce a report of all asset groups.
+
+Batch Error Listing (AR)
+++++++++++++++++++++++++
+Use this routine to print any unbalanced batches.
+
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
+
+Transaction Audit Trail (AR)
+++++++++++++++++++++++++++++
+Use this routine to print lists of transactions either by financial period or date of capture.
+
++ **Starting Period** - The first financial period to include in the report.
++ **Ending Period** - The last financial period to include in the report.
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
++ **Totals Only** - Yes or No.
+
+Asset Statements
+++++++++++++++++
+Use this routine to produce asset statements.
+
++ **Start Period** - The starting period.
++ **End Period** - The ending period.
++ **Product Group** - The asset group or blank for all.
++ **Asset per Page** - Whether or not to start each asset on a new page.
+
+Asset Register
+++++++++++++++
+Use this routine to print an asset register.
+
++ **Cut-Off Period** - The last month period to take into account.
++ **Report Type** - If applicable select either Company or Receiver.
++ **Asset Group** - Select an asset group or leave blank for all groups.
++ **Ignore Zero Items** - Select Yes to ignore all items sold or written off.
+
+Notes Listing (AR)
+++++++++++++++++++
+Use this routine to print any notes on the asset records.
+
++ **Action Flag** - Normal or Urgent.
++ **From Capture Date** - The starting creation date.
++ **To Capture Date** - The ending creation date.
++ **From Action Date** - The starting action date.
++ **To Action Date** - The ending action date.
+
+Interrogation (AR)
+..................
+This routine is for querying individual assets.
+
+.. raw:: pdf
+
+    PageBreak
+
+Creditor's Ledger
+~~~~~~~~~~~~~~~~~
+File Maintenance (CR)
+.....................
+Control Record (CR)
++++++++++++++++++++
+Use this routine to create and amend the creditor's control record.
+
++ **G/L Integration** - Whether or not to integrate with the general ledger.
++ **G/L Input Method** - Whether allocations to general ledger accounts are entered inclusive or exclusive of V.A.T.
++ **Best Account Code** - The Standard Bank account code.
++ **Best Account Type** - The Standard Bank account type.
++ **Bank Account Code** - The Standard bank account code.
++ **Remittance Template** - The remittance advice template.
+
+Masterfile Records (CR)
++++++++++++++++++++++++
+Use this routine to create or amend creditor's ledger account records. You can import records by selecting the `Import` button in which case the file to be imported must be in `csv` or `xls` format and must contain all the fields as listed below. If the `Account Number` field is left blank an account number will be generated using the `Name` field.
+
++ **Acc-Num** - The account number.
++ **Name** - The account name.
++ **Address Line 1** - The first line of the postal address.
++ **Address Line 2** - The second line of the postal address.
++ **Address Line 3** - The second line of the postal address.
++ **Postal Code** - The postal code.
++ **Telephone Number** - The telephone number.
++ **Fax Number** - The facsimile number.
++ **Manager's Name** - The manager's name.
++ **Manager's Email** - The manager's email address.
++ **Account's Contact** - The account's contact name.
++ **Account's E-mail** - The account's contact email address.
++ **Order's Contact** - The order's contact name.
++ **Order's E-mail** - The order's contact email address.
++ **Date Account Opened** - The date the account was opened.
++ **V.A.T. Number** - The creditor's V.A.T. number.
++ **Terms Base** - The terms base, Monthly or Daily.
++ **Statement Day** - The day the creditor closes their month.
++ **Terms** - The number of days the creditor allows us.
++ **Credit Limit** - Our credit limit with the creditor.
++ **Trade Discount** - Out normal trade discount.
++ **Settlement Discount** - Out normal settlement discount.
++ **Payment Indicator** - Whether or not the creditors must be paid.
++ **Bank Name** - The creditor's bank.
++ **Bank Branch** - The creditor's bank branch code.
++ **Bank Account** - The creditor's bank account number.
++ **G/L Account Number** - The default general ledger account for purchases.
+
+Data Capture (CR)
+.................
+Purchases, Journals and Credit Notes (CR)
++++++++++++++++++++++++++++++++++++++++++
+These data capture routines are similar in operation and therefore I will handle them together.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screens and fields apply:
+
++ **Transaction**
+    + **Acc-Num** - The creditor's account number.
+    + **Reference** - The transaction reference number.
+    + **Date** - The date of the transaction.
+    + **Amount** - The total amount of the transaction.
+    + **Details** - The details of the transaction.
+    + You might now be required to age the transaction using `Ageing Transactions`_.
++ **Allocation** - This screen only applies if integrated with the G/L.
+    + **Coy** - The company number.
+    + **Acc-Num** - The G/L account number.
+    + **V** - The V.A.T. code.
+    + **Exc-Amount** - The exclusive amount of the allocation.
+    + **V.A.T.** - The V.A.T. amount of the allocation.
+    + **Details** - The details of the allocation.
+    + Continue allocating the transaction until fully allocated.
++ **Loans** - This screen only applies if Salaries and Wages are integrated with the G/L and the loans control account has been entered in the `Allocation` screen.
+    + **EmpNo** - The employees number.
+    + **Ln** - The loan number.
+    + **Amount** - The loan amount allocated to this employee.
+    + **Cde** - The new deduction record to be associated with this loan.
+    + **Intr-%** - The new interest rate to apply to this loan.
+    + **Ded-Amt** - The new total amount to be deducted from earnings to settle this loan.
+
+Receipts and Payments (CR)
+++++++++++++++++++++++++++
+These data capture routines are similar in operation and therefore I will handle them together.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screen and fields apply:
+
++ **Transaction**
+    + **Acc-Num** - The creditor's account number.
+    + **Reference** - The transaction reference number.
+    + **Date** - The date of the transaction.
+    + **Amount** - The total amount of the transaction.
+    + **Discount** - Any settlement discount.
+    + **Details** - The details of the transaction.
+    + You might now be required to age the transaction using `Ageing Transactions`_.
+
+Reporting (CR)
+..............
+Batch Error Listing (CR)
+++++++++++++++++++++++++
+Use this routine to print any unbalanced batches.
+
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
+
+Transaction Audit Trail (CR)
+++++++++++++++++++++++++++++
+Use this routine to print lists of transactions either by financial period or date of capture.
+
++ **Period Type** - Financial or Capture.
++ **Starting Period** - The first financial period to include in the report.
++ **Ending Period** - The last financial period to include in the report.
++ **Starting Date** - The from date to include in the report.
++ **Ending Date** - The to date to include in the report.
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
++ **Totals Only** - Yes or No.
+
+Due For Payment Listing (CR)
+++++++++++++++++++++++++++++
+Use this routine to produce a listing of creditor's due to be paid at a specific cut off date,
+
+Outstanding Transactions (CR)
++++++++++++++++++++++++++++++
+Use this routine to produce a report of outstanding transactions by creditor.
+
+Age Analysis (CR)
++++++++++++++++++
+Use this routine to produce a creditor's age analysis.
+
+Master Listing (CR)
++++++++++++++++++++
+Use this routine to produce a creditor's master listing.
+
+Reconciliation Statements (CR)
+++++++++++++++++++++++++++++++
+Use this routine to produce creditor's reconciliation statements. These statements are useful in reconciling with creditor's statements.
+
+Remittance Advices (CR)
++++++++++++++++++++++++
+Use this routine to produce creditor's remittance advices.
+
++ **Template Name** - The name of the template to use.
++ **Whole File** - Select the accounts to print.
++ **From Account** - If Range was selected enter the starting account code.
++ **To   Account** - If Range was selected enter the ending account code.
++ **Sort Order** - Select the sorting order.
++ **Terms Base** - Select either monthly or daily terms base.
++ **Exceptions** - Select Yes to enter exceptions i.e. add, edit or exclude various transactions.
++ **Due Date** - The due date to be used for the cut-off.
++ **Payment Date** - The date the payment is to be made.
+
+In the case of Exceptions:
+
++ **Account Number** - The relevant creditor's account number.
++ **TT** - The transaction type.
++ **Reference** - The transaction's reference number.
++ **P** - Y to pay the transaction else N.
++ **Pay-Date** - The date the transaction becomes payable.
++ **Pay-Amount** - The amount to be paid.
+
+Name and Address Labels (CR)
+++++++++++++++++++++++++++++
+Use this routine to produce creditor's name and address labels.
+
+Notes Listing (CR)
+++++++++++++++++++
+Use this routine to print any notes on the creditor's ledger accounts.
+
++ **Action Flag** - Normal or Urgent.
++ **From Capture Date** - The starting creation date.
++ **To Capture Date** - The ending creation date.
++ **From Action Date** - The starting action date.
++ **To Action Date** - The ending action date.
+
+Purchase History (CR)
++++++++++++++++++++++
+Use this routine to produce a purchase history report by creditor.
+
+Toolbox (CR)
+............
+Change Account Numbers (CR)
++++++++++++++++++++++++++++
+Use this routine to change account numbers.
+
+Transaction Reallocations (CR)
+++++++++++++++++++++++++++++++
+Use this routine to reallocate and age transactions.
+
+Interrogation (CR)
+..................
+This routine is for querying individual creditor's ledger accounts.
+
+.. raw:: pdf
+
+    PageBreak
+
+Debtor's Ledger
+~~~~~~~~~~~~~~~
+File Maintenance (DR)
+.....................
+Control Record (DR)
++++++++++++++++++++
+Use this routine to create and amend the debtor's control record.
+
+Chain Stores (DR)
++++++++++++++++++
+Use this routine to create, amend or delete chain store records.
+
+Business Activities (DR)
+++++++++++++++++++++++++
+Use this routine to create, amend or delete business activity records.
+
+Business Types (DR)
++++++++++++++++++++
+Use this routine to create, amend or delete business type records.
+
+Areas (DR)
+++++++++++
+Use this routine to create, amend or delete area records.
+
+Salesmen (DR)
++++++++++++++
+Use this routine to create, amend or delete salesman's records.
+
+Delivery Addresses (DR)
++++++++++++++++++++++++
+Use this routine to create, amend or delete delivery address records.
+
+Messages (DR)
++++++++++++++
+Use this routine to create, amend or delete message records. These records are used by `Statements (DR)`_ or `Sales Document`_.
+
+Masterfile Records (DR)
++++++++++++++++++++++++
+Use this routine to create or amend debtor's ledger account records. You can import records by selecting the `Import` button in which case the file to be imported must be in `csv` or `xls` format and must contain all the fields as listed below. If the `Account Number` field is left blank an account number will be generated using the `Name` field.
+
++ **Chn-Num** - The chain store number.
++ **Acc-Num** - The account number.
++ **Name** - The account name.
++ **Address Line 1** - The first line of the postal address.
++ **Address Line 2** - The second line of the postal address.
++ **Address Line 3** - The second line of the postal address.
++ **Postal Code** - The postal code.
++ **Telephone Number** - The telephone number.
++ **Fax Number** - The facsimile number.
++ **Manager** - The manager's name.
++ **Manager Email** - The manager's email address.
++ **Accounts** - The account's contact name.
++ **Accounts E-mail** - The account's contact email address.
++ **Sales Contact** - The buyer's contact name.
++ **Sales E-mail** - The buyer's contact email address.
++ **Date Opened** - The date the account was opened.
++ **Date Registered** - The date the account was registered.
++ **V.A.T. Number** - The creditor's V.A.T. number.
++ **Delivery Code** - The delivery address code.
++ **Area** - The area code.
++ **Business Activity** - The business activity code.
++ **Business Type** - The business type code.
++ **Price Level** - The price level for this account.
++ **Discount Percentage** - The sale's discount enjoyed by this account.
++ **Interest Percentage** - The interest charged on overdue balances.
++ **Referral Terms** - The maximum terms, in days, before referral.
++ **Rejected Terms** - The maximum terms, in days, before rejection.
++ **Credit Limit** - The credit limit.
++ **Stop Indicator** - A flag to stop all access to this account.
++ **Invoice Message** - The code of the message to print on invoices.
++ **Statement Message** - The code of the message to print on statements.
++ **Credit Rating** - The accounts rating (N/G/F/B).
+
+Recurring Charges Records (DR)
+++++++++++++++++++++++++++++++
+Use this routine to create recurring charges records. These are charges which occur periodically e.g. rent, levies etc.
+
++ **Header**
+    + **Number** - A sequential number of the charge record.
+    + **Description** - The description of the charge.
+    + **Frequency** - How often the charge is to be raised.
+    + **Day of the Month** - When the charge must be raised.
+    + **Charge Account** - The G/L account to be credited if integrated.
+    + **VAT Code** - The V.A.T. code.
++ **Body**
+    + **Seq** - A sequential number of the entry.
+    + **Chn** - The debtor's chain store code, if applicable.
+    + **Acc-Num** - The debtor's account number.
+    + **Charge Details** - A further description of the charge for the debtor.
+    + **Excl-Value** - The exclusive value of the charge for the debtor.
+    + **Start** - The starting period of the charge for the debtor.
+    + **End** - The ending period of the charge for the debtor.
+    + Continue entering until all applicable charges have been entered.
+
+Data Capture (DR)
+.................
+Sales, Journals and Credit Notes (CR)
++++++++++++++++++++++++++++++++++++++
+These data capture routines are similar in operation and therefore I will handle them together.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screens and fields apply:
+
++ **Transaction**
+    + **Chn** - The debtor's chain store code, if applicable.
+    + **Acc-Num** - The debtor's account number.
+    + **Reference** - The transaction reference number.
+    + **Date** - The date of the transaction.
+    + **Amount** - The total amount of the transaction.
+    + **Details** - The details of the transaction.
+    + You might now be required to age the transaction using `Ageing Transactions`_.
+
++ **Allocation** - This screen only applies if integrated with the G/L.
+    + **Coy** - The company number.
+    + **Acc-Num** - The G/L account number.
+    + **V** - The V.A.T. code.
+    + **Exc-Amount** - The exclusive amount of the allocation.
+    + **V.A.T.** - The V.A.T. amount of the allocation.
+    + **Details** - The details of the allocation.
+    + Continue allocating the transaction until fully allocated.
+
+Receipts (DR)
++++++++++++++
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screens and fields apply:
+
++ **Deposit**
+    + **Reference** - The deposit reference number.
+    + **Date** - The date of the deposit.
+    + **Amount** - The total amount of the deposit.
+    + **Details** - The details of the deposit.
++ **Allocation**
+    + **Coy** - The company number.
+    + **Chn** - The debtor's chain store code, if applicable.
+    + **Acc-Num** - The debtor's account number.
+    + **Receipt** - The amount for this debtor.
+    + **Discount** - Any discount allowed.
+    + You might now be required to age the transaction using `Ageing Transactions`_.
+    + Continue allocating the deposit until fully allocated.
+
+Payments (DR)
++++++++++++++
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screen and fields apply:
+
++ **Transaction**
+    + **Chn** - The debtor's chain store code, if applicable.
+    + **Acc-Num** - The debtor's account number.
+    + **Reference** - The transaction reference number.
+    + **Date** - The date of the transaction.
+    + **Amount** - The total amount of the transaction.
+    + **Discount** - Any settlement discount.
+    + **Details** - The details of the transaction.
+    + You might now be required to age the transaction using `Ageing Transactions`_.
+
+Recurring Charges (DR)
+++++++++++++++++++++++
+Use this routine to raise recurring charges as created using `Recurring Charges Records (DR)`_.
+
+As with most data capture routines you will first have to enter the `Batch Details`_ after which the following screen and fields apply:
+
++ **Frequency** - The frequency of the charges to be raised.
++ **All Charges** - Whether or not all charges for the selected frequency must be raised.
++ **2nd Reference** - A second reference number for the charges.
+
+If you selected `No` to `All Charges` a list of available charges will be displayed and you will able to mark the ones to raise.
+
+Reporting (DR)
+..............
+Chain Stores Listing (DR)
++++++++++++++++++++++++++
+Use this routine to produce a listing of chain stores.
+
+Areas Listing (DR)
+++++++++++++++++++
+Use this routine to produce a listing of areas.
+
+Salesmen Listing (DR)
++++++++++++++++++++++
+Use this routine to produce a listing of salesmen.
+
+Delivery Address Listing (DR)
++++++++++++++++++++++++++++++
+Use this routine to produce a listing of delivery addresses.
+
+Messages Listing (DR)
++++++++++++++++++++++
+Use this routine to produce a listing of invoice and statement messages.
+
+Batch Error Listing (DR)
+++++++++++++++++++++++++
+Use this routine to print any unbalanced batches.
+
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
+
+Transaction Audit Trail (DR)
+++++++++++++++++++++++++++++
+Use this routine to print lists of transactions either by financial period or date of capture.
+
++ **Period Type** - Financial or Capture.
++ **Starting Period** - The first financial period to include in the report.
++ **Ending Period** - The last financial period to include in the report.
++ **Starting Date** - The from date to include in the report.
++ **Ending Date** - The to date to include in the report.
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
++ **Totals Only** - Yes or No.
+
+Due for Payment Listing (DR)
+++++++++++++++++++++++++++++
+Use this routine to produce a listing of debtor's due to pay at a specific cut off date,
+
+Outstanding Transactions (DR)
++++++++++++++++++++++++++++++
+Use this routine to produce a report of outstanding transactions by debtor.
+
+Age Analysis (DR)
++++++++++++++++++
+Use this routine to produce a debtor's age analysis.
+
+Master Listing (DR)
++++++++++++++++++++
+Use this routine to produce a debtor's master listing.
+
+Statements (DR)
++++++++++++++++
+Use this routine to produce debtor's statements.
+
+Name and Address Labels (DR)
+++++++++++++++++++++++++++++
+Use this routine to produce debtor's name and address labels.
+
+Notes Listing (DR)
+++++++++++++++++++
+Use this routine to print any notes on the debtor's ledger accounts.
+
++ **Action Flag** - Normal or Urgent.
++ **From Capture Date** - The starting creation date.
++ **To Capture Date** - The ending creation date.
++ **From Action Date** - The starting action date.
++ **To Action Date** - The ending action date.
+
+Sales History (DR)
+++++++++++++++++++
+Use this routine to produce a sales history report by debtor.
+
+Toolbox (DR)
+............
+Change Account Numbers (DR)
++++++++++++++++++++++++++++
+Use this routine to change account numbers.
+
+Transaction Reallocations (DR)
+++++++++++++++++++++++++++++++
+Use this routine to reallocate and age transactions.
+
+Interrogation (DR)
+..................
+This routine is for querying individual debtor's accounts.
+
+.. raw:: pdf
+
+    PageBreak
+
+Rental's Ledger (Standard)
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+File Maintenance (RT)
+.....................
+Control Record (RT)
++++++++++++++++++++
+This routine is used to create or amend a member's ledger control record.
+
++ **G/L Integration** - Whether or not to integrate with the general ledger.
++ **Last Month End** - The date of the last month end.
++ **Statement Template** - The template to use for statements.
+
+Premises Records (RT)
++++++++++++++++++++++
+This routine is used to create or amend premises records.
+
++ **Premises Code** - A 7 character alphanumeric code.
++ **Description** - The description of the premises.
++ **Address Line 1-3** - The address of the premises.
++ **Postal Code** - The postal code.
++ **Rental Account** - If integrated with the general ledger this would be the control account.
++ **Income Account** - If integrated with the general ledger this would be the account to be credited with rentals raised.
+
+Masterfile Records (RT)
++++++++++++++++++++++++
+This routine is used to create or amend tenants records.
+
++ **Premises Code** - The premises code being rented.
++ **Account Code** - A 7 character alphanumeric code for the tenant.
++ **Tenant Name** - The name of the tenant.
++ **Address Line 1-3** - The postal address of the tenant.
++ **Postal Code** - The postal code.
++ **Telephone Number** - The tenant's telephone number.
++ **E-Mail Number** - The tenant's email address.
++ **VAT Indicator** - The V.A.T. code.
++ **VAT Number** - The tenant's V.A.T. number, if applicable.
++ **Payment Frequency** - The frequency of rental payments.
++ **Start Date** - The starting date of the lease.
++ **Number of Periods** - The number of payment periods to run.
++ **Rental Amount** - The period rental amount, V.A.T. exclusive.
++ **Status** - The status of the lease.
+
+Data Capture (RT)
+.................
+Receipts
+++++++++
+This routine is used to capture receipts.
+
+Payments
+++++++++
+This routine is used to capture payments.
+
+Reporting (RT)
+..............
+Batch Error Listing (RT)
+++++++++++++++++++++++++
+This routine is used to produce a batch error listing.
+
+Transaction Audit Trail (RT)
+++++++++++++++++++++++++++++
+This routine is used to produce a transaction audit trail.
+
+Master Listing (RT)
++++++++++++++++++++
+This routine is used to produce a master listing.
+
+Statements (RT)
++++++++++++++++
+This routine is used to produce statements.
+
+Notes Listing (RT)
+++++++++++++++++++
+This routine is used to produce a tenant's note listing.
+
+Toolbox (RT)
+............
+Change Account Numbers
+++++++++++++++++++++++
+This routine is used to change account numbers.
+
+Interrogation (RT)
+..................
+This routine is used to interrogate records.
+
+Month End Routine (RT)
+......................
+This routine is used to close off a month and raise rentals for the following month.
+
+.. raw:: pdf
+
+    PageBreak
+
+Sales Invoicing
+~~~~~~~~~~~~~~~
+File Maintenance (SI)
+.....................
+Control Record (SI)
++++++++++++++++++++
+Use this routine to create or amend the sales invoicing control record.
+
++ **Address** - Which address to put on the sales documents.
++ **Delivery Notes** - Whether to print delivery notes.
++ **Print Values** - Whether to include values on delivery notes.
+
+Reporting (SI)
+..............
+Sales By Product (SI)
++++++++++++++++++++++
+Use this routine to produce a sales by product report.
+
+Period Sales By Product (SI)
+++++++++++++++++++++++++++++
+Use this routine to sales by product by period report.
+
+Product Sales History (SI)
+++++++++++++++++++++++++++
+Use this routine to produce a product sales history report.
+
+Sales By Customer By Product (SI)
++++++++++++++++++++++++++++++++++
+Use this routine to produce a product sales by customer report.
+
+Sales By Salesman (SI)
+++++++++++++++++++++++
+Use this routine to produce a product sales by salesman report.
+
+Salesman's Sales History (SI)
++++++++++++++++++++++++++++++
+Use this routine to produce a salesman's sales history report.
+
+Data Capture (SI)
+.................
+Use this routine to produce sales documents.
+
+Date and Printer Selection
+++++++++++++++++++++++++++
+
++ **Document Date** - This is the actual date of the invoices.
++ **Delivery Notes** - Whether or not to print delivery notes.
++ **Print Choice** - Select whether to print, view or simply store the invoices without printing.
++ **Printer Name** - If printing was selected, this is the printer to use.
++ **E-Mail** - Whether to email the invoices. This will be dependent on a valid email address on the debtor's record as well as a valid `SMTP Server` in the `System Record Maintenance`_.
+
+Sales Document
+++++++++++++++
+
++ **Type** - The document type.
++ **Mode** - The mode of payment. Cash invoices will automatically be debited to a debtor's account `CASHSLS`.
++ **Acc-Num** - The account code for account mode.
++ **Rep** - The salesman's code.
++ **Level** - The price level for this customer. It will default to whatever is on the debtor's masterfile.
++ **Grp** - The product group.
++ **Product-Code** - The product code.
++ **Description** - The product description and or details.
++ **L** - The location from which this item is being sold from.
++ **Quantity** - The quantity being sold.
++ **V** - The value added tax code.
++ **Price** - The inclusive or exclusive selling price depending on the method.
++ **Dis-%** - The trade discount percentage.
++ **Value** - The value of the sale. This is a display field only.
++ **Available Buttons**
+    + **Cancel** - This button is for cancelling the current invoice.
+    + **DelAdd** - This button is for entering a delivery address.
+    + **Ribbon** - This button is for entering the ribbon line.
+    + **Messag** - This button is for including an invoice message.
+    + **Edit** - This button is for editing document lines.
+    + **Reprint** - This button is for reprinting documents.
+    + **DrsMaint** - This button is for creating new debtor's accounts.
+    + **DrsQuery** - This button is for interrogating a debtor.
+    + **StrMaint** - This button is for creating new store's accounts.
+    + **StrQuery** - This button is for interrogating a stores item.
+    + **Exit** - To exit the sales routine.
+    + **Accept** - This button is to accept and complete the document.
+
+.. raw:: pdf
+
+    PageBreak
+
+Store's Ledger
+~~~~~~~~~~~~~~
+File Maintenance (ST)
+.....................
+Control Record (ST)
++++++++++++++++++++
+Use this routine to create and amend the store's control record.
+
+Units of Issue (ST)
++++++++++++++++++++
+Use this routine to create, amend and delete units of issue records.
+
+Product Groups (ST)
++++++++++++++++++++
+Use this routine to create, amend and delete product group records.
+
+Locations (ST)
+++++++++++++++
+Use this routine to create, amend and delete location records.
+
+Masterfile Records (ST)
++++++++++++++++++++++++
+Use this routine to create, amend and delete store's ledger records.
+
+Selling Prices (ST)
++++++++++++++++++++
+Use this routine to create and amend product selling prices.
+
+Data Capture (ST)
+.................
+Purchase Orders - Place (ST)
+++++++++++++++++++++++++++++
+Use this routine to place purchase orders against suppliers.
+
+Purchase Orders - Receive (ST)
+++++++++++++++++++++++++++++++
+Use this routine to receive purchase orders from suppliers.
+
+Goods Received Notes (ST)
++++++++++++++++++++++++++
+Use this routine to receive goods into stock without purchase orders.
+
+Issues to General Ledger (ST)
++++++++++++++++++++++++++++++
+Use this routine to issue stock directly to general ledger accounts.
+
+Location Transfers (ST)
++++++++++++++++++++++++
+Use this routine to transfer stock from one location to another.
+
+Stock Take (ST)
+...............
+Stock Take Report (ST)
+++++++++++++++++++++++
+Use this routine to produce a stock take report. This report is used to facilitate counting physical stock.
+
+Stock Take Returns (ST)
++++++++++++++++++++++++
+Use this routine to enter physical stock count quantities.
+
+Stock Take Variance Report (ST)
++++++++++++++++++++++++++++++++
+Use this routine to produce a report of variances between the stock in the ledger as opposed to the stock counted.
+
+Stock Take Merge (ST)
++++++++++++++++++++++
+Use this routine to create adjustments to the stock records to bring them in line with the actual stock counted.
+
+Reporting (ST)
+..............
+Units Of Issue Listing (ST)
++++++++++++++++++++++++++++
+Use this routine to produce a list of all units of issue.
+
+Product Groups Listing (ST)
++++++++++++++++++++++++++++
+Use this routine to produce a list of all product groups.
+
+Locations Listing (ST)
+++++++++++++++++++++++
+Use this routine to produce a list of all locations.
+
+Batch Error Listing (ST)
+++++++++++++++++++++++++
+Use this routine to print any unbalanced batches.
+
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
+
+Transaction Audit Trail (ST)
+++++++++++++++++++++++++++++
+Use this routine to print lists of transactions either by financial period or date of capture.
+
++ **Period Type** - Financial or Capture.
++ **Starting Period** - The first financial period to include in the report.
++ **Ending Period** - The last financial period to include in the report.
++ **Starting Date** - The from date to include in the report.
++ **Ending Date** - The to date to include in the report.
++ **Type** - The transaction type or 0 for all.
++ **Batch-Number** - The batch number or blank for all.
++ **Totals Only** - Yes or No.
+
+Selling And Cost Price Listing (ST)
++++++++++++++++++++++++++++++++++++
+Use this routine to produce a list of selected products' cost and selling prices.
+
+Master Code List (ST)
++++++++++++++++++++++
+Use this routine to to produce a master list of products.
+
+Stock Movements (ST)
+++++++++++++++++++++
+Use this routine to produce a report of selected products' movements.
+
+Purchase Orders (ST)
+++++++++++++++++++++
+Use this routine to produce a report of purchase orders.
+
+Stock On Hand (ST)
+++++++++++++++++++
+Use this routine to produce a stock on hand report.
+
+Stock Accounts (ST)
++++++++++++++++++++
+Use this routine to produce product statements showing opening balances and movements.
+
+Notes Listing (ST)
+++++++++++++++++++
+Use this routine to print any notes on the store's ledger accounts.
+
++ **Action Flag** - Normal or Urgent.
++ **From Capture Date** - The starting creation date.
++ **To Capture Date** - The ending creation date.
++ **From Action Date** - The starting action date.
++ **To Action Date** - The ending action date.
+
+Price Tags (ST)
++++++++++++++++
+Use this routine to produce price tags for products.
+
++ **Reporting Date** - The report date.
++ **Location** - The location code if applicable.
++ **Product Group** - The product group or blank for all.
++ **Product Code** - The product code or blank for all.
++ **Item Types** - Either Normal, Recipe or All.
++ **Value Indicator** - Either Yes, No or All.
++ **Include Out of Stock** - Whether to include items with zero balances.
++ **Cost Price Code** - The code to use for cost prices e.g. ABCDEFGHIJ representing 0123456789.
++ **Avery A4 Code** - The code of the Avery label to use.
++ **First Label Row** - The first available blank label row.
++ **First Label Column** - The first available blank label column.
+
+Toolbox (ST)
+............
+Change Product Codes (ST)
++++++++++++++++++++++++++
+Use this routine to change product codes.
+
+Revalue Stock Records (ST)
+++++++++++++++++++++++++++
+Use this routine to revalue stock records by average or last cost. It also provides for the zeroing of items with negative balances.
+
+Interrogation (ST)
+..................
+This routine is for querying individual Store's Ledger Accounts.
+
+.. raw:: pdf
+
+    PageBreak
+
+Utilities
+~~~~~~~~~
+Bulk Mail Utility
+.................
+Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Control Record` using `System Record Maintenance`_.
+
++ **Delivery Type** - The available delivery types will depend on what is entered in the `System Control Record` and can be either E-Mail, SMS or both.
++ **List to Use** - The available lists will depend on the systems being used and can contain Bookings, Bowls, Creditors, Debtors, Members and Directory (Telephone). In addition to the lists, CSV or XLS files can also be used, as long as they contain a name and an email address and or a cell number. Please note that Creditors and Debtors do not have SMS capabilities.
+    + **Bookings** - This list accesses the tartan booking's contacts.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Bowls** - This list accesses the tartan bowl's tabs.
+        + **Category** - Allow selection by category.
+        + **Gender** - Allow selection by gender.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Creditors** - This list accesses the tartan creditor's masterfile.
+        + **Email To** - Select the recipient.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Debtors** - This list accesses the tartan debtor's masterfile.
+        + **Email To** - Select the recipient.
+        + **Activity** - Allow selection by business activity.
+        + **Type** - Allow selection by business type.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Members** - This list accesses the tartan member's masterfile.
+        + **Category** - Allow selection by membership category.
+        + **Gender** - Allow selection by gender.
+        + **Personalise** - Allow penalisation of the recipient.
+        + **Name Detail** - Select whether to use the names or initials.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Directory** - This list accesses the tartan telephone directory.
+        + **Group Selection** - Allow selection by group.
+        + **Include Contacts** - Include the recipient's contacts.
+        + **Individuals** - Allow selection of individual recipients.
+    + **CSV and XLS File** - This is a csv or xls file containing a name, email address and/or a mobile number.
+        + **File Name** - The full path of the file to use.
+        + **Ignore Invalid Lines** - Select whether to ignore invalid lines.
+        + **Mobile/Email Column** - Enter the column of the mobile number or email address.
+        + **Personalise** - Allow penalisation of the recipient.
+        + **Title** - Select whether or not to use titles.
+        + **Title Column** - Enter the column of the title.
+        + **Surname Column** - Enter the column of the surname.
+        + **Names Column** - Enter the column of the names.
+        + **Name Detail** - Select whether to use the names or initials.
++ **Skip Delivery Errors** - Select whether or not to skip invalid email addresses.
++ **Subject** - The subject of the email.
++ **In-line Attachment** - Any in-line image to be included in the email.
++ **Separate Attachment** - Any attachment to be attached to the email.
++ **Message** - Any text message. In order to get the recipients name in the message use one of the following methods:
+    + **{{name}}** - Use this method if the recipient has separate surname and names fields.
+    + **{{surname}}** - Use this method if the recipient has a single name field where the surname and names are comma separated e.g. Malherbe, Paul.
+
+.. raw:: pdf
+
+    PageBreak
+
+Report Generator
+................
+Use this routine to generate ad hoc SQL reports. It is not necessary to know the SQL language but it is beneficial.
+
++ **Name** - A name for the report.
++ **Description** - A description of the report.
++ **Heading-1** - The first heading of the report.
++ **Heading-2** - A second heading, if applicable.
+
++ The following screens are now available:
+
++ **Tables** - These are the tables to be used to generate the report. At least one table must be selected.
+    + **Table Sequence** - A sequential number of the line to enter or edit.
+        + **Tables** - The table name. F1 will give a list of available tables.
++ **Joins** - These are further tables to be joined to the ones selected in `Tables`.
+    + **T** - The type of join. F1 gives a list of available types.
+    + **Tables** - The table which must be joined.
+    + **Join Columns** - The columns to be used for the join.
++ **Columns** - These are the table columns to show in the report. If no columns are selected, all columns will be used.
+    + **Column Sequence** - A sequential number of the line to enter or edit.
+        + **T** - The type of column.
+            + **C** - An actual column in the table.
+                + **Label** - The column name. You will be shown a list of columns to select from.
+            + **E** - An expression e.g. Sum, Avg, Count etc.
+                + **Label** - You will have to type a name for the expression. You will then be offered a selection of expression types and depending on your choice a further selection of options.
+                + **Expression** - The generated expression will now be displayed and you can either accept or edit it.
+        + **Heading** - The column heading.
+        + **TP** - The type of column. F1 will show all available types.
+        + **Size** - The width of the column in characters.
+        + **G** - Whether or not to group the report on this column.
+        + **S** - Whether or not to print sub totals for this column.
+        + **Narration** - If sub totals was selected, enter the narration of the sub total.
+        + **P** - If sub totals was selected, select whether or not to start a new page after each sub total.
+        + **G** - If the column type is numeric, select whether or not to print a grand total for the column.
+        + **D** - Whether or not to actually display the column in the report or simply to use it for totals etc.
++ **Variables**
++ **Exceptions**
++ **Order**
+
+.. raw:: pdf
+
+    PageBreak
+
+Template Manager
+................
+Use this routine to create, edit or delete templates.
+
++ **Name** - The name of the template.
++ **Title** - The title of the template.
++ **TT** - The template type as follows:
+    + **I** - Sales Document
+    + **O** - Purchase Order
+    + **P** - Payslip
+    + **R** - Remittance Advice
+    + **S** - Statement
++ **Sys** - The relevant system code relating to the type.
++ **ST** - This only applies to statements and is the type of statement as follows:
+    + **N** - Normal
+    + **O** - Other
++ **Size** - The page size i.e. A4, A5 or A6
++ **Orient** - The page orientation i.e. Portrait or Landscape.
++ **Sequence**
+    + **Line Number** - The line number to edit or 0 for the next available number.
+    + **Line Type** - The line type as follows:
+        + **C Merge Code** - Use this code for lines that will be populated with data.
+        + **I Image** - Use this code to display an image.
+        + **L Line** - Use this code to draw a line.
+        + **R Rectangle** - Use this code to draw a rectangle.
+        + **T Text** - Use this code to print some fixed text.
+    + **Placement** - Where to place this line.
++ **Rectangle**
+    + **X1 Co-Ordinate** - The left hand position of the rectangle in mm.
+    + **X2 Co-Ordinate** - The right hand position of the rectangle in mm.
+    + **Y1 Co-Ordinate** - The top position of the rectangle in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the rectangle in mm.
+    + **Line Thickness** - The thickness of the line.
++ **Image**
+    + **X1 Co-Ordinate** - The left hand position of the image in mm.
+    + **X2 Co-Ordinate** - The right hand position of the image in mm.
+    + **Y1 Co-Ordinate** - The top position of the image in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the image in mm.
+    + **File name** - The full path of the file name of the image.
+    + **Merge Code** - The merge code containing the path to the image e.g. ctlmst ctm_logo.
++ **Line**
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The line colour.
+    + **Bold** - Whether to display the line in bold format.
+    + **X1 Co-Ordinate** - The left hand position of the line in mm.
+    + **Chrs** - The number of characters the line should extend.
+    + **X2** - The right hand position of the line in mm.
+    + **Y1 Co-Ordinate** - The top position of the line in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the line in mm.
+    + **Line Thickness** - The thickness of the line.
++ **Text**
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the text in bold format.
+    + **Italic** - Whether to display the text in italic format.
+    + **Underline** - Whether to underline the text.
+    + **Alignment** - How to align the text.
+    + **Border** - Whether to draw borders around the text, TLRB.
+    + **Fill Background** - Whether to fill the background of the text.
+    + **X1 Co-Ordinate** - The left hand position of the text in mm.
+    + **Chrs** - The number of characters the text should extend.
+    + **X2** - The right hand position of the text in mm.
+    + **Y1 Co-Ordinate** - The top position of the text in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the text in mm.
+    + **Text Detail** - The text.
++ **Code**
+    + **Text Type** - The text type. Heading, Label of a Column or No text.
+    + **Text Detail** - The text.
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the text in bold format.
+    + **Italic** - Whether to display the text in italic format.
+    + **Underline** - Whether to underline the text.
+    + **Alignment** - How to align the text.
+    + **Border** - Whether to draw borders around the text, TLRB.
+    + **Fill Background** - Whether to fill the background of the text.
+    + **X1 Co-Ordinate** - The left hand position of the text in mm.
+    + **Chrs** - The number of characters the text should extend.
+    + **X2** - The right hand position of the text in mm.
+    + **Y1 Co-Ordinate** - The top position of the text in mm.
+    + **Y2** - The bottom position of the text in mm.
+    + **Merge Code** - The code to use to import data.
+    + **Font Name** - The name of the font to use for the imported data.
+    + **Size** - The font size to use for the imported data.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the imported data in bold format.
+    + **Italic** - Whether to display the imported data in italic format.
+    + **Underline** - Whether to underline the imported data.
+    + **Alignment** - How to align the imported data.
+    + **Border** - Whether to draw borders around the imported data, TLRB.
+    + **Fill Background** - Whether to fill the background of the imported data.
+    + **X1 Co-Ordinate** - The left hand position of the imported data in mm.
+    + **Chrs** - The number of characters the imported data should extend.
+    + **X2** - The right hand position of the imported data in mm.
+    + **Y1 Co-Ordinate** - The top position of the imported data in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the imported data in mm.
+    + **Number of Lines** - The number of lines the imported data can contain e.g. a name and address could be 5 lines.
+    + **Repeats** - The number of time to repeat the imported data e.g. the number of lines in the body of a statement could be 30.
+
+.. raw:: pdf
+
+    PageBreak
+
+Telephone Directory
+...................
+Use this routine to manage a telephone directory.
+
+All the fields are self explanatory with the exception of the following:
+
++ **Contact Group** - This is a 3 letter group code. If the code does not exist you will have to also enter the group description. This code is used in the bulk mailing module.
+
++ **Buttons**
+    + **Back** - Select this button to display the previous directory entry.
+    + **Forward** - Select this button to display the next directory entry.
+    + **Import** - Select this button to import all contacts from other sources e.g. Creditors, Debtors, Members, Bookings etc.
+    + **Notes** - Select this button to maintain notes relating to this entry.
+    + **Print** - Select this button to print all entries or the current entry.
+    + **Apply** - Select this button to apply current addition or change.
+    + **Contacts** - Select this button to maintain contacts of the current entry.
+    + **Cancel** - Select this button to cancel any current additions or changes.
+    + **Quit** - Select this button to quit the application.
+
+.. raw:: pdf
+
+    PageBreak
+
+Help
+~~~~
+About Tartan
+............
+This routine will display the copyright details, version and contact information for Tartan Systems.
+
++ **Licence** - The Tartan licence details.
++ **Changes** - The Tartan changes since version 4 to date.
+
+Reference Manual
+................
+This routine will display this manual, if available, or the on-line one using your default browser.
+
+Quick Start Manual
+..................
+This routine will display the quick start manual, if available, or the on-line one using your default browser.

=== modified file 'doc/Tartan.rst'
--- doc/Tartan.rst	2015-03-09 16:02:16 +0000
+++ doc/Tartan.rst	2015-03-21 07:25:59 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.0.8
+:Version:   5.0.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -487,8 +487,8 @@
 
 Once all accounts have been created, you should print a list of them by selecting `Chart of Accounts (GL)`_ from the reporting menu, and check that all accounts have been created correctly.
 
-Control Accounts
-++++++++++++++++
+Control Accounts (GL)
++++++++++++++++++++++
 This routine is used to create control accounts for the company. Control accounts are accounts that the system needs to know about in order to create double sided entries. You must create at least one bank as well as the retained income control records but preferably most of the others as well.
 
 If you elected to **automatically populate** while creating masterfile records this would already have been done for you.
@@ -499,16 +499,16 @@
 + **Import Format** - If you are going to import bank statements you must select the format you will be downloading or else `None` for no imports. The preferred format for internet banking is the OFX, or Open Financial eXchange, format.
 + **Date Format** - If you entered an import format, select the applicable date format. The date format for OFX is CCYYMMDD.
 
-Inter Company Records
-+++++++++++++++++++++
+Inter Company Records (GL)
+++++++++++++++++++++++++++
 This routine only applies to systems which have multiple companies. This allows one to capture transactions in one company directly into another company's accounts e.g. capture a payment made by company one for a telephone account for company two. For the purposes of simplicity lets assume that we are presently in company 1's ledger and want to integrate company 2.
 
 + **Coy-Num** - The other company's number i.e. 2
 + **Acc-Num-1** - Company 2's inter company loan account number in company 1.
 + **Acc-Num-2** - Company 1's inter company loan account number in company 2.
 
-Standard Journals
-+++++++++++++++++
+Standard Journals (GL)
+++++++++++++++++++++++
 Use this routine to create, amend and delete standard journals.
 
 The following fields need more explanation:
@@ -688,8 +688,8 @@
 + **Printer Name** - The printer name to print on or None.
 + **E-Mail Address** - An email address to send the report to or leave blank.
 
-Bank Import Control
-+++++++++++++++++++
+Bank Import Control (GL)
+++++++++++++++++++++++++
 Use this routine to create, amend and delete bank import control records. These records are used when importing bank statements to automatically create transactions for recurring entries e.g. charges, fees, interest, stop orders etc.
 
 + **Bank Account** - The G/L account number for the bank.
@@ -750,7 +750,7 @@
     + **Ref-No2** - A further reference number if applicable.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this account.
-+ **Assets** - This only applies if the `Acc-Num` is one of the asset's control accounts.
++ **Assets** - This only applies if the `Acc-Num` is one of the asset control accounts.
     + **Grp** - The asset's group code.
     + **Cod-Num** - The asset's code.
     + **M** - The transaction type i.e. New purchase, improvement, write off, depreciation or sale of asset.
@@ -759,6 +759,13 @@
 + **Books** - This only applies if the `Acc-Num` is the booking control account.
     + **Bkm-Num** - The booking number.
     + **Amount** - The amount of the allocation.
++ **Loans** - This only applies if the `Acc-Num` is the staff loans control account.
+    + **EmpNo** - The employee number.
+    + **Ln** - The loan number.
+    + **Amount** - The amount of the loan.
+    + **Cde** - The new deduction code to use to repay the loan.
+    + **Intr-%** - The new interest rate to apply to the loan.
+    + **Ded-Amt** - The new amount to be deducted from earnings to repay the loan.
 
 If you have allocated the transaction to a creditor's or debtor's account you might be required to age the amount as described in `Ageing Transactions`_ above.
 
@@ -783,7 +790,7 @@
 
 Standard Journal Entries (GL)
 +++++++++++++++++++++++++++++
-Use this routine to raise standard journal entries as created using `Standard Journals`_.
+Use this routine to raise standard journal entries as created using `Standard Journals (GL)`_.
 
 As with most data capture routines you will first have to enter the `Batch Details`_ after which the following fields apply:
 
@@ -798,7 +805,7 @@
 As with most data capture routines you will first have to enter the `Batch Details`_.  The following buttons will then be available:
 
 + **Exit** - This exits out of the capture routine as per using the <Escape> key.
-+ **Import Bank File** - This routine is used to import a bank statement file as described under `Control Accounts`_.
++ **Import Bank File** - This routine is used to import a bank statement file as described under `Control Accounts (GL)`_.
 
     Once you have selected the file to import the system will automatically flag all transactions which already exist on your database.
 
@@ -906,8 +913,8 @@
 * **Bank Account** - The bank account number.
 * **Accounting Period** - The relevant period in the financial year.
 
-Imported Bank Statements
-++++++++++++++++++++++++
+Imported Bank Statements (GL)
++++++++++++++++++++++++++++++
 Use this routine to produce a report of imported bank statements.
 
 + **Bank Account** - Bank account number.
@@ -1750,6 +1757,13 @@
     + **V.A.T.** - The V.A.T. amount of the allocation.
     + **Details** - The details of the allocation.
     + Continue allocating the transaction until fully allocated.
++ **Loans** - This screen only applies if Salaries and Wages are integrated with the G/L and the loans control account has been entered in the `Allocation` screen.
+    + **EmpNo** - The employees number.
+    + **Ln** - The loan number.
+    + **Amount** - The loan amount allocated to this employee.
+    + **Cde** - The new deduction record to be associated with this loan.
+    + **Intr-%** - The new interest rate to apply to this loan.
+    + **Ded-Amt** - The new total amount to be deducted from earnings to settle this loan.
 
 Receipts and Payments (CR)
 ++++++++++++++++++++++++++
@@ -1830,7 +1844,6 @@
 + **P** - Y to pay the transaction else N.
 + **Pay-Date** - The date the transaction becomes payable.
 + **Pay-Amount** - The amount to be paid.
-+
 
 Name and Address Labels (CR)
 ++++++++++++++++++++++++++++

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2015-03-04 16:05:59 +0000
+++ gen/gl2030.py	2015-03-21 07:15:13 +0000
@@ -28,8 +28,9 @@
 """
 
 import time
-from TartanClasses import AgeAll, ASD, Batches, CCD, GetCtl, ProgressBar
-from TartanClasses import PwdConfirm, BankImport, SChoice, Sql, TartanDialog
+from TartanClasses import AgeAll, ASD, Batches, CCD, GetCtl, LoanInterest
+from TartanClasses import ProgressBar, PwdConfirm, BankImport, SChoice
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, getSingleRecords
 from tartanFunctions import getVatRate, mthendDate, showError
 from tartanWork import armvtp, gltrtp
@@ -72,12 +73,13 @@
                 [self.incoac.append(coy[0]) for coy in itg]
             else:
                 self.incoac = False
-        #
+        # Get Enabled Modules
         tab = ["ctlctl", "ctlmst", "ctlvmf", "ctlvrf", "ctlvtf", "genint",
             "genmst", "gentrn", "genrcc", "genrct"]
         mod = []
         for x in xrange(0, len(ctlmst["ctm_modules"].rstrip()), 2):
             mod.append(ctlmst["ctm_modules"][x:x+2])
+        # Load Control Accounts
         if mod.count("AR"):
             ctl = self.gc.getCtl("assctl", self.opts["conum"])
             if not ctl:
@@ -122,6 +124,12 @@
                 return
             if ctl["mcm_glint"] == "Y":
                 tab.extend(["memmst", "memtrn"])
+        if mod.count("SL"):
+            ctl = self.gc.getCtl("wagctl", self.opts["conum"])
+            if not ctl:
+                return
+            if ctl["ctw_glint"] == "Y":
+                tab.extend(["wagmst", "waglmf", "wagltf"])
         # Check if Control Accounts Exist
         self.ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
         if not self.ctlctl:
@@ -188,6 +196,7 @@
         self.mempag = 5
         self.asspag = 6
         self.bkmpag = 7
+        self.lonpag = 8
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "G/Ledger " + gltrtp[self.opts["rtn"] - 1][1] + \
             " Capture (%s)" % __name__)
@@ -276,6 +285,34 @@
                 ("bkc_ccode=bkm_ccode",)],
             "whera": [
                 ["C", "bkm_cono", 0, 2]]}
+        wgm = {
+            "stype": "R",
+            "tables": ("wagmst",),
+            "cols": (
+                ("wgm_empno", "", 0, "EmpNo"),
+                ("wgm_sname", "", 0, "Surname", "Y"),
+                ("wgm_fname", "", 0, "Names")),
+            "where": [("wgm_cono", "=", self.opts["conum"])]}
+        lnm = {
+            "stype": "R",
+            "tables": ("waglmf",),
+            "cols": (
+                ("wlm_loan", "", 0, "Ln"),
+                ("wlm_desc", "", 0, "Description", "Y")),
+            "where": [("wlm_cono", "=", self.opts["conum"])],
+            "whera": (("C", "wlm_empno", 0),),
+            "index": 0}
+        ced = {
+            "stype": "R",
+            "tables": ("wagedc",),
+            "cols": (
+                ("ced_type", "", 0, "T"),
+                ("ced_code", "", 0, "Cde"),
+                ("ced_desc", "", 0, "Description", "Y")),
+            "where": [
+                ("ced_cono", "=", self.opts["conum"]),
+                ("ced_type", "=", "D")],
+            "index": 1}
         vat = {
             "stype": "R",
             "tables": ("ctlvmf",),
@@ -290,10 +327,11 @@
             ("Debtors",None,None,None),
             ("Members",None,None,None),
             ("Assets",None,None,None),
-            ("Books",None,None,None)]
+            ("Books",None,None,None),
+            ("Loans",None,None,None)]
         fld = [
-            (("T",0,0,0),"OUI",9,"Batch %s Quantity" % self.bh.batno),
-            (("T",0,0,0),"OSD",13.2,"Value"),
+            [["T",0,0,0],"OUI",9,"Batch %s Quantity" % self.bh.batno],
+            [["T",0,0,0],"OSD",13.2,"Value"],
             [["C",1,0,0],"INa",9,"Reference","Reference Number",
                 "i","Y",self.doTrnRef,None,None,("notblank",)],
             [["C",1,0,1],"ID1",10,"Date","Transaction Date",
@@ -363,7 +401,24 @@
                 "","N",self.doBkmNum,bkm,None,("notzero",)],
             [["C",7,0,1],"ONA",70,"Name"],
             [["C",7,0,2],"ISD",13.2,"Amount","",
-                "","N",self.doBkmAmt,None,None,("efld",)]]
+                "","N",self.doBkmAmt,None,None,("efld",)],
+            [["T",8,0,0],"OSD",13.2,"Unallocated Balance"],
+            [["C",8,0,0],"IUI",5,"EmpNo","Employee Number",
+                "","N",self.doLonEmp,wgm,None,None],
+            [["C",8,0,1],"ONA",20,"Name"],
+            [["C",8,0,2],"IUI",2,"Ln","Loan Number",
+                "","N",self.doLonNum,lnm,None,("notzero",)],
+            [["C",8,0,3],"INA",20,"Description","",
+                "","N",self.doLonDes,None,None,("notblank",)],
+            [["C",8,0,4],"ISD",13.2,"Amount","",
+                "","N",self.doLonAmt,None,None,("efld",)],
+            [["C",8,0,5],"IUI",3,"Cde","Deduction Code",
+                "","N",self.doLonCod,ced,None,("efld",)],
+            [["C",8,0,6],"ONA",20,"Description"],
+            [["C",8,0,7],"IUD",6.2,"Intr-%","Interest Rate",
+                "","N",self.doLonInt,None,None,None],
+            [["C",8,0,8],"IUD",12.2,"Ded-Amt","Deduction Amount",
+                "","N",self.doLonDed,None,None,("efld",)]]
         if not self.incoac:
             fld[7][1] = "OUI"
         cnd = [
@@ -374,7 +429,8 @@
             (self.endCrsDrsMem, "n"),
             (self.endCrsDrsMem, "n"),
             (self.endAssets, "y"),
-            (self.endBooks, "y")]
+            (self.endBooks, "y"),
+            (self.endLoans, "y")]
         cxt = [
             None,
             self.exitPage1,
@@ -383,7 +439,8 @@
             self.exitPage4,
             self.exitPage5,
             self.exitPage6,
-            self.exitPage7]
+            self.exitPage7,
+            self.exitPage8]
         if self.opts["rtn"] in (2, 6) or self.dorec:
             self.but = [
                 ["Age _Normal",None,self.doAgeNormal,0,None,None,
@@ -988,6 +1045,14 @@
         else:
             self.drs_gl = "N"
             self.drs_ch = "N"
+        # Load Lon Integration
+        if mod.count("SL"):
+            ctl = self.gc.getCtl("wagctl", self.allcoy)
+            if not ctl:
+                return "rf"
+            self.lon_gl = ctl["ctw_glint"]
+        else:
+            self.lon_gl = "N"
         # Load Mem Integration
         if mod.count("ML"):
             ctl = self.gc.getCtl("memctl", self.allcoy)
@@ -1018,6 +1083,9 @@
                 ctls.extend(["crs_ctl", "dis_rec"])
             if self.drs_gl == "Y":
                 ctls.extend(["drs_ctl", "dis_all"])
+            if self.lon_gl == "Y":
+                ctls.append("wag_slc")
+                ctls.append("wag_sli")
             if self.mem_gl == "Y":
                 ctls.append("mem_ctl")
                 if not "dis_all" in ctls:
@@ -1058,6 +1126,8 @@
                 self.others = "crs"
             elif self.drs_gl == "Y" and w == self.ctlctl["drs_ctl"]:
                 self.others = "drs"
+            elif self.lon_gl == "Y" and w == self.ctlctl["wag_slc"]:
+                self.others = "lon"
             elif self.mem_gl == "Y" and w == self.ctlctl["mem_ctl"]:
                 self.others = "mem"
         if self.others:
@@ -1084,6 +1154,8 @@
                 ctl = True
             elif self.drs_gl == "Y" and w == self.ctlctl["drs_ctl"]:
                 ctl = True
+            elif self.lon_gl == "Y" and w == self.ctlctl["wag_slc"]:
+                ctl = True
             elif self.mem_gl == "Y" and w == self.ctlctl["mem_ctl"]:
                 ctl = True
             elif self.rtl_gl == "Y" and w in self.rtlctl:
@@ -1271,6 +1343,19 @@
                 return
             self.df.clearFrame("C", self.bkmpag)
             self.df.selPage("Allocation")
+        elif self.others == "lon":
+            self.page8 = True
+            self.df.selPage("Loans")
+            self.df.loadEntry("T", self.lonpag, 0, data=self.allamt)
+            self.df.focusField("C", self.lonpag, 1)
+            self.opts["mf"].startLoop()
+            self.page8 = False
+            if self.cancel:
+                if self.rctimp:
+                    self.opts["mf"].closeLoop()
+                return
+            self.df.clearFrame("C", self.lonpag)
+            self.df.selPage("Allocation")
         self.allocated = float(ASD(self.allocated) + ASD(self.allamt))
         if self.allocated == self.trnamt:
             self.df.clearFrame("C", 2)
@@ -1409,23 +1494,23 @@
         self.df.loadEntry("C", pag, p+1, data=acc[0])
         self.allref = self.trnref
 
+    def doCrsRef(self, frt, pag, r, c, p, i, w):
+        self.othref = w
+
+    def doCrsDis(self, frt, pag, r, c, p, i, w):
+        self.othdis = w
+
+    def doCrsAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+        self.df.loadEntry(frt, pag, p, data=self.othamt)
+
     def doNewCrs(self, widget=None):
         callModule(self.opts["mf"], self.df, "cr1010", coy=(self.allcoy,
             self.allnam), period=None, user=self.opts["capnm"],
             args=self.othacno)
 
-    def doCrsRef(self, frt, pag, r, c, p, i, w):
-        self.othref = w
-
-    def doCrsDis(self, frt, pag, r, c, p, i, w):
-        self.othdis = w
-
-    def doCrsAmt(self, frt, pag, r, c, p, i, w):
-        self.othamt = w
-        if not self.othamt:
-            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
-        self.df.loadEntry(frt, pag, p, data=self.othamt)
-
     def doDrsChn(self, frt, pag, r, c, p, i, w):
         self.chain = w
 
@@ -1448,23 +1533,23 @@
         self.df.loadEntry("C", pag, p+1, data=acc[0])
         self.allref = self.trnref
 
+    def doDrsRef(self, frt, pag, r, c, p, i, w):
+        self.othref = w
+
+    def doDrsDis(self, frt, pag, r, c, p, i, w):
+        self.othdis = w
+
+    def doDrsAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+        self.df.loadEntry(frt, pag, p, data=self.othamt)
+
     def doNewDrs(self, widget=None):
         callModule(self.opts["mf"], self.df, "dr1010", coy=(self.allcoy,
             self.allnam), period=None, user=self.opts["capnm"],
             args=(self.chain, self.othacno))
 
-    def doDrsRef(self, frt, pag, r, c, p, i, w):
-        self.othref = w
-
-    def doDrsDis(self, frt, pag, r, c, p, i, w):
-        self.othdis = w
-
-    def doDrsAmt(self, frt, pag, r, c, p, i, w):
-        self.othamt = w
-        if not self.othamt:
-            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
-        self.df.loadEntry(frt, pag, p, data=self.othamt)
-
     def doMemAcc(self, frt, pag, r, c, p, i, w):
         self.othacno = w
         acc = self.sql.getRec(tables="memmst", cols=["mlm_surname",
@@ -1662,7 +1747,7 @@
                 mess="Asset does not exist, Create?")
             if ok == "no":
                 return "rf"
-            self.doNewAsset()
+            self.doNewAss()
             acc = self.sql.getRec(tables=["assmst"], where=whr, cols=cols,
                 limit=1)
             if not acc:
@@ -1711,7 +1796,7 @@
                 ASD(self.allamt) - ASD(self.vatamt) - ASD(self.othtot))
             self.othvat = float(ASD(self.vatamt) - ASD(self.vattot))
         else:
-            self.othvat = float(ASD(self.allamt) - ASD(self.vatamt))
+            self.othamt = float(ASD(self.allamt) - ASD(self.vatamt))
             self.othvat = round(((self.othamt / self.othvat) * self.vatamt), 2)
         self.df.loadEntry(frt, pag, p, data=self.othamt)
         self.df.loadEntry(frt, pag, p+1, data=self.trndet)
@@ -1765,7 +1850,7 @@
                 self.sql.insRec("gentrn", data=data)
             self.opts["mf"].closeLoop()
 
-    def doNewAsset(self):
+    def doNewAss(self):
         tit = ("Create New Asset", )
         dep = {
             "stype": "R",
@@ -1778,17 +1863,17 @@
             (("T",0,0,0),"INA",30,"Description","",
                 "","N",None,None,None,("notblank",)),
             (("T",0,1,0),"INa",3,"Dep Code","Depreciation Code",
-                self.depcod,"N",self.doDepCode,dep,None,("notblank",)),
+                self.depcod,"N",self.doNewDep,dep,None,("notblank",)),
             (("T",0,1,0),"ONA",27,""))
-        tnd = ((self.doNewEnd,"N"), )
-        txt = (self.doNewXit, )
+        tnd = ((self.doNewAEnd,"N"), )
+        txt = (self.doNewAXit, )
         state = self.df.disableButtonsTags()
         self.na = TartanDialog(self.opts["mf"], tops=True, title=tit,
             eflds=self.fld, tend=tnd, txit=txt)
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
 
-    def doDepCode(self, frt, pag, r, c, p, i, w):
+    def doNewADep(self, frt, pag, r, c, p, i, w):
         chk = self.sql.getRec(tables="assdep", cols=["asd_desc"],
             where=[("asd_cono", "=", self.allcoy), ("asd_code", "=", w)],
             limit=1)
@@ -1796,14 +1881,14 @@
             return "Invalid Depreciation Code"
         self.na.loadEntry(frt, pag, p+1, data=chk[0])
 
-    def doNewEnd(self):
+    def doNewAEnd(self):
         dat = [self.allcoy, self.assgrp, self.asscod]
         dat.append(self.na.t_work[0][0][0])
         dat.append(self.na.t_work[0][0][1])
         self.sql.insRec("assmst", data=dat)
         self.doNewXit()
 
-    def doNewXit(self):
+    def doNewAXit(self):
         self.na.closeProcess()
         self.opts["mf"].closeLoop()
 
@@ -1824,22 +1909,22 @@
         if not self.othamt:
             self.othamt = float(
                 ASD(self.allamt) - ASD(self.vatamt) - ASD(self.othtot))
-            self.othvat = float(ASD(self.vatamt) - ASD(self.vattot))
         else:
-            self.othvat = float(ASD(self.allamt) - ASD(self.vatamt))
-            self.othvat = round(((self.othamt / self.othvat) * self.vatamt), 2)
+            self.othamt = float(ASD(self.allamt) - ASD(self.vatamt))
         self.df.loadEntry(frt, pag, p, data=self.othamt)
-        self.df.loadEntry(frt, pag, p+1, data=self.trndet)
 
     def endBooks(self):
-        tramt = float(ASD(0.0) - ASD(self.othamt))
+        if self.opts["rtn"] == 6:
+            tramt = float(ASD(0.0) - ASD(self.othamt))
+        else:
+            tramt = self.othamt
         self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
-        if self.others == "bkm":
-            # Bookings Ledger Transaction
-            data = [self.allcoy, self.bkmnum, self.othrtn, self.trnref,
-                self.bh.batno, self.trndat, tramt, 0, self.curdt, self.alldet,
-                "", "", self.opts["capnm"], self.sysdtw, 0]
-            self.sql.insRec("bkmtrn", data=data)
+        # Bookings Ledger Transaction
+        data = [self.allcoy, self.bkmnum, self.othrtn, self.trnref,
+            self.bh.batno, self.trndat, tramt, 0, self.curdt, self.alldet,
+            "", "", self.opts["capnm"], self.sysdtw, 0]
+        self.sql.insRec("bkmtrn", data=data)
+        # Check and Update Status
         trn = self.sql.getRec(tables="bkmtrn", cols=["sum(bkt_tramt)"],
             where=[("bkt_cono", "=", self.opts["conum"]), ("bkt_number",
             "=", self.bkmnum), ("bkt_type", "<>", 1)], limit=1)
@@ -1863,6 +1948,112 @@
         else:
             self.opts["mf"].closeLoop()
 
+    def doLonEmp(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
+            where=[("wgm_cono", "=", self.opts["conum"]), ("wgm_empno", "=",
+            w)], limit=1)
+        if not acc:
+            return "Invalid Employee Number"
+        self.empnum = w
+        empnam = "%s, %s" % (acc[0], acc[1].split()[0])
+        self.df.loadEntry("C", pag, p+1, data=empnam)
+
+    def doLonNum(self, frt, pag, r, c, p, i, w):
+        self.lonnum = w
+        acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
+            "=", self.opts["conum"]), ("wlm_empno", "=", self.empnum),
+            ("wlm_loan", "=", self.lonnum)], limit=1)
+        if not acc:
+            if self.opts["rtn"] == 6:
+                return "Loan Does Not Exist"
+            ok = askQuestion(self.opts["mf"].body, head="New Loan",
+                mess="Is This a New Loan?", default="no")
+            if ok == "yes":
+                self.newlon = True
+        else:
+            self.newlon = False
+            self.londes = acc[self.sql.waglmf_col.index("wlm_desc")]
+            self.loncod = acc[self.sql.waglmf_col.index("wlm_ded_code")]
+            self.lonrte = acc[self.sql.waglmf_col.index("wlm_int_per")]
+            self.londat = acc[self.sql.waglmf_col.index("wlm_start_date")]
+            self.londed = acc[self.sql.waglmf_col.index("wlm_ded_amt")]
+            self.df.loadEntry(frt, pag, p+1, data=self.londes)
+            return "sk1"
+
+    def doLonDes(self, frt, pag, r, c, p, i, w):
+        self.londes = w
+
+    def doLonAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(
+                ASD(self.allamt) - ASD(self.vatamt) - ASD(self.othtot))
+        else:
+            self.othamt = float(ASD(self.allamt) - ASD(self.vatamt))
+        self.df.loadEntry(frt, pag, p, data=self.othamt)
+        if self.opts["rtn"] == 6:
+            self.newrte = self.lonrte
+            return "nd"
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+1, data=self.loncod)
+
+    def doLonCod(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="wagedc", cols=["ced_desc"],
+            where=[("ced_cono", "=", self.opts["conum"]), ("ced_type",
+            "=", "D"), ("ced_code", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Code"
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        self.loncod = w
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+2, data=self.lonrte)
+
+    def doLonInt(self, frt, pag, r, c, p, i, w):
+        self.newrte = w
+        if not self.newlon:
+            self.df.loadEntry(frt, pag, p+2, data=self.londed)
+
+    def doLonDed(self, frt, pag, r, c, p, i, w):
+        self.londed = w
+
+    def endLoans(self):
+        if self.opts["rtn"] == 6:
+            tramt = float(ASD(0.0) - ASD(self.othamt))
+        else:
+            tramt = self.othamt
+        self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
+        if self.newlon:
+            # Loans Ledger Masterfile
+            self.othrtn = 2
+            cap = self.othamt
+            self.sql.insRec("waglmf", data=[self.allcoy, self.empnum,
+                self.lonnum, self.londes, self.loncod, self.newrte,
+                self.trndat, self.londed])
+        else:
+            # Loans Ledger Interest
+            LoanInterest(self.opts["mf"].dbm, self.opts["period"][1][0],
+                self.allcoy, self.empnum, self.lonnum, self.lonrte,
+                self.londat, self.trndat, self.bh.batno, self.curdt,
+                capnm=self.opts["capnm"], update="Y",
+                glctls=(self.ctlctl["wag_slc"], self.ctlctl["wag_sli"]))
+            if self.opts["rtn"] == 6:
+                self.othrtn = 4
+            else:
+                self.othrtn = 3
+            cap = 0.00
+        # Loans Ledger Transaction
+        data = [self.allcoy, self.empnum, self.lonnum, self.bh.batno,
+            self.othrtn, self.trndat, self.trnref, tramt, cap, self.londed,
+            self.newrte, self.curdt, self.alldet, "", self.opts["capnm"],
+            self.sysdtw, 0]
+        self.sql.insRec("wagltf", data=data)
+        if self.othtot != self.allamt:
+            bal = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry("T", self.mempag, 0, data=bal)
+            self.df.advanceLine(8)
+        else:
+            self.opts["mf"].closeLoop()
+
     def updateBatch(self, rev=False):
         if rev:
             self.bh.batqty = self.bh.batqty - 1
@@ -1899,4 +2090,7 @@
     def exitPage7(self):
         self.df.focusField("C", self.bkmpag, self.df.col)
 
+    def exitPage8(self):
+        self.df.focusField("C", self.lonpag, self.df.col)
+
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2015-03-09 16:02:16 +0000
+++ mst/ms0000.py	2015-03-21 07:39:55 +0000
@@ -37,7 +37,7 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2]))
 else:
-    VERSION = (5, 0, 9)
+    VERSION = (5, 0, 10)
 if __name__ == "__main__":
     # Run Tartan
     try:

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2015-03-06 19:01:14 +0000
+++ mst/msc000.py	2015-03-21 06:56:58 +0000
@@ -169,10 +169,37 @@
             print "Tkinter/ttk not Available or Installed"
             self.doExit(dbm=False)
         if self.version:
-            print "Tartan Version: %s" % self.current[1]
-            print "Python Version: %s" % platform.python_version()
+            print "Tartan   Version: %s" % self.current[1]
+            print "Python   Version: %s" % platform.python_version()
             if self.xdisplay:
-                print "Tcl/Tk Version: %s" % tk.Tcl().eval("info patchlevel")
+                print "Tcl/Tk   Version: %s" % tk.Tcl().eval("info patchlevel")
+            try:
+                import fdb
+                print "FDB      Version: %s" % fdb.__version__
+            except:
+                pass
+            try:
+                import MySQLdb
+                print "MySQLdb  Version: %s" % MySQLdb.__version__
+            except:
+                pass
+            try:
+                import psycopg2
+                print "Psycopg2 Version: %s" % psycopg2.__version__
+            except:
+                pass
+            try:
+                import sqlite3
+                print "Pysqlite Version: %s" % sqlite3.version
+                print "Sqlite3  Version: %s" % sqlite3.sqlite_version
+            except:
+                pass
+            print "Xpdf     Version: %s" % fpdf.__version__
+            if XLRD:
+                print "Xlrd     Version: %s" % xlrd.info.__VERSION__
+            if PYCHART:
+                from pychart import version as pyver
+                print "Pychart  Version: %s" % pyver.version
             self.doExit(dbm=False)
         if self.debug:  # Set trace mode
             import trace
@@ -195,6 +222,8 @@
         main = "Tartan Systems - Copyright %s 2004-2015 P Malherbe" % u"\u00A9"
         if self.rcfdir:
             self.mf = MainFrame(rcdic=self.rcdic)
+            if self.mf.rcdic == "error":
+                self.doExit(dbm=False)
             self.mf.window.deiconify()
             if not os.path.isdir(self.rcfdir):
                 showError(self.mf.body, "Directory Error",
@@ -212,6 +241,8 @@
             elif not os.path.isfile(self.rcdic["name"]):
                 if not self.mf:
                     self.mf = MainFrame(title=main, rcdic=self.rcdic)
+                    if self.mf.rcdic == "error":
+                        self.doExit(dbm=False)
                     self.mf.window.deiconify()
                 self.mf.dbm = None
                 cfg = TartanConfig(self.mf, rcfile=self.rcfile,
@@ -226,6 +257,8 @@
             # Create MainFrame if not already existing
             self.mf = MainFrame(title=titl, rcdic=self.rcdic,
                 xdisplay=self.xdisplay)
+            if self.mf.rcdic == "error":
+                self.doExit(dbm=False)
         else:
             self.mf.window.title(titl)
         # Try connecting to the database and create if missing
@@ -372,10 +405,10 @@
         self.mf.head.configure(text="TARTAN User Login and Validation")
         tit = ("User Validation",)
         fld = (
-            (("T",0,0,0),"INA",30,"User Name","Your User Name",
+            (("T",0,0,0),"INA",30,"Name","Your User Name",
                 login,"N",self.usrNam,None,None,None,None,
                 "Your log-in Name"),
-            (("T",0,1,0),"IHA",30,"User Password","Your Password",
+            (("T",0,1,0),"IHA",30,"Password","Your Password",
                 "","N",self.usrPwd,None,None,None,None,
                 "Your password. You are allowed a Maximum of 3 attempts."))
         but = (("Quit", None, self.noUser, 1, None, None),)

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2015-03-09 16:02:16 +0000
+++ std/TartanClasses.py	2015-03-21 07:01:51 +0000
@@ -803,7 +803,8 @@
             self.binds = []
             label = MyLabel(self.frame, image=tkimg, compound="left",
                 text=mess, padding=5, anchor="w", justify="left",
-                color=False, wraplength=wrap)
+                color=False, foreground="black", background="white",
+                wraplength=wrap)
             label.pack(fill="both", expand="yes")
             bbox = ButtonBox(self.frame, row=1)
             self.butts = []
@@ -1360,29 +1361,33 @@
             self.rcdic = loadRcFile()
         else:
             self.rcdic = rcdic
-        geo = self.rcdic["geo"].split("x")
-        self.geo = [int(geo[0]), int(geo[1])]
-        self.override = "natrat"
-        self.dbm = None
-        if xdisplay:
-            if not GUI:
-                print "Missing Tkinter and/or ttk modules"
-                sys.exit()
-            if not title:
-                title = "Tartan Systems - (%s P Malherbe)" % u"\u00A9"
-            self.window = MkWindow(tk=True, title=title, resiz=False).newwin
-            try:
-                self.window.tk.call("wm", "iconphoto", self.window._w,
-                    tk.PhotoImage(file=os.path.join(self.rcdic["prgdir"],
-                    "img", "tartan.gif")))
-            except:
-                pass
-            self.setThemeFont()
-            self.createChildren()
+        if self.rcdic == "error":
+            showError(None, "rcdic Error",
+                "There is a Problem Loading the tartanrc File")
         else:
-            self.children = False
-            self.window = None
-            self.body = None
+            geo = self.rcdic["geo"].split("x")
+            self.geo = [int(geo[0]), int(geo[1])]
+            self.override = "natrat"
+            self.dbm = None
+            if xdisplay:
+                if not GUI:
+                    print "Missing Tkinter and/or ttk modules"
+                    sys.exit()
+                if not title:
+                    title = "Tartan Systems - (%s P Malherbe)" % u"\u00A9"
+                self.window = MkWindow(tk=True, title=title, resiz=False).newwin
+                try:
+                    self.window.tk.call("wm", "iconphoto", self.window._w,
+                        tk.PhotoImage(file=os.path.join(self.rcdic["prgdir"],
+                        "img", "tartan.gif")))
+                except:
+                    pass
+                self.setThemeFont()
+                self.createChildren()
+            else:
+                self.children = False
+                self.window = None
+                self.body = None
 
     def setThemeFont(self):
         # Set Fonts
@@ -1571,7 +1576,10 @@
         if self.tk:
             self.newwin = tk.Tk()
         elif self.trans:
-            self.newwin = tk.Toplevel(self.trans.winfo_toplevel())
+            if self.trans.winfo_class() in ("Tk", "Toplevel"):
+                self.newwin = tk.Toplevel(self.trans)
+            else:
+                self.newwin = tk.Toplevel(self.trans.winfo_toplevel())
         else:
             self.newwin = tk.Toplevel()
         self.newwin.protocol("WM_DELETE_WINDOW", self.doDestroyYes)
@@ -1584,8 +1592,10 @@
             if self.title:
                 self.newwin.title(self.title)
             else:
-                self.newwin.title("Tartan Systems - (Copyright P Malherbe)")
+                self.newwin.title("Tartan Systems - %s 2004-%s Paul Malherbe"
+                    % (u"\u00A9", time.localtime().tm_year))
         else:
+            self.newwin.update_idletasks()
             self.newwin.overrideredirect(1)
         if not self.resiz:
             self.newwin.resizable(0, 0)
@@ -1985,13 +1995,13 @@
         for key in self.rcdic:
             setattr(self, key, self.rcdic[key])
         self.screen = screen
-        self.nomulti = False
         if self.dbase in ("FBird", "SQLite"):
             if self.dbdir:
                 self.dbdsn = os.path.join(self.dbdir, self.dbname)
             else:
                 self.dbdsn = self.dbname
         try:
+            self.mrecs = True
             if self.dbase == "FBird":
                 try:
                     self.dbmod = "fdb"
@@ -2005,22 +2015,14 @@
                 import MySQLdb as engine
                 self.dbf = "%s"
             elif self.dbase == "PgSQL":
-                try:
-                    self.dbmod = "psycopg2"
-                    import psycopg2 as engine
-                except:
-                    self.dbmod = "pg"
-                    import pg as engine
+                self.dbmod = "psycopg2"
+                import psycopg2 as engine
                 self.dbf = "%s"
             elif self.dbase == "SQLite":
-                self.dbmod = "sqlite"
-                try:
-                    from pysqlite2 import dbapi2 as engine
-                except:
-                    from sqlite3 import dbapi2 as engine
-                if sys.platform == "win32":
-                    # Does not support multiple row inserts
-                    self.nomulti = True
+                self.dbmod = "sqlite3"
+                from sqlite3 import dbapi2 as engine
+                if engine.sqlite_version < "3.8.0":
+                    self.mrecs = False
                 self.dbf = "?"
             else:
                 raise Exception("Invalid Database Type (%s)" % self.dbase)
@@ -2175,8 +2177,8 @@
                 if not int(self.dbport):
                     self.dbport = 3050
                 self.db = self.engine.connect(host=self.dbhost,
-                    port=self.dbport, database=self.dbdsn, user=self.dbuser,
-                    password=self.dbpwd)  # charset="UTF8")
+                    port=self.dbport, database=self.dbdsn,
+                    user=self.dbuser, password=self.dbpwd)
             elif self.dbase == "MySQL":
                 if not int(self.dbport):
                     self.dbport = 3306
@@ -2201,21 +2203,8 @@
                     dsn += " password=%s" % self.dbpwd
                 self.db = self.engine.connect(dsn)
             elif self.dbase == "SQLite":
-                v1 = self.engine.version
-                db = open(self.dbdsn, "r")
-                vv = db.readline()
-                db.close()
-                if not vv:
-                    # Empty database
-                    self.db = self.engine.connect(database=self.dbdsn)
-                    self.db.text_factory = str
-                elif v1 >= "1.1.0" and vv[:15] == "SQLite format 3":
-                    # sqlite version 2 format 3
-                    self.db = self.engine.connect(database=self.dbdsn)
-                    self.db.text_factory = str
-                else:
-                    raise Exception("""This is an incorrectly formatted file,
-Please convert it to version 3 before continuing!""")
+                self.db = self.engine.connect(database=self.dbdsn)
+                self.db.text_factory = str
             self.cu = self.db.cursor()
             if self.dbase == "PgSQL" and self.dbmod == "psycopg2":
                 self.setIsolationLevel(levl)
@@ -2357,7 +2346,7 @@
         data = csv.reader(fld, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
             fd.append([table] + dat)
-        qry = "Create table %s(" % table
+        qry = "Create table %s (" % table
         sequence = ""
         for tab, seq, nam, typ, siz, des, hed in fd:
             siz = float(siz)
@@ -2400,10 +2389,10 @@
             data = csv.reader(idx, quoting=csv.QUOTE_MINIMAL)
             for dat in data:
                 ky.append([table] + dat)
+            blbkey = ("ctllog", "emllog", "genrct", "memkon", "telmst")
             for key in ky:
-                if sys.platform == "win32" or self.dbase in ("FBird", "MySQL"):
-                    if table in ("memkon", "emllog"):
-                        continue
+                if self.dbase in ("FBird", "MySQL") and table in blbkey:
+                    continue
                 kk = ""
                 for f in key[4:]:
                     if not f:
@@ -2563,6 +2552,7 @@
                 return list(ret)
             else:
                 return [list(r) for r in ret]
+
         try:
             if not state:
                 if fetch:
@@ -2574,8 +2564,13 @@
                 self.dbm.cu.execute(state)
             else:
                 comm = state[0].split()
-                if comm[0].lower() == "insert" and self.dbm.nomulti:
-                    self.dbm.cu.executemany(state[0], state[1])
+                if comm[0].lower() == "insert":
+                    if self.dbm.mrecs:
+                        self.dbm.cu.execute(state[0], state[1])
+                    elif type(state[1][0]) is list and len(state[1]) > 1:
+                        self.dbm.cu.executemany(state[0], state[1])
+                    else:
+                        self.dbm.cu.execute(state[0], state[1][0])
                 else:
                     self.dbm.cu.execute(state[0], state[1])
             if comm[0].lower() == "select" or comm[0].lower() == "show":
@@ -2718,9 +2713,9 @@
                     fd = CCD(tdat[seq], dic[nam][2], dic[nam][3])
                     if not fd.err:
                         tdat[seq] = fd.work
-                if not self.dbm.nomulti:
+                if self.dbm.mrecs:
                     ndat.append(tdat[seq])
-            if self.dbm.nomulti:
+            if not self.dbm.mrecs:
                 nrem.sort(reverse=True)
                 for seq in nrem:
                     del tdat[seq]
@@ -2731,25 +2726,26 @@
                 tfmt = "%s, (%s)" % (tfmt, nfmt)
             if onum and not onum % 499:
                 # Limit write to a maximum of 500 records at a time
+                # This particularly applies to sqlite
                 if pbar:
                     pbar.displayProgress(onum)
-                if self.dbm.nomulti:
-                    self.sqlRec(("Insert into %s (%s) values (%s)" % (table,
-                        nfld, nfmt), ndat), excp=excp)
-                else:
+                if self.dbm.mrecs:
                     self.sqlRec(("Insert into %s (%s) values %s" % (table,
                         nfld, tfmt), ndat), excp=excp)
                     tfmt = ""
+                else:
+                    self.sqlRec(("Insert into %s (%s) values (%s)" % (table,
+                        nfld, nfmt), ndat), excp=excp)
                 ndat = []
         if ndat:
             if pbar:
                 pbar.displayProgress(onum)
-            if self.dbm.nomulti:
+            if self.dbm.mrecs:
+                self.sqlRec(("Insert into %s (%s) values %s" % (table,
+                    nfld, tfmt), ndat), excp=excp)
+            else:
                 self.sqlRec(("Insert into %s (%s) values (%s)" % (table,
                     nfld, nfmt), ndat), excp=excp)
-            else:
-                self.sqlRec(("Insert into %s (%s) values %s" % (table,
-                    nfld, tfmt), ndat), excp=excp)
 
     def getRec(self, tables=None, join=None, cols=None, where=None, data=None, group=None, order=None, fetch=False, limit=None, excp=False):
         """
@@ -4515,6 +4511,7 @@
                     self.mstFrame.winfo_reqheight() > int(self.mf.bh):
                 self.mf.rcdic["dfs"] = int(self.mf.rcdic["dfs"]) - 1
                 self.mf.setThemeFont()
+                self.mf.resizeChildren()
             else:
                 break
         self.mstFrame.place(anchor="center", relx=0.5, rely=0.5)
@@ -6578,7 +6575,7 @@
             if len(col) == 4:
                 col.append("N")
             if col[4].lower() == "f":
-                fltr = self.mf
+                fltr = True
             self.coll.append(col)
         self.setTableFields()
         if self.wtype == "D":
@@ -6839,7 +6836,7 @@
     deco   - Whether or not the window must be decorated, default True.
     live   - Whether the treeview can have focus, defaults to True.
     posn   - The Initial Row to highlight.
-    fltr   - If filtering is available. This must be a mf class.
+    fltr   - If filtering is available, True or False.
     scrl   - Have Scrollbars True or False.
     styl   - Style to use.
     font   - Font to use.
@@ -6847,6 +6844,7 @@
     """
     def __init__(self, scrn, titl, cols, data, lines=0, sort=True, loop=True, cmnd=None, butt=[], neww=True, deco=True, live=True, posn=0, fltr=False, scrl=True, font="TkHeadingFont", addh=0):
         self.scrn = scrn
+        self.ocol = cols
         if titl:
             self.titl = titl
         else:
@@ -6856,6 +6854,7 @@
         else:
             self.headings = False
         self.cols = []
+        self.fcol = []
         self.cdet = {}
         self.chek = False
         self.srch = len(cols)
@@ -7273,67 +7272,50 @@
             command=lambda col=col: self.doSort(col, not descending))
 
     def doFilter(self, event=None):
-        self.fltcol = []
-        self.olddata = self.data[:]
-        tit = ("Filter Selection",)
-        fld = []
-        cnt = 0
-        for num, col in enumerate(self.cols):
-            if self.cdet[col][2].lower() in ("f", "y"):
-                self.fltcol.append((cnt, num))
-                fld.append((("T",0,cnt,0),"I%s" % self.cdet[col][1],
-                    self.cdet[col][0],col,col, "","Y",None,None,None,None))
-                cnt += 1
-        if not fld:
-            return
-        tnd = ((self.doFEnd, "n"), )
-        txt = (self.doFExit, )
         for b in self.buttons:
             b.configure(state="disabled")
-        self.ft = TartanDialog(self.fltr, screen=self.window, tops=True,
-            modal=True, title=tit, eflds=fld, tend=tnd, txit=txt)
-        self.window.mainloop()
-        if not self.newdata:
+        title = "Filter Selection"
+        fcol = []
+        scol = []
+        seq = 0
+        for num, col in enumerate(self.ocol):
+            if len(col) > 4 and col[4].lower() in ("y", "f"):
+                fcol.append((seq, num))
+                scol.append(col)
+                seq += 1
+        diag = SimpleDialog(scol, title=title, parent=self.window)
+        for b in self.buttons:
+            b.configure(state="normal")
+        tcol = fcol[:]
+        if diag.data:
+            for col in tcol:
+                if diag.data[col[0]]:
+                    exec "flt%s = re.compile('%s', re.IGNORECASE)" % (col[0],
+                        str(diag.data[col[0]]))
+                else:
+                    fcol.remove(col)
+        else:
+            self.tree.focus_set()
+        olddata = self.data[:]
+        newdata = []
+        for dat in olddata:
+            matches = []
+            for col in fcol:
+                exec "matches.append(flt%s.match(str(dat[col[1]])))" % col[0]
+            if not None in matches:
+                newdata.append(dat)
+        if not newdata:
             self.doExit()
-        elif len(self.newdata) == 1:
-            self.selection = [0] + self.newdata[0]
+        elif len(newdata) == 1:
+            self.selection = [0] + newdata[0]
             self.closeProcess()
         else:
-            self.data = self.newdata[:]
+            self.data = newdata[:]
             if self.neww:
                 self.window.destroy()
             self.setupWidgets()
             self.buildTree()
 
-    def doFEnd(self, widget=None):
-        self.ft.closeProcess()
-        for b in self.buttons:
-            b.configure(state="normal")
-        self.window.destroy()
-        self.newdata = []
-        fcol = self.fltcol[:]
-        for col in fcol:
-            if self.ft.t_work[0][0][col[0]]:
-                exec "flt%s = re.compile('%s', re.IGNORECASE)" % (col[0],
-                    str(self.ft.t_work[0][0][col[0]]))
-            else:
-                self.fltcol.remove(col)
-        for dat in self.olddata:
-            matches = []
-            for col in self.fltcol:
-                exec "matches.append(flt%s.match(str(dat[col[1]])))" % col[0]
-            if not None in matches:
-                self.newdata.append(dat)
-        self.window.quit()
-
-    def doFExit(self, event=None):
-        self.ft.closeProcess()
-        for b in self.buttons:
-            b.configure(state="normal")
-        self.altkey = False
-        self.tree.focus_set()
-        self.window.quit()
-
     def doExit(self, *args):
         self.selection = None
         self.closeProcess()
@@ -10559,8 +10541,8 @@
     update - Update tables, Y or N
     glctls = G/L control accounts, [wag_slc, wag_sli]
     """
-    def __init__(self, mf, period, coy, empno, loan, rate, start, trdate, batch, curdt, capnm, update="N", glctls=None):
-        self.mf = mf
+    def __init__(self, dbm, period, coy, empno, loan, rate, start, trdate, batch, curdt, capnm, update="N", glctls=None):
+        self.dbm = dbm
         self.period = period
         self.conum = coy
         self.empno = empno
@@ -10579,7 +10561,7 @@
     def setVariables(self):
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.sql = Sql(self.mf.dbm, ["wagltf", "gentrn"], prog=__name__)
+        self.sql = Sql(self.dbm, ["wagltf", "gentrn"], prog=__name__)
         self.idt = 0
         self.imt = 0
         self.bal = 0
@@ -11730,7 +11712,6 @@
         if "letterhead" in self.form.tptp:
             self.form.letterhead(cmc, ctm, "letterhead", None)
         if "document_type" in self.form.tptp:
-            print self.runtp
             if self.runtp.lower() == "c":
                 typ = "COPY PAYSLIP"
             elif self.runtp.lower() == "p":
@@ -15812,7 +15793,6 @@
 class AboutTartan:
     def __init__(self, mf, ver):
         self.mf = mf
-        self.setVariables()
         self.about = MyFrame(self.mf.window, borderwidth=2, relief="ridge")
         self.about.place(anchor="center", relx=0.5, rely=0.5)
         info = """
@@ -15828,7 +15808,7 @@
 
 %s 2004-%s Paul Malherbe
 
-""" % (ver, u"\u00A9", self.sysdtw / 10000)
+""" % (ver, u"\u00A9", time.localtime().tm_year)
         label = MyText(self.about, font=("Helvetica", 14), width=65,
             height=14, takefocus=False)
         label.insert("insert", info)
@@ -15845,10 +15825,6 @@
         self.b2 = bbox.addButton("Exit", self.exitAbout)
         self.mf.startLoop()
 
-    def setVariables(self):
-        t = time.localtime()
-        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-
     def linkAbout(self, *args):
         try:
             web = "http://www.tartan.co.za"
@@ -15925,4 +15901,101 @@
                 self.links[tag]()
                 return
 
+class SimpleDialog:
+    """
+    This is a simple input dialog for simple applications.
+
+    parent  -   The parent widget
+    cols    -   A list of lists of entry fields as follows:
+                    ('name', 'label details', size, 'type') e.g.
+
+                cols=[
+                    ('a', 'Number', 7, 'UI'),
+                    ('b', 'Surname', 20, 'TX'),
+                    ('c', 'Names', 20, 'TX'),
+                    ('d', 'Group', 30, 'TX'),
+                    ('e', 'Arrival', 10, 'd1')]
+    """
+    def __init__(self, cols, title=None, parent=None):
+        self.cols = cols
+        self.data = []
+        self.ents = []
+        if parent:
+            mgr = getManager(parent)
+        self.sframe = MyFrame(parent, bg="black", borderwidth=2)
+        if parent and mgr in ("pack", "place"):
+            self.sframe.place(anchor="center", relx=0.5, rely=0.5)
+        else:
+            self.sframe.grid()
+        if title:
+            head = MyLabel(self.sframe, text=title, color=True, borderwidth=2,
+                anchor="c", padding=0, relief="ridge")
+            head.pack(fill="x", expand="yes")
+        nframe = MyFrame(self.sframe, padding=2)
+        nframe.pack(fill="both", expand="yes")
+        for num, col in enumerate(self.cols):
+            lab = MyLabel(nframe, color=False, text=col[1])
+            lab.grid(row=num, column=0, sticky="w")
+            wid = MyEntry(nframe, maxsize=int(col[2]), width=int(col[2]),
+                cmd=(self.goNext, num))
+            if col[3][0] == "H":
+                wid.configure(show="*")
+            wid.bind("<Escape>", self.goBack)
+            wid.grid(row=num, column=1, sticky="w")
+            self.ents.append(wid)
+        self.stat = MyLabel(nframe, text="Enter %s or <Esc> to Exit" %
+            self.cols[0][1], color=False, borderwidth=2, anchor="w",
+            background="white", foreground="black", padding=0, relief="ridge")
+        self.stat.grid(row=num+1, column=0, columnspan=2, pady=2, sticky="ew")
+        if parent and parent.winfo_class() == "Tk":
+            parent.update_idletasks()
+            sw, sh = parent.winfo_screenwidth(), parent.winfo_screenheight()
+            ww, wh = self.sframe.winfo_reqwidth(), self.sframe.winfo_reqheight()
+            parent.geometry("%sx%s+%s+%s" % (ww, wh,
+                ((sw / 2) - (ww / 2)), ((sh / 2) - (wh / 2))))
+            parent.update_idletasks()
+        self.ents[0].focus_set()
+        self.sframe.mainloop()
+
+    def goBack(self, event):
+        fld = self.ents.index(event.widget)
+        if not fld:
+            self.sframe.destroy()
+            self.sframe.quit()
+        else:
+            fld -= 1
+            self.ents[fld].focus_set()
+            self.ents[fld].selection_range(0, "end")
+            if not fld:
+                self.stat.configure(text="Enter %s or <Esc> to Exit" %
+                    self.cols[fld][1])
+
+    def goNext(self, fld, event=None):
+        siz = self.cols[fld][2]
+        typ = self.cols[fld][3]
+        dat = self.ents[fld].get()
+        chk = CCD(dat, typ, siz)
+        if chk.err:
+            self.ents[fld].focus_set()
+            self.ents[fld].selection_range(0, "end")
+            self.stat.configure(text="Error, %s" % self.stat.cget("text"))
+        else:
+            self.ents[fld].delete(0, "end")
+            if not chk.work:
+                dsp = ""
+            else:
+                dsp = chk.disp
+            self.ents[fld].insert(0, dsp)
+            if fld == len(self.cols) - 1:
+                for num, ent in enumerate(self.ents):
+                    self.data.append(CCD(ent.get(), self.cols[num][3],
+                        self.cols[num][2]).work)
+                self.sframe.destroy()
+                self.sframe.quit()
+            else:
+                self.ents[fld + 1].focus_set()
+                self.ents[fld + 1].selection_range(0, "end")
+                self.stat.configure(text="Enter %s or <Esc> to Go Back" %
+                    self.cols[fld + 1][1])
+
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2015-03-09 16:02:16 +0000
+++ std/tartanFunctions.py	2015-03-20 13:40:43 +0000
@@ -1388,7 +1388,11 @@
     def viewFile(name, wait):
         if not args["rcdic"] or not args["rcdic"]["exp"]:
             if sys.platform == "win32":
-                os.startfile(name)
+                try:
+                    os.startfile(name)
+                except:
+                    showError(None, "Error", "No Export Application")
+                    return
             elif os.path.isfile("/usr/bin/ooffice"):
                 os.spawnv(wait, "/usr/bin/ooffice",
                     ("ooffice", name))
@@ -1401,7 +1405,8 @@
             cmd.append(name)
             os.spawnv(wait, exe, tuple(cmd))
         except:
-            return "%s Not Found or Not Accessible" % exe
+            showError(None, "Error", "%s Not Found or Not Accessible" % exe)
+            return
 
     if not "view" in args:
         view = True

=== modified file 'tab/tb1020.py'
--- tab/tb1020.py	2015-03-09 16:02:16 +0000
+++ tab/tb1020.py	2015-03-10 19:30:11 +0000
@@ -829,7 +829,10 @@
             return
         if self.opts["mf"] and  self.opts["mf"].window:
             self.opts["mf"].updateStatus("Creating New Indexes for %s" % table)
+        blbkey = ("ctllog", "emllog", "genrct", "memkon", "telmst")
         for key in keys:
+            if self.dbm.dbase in ("FBird", "MySQL") and table in blbkey:
+                continue
             nam = "%s_key%s" % (table, str(key[2]))
             if not self.doCheckIndex(table, nam):
                 idx = ""

=== modified file 'wag/sl2010.py'
--- wag/sl2010.py	2015-03-04 16:05:59 +0000
+++ wag/sl2010.py	2015-03-19 14:57:02 +0000
@@ -88,9 +88,9 @@
                 "","N",self.doCode,ced,None,("notzero",)),
             (("C",0,0,7),"IUD",6.2,"Intr-%","Interest Rate",
                 "","N",self.doInt,None,None,None),
-            (("C",0,0,8),"IUD",9.2,"Loan-Amt","Loan Amount",
+            (("C",0,0,8),"IUD",12.2,"Loan-Amt","Loan Amount",
                 "","N",self.doAmt,None,None,("notzero",)),
-            (("C",0,0,9),"IUD",9.2,"Ded-Amt","Deduction Amount",
+            (("C",0,0,9),"IUD",12.2,"Ded-Amt","Deduction Amount",
                 "","N",self.doDed,None,None,("efld",)))
         but = (("Interrogate",None,self.querySln,0,("C",0,1),("C",0,2)),)
         cnd = ((self.endPage,"y"), )

=== modified file 'wag/sl2020.py'
--- wag/sl2020.py	2015-03-06 19:01:14 +0000
+++ wag/sl2020.py	2015-03-19 14:57:46 +0000
@@ -55,7 +55,7 @@
 
     def batchHeader(self):
         self.bh = Batches(self.opts["mf"], self.opts["conum"],
-            self.opts["conam"], self.opts["period"], "SLN", 4,
+            self.opts["conam"], self.opts["period"], "SLN", 5,
             glint=self.glint)
         self.bh.doBatchHeader()
         if not self.bh.batno:
@@ -116,10 +116,10 @@
                 "i","N",self.doRef,None,None,("notblank",)),
             (("C",1,0,7),"IUD",6.2,"Intr-%","New Interest Rate",
                 "","N",self.doPer,None,None,None),
-            (("C",1,0,8),"ISD",10.2,"Interest",
+            (("C",1,0,8),"ISD",13.2,"Interest",
                 "Interest (Adds to interest raised)",
                 "","Y",self.doInt,None,None,("notzero",)),
-            (("C",1,0,9),"ISD",10.2,"Amount",
+            (("C",1,0,9),"ISD",13.2,"Amount",
                 "Amount (Adds to advances or payments)",
                 "","Y",self.doPay,None,None,("notzero",)),
             (("C",1,0,10),"IUD",9.2,"Deduct",
@@ -226,7 +226,7 @@
             self.curdt = self.bh.curdt
         rate = CCD(self.acc[self.col.index("wlm_int_per")], "UD", 6.2)
         strt = CCD(self.acc[self.col.index("wlm_start_date")], "d1", 10.0)
-        LoanInterest(self.opts["mf"], self.opts["period"][1][0],
+        LoanInterest(self.opts["mf"].dbm, self.opts["period"][1][0],
             self.opts["conum"], self.empno, self.loan, rate.work, strt.work,
             self.trdate, self.bh.batno, self.curdt, capnm=self.opts["capnm"],
             update="Y", glctls=self.glctls)

=== modified file 'wag/sl2030.py'
--- wag/sl2030.py	2014-12-30 15:37:38 +0000
+++ wag/sl2030.py	2015-03-13 12:11:25 +0000
@@ -76,7 +76,7 @@
             start = CCD(dat[3], "d1", 10.0)
             curdt = int(self.trdate / 100)
             batch = "%03i%04i" % (self.opts["conum"], curdt % 10000)
-            LoanInterest(self.opts["mf"], self.opts["period"][1][0],
+            LoanInterest(self.opts["mf"].dbm, self.opts["period"][1][0],
                 self.opts["conum"], dat[0], dat[1], rate.work, start.work,
                 self.trdate, batch, self.opts["capnm"], curdt, update="Y",
                 glctls=self.glctls)

=== modified file 'wag/sl3030.py'
--- wag/sl3030.py	2015-02-07 06:31:11 +0000
+++ wag/sl3030.py	2015-03-20 11:57:46 +0000
@@ -14,7 +14,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class sl3030:
@@ -25,7 +25,7 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, "waglmf", prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["waglmf", "wagltf"], prog=__name__)
         if self.sql.error:
             return
         t = time.localtime()
@@ -58,28 +58,43 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        col = ["wlm_empno", "wgm_sname", "wlm_loan", "wlm_desc",
-            "wlm_ded_code", "wlm_start_date", "wlm_int_per", "wlm_ded_amt"]
-        whr = [("wlm_cono", "=", self.opts["conum"]), ("wlm_cono=wgm_cono",),
-            ("wlm_empno=wgm_empno",)]
+        col = [
+            "wlm_empno",
+            "wgm_sname",
+            "wgm_fname",
+            "wlm_loan",
+            "wlm_desc",
+            "wlm_ded_code",
+            "wlm_start_date",
+            "wlm_int_per",
+            "wlm_ded_amt",
+            "sum(wlt_amt)"]
+        whr = [
+            ("wlm_cono", "=", self.opts["conum"]),
+            ("wlm_cono=wgm_cono",),
+            ("wlm_empno=wgm_empno",),
+            ("wlt_cono=wgm_cono",),
+            ("wlt_empno=wgm_empno",),
+            ("wlt_loan=wlm_loan",)]
         if self.sort == "N":
             odr = "wlm_empno, wlm_loan"
         else:
-            odr = "wlm_sname"
-        recs = self.sql.getRec(tables=["waglmf", "wagmst"], cols=col,
+            odr = "wlm_sname, wlm_loan"
+        recs = self.sql.getRec(tables=["waglmf", "wagmst", "wagltf"], cols=col,
             where=whr, order=odr)
         if not recs:
             showError(self.opts["mf"].body, "Transaction Error",
-            "No Transactions Selected")
+                "No Transactions Selected")
         else:
             self.printReport(recs)
         self.closeProcess()
 
     def printReport(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-        self.head = ("%03u %-30s %63s %6s" % \
+        self.head = ("%03u %-30s %77s %6s" % \
             (self.opts["conum"], self.opts["conam"], self.sysdttm, __name__))
         self.fpdf = MyFpdf(name=__name__, head=self.head)
+        tot = 0
         self.pgnum = 0
         self.pglin = 999
         for num, dat in enumerate(recs):
@@ -87,20 +102,26 @@
             if p.quit:
                 break
             emp = CCD(dat[0], "UI", 5)
-            nam = CCD(dat[1], "NA", 30)
-            lon = CCD(dat[2], "UI", 2)
-            des = CCD(dat[3], "NA", 30)
-            cod = CCD(dat[4], "UI", 2)
-            dte = CCD(dat[5], "d1", 10)
-            per = CCD(dat[6], "SD", 10.2)
-            ded = CCD(dat[7], "SD", 10.2)
+            nam = CCD("%s, %s" % (dat[1], dat[2].split()[0]), "NA", 40)
+            lon = CCD(dat[3], "UI", 2)
+            des = CCD(dat[4], "NA", 20)
+            cod = CCD(dat[5], "UI", 2)
+            dte = CCD(dat[6], "d1", 10)
+            per = CCD(dat[7], "UD", 6.2)
+            ded = CCD(dat[8], "SD", 13.2)
+            bal = CCD(dat[9], "SD", 13.2)
+            tot = float(ASD(tot) + ASD(bal.work))
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading()
-            self.fpdf.drawText("%s %s %s %s %s %s %s %s" % (emp.disp, nam.disp,
-                lon.disp, des.disp, cod.disp, dte.disp, per.disp, ded.disp))
+            self.fpdf.drawText("%s %s %s %s %s %s %s %s %s" % (emp.disp,
+                nam.disp, lon.disp, des.disp, cod.disp, dte.disp, per.disp,
+                ded.disp, bal.disp))
             self.pglin += 1
         p.closeProgress()
         if self.fpdf.page and not p.quit:
+            tot = CCD(tot, "SD", 13.2)
+            self.fpdf.drawText()
+            self.fpdf.drawText("%5s %-100s%s" % ("", "Total", tot.disp))
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
@@ -114,7 +135,7 @@
         self.pgnum += 1
         self.fpdf.drawText(self.head)
         self.fpdf.drawText()
-        self.fpdf.drawText("%-29s %-10s %58s %5s" % \
+        self.fpdf.drawText("%-29s %-10s %72s %5s" % \
             ("Staff Loans Master List as at", self.sysdtd,
                 "Page", self.pgnum))
         self.fpdf.drawText()
@@ -123,9 +144,9 @@
                 "Ignore Zero Bal-", self.df.t_disp[0][0][1], "",
                 "Csv-", self.df.t_disp[0][0][2], ")"))
         self.fpdf.drawText()
-        self.fpdf.drawText("%-5s %-30s %-2s %-30s %-2s %-10s %-10s %-13s" % \
-            ("EmpNo", "Name", "Ln", "Description", "Cd", "Start-Date",
-            " Int Rate", "Deduction"))
+        self.fpdf.drawText("%-5s %-40s %-2s %-20s %-2s %-10s %-6s %-13s "\
+            "%-13s" % ("EmpNo", "Name", "Ln", "Description", "Cd",
+            "Start-Date", "I-Rate", "   Deduction", "     Balance"))
         self.fpdf.underLine(txt=self.head)
         self.fpdf.setFont()
         self.pglin = 8

=== modified file 'wag/sl3040.py'
--- wag/sl3040.py	2015-02-07 06:31:11 +0000
+++ wag/sl3040.py	2015-03-12 11:06:28 +0000
@@ -74,17 +74,41 @@
     def doEnd(self):
         self.df.closeProcess()
         self.prtnam = self.df.repprt[0][2]
-        whr = [("wlm_cono", "=", self.opts["conum"])]
         if self.whole == "S":
-            recs = getSingleRecords(self.opts["mf"], "waglmf",
-                ("wlm_empno", "wlm_desc"), where=whr)
+            col = [
+                "wlm_empno", "wgm_sname", "wgm_fname", "wlm_loan", "wlm_desc"]
+            whr = [
+                ("wlm_cono", "=", self.opts["conum"]),
+                ("wgm_cono=wlm_cono",), ("wgm_empno=wlm_empno",)]
+            dic = {}
+            dic["wlm_empno"] = self.sql.waglmf_dic["wlm_empno"]
+            dic["wlm_loan"] = self.sql.waglmf_dic["wlm_loan"]
+            dic["wlm_desc"] = self.sql.waglmf_dic["wlm_desc"]
+            dic["wgm_sname"] = self.sql.wagmst_dic["wgm_sname"]
+            dic["wgm_fname"] = self.sql.wagmst_dic["wgm_fname"]
+            dat = self.sql.getRec(tables=["waglmf", "wagmst"], cols=col,
+                where=whr, order="wlm_empno, wlm_loan")
+            get = getSingleRecords(self.opts["mf"], "waglmf", col,
+                where=dat, ttype="D", dic=dic)
+            if get:
+                acc = []
+                for g in get:
+                    acc.append(g[0])
+                whr = [
+                    ("wlm_cono", "=", self.opts["conum"]),
+                    ("wlm_empno", "in", acc)]
+                odr = "wlm_empno, wlm_loan"
+                recs = self.sql.getRec(tables="waglmf", where=whr, order=odr)
+            else:
+                recs = None
         else:
+            whr = [("wlm_cono", "=", self.opts["conum"])]
             odr = "wlm_empno, wlm_loan"
             recs = self.sql.getRec(tables="waglmf", where=whr, order=odr)
-            if not recs:
-                showError(self.opts["mf"].body, "Error",
-                    "No Accounts Selected")
-        if recs:
+        if not recs:
+            showError(self.opts["mf"].body, "Error",
+                "No Accounts Selected")
+        else:
             p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
             for num, emp in enumerate(recs):
                 p.displayProgress(num)

=== modified file 'wag/sl4010.py'
--- wag/sl4010.py	2015-03-06 19:01:14 +0000
+++ wag/sl4010.py	2015-03-13 12:11:38 +0000
@@ -143,7 +143,7 @@
         self.loadBalances()
         rate = self.df.t_work[1][0][1]
         start = self.df.t_work[1][0][2]
-        lint = LoanInterest(self.opts["mf"], self.opts["period"],
+        lint = LoanInterest(self.opts["mf"].dbm, self.opts["period"],
             self.opts["conum"], self.empno, self.loan, rate, start,
             self.sysdtw, "Pending", (self.sysdtw/100), self.opts["capnm"],
             update="Y", glctls=(933, 933))

=== modified file 'wag/wg2010.py'
--- wag/wg2010.py	2015-02-22 09:42:02 +0000
+++ wag/wg2010.py	2015-03-19 14:59:45 +0000
@@ -76,7 +76,7 @@
             (("C",0,0,6),"ONA",20,"Description"),
             (("C",0,0,7),"IUA",1,"P","Pay (Y or N)",
                 "Y","N",self.doPay,None,None,("in", ("Y","N"))),
-            [("C",0,0,8),"ISD",9.2,"Amount","",
+            [("C",0,0,8),"ISD",13.2,"Amount","",
                 "","N",self.doAmt,None,None,None])
         but = (
             ("Edit",None,self.editData,0,("C",0,1),("C",0,2)),
@@ -185,7 +185,7 @@
             "head": head,
             "typs": [
                 ("UI", 5), ("NA", 30), ("UI", 3), ("UI", 5), ("UA", 1),
-                ("UI", 3), ("NA", 20), ("UA", 1), ("SD", 9.2), ("UI", 10)],
+                ("UI", 3), ("NA", 20), ("UA", 1), ("SD", 13.2), ("UI", 10)],
             "data": data,
             "butt": [("Delete", self.doDelete, True)]}
         state = self.df.disableButtonsTags()

=== modified file 'wag/wg2020.py'
--- wag/wg2020.py	2015-03-06 19:01:14 +0000
+++ wag/wg2020.py	2015-03-20 12:43:45 +0000
@@ -534,17 +534,6 @@
             wagtf2 = [self.opts["conum"], self.empno, self.pgnum, self.rundt,
                 "E", cod, hrs, emt, 0, tax, taxp, earnt, eglco, eglno, 0, 0]
             self.doWriteWagtf2(wagtf2)
-            if cod in self.lonacc:
-                # Get Latest Loan
-                lon = self.sql.getRec(tables="waglmf", cols=["max(wlm_loan)"],
-                    where=[("wlm_cono", "=", self.opts["conum"]),
-                    ("wlm_empno", "=", self.empno)], limit=1)[0]
-                # Write Loan Transaction
-                dat = [self.opts["conum"], self.empno, lon, "Payslip", 4,
-                    self.rundt, self.pgnum, emt, 0, 0, 0, self.curdt,
-                    "Salary Earning", "N", self.opts["capnm"], self.sysdtw, 0]
-                self.sql.insRec("wagltf", data=dat)
-                self.loan = False
 
     def doDeductions(self):
         if self.freq == "W":
@@ -858,6 +847,8 @@
             irate = lmf[self.sql.waglmf_col.index("wlm_int_per")]
             sdate = lmf[self.sql.waglmf_col.index("wlm_start_date")]
             damnt = lmf[self.sql.waglmf_col.index("wlm_ded_amt")]
+            if not damnt:
+                return  # No deduction amount
             ced = self.sql.getRec(tables="wagedc", where=[("ced_cono", "=",
                 self.opts["conum"]), ("ced_type", "=", "D"), ("ced_code", "=",
                 dcode)], limit=1)
@@ -875,11 +866,11 @@
                 upd = "N"
             else:
                 upd = "Y"
-            lint = LoanInterest(self.opts["mf"], self.opts["period"],
+            lint = LoanInterest(self.opts["mf"].dbm, self.opts["period"],
                 self.opts["conum"], self.empno, loan, irate, sdate, self.rundt,
                 "Payslip", self.curdt, self.opts["capnm"], update=upd,
                 glctls=self.slctls)
-            if not lint.bal:
+            if not lint.bal > 0:
                 continue
             if damnt > lint.bal:
                 ded = lint.bal
@@ -1187,17 +1178,16 @@
         self.opts["mf"].closeLoop()
 
     def doGenTrn(self, cono, acno, amnt, edes=None):
+        if not edes:
+            edes = "Salaries and Wages"
         batno = CCD("%03i%04i" % (self.opts["conum"], (self.curdt % 10000)),
             "Na", 7)
         refno = CCD(1, "Na", 9)
         whr = [("glt_cono", "=", cono), ("glt_acno", "=", acno),
             ("glt_curdt", "=", self.curdt), ("glt_trdt", "=", self.rundt),
             ("glt_type", "=", 4), ("glt_refno", "=", refno.work),
-            ("glt_batch", "=", batno.work)]
-        if edes:
-            whr.append(("glt_desc", "=", edes))
-        else:
-            edes = "Salaries and Wages"
+            ("glt_batch", "=", batno.work),
+            ("glt_desc", "=", edes)]
         trn = self.sql.getRec(tables="gentrn", cols=["glt_seq", "glt_tramt"],
             where=whr, limit=1)
         if not trn:

=== modified file 'wag/wg4010.py'
--- wag/wg4010.py	2014-12-30 15:37:38 +0000
+++ wag/wg4010.py	2015-03-19 15:11:11 +0000
@@ -225,12 +225,12 @@
         wcp = (
             ("wt1_date", "", 0, "Date"),
             ("wt1_page", "", 0, "Number"),
-            ("wt1_nhrs", "", 9.2, "Norm-Hrs"),
-            ("wt1_npay", "", 9.2, "Norm-Pay"),
-            ("wt1_taxbl", "", 11.2, "Tx-Pay"),
-            ("wt1_notax", "", 11.2, "Non-Tx-Pay"),
-            ("wt1_taxdd", "", 11.2, "Tx-Ded"),
-            ("wt1_nondd", "", 11.2, "Non-Tx-Ded"))
+            ("wt1_nhrs", "", 13.2, "Norm-Hrs"),
+            ("wt1_npay", "", 13.2, "Norm-Pay"),
+            ("wt1_taxbl", "", 13.2, "Tx-Pay"),
+            ("wt1_notax", "", 13.2, "Non-Tx-Pay"),
+            ("wt1_taxdd", "", 13.2, "Tx-Ded"),
+            ("wt1_nondd", "", 13.2, "Non-Tx-Ded"))
         whr = [
             ("wt1_cono", "=", self.opts["conum"]),
             ("wt1_empno", "=", self.empno),

