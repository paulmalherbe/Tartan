=== modified file '.bzrignore'
--- .bzrignore	2019-01-13 16:38:59 +0000
+++ .bzrignore	2019-04-03 15:24:59 +0000
@@ -79,6 +79,7 @@
 uty/SumatraPDF.exe
 uty/chksms.py
 uty/gzip.exe
+uty/img
 uty/sed.exe
 uty/sqldiff.exe
 uty/sqlite3.exe

=== modified file 'ass/ar6030_rne.py'
--- ass/ar6030_rne.py	2019-02-24 15:37:36 +0000
+++ ass/ar6030_rne.py	2019-02-25 13:43:30 +0000
@@ -25,8 +25,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, GetCtl, TartanDialog, Sql
-from tartanFunctions import askQuestion, copyList, showError
+from TartanClasses import GetCtl, TartanDialog, Sql
+from tartanFunctions import askQuestion, copyList
 
 class ar6030:
     def __init__(self, **opts):
@@ -65,7 +65,7 @@
             "cols": [
                 ("asg_group", "", 0, "Grp"),
                 ("asg_desc", "", 0, "Description")],
-            "whera": [["T", "asg_cono", 1]],
+            "whera": [["T", "asg_cono", 0]],
             "order": "asg_desc"}
         asm = {
             "stype": "R",
@@ -74,57 +74,51 @@
                 ("asm_code", "", 0, "Code"),
                 ("asm_desc", "", 0, "Description", "Y")],
             "whera": [
-                ("T", "asm_cono", 1),
-                ("T", "asm_group", 3)],
+                ("T", "asm_cono", 0),
+                ("T", "asm_group", 2)],
             "order": "asm_group, asm_code"}
         fld = (
-            (("T",0,0,0),"ID1",10,"Transfer Date","",
-                "","Y",self.doDate,None,None,("efld",)),
-            (("T",0,1,0),"I@asm_cono",3,"From Company","",
-                "","N",self.doCono,coy,None,("notzero",)),
+            (("T",0,0,0),"I@asm_cono",3,"From Company","",
+                "","Y",self.doCono,coy,None,("notzero",)),
+            (("T",0,0,0),"ONA",30,""),
+            (("T",0,1,0),"I@asm_group",3,"","",
+                "","N",self.doGroup,asg,None,("notblank",)),
             (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"I@asm_group",3,"","",
-                "","N",self.doGroup,asg,None,("notblank",)),
+            (("T",0,2,0),"I@asm_code",7,"Asset Code","",
+                "","N",self.doCode,asm,None,("notblank",)),
             (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),"I@asm_code",7,"Product Code","",
-                "","N",self.doCode,asm,None,("notblank",)),
+            (("T",0,3,0),"IUI",3,"To Company","",
+                "","N",self.doCono,coy,None,("notzero",)),
             (("T",0,3,0),"ONA",30,""),
-            (("T",0,4,0),"IUI",3,"To Company","",
-                "","N",self.doCono,coy,None,("notzero",)),
-            (("T",0,4,0),"ONA",30,""))
+            (("T",0,4,0),"I@asm_code",7,"Asset Code","",
+                "","N",self.doCode,None,None,("notblank",)))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt)
 
-    def doDate(self, frt, pag, r, c, p, i, w):
-        if w < self.ynd[0]:
-            return "Invalid Date, Before Financial Start Date"
-        if w > self.ynd[1]:
-            return "Invalid Date, After Financial End Date"
-        self.date = w
-        self.curdt = w / 100
-
     def doCono(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="ctlmst", cols=["ctm_name"],
             where=[("ctm_cono", "=", w)], limit=1)
         if not acc:
             return "Invalid Company"
-        if p == 1:
-            assctl = self.gc.getCtl("assctl", w)
-            if not assctl:
-                return "Missing Control Record"
-            if self.curdt <= assctl["cta_lastp"]:
-                ok = askQuestion(self.opts["mf"].window, "Warning",
-                    """The Transfer Date is Earlier than the Last Transaction..
-
-Transfer Transactions, After Date, to New Company?""", default="yes")
-                if ok == "no":
-                    return "ff1"
+        if p == 0:
             self.cono = w
+            return
         else:
             self.toco = w
-        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+            chk = self.sql.getRec(tables="assmst", where=[("asm_cono",
+                "=", self.toco), ("asm_group", "=", self.group), ("asm_code",
+                "=", self.code)], limit=1)
+            if chk:
+                ok = askQuestion(self.opts["mf"].body, "Code Error",
+                    "Code Already Exists, Do You Want to Enter a New Code?",
+                    default="no")
+                if ok == "no":
+                    return "ff5"
+            else:
+                self.ncod = self.code
+                return "sk1"
 
     def doGroup(self, frt, pag, r, c, p, i, w):
         self.asg = self.sql.getRec(tables="assgrp", where=[("asg_cono",
@@ -136,103 +130,67 @@
         self.df.loadEntry(frt, pag, p+1, data=self.gdesc)
 
     def doCode(self, frt, pag, r, c, p, i, w):
-        self.code = w
-        self.asm = self.sql.getRec(tables="assmst", where=[("asm_cono",
-            "=", self.cono), ("asm_group", "=", self.group), ("asm_code",
-            "=", self.code)], limit=1)
-        self.cdesc = self.asm[self.sql.assmst_col.index("asm_desc")]
-        self.df.loadEntry(frt, pag, p+1, data=self.cdesc)
-        self.where = [
-            ("ast_cono", "=", self.cono),
-            ("ast_group", "=", self.group),
-            ("ast_code", "=", self.code)]
-        whr = copyList(self.where)
-        whr.append(("ast_date", "<=", self.date))
-        self.tots = self.sql.getRec(tables="asstrn", cols=["ast_mtyp",
-            "sum(ast_amt1)", "sum(ast_amt2)", "sum(ast_vat)"],
-            where=whr, group="ast_mtyp")
-        self.bal = 0
-        self.rec = 0
-        self.mov = {}
-        for tot in self.tots:
-            self.mov[tot[0]] = tot[1:]
-            self.bal = float(ASD(self.bal) + ASD(tot[1]))
-            self.rec = float(ASD(self.rec) + ASD(tot[2]))
-        if self.bal <= 0:
-            bal = CCD(self.bal, "SD", 13.2).disp
-            showError(self.opts["mf"].window, "Error",
-                "The Opening Balance is Zero or Minus (%s)" % bal)
-            return "rf"
+        if p == 4:
+            self.asm = self.sql.getRec(tables="assmst", where=[("asm_cono",
+                "=", self.cono), ("asm_group", "=", self.group), ("asm_code",
+                "=", w)], limit=1)
+            if not self.asm:
+                return "Invalid Code"
+            self.code = w
+            self.cdesc = self.asm[self.sql.assmst_col.index("asm_desc")]
+            self.df.loadEntry(frt, pag, p+1, data=self.cdesc)
+        else:
+            chk = self.sql.getRec(tables="assmst", where=[("asm_cono",
+                "=", self.toco), ("asm_group", "=", self.group), ("asm_code",
+                "=", w)], limit=1)
+            if chk:
+                return "Code Already Exists"
+            self.ncod = w
 
     def doEnd(self):
         grp = self.sql.getRec(tables="assgrp", where=[("asg_cono", "=",
             self.toco), ("asg_group", "=", self.group)], limit=1)
-        mst = self.sql.getRec(tables="assmst", where=[("asm_cono", "=",
-            self.toco), ("asm_group", "=", self.group), ("asm_code", "=",
-            self.code)], limit=1)
-        if mst:
-            showError(self.opts["mf"].window, "Error",
-                "This Code Already Exists in Receiving Company")
-        else:
-            if not grp:
-                data = copyList(self.asg)
-                data[0] = self.toco
-                self.sql.insRec("assgrp", data=data)
-            data = copyList(self.asm)
+        if not grp:
+            data = copyList(self.asg)
             data[0] = self.toco
-            # Depreciation Code
-            depcod = data[self.sql.assmst_col.index("asm_depcod")]
-            old = self.sql.getRec(tables="assdep", where=[("asd_cono",
-                "=", self.cono), ("asd_code", "=", depcod)], limit=1)
-            news = self.sql.getRec(tables="assdep", where=[("asd_cono",
-                "=", self.toco)])
-            find = False
-            for new in news:
-                if new[3:] == old[3:]:
-                    data[self.sql.assmst_col.index("asm_depcod")] = new[1]
-                    find = True
-                    break
-            if not find:
-                cod = self.sql.getRec(tables="assdep", cols=["max(asd_code)"],
-                    where=[("asd_cono", "=", self.toco)], limit=1)
-                try:
-                    cod = str(int(cod[0]) + 1)
-                except:
-                    cod = "A%s" % cod[0].strip()[:2]
-                old[0] = self.toco
-                old[1] = cod
-                self.sql.insRec("assdep", data=old)
-                data[self.sql.assmst_col.index("asm_depcod")] = cod
-            # Assmst in receiving company
-            self.sql.insRec("assmst", data=data)
-            # Asstrn in receiving company
-            mov = list(self.mov.keys())
-            mov.sort()
-            for num, typ in enumerate(mov):
-                data = [self.toco, self.group, self.code, 3,
-                    "TRF-%03d-%s" % (self.cono, num), "ASS-TRF", self.date,
-                    typ, self.mov[typ][0], self.mov[typ][1], 0, self.curdt,
-                    self.cdesc, "N", "", self.opts["capnm"], self.capdt, 0]
-                self.sql.insRec("asstrn", data=data)
-            whr = copyList(self.where)
-            whr.append(("ast_date", ">=", self.date))
-            # Asstrn after transfer date
-            dels = self.sql.getRec(tables="asstrn", where=whr, order="ast_seq")
-            for d in dels:
-                data = copyList(d)
-                data[0] = self.toco
-                data[17] = 0
-                self.sql.insRec("asstrn", data=data)
-                self.sql.delRec("asstrn", data=d)
-            bal = float(ASD(0) - ASD(self.bal))
-            rec = float(ASD(0) - ASD(self.rec))
-            # Asstrn in original company
-            data = [self.cono, self.group, self.code, 3,
-                "TRFTO-%03d" % self.toco, "ASS-TRF", self.date,
-                5, bal, rec, 0, self.curdt, self.cdesc, "N", "",
-                self.opts["capnm"], self.capdt, 0]
-            self.sql.insRec("asstrn", data=data)
-            self.opts["mf"].dbm.commitDbase(ask=True)
+            self.sql.insRec("assgrp", data=data)
+        data = copyList(self.asm)
+        data[0] = self.toco
+        # Depreciation Code
+        dcod = data[self.sql.assmst_col.index("asm_depcod")]
+        old = self.sql.getRec(tables="assdep", where=[("asd_cono",
+            "=", self.cono), ("asd_code", "=", dcod)], limit=1)
+        news = self.sql.getRec(tables="assdep", where=[("asd_cono",
+            "=", self.toco)])
+        find = False
+        for new in news:
+            if new[3:] == old[3:]:
+                data[self.sql.assmst_col.index("asm_depcod")] = new[1]
+                find = True
+                break
+        if not find:
+            cod = self.sql.getRec(tables="assdep", cols=["max(asd_code)"],
+                where=[("asd_cono", "=", self.toco)], limit=1)
+            try:
+                dcod = str(int(cod[0]) + 1)
+            except:
+                dcod = "A%s" % cod[0].strip()[:2]
+            old[0] = self.toco
+            old[1] = dcod
+            self.sql.insRec("assdep", data=old)
+        # Change assmst and change depcod
+        col = ["asm_cono", "asm_code", "asm_depcod"]
+        dat = [self.toco, self.ncod, dcod]
+        self.sql.updRec("assmst", cols=col, data=dat, where=[("asm_cono",
+            "=", self.cono), ("asm_group", "=", self.group), ("asm_code",
+            "=", self.code)])
+        # Change asstrn
+        col = ["ast_cono", "ast_code"]
+        dat = [self.toco, self.ncod]
+        self.sql.updRec("asstrn", cols=col, data=dat, where=[("ast_cono",
+            "=", self.cono), ("ast_group", "=", self.group), ("ast_code",
+            "=", self.code)])
+        self.opts["mf"].dbm.commitDbase(ask=True)
         self.df.focusField("T", 0, 1, clr=True)
 
     def doExit(self):

=== modified file 'crs/cr3020.py'
--- crs/cr3020.py	2019-01-13 16:38:59 +0000
+++ crs/cr3020.py	2019-04-04 09:49:34 +0000
@@ -110,8 +110,14 @@
                 "Y","Y",self.doTots,None,None,None)]
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPtyp(self, frt, pag, r, c, p, i, w):
         self.ptyp = w
@@ -169,6 +175,8 @@
 
     def doTots(self, frt, pag, r, c, p, i, w):
         self.totsonly = w
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            return
         if self.totsonly == "Y":
             self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
             self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
@@ -232,8 +240,6 @@
         else:
             self.head = "%03u %-30s %99s %10s" % (self.opts["conum"],
                 self.opts["conam"], self.sysdttm, __name__)
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         self.bqty = 0
         self.bdrs = 0
@@ -291,10 +297,13 @@
             self.batchTotal()
             self.typeTotal()
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         acno = CCD(data[0], "NA", 7)

=== modified file 'crs/cr3030.py'
--- crs/cr3030.py	2019-01-13 16:38:59 +0000
+++ crs/cr3030.py	2019-04-04 09:49:42 +0000
@@ -73,8 +73,14 @@
                 0,"N",self.doLeeway,None,None, ("between",0,30)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPerTyp(self, frt, pag, r, c, p, i, w):
         self.ptyp = w
@@ -137,8 +143,6 @@
         p = ProgressBar(self.opts["mf"].body, mxs=len(mst), esc=True)
         self.head = ("%03u %-30s %14s %35s %14s %10s" % (self.opts["conum"],
             self.opts["conam"], "", self.sysdttm, "", __name__))
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         self.ctots = [0,0,0,0,0]
         self.gtots = [0,0,0,0,0]
@@ -202,10 +206,13 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, acno, name, ptyp):
         self.fpdf.add_page()

=== modified file 'crs/cr3040.py'
--- crs/cr3040.py	2019-01-13 16:38:59 +0000
+++ crs/cr3040.py	2019-04-03 07:43:48 +0000
@@ -65,8 +65,14 @@
                 "N","Y",self.doNewPage,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doRepPer(self, frt, pag, r, c, p, i, w):
         if w:
@@ -144,12 +150,13 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, acno, name):
         self.fpdf.add_page()

=== modified file 'crs/cr3050.py'
--- crs/cr3050.py	2019-01-13 16:38:59 +0000
+++ crs/cr3050.py	2019-04-03 10:29:14 +0000
@@ -91,8 +91,14 @@
                 "Y","N",self.doZero,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y", "V")
+            mail = ("Y", "N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doBase(self, frt, pag, r, c, p, i, w):
         self.base = w
@@ -104,8 +110,9 @@
     def doTots(self, frt, pag, r, c, p, i, w):
         self.totsonly = w
         if self.totsonly == "Y":
-            self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
-            self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
+                self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
             self.acc1 = ""
             self.fm = "First"
             self.acc2 = "zzzzzzz"
@@ -119,6 +126,8 @@
             self.zero = "Y"
             self.df.loadEntry(frt, pag, p+5, data=self.zero)
             return "sk5"
+        elif "args" in self.opts and "noprint" in self.opts["args"]:
+            pass
         else:
             self.df.setWidget(self.df.topEntry[0][8][3][0], state="show")
             self.df.setWidget(self.df.topEntry[0][8][4][0], state="show")
@@ -219,8 +228,6 @@
             (self.opts["period"],"%s%s")
         pad = chrs - len(self.head2) + 4 - 11  # %s%s and ' Page     1'
         self.head2 = self.head2 % (" " * pad, " Page %5s")
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head2)
         self.pgnum = 0
         self.pglin = 999
@@ -246,10 +253,13 @@
             self.pageHeading()
         if self.fpdf.page:
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" in self.opts and "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         acc = CCD(data[0], "NA", 7)

=== modified file 'crs/cr3080.py'
--- crs/cr3080.py	2019-01-13 16:38:59 +0000
+++ crs/cr3080.py	2019-03-14 07:37:29 +0000
@@ -133,8 +133,8 @@
         if self.whole in ("Y", "S"):
             self.sacc = ""
             self.eacc = ""
-            self.df.loadEntry("T", 0, 1, data=self.sacc)
-            self.df.loadEntry("T", 0, 2, data=self.eacc)
+            self.df.loadEntry("T", 0, p+1, data=self.sacc)
+            self.df.loadEntry("T", 0, p+2, data=self.eacc)
             return "sk2"
 
     def doAcc(self, frt, pag, r, c, p, i, w):

=== modified file 'doc/BKSMST.rst'
--- doc/BKSMST.rst	2019-02-24 15:37:36 +0000
+++ doc/BKSMST.rst	2019-04-07 13:32:37 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - Reference Manual
 ==================================
 
-:Version:   5.4.5
+:Version:   5.4.6
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/BWL.rst'
--- doc/BWL.rst	2019-01-13 16:38:59 +0000
+++ doc/BWL.rst	2019-03-25 07:45:56 +0000
@@ -83,12 +83,11 @@
 
 The following *Buttons* are available:
 
-+ **Bounce**** - Use this button to enter bounce games.
-+ **Teams**** - Use this button to enter arranged teams.
++ **Bounce** - Use this button to enter bounce games.
++ **Teams** - Use this button to enter arranged teams.
 + **Entered** - Use this button to display all entered players.
 + **Modify** - Use this button to change the player's position/ratings.
 + **Draw** - Use this button to make the draw once all tabs have been entered. You will have to enter the following:
-
     + **Draw Type** - The type of draw i.e. Random or Strength v Strength.
     + **Apply Percentages** - This is only available if the basis of the draw is Combined. Select whether to apply percentages to position changes e.g. A player moving up in position would lose 10% of their rating and a player moving down in position would gain 10% of their rating.
     + **Apply History** - Whether or not to take previous draws into consideration when making the current draw.
@@ -97,7 +96,6 @@
     + **Greens** - The greens to be used. This is in the format A,B or A,B234 showing green code and rinks. If the rinks are not entered they will default to 6. If 7 rinks are available this must be entered as A1234567,B etc. If there are more rinks available than needed, end rinks will be removed.
 + **Edit Draw** - Use this button to manually change a draw i.e. move players between teams.
 + **Print** - Use this button to print a draw.
-
     + **Print Cards** - Select whether to print score cards.
         + **Heading** - Enter the heading to be printed on the score cards.
         + **Number of Ends** - Enter the number of ends being played.

=== modified file 'doc/BWLMST.rst'
--- doc/BWLMST.rst	2019-02-24 15:37:36 +0000
+++ doc/BWLMST.rst	2019-04-07 13:32:37 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - Reference Manual
 ==================================
 
-:Version:   5.4.5
+:Version:   5.4.6
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/CSHMST.rst'
--- doc/CSHMST.rst	2019-02-24 15:37:36 +0000
+++ doc/CSHMST.rst	2019-04-07 13:32:37 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - Reference Manual
 ==================================
 
-:Version:   5.4.5
+:Version:   5.4.6
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2019-02-24 15:37:36 +0000
+++ doc/Downloads.rst	2019-04-07 13:32:37 +0000
@@ -7,37 +7,37 @@
 .. |linux| image:: /images/linux.png
    :width: 30px
    :height: 30px
-.. _Changes: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation/Changes
+.. _Changes: http://www.tartan.co.za/cgi-bin/simple_web.py/Changes
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.4.5 and was released on the 24th February, 2019.
+The latest version of Tartan is 5.4.6 and was released on the 7th April, 2019.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
-.. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.4.5.tgz
+.. _Manual: http://www.tartan.co.za/cgi-bin/simple_web.py/Manual
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.4.6.tgz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tgz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tgz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tgz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.4.5.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.4.6.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bksclb-5-lnx: ftp://tartan.co.za/Bksclb_5.4.5.tgz
-.. _Bksclb-5-win: ftp://tartan.co.za/Bksclb_5.4.5.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.4.5.tgz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.4.5.exe
-.. _Cshana-5-lnx: ftp://tartan.co.za/Cshana_5.4.5.tgz
-.. _Cshana-5-win: ftp://tartan.co.za/Cshana_5.4.5.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.4.5.tgz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.4.5.exe
+.. _Bksclb-5-lnx: ftp://tartan.co.za/Bksclb_5.4.6.tgz
+.. _Bksclb-5-win: ftp://tartan.co.za/Bksclb_5.4.6.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.4.6.tgz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.4.6.exe
+.. _Cshana-5-lnx: ftp://tartan.co.za/Cshana_5.4.6.tgz
+.. _Cshana-5-win: ftp://tartan.co.za/Cshana_5.4.6.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.4.6.tgz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.4.6.exe
 
 |linux| Linux
 =============
 New Installation
 ----------------
-Download the latest version of Tartan, Tartan-5-lnx_, and then follow the installation instructions in the Documentation_.
+Download the latest version of Tartan, Tartan-5-lnx_, and then follow the installation instructions in the Manual_.
 
 Upgrade Existing Installation
 -----------------------------
@@ -91,7 +91,7 @@
 
 New Installation
 ----------------
-Download the latest version of Tartan, Tartan-5-win_, and then follow the installation instructions in the Documentation_.
+Download the latest version of Tartan, Tartan-5-win_, and then follow the installation instructions in the Manual_.
 
 Upgrade Existing Installation
 -----------------------------

=== modified file 'doc/GEN.rst'
--- doc/GEN.rst	2017-08-24 07:49:34 +0000
+++ doc/GEN.rst	2019-04-01 13:11:50 +0000
@@ -524,7 +524,12 @@
 
 + **Ending Period** - The last period, in the financial year, to take into account.
 + **Stream Number** - To print the reports as enumerated in a stream record as created using `Stream Records (GL)`_.
-+ **Report Type** - Select the relevant report type.
++ **Report Type** - Select the relevant report type as follows:
+    + **Short** - Last Year, Description, Actual, Budget, Variance
+    + **History** - Description, Last 3 Years, Actual, Budget, Variance
+    + **Long** - Acc-Num, Description, Current Month, Year-to-Date
+    + **Month** - Acc-Num, Description, Open-Bal, Months x 12, Close-Bal
+    + **Custom** - Customised Report
 + **Consolidate Companies** - Select whether or not to print a consolidated report. This is only applicable in a multi company installation.
 + **Report Number** - The relevant report number as created using `Report Generator (GL)`_.
 + **General Report** - Select whether or not the report is a general report.

=== modified file 'doc/MST.rst'
--- doc/MST.rst	2019-02-24 15:37:36 +0000
+++ doc/MST.rst	2019-04-07 13:32:37 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - Reference Manual
 ==================================
 
-:Version:   5.4.5
+:Version:   5.4.6
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -48,6 +48,10 @@
 .. _Firebird: http://www.firebirdsql.org
 .. _Pysqlite: http://code.google.com/p/pysqlite
 
+.. raw:: pdf
+
+   PageBreak
+
 Installation Procedure
 ----------------------
 Linux and Source
@@ -120,26 +124,12 @@
 
 Windows Binary
 --------------
-.. NOTE::
-  Users must first perform the following steps:
-
-    1) Right click on the Tartan shortcut icon.
-    2) Select `Properties` on the menu. A dialogue box will appear on the screen.
-    3) Click the `Advanced` button under the Shortcut tab in the dialogue box.
-    4) Check the `Run as administrator` box.
-    5) Click the `OK` button (or press Enter on your keyboard if the button is highlighted by default).
-    6) Finish by clicking `Apply` and then `OK`. Your preferences have been saved. Next time you open the shortcut to the application you performed the task for your computer will no longer require administrative permission.
-
 Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `C:\\Tartan\\prg` directory and double clicking on the `ms0000[.exe]` file.
 
 Both
 ----
 The first time you run Tartan you will automatically be taken to `Preferences`_ where you will have to enter various parameters relating to your installation. After saving the preferences and restarting Tartan you will be prompted to create the database. Once the database has been created you will have to create the System record as per `System Record Maintenance`_ as well as a Company record as per `Company Records Maintenance`_.
 
-.. raw:: pdf
-
-   PageBreak
-
 Status Line
 -----------
 .. NOTE::
@@ -201,6 +191,10 @@
 + **Automatic** - This will automatically allocate the amount against outstanding transactions, starting from the oldest transaction, until either the amount has been fully allocated or there are no more outstanding transactions in which case the balance will remain as unallocated.
 + **Current** - This will leave the full transaction as unallocated.
 
+.. raw:: pdf
+
+   PageBreak
+
 Printer Selection
 -----------------
 Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record Maintenance`_ record.
@@ -261,10 +255,6 @@
     + **Password** - The password. If the password is left blank it is the same as denying the selection i.e. The user will not be able to select the module(s).
     + **Check Password** - If the password is not blank then enter the password again for verification
 
-.. raw:: pdf
-
-   PageBreak
-
 **Examples**
 
 .. csv-table::
@@ -299,6 +289,10 @@
 ...............
 Select this routine to create a backup of the current database. These backups will reside in the *Backup Path* directory as created using the `Preferences`_ routine. Each backup will further reside in a sub directory named after the name of the database and a further sub directory named `arch`.
 
+.. raw:: pdf
+
+   PageBreak
+
 Restore Database
 ................
 Select this routine to restore a previous backup.
@@ -385,6 +379,10 @@
 ....
 Select this to exit Tartan.
 
+.. raw:: pdf
+
+   PageBreak
+
 Control
 -------
 System Record Maintenance

=== modified file 'doc/SECMST.rst'
--- doc/SECMST.rst	2019-02-24 15:37:36 +0000
+++ doc/SECMST.rst	2019-04-07 13:32:37 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - Reference Manual
 ==================================
 
-:Version:   5.4.5
+:Version:   5.4.6
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/UTY.rst'
--- doc/UTY.rst	2017-08-24 07:49:34 +0000
+++ doc/UTY.rst	2019-04-06 10:02:58 +0000
@@ -118,6 +118,19 @@
 
     PageBreak
 
+Report Stream
+.............
+Use this routine to print or mail various selected reports.
+
++ **Output** - Select whether to E-Mail or print the reports.
++ **Printer name** - Select the printer on which to print the reports.
++ **From Address** - The mail address for replies.
++ **To   Address** - The mail address to send the reports to.
+
+A list of available reports will be displayed. Select the reports to generate and then click on *Accept*.
+
+Each report dialog will be displayed and at the end of the last report you will be prompted whether to actually *Print" or *Mail* the reports.
+
 Template Manager
 ................
 Use this routine to create, edit or delete templates.

=== modified file 'drs/dr3020.py'
--- drs/dr3020.py	2019-01-13 16:38:59 +0000
+++ drs/dr3020.py	2019-04-04 09:49:47 +0000
@@ -111,8 +111,14 @@
                 "Y","Y",self.doTots,None,None,None)]
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPtyp(self, frt, pag, r, c, p, i, w):
         self.ptyp = w
@@ -170,6 +176,8 @@
 
     def doTots(self, frt, pag, r, c, p, i, w):
         self.totsonly = w
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            return
         if self.totsonly == "Y":
             self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
             self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
@@ -235,8 +243,6 @@
         else:
             self.head = ("%03u %-30s %91s %10s" % (self.opts["conum"],
                 self.opts["conam"], self.sysdttm, __name__))
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         self.bqty = 0
         self.bdrs = 0
@@ -295,10 +301,13 @@
             self.batchTotal()
             self.typeTotal()
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         chain = CCD(data[0], "UI", 3)

=== modified file 'drs/dr3030.py'
--- drs/dr3030.py	2019-01-13 16:38:59 +0000
+++ drs/dr3030.py	2019-04-04 09:49:51 +0000
@@ -61,8 +61,14 @@
                 self.sysdtw,"Y",self.doPayDate,None,None,("efld",)),)
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPayDate(self, frt, pag, r, c, p, i, w):
         if w == 0:
@@ -134,12 +140,13 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3040.py'
--- drs/dr3040.py	2019-01-13 16:38:59 +0000
+++ drs/dr3040.py	2019-04-03 10:22:45 +0000
@@ -65,8 +65,14 @@
                 "N","Y",self.doNewPage,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doRepPer(self, frt, pag, r, c, p, i, w):
         self.curdt = w
@@ -148,12 +154,13 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3050.py'
--- drs/dr3050.py	2019-01-13 16:38:59 +0000
+++ drs/dr3050.py	2019-04-03 10:29:03 +0000
@@ -95,8 +95,14 @@
                 "Y","N",self.doZero,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doBase(self, frt, pag, r, c, p, i, w):
         self.base = w
@@ -108,8 +114,9 @@
     def doTots(self, frt, pag, r, c, p, i, w):
         self.totsonly = w
         if self.totsonly == "Y":
-            self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
-            self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                self.df.setWidget(self.df.topEntry[0][8][3][0], state="hide")
+                self.df.setWidget(self.df.topEntry[0][8][4][0], state="hide")
             self.drsact = "All"
             self.df.loadEntry(frt, pag, p+1, data=self.drsact)
             self.drstyp = "All"
@@ -121,6 +128,8 @@
             self.zero = "Y"
             self.df.loadEntry(frt, pag, p+5, data=self.zero)
             return "sk5"
+        elif "args" in self.opts and "noprint" in self.opts["args"]:
+            pass
         else:
             self.df.setWidget(self.df.topEntry[0][8][3][0], state="show")
             self.df.setWidget(self.df.topEntry[0][8][4][0], state="show")
@@ -259,10 +268,11 @@
             self.pageHeading()
         if self.fpdf.page:
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         chn = CCD(data[0], "UI", 3)

=== modified file 'drs/dr3080.py'
--- drs/dr3080.py	2019-01-13 16:38:59 +0000
+++ drs/dr3080.py	2019-03-14 09:34:24 +0000
@@ -430,6 +430,7 @@
     def doBody(self, dtc, drt, tdc):
         page = 0
         count = 0
+        rbal = 0
         text = tdc.index("tpd_text")
         for trans in drt:
             if not count:
@@ -451,8 +452,12 @@
                 if cod == "type_code":
                     ttyp = trans[dtc.index(c)]
                     self.form.newdic[d][text] = drtrtp[ttyp - 1][0]
+                elif self.sttyp == "O" and cod == "running_balance":
+                    self.form.newdic[d][text] = rbal
                 else:
                     self.form.newdic[d][text] = trans[dtc.index(c)]
+                    if self.sttyp == "O" and cod == "drt_tramt":
+                        rbal = float(ASD(rbal) + ASD(trans[dtc.index(c)]))
                 self.form.doDrawDetail(self.form.newdic[d])
             count += 1
         for x in xrange(count, self.form.maxlines):

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2019-02-24 15:37:36 +0000
+++ gen/gl2030.py	2019-04-04 10:23:38 +0000
@@ -1387,15 +1387,15 @@
                 self.rtlctl.append(r[0])
 
     def doAccNum(self, frt, pag, r, c, p, i, w):
-        if not w and self.lvl >= 3:
-            ok = askQuestion(self.opts["mf"].body, "Zero Number",
-                "Do you wish to Create a New Account?",
-                default="no")
-            if ok == "yes":
-                w = callModule(self.opts["mf"], self.df, "gl1010",
-                    coy=[self.allcoy, self.allnam], user=self.opts["capnm"],
-                    args=True, ret="acno")
-                self.df.loadEntry(frt, pag, p, data=w)
+        #if not w and self.lvl >= 3:
+        #    ok = askQuestion(self.opts["mf"].body, "Zero Number",
+        #        "Do you wish to Create a New Account?",
+        #        default="no")
+        #    if ok == "yes":
+        #        w = callModule(self.opts["mf"], self.df, "gl1010",
+        #            coy=[self.allcoy, self.allnam], user=self.opts["capnm"],
+        #            args=True, ret="acno")
+        #        self.df.loadEntry(frt, pag, p, data=w)
         if not w:
             return "Invalid Account Number"
         if self.allcoy == self.opts["conum"] and w == self.bh.acc:
@@ -1693,7 +1693,7 @@
             else:
                 self.conacc = self.bh.acc
                 if self.dorec:
-                    self.rflag = self.bh.curdt
+                    self.rflag = self.curdt
                 elif not self.trnamt:
                     self.rflag = self.curdt
                 else:
@@ -1710,7 +1710,7 @@
             else:
                 self.conacc = self.bh.acc
                 if self.dorec:
-                    self.rflag = self.bh.curdt
+                    self.rflag = self.curdt
                 elif not self.trnamt:
                     self.rflag = self.curdt
                 else:
@@ -1772,8 +1772,8 @@
                 where=[("cti_cono", "=", self.allcoy), ("cti_inco", "=",
                 self.opts["conum"])], limit=1)[0]
             val = float(ASD(0) - ASD(amt) - ASD(vat))
-            data = (self.allcoy, acc, self.curdt, self.trndte,
-                rtn, self.trnref, self.bh.batno, val, 0.00, self.alldet,
+            data = (self.allcoy, acc, self.curdt, self.trndte, rtn,
+                self.trnref, self.bh.batno, val, 0.00, self.alldet,
                 self.vatcod, "", 0, self.opts["capnm"], self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
         if self.vatcod:

=== modified file 'gen/gl2040.py'
--- gen/gl2040.py	2019-01-13 16:38:59 +0000
+++ gen/gl2040.py	2019-03-27 07:59:07 +0000
@@ -929,15 +929,15 @@
             self.batind = ""
 
     def doAccNum(self, frt, pag, r, c, p, i, w):
-        if not w and self.lvl >= 3:
-            ok = askQuestion(self.opts["mf"].body, "Zero Number",
-                "Do you wish to create a New Account?",
-                default="no")
-            if ok == "yes":
-                w = callModule(self.opts["mf"], self.df, "gl1010",
-                    coy=[self.allcoy, self.allnam], user=self.opts["capnm"],
-                    args=True, ret="acno")
-                self.df.loadEntry(frt, pag, p, data=w)
+        #if not w and self.lvl >= 3:
+        #    ok = askQuestion(self.opts["mf"].body, "Zero Number",
+        #        "Do you wish to create a New Account?",
+        #        default="no")
+        #    if ok == "yes":
+        #        w = callModule(self.opts["mf"], self.df, "gl1010",
+        #            coy=[self.allcoy, self.allnam], user=self.opts["capnm"],
+        #            args=True, ret="acno")
+        #        self.df.loadEntry(frt, pag, p, data=w)
         if not w:
             return "Invalid Account Number"
         self.others = False

=== modified file 'gen/gl3020.py'
--- gen/gl3020.py	2019-01-13 16:38:59 +0000
+++ gen/gl3020.py	2019-04-04 09:49:55 +0000
@@ -116,8 +116,14 @@
                     "N","N",self.doCoy,None,None,None))
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPtyp(self, frt, pag, r, c, p, i, w):
         self.ptyp = w
@@ -173,6 +179,8 @@
 
     def doTots(self, frt, pag, r, c, p, i, w):
         self.totsonly = w
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            return
         if self.totsonly == "Y":
             if self.multi == "Y":
                 self.df.setWidget(self.df.topEntry[0][9][3][0], state="hide")
@@ -331,8 +339,6 @@
         else:
             self.head = "%03i %-30s %97s %10s" % (self.opts["conum"],
                 self.opts["conam"], self.sysdttm, __name__)
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         self.bqty = 0
         self.bdrs = 0
@@ -391,10 +397,13 @@
             self.batchTotal()
             self.typeTotal()
             self.grandTotal()
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    repeml=self.df.repeml)
 
     def getValues(self, data):
         cono = CCD(data[0], "UI", 3)

=== modified file 'gen/gl3030.py'
--- gen/gl3030.py	2019-01-13 16:38:59 +0000
+++ gen/gl3030.py	2019-04-04 09:50:00 +0000
@@ -32,20 +32,9 @@
 class gl3030:
     def __init__(self, **opts):
         self.opts = opts
-        if "auto" not in opts:
-            self.auto = None
         if self.setVariables():
-            if self.auto:
-                self.whole = "Y"
-                self.sacno = 0
-                self.eacno = 0
-                self.sdate = CCD(self.s_per, "D2", 7)
-                self.edate = CCD(self.e_per, "D2", 7)
-                self.pages = "N"
-                self.doEnd()
-            else:
-                self.mainProcess()
-                self.opts["mf"].startLoop()
+            self.mainProcess()
+            self.opts["mf"].startLoop()
 
     def setVariables(self):
         self.sql = Sql(self.opts["mf"].dbm, ["genbal", "genmst", "gentrn"],
@@ -94,8 +83,14 @@
                 "N","Y",self.doPages,None,None,None))
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doWhole(self, frt, pag, r, c, p, i, w):
         self.whole = w
@@ -150,8 +145,7 @@
         self.pages = w
 
     def doEnd(self):
-        if not self.auto:
-            self.df.closeProcess()
+        self.df.closeProcess()
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "genmst",
                 ("glm_acno", "glm_desc"), where=[("glm_cono", "=",
@@ -165,7 +159,7 @@
                 self.opts["conum"])], order="glm_acno")
         if not recs:
             showError(self.opts["mf"].body, "Error", "No Accounts Selected")
-        elif not self.auto and self.df.repprt[2] == "export":
+        elif self.df.repprt[2] == "export":
             self.exportReport(recs)
         else:
             self.printReport(recs)
@@ -218,16 +212,14 @@
     def printReport(self, recs):
         self.pgnum = 0
         self.pglin = 999
-        if not self.auto:
-            p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
+        p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
         self.head = ("%03u %-30s %59s %10s" % (self.opts["conum"],
             self.opts["conam"], self.sysdttm, __name__))
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         for seq, dat in enumerate(recs):
-            if not self.auto:
-                p.displayProgress(seq)
-                if p.quit:
-                    break
+            p.displayProgress(seq)
+            if p.quit:
+                break
             self.acno, self.desc, acctot = self.getAccValues(dat)
             trn = self.sql.getRec(tables="gentrn", where=[("glt_cono", "=",
                 dat[0]), ("glt_acno", "=", dat[1]), ("glt_curdt", ">=",
@@ -263,18 +255,16 @@
                 self.pglin += 1
             if self.pages == "Y" and (acctot or trn):
                 self.pglin = 999
-        if not self.auto:
-            p.closeProgress()
-            if p.quit:
-                return
-        if self.fpdf.page:
+        p.closeProgress()
+        if p.quit or not self.fpdf.page:
+            return
+        if "args" not in self.opts or "noprint" not in self.opts["args"]:
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            if not self.auto:
-                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                    repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getAccValues(self, data):
         dic = self.sql.genmst_dic
@@ -356,8 +346,7 @@
             self.pglin += 5
 
     def doExit(self):
-        if not self.auto:
-            self.df.closeProcess()
+        self.df.closeProcess()
         self.opts["mf"].closeLoop()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'gen/gl3040.py'
--- gen/gl3040.py	2019-01-13 16:38:59 +0000
+++ gen/gl3040.py	2019-04-03 15:19:40 +0000
@@ -32,7 +32,7 @@
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            if "args" in self.opts:
+            if "args" in self.opts and "noprint" not in self.opts["args"]:
                 self.opebal = "N"
                 self.incope = "Y"
                 self.start = self.s_per
@@ -79,8 +79,14 @@
                 "Y","Y",self.doZerBal,None,None,None))
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doOpeBal1(self, frt, pag, r, c, p, i, w):
         self.opebal = w
@@ -113,7 +119,7 @@
         self.zerbal = w
 
     def doEnd(self):
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.repprt = self.df.repprt
             self.repeml = self.df.repeml
             self.df.closeProcess()
@@ -126,7 +132,7 @@
             self.exportReport(recs)
         else:
             self.printReport(recs)
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.closeProcess()
 
     def exportReport(self, recs):
@@ -186,7 +192,7 @@
         pad = chrs - len(self.head2) + 4 - 11  # %s%s and ' Page     1'
         self.head2 = self.head2 % (" " * pad, " Page %5s")
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.fpdf = MyFpdf(name=__name__, head=self.head1)
         self.pgnum = 0
         self.pglin = 999
@@ -212,7 +218,7 @@
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
                     pdfnam=pdfnam, header=self.tit, repprt=self.repprt,
                     repeml=self.repeml)
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.closeProcess()
 
     def getValues(self, data):

=== modified file 'gen/gl3050.py'
--- gen/gl3050.py	2019-01-13 16:38:59 +0000
+++ gen/gl3050.py	2019-04-03 10:16:33 +0000
@@ -35,7 +35,7 @@
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            if "args" in self.opts:
+            if "args" in self.opts and "noprint" not in self.opts["args"]:
                 self.end, self.typ, self.rep, self.val, self.var, self.zer, \
                     self.repprt, self.repeml, self.fpdf = self.opts["args"]
                 yed = CCD(mthendDate((self.end * 100) + 1), "D1", 10)
@@ -93,17 +93,19 @@
             5: ["Variance", "CI", 14],
             6: ["Var-%", "SD", 7.2],
             7: ["Last-Year", "CD", 17.2],
-            8: ["Open-Bal", "CD", 17.2],
-            9: ["Close-Bal", "CD", 17.2]}
+            8: ["Last-3-Years", "CD", 17.2],
+            9: ["Open-Bal", "CD", 17.2],
+           10: ["Close-Bal", "CD", 17.2]}
         m = self.s_per % 100
         for x in xrange(0, 12):
-            self.titles[x+10] = [mthnam[m][1], "CD", 17.2]
+            self.titles[x+11] = [mthnam[m][1], "CD", 17.2]
             m += 1
             if m > 12:
                 m = 1
         self.colss = [7, 2, 3, 4, 5, 6]
+        self.colsh = [2, 7, 7, 7, 3, 4, 5, 6]
         self.colsl = [2, 3, 4, 5, 6, 3, 4, 5, 6, 7]
-        self.colsm = [2, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 9]
+        self.colsm = [2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 10]
         self.colsc = []
         self.ulc = "X"                          # Temporary Underline Character
         return True
@@ -141,6 +143,7 @@
             "where": [("gdm_cono", "=", self.opts["conum"])]}
         r1s = (
             ("Short","S"),
+            ("History","H"),
             ("Long","L"),
             ("Month","M"),
             ("Custom","C"))
@@ -160,7 +163,13 @@
             (("T",0,1,0),"IUI",3,"Stream Number","",
                 0,"Y",self.doRepStr,stm,None,None),
             (("T",0,2,0),("IRB",r1s),0,"Report Type","",
-                "S","Y",self.doType,None,None,None),
+                "S","Y",self.doType,None,None,None,None,"""Valid Report Types:
+
+Short   - Previous Year, Description, Actual, Budget, Variance
+History - Description, Previous 3 Years, Actual, Budget, Variance
+Long    - Acc-Num, Description, Current Month, Year-to-Date
+Month   - Acc-Num, Description, Opening Balance, Months x 12, Closing Balance
+Custom  - Customised Report"""),
             (("T",0,3,0),("IRB",r2s),0,"Consolidate","",
                 "N","Y",self.doCons,None,None,None),
             (("T",0,4,0),("IRB",r2s),0,"Departments","",
@@ -318,7 +327,7 @@
         self.num = w
 
     def doMainEnd(self):
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.repprt = self.df.repprt
             self.repeml = self.df.repeml
             self.df.closeProcess()
@@ -402,7 +411,7 @@
                     self.opts["mf"].closeLoop()
                     return
             self.doCreateReport()
-        if "args" not in self.opts:
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.opts["mf"].closeLoop()
 
     def getRepDetails(self):
@@ -574,7 +583,7 @@
                 ("P-Year", "Prints the Previous Year e.g. 2008)"))}
         data = []
         for d in self.titles:
-            if d > 7:
+            if d > 8:
                 continue
             data.append(self.titles[d][0])
         col = {
@@ -830,7 +839,7 @@
         # RTYPE Determines the basis of the sign check i.e. MTD or YTD value
         # Maybe this should be an interactive request (Y=YTD, M=MTD)
         ####################################################################
-        if self.typ in ("C", "L", "S"):
+        if self.typ in ("C", "L", "S", "H"):
             rtype = "Y"
         else:
             rtype = "Y"
@@ -868,6 +877,14 @@
             for h in self.colss:
                 self.expcolsh[0].append(self.titles[h][0])
                 self.expforms.append(self.titles[h][1:])
+        elif self.typ == "H":
+            for n, h in enumerate(self.colsh):
+                if h == 7:
+                    ly = CCD(self.fin.pers[n]["e_per"], "D2", 7).disp
+                    self.expcolsh[0].append(ly)
+                else:
+                    self.expcolsh[0].append(self.titles[h][0])
+                self.expforms.append(self.titles[h][1:])
         elif self.typ == "L":
             if self.num == "Y":
                 colsl.insert(0, 1)
@@ -898,7 +915,7 @@
             elif self.val == "D":
                 self.des1 = "Details"
             self.lastmth = self.end % 100
-        else:
+        elif self.typ == "C":
             for col in self.cols:
                 self.expcolsh[0].append(col[2])
                 self.expforms.append(self.titles[col[0]][1:])
@@ -948,6 +965,21 @@
             self.linu = "%s  %31s  %s  %s  %s  %s" % (self.ulc*16, "",
                 self.ulc*16, self.ulc*14, self.ulc*14, self.ulc*7)
             self.width = self.head[0]
+        elif self.typ == "H":
+            self.head.append("%03u %-30s %111s" % (self.opts["conum"],
+                self.opts["conam"], self.sysdttm))
+            self.head.append("")
+            self.head.append("")
+            ly1 = CCD(self.fin.pers[1]["e_per"], "D2", 7).disp
+            ly2 = CCD(self.fin.pers[2]["e_per"], "D2", 7).disp
+            ly3 = CCD(self.fin.pers[3]["e_per"], "D2", 7).disp
+            self.head.append("%-30s  %16s   %16s   %16s   %-17s  %-14s  "\
+                "%-14s  %-7s" % ("Description", ly1, ly2, ly3,
+                "          Actual", self.vardes, "     Variance", " Var-%"))
+            self.linu = "%30s  %s   %s   %s   %s  %s  %s  %s" % ("",
+                self.ulc*16, self.ulc*16, self.ulc*16, self.ulc*16,
+                self.ulc*14, self.ulc*14, self.ulc*7)
+            self.width = self.head[0]
         elif self.typ == "L":
             if self.num == "Y":
                 self.head.append("%03u %-30s %123s" % (self.opts["conum"],
@@ -1020,11 +1052,11 @@
                 self.des1 = "Details"
             self.lastmth = self.end % 100
             m = self.s_per % 100
-            self.text = ""
+            text = ""
             space = " " * 20
             self.cutmth = 11
             for x in xrange(0, 12):
-                self.text = self.text + space[0:(10-len(mthnam[m][1]))] + \
+                text = text + space[0:(10-len(mthnam[m][1]))] + \
                     mthnam[m][1] + "  "
                 if self.val == "C" and m == self.lastmth:
                     self.cutmth = x
@@ -1033,7 +1065,7 @@
                     m = 1
             if self.num == "Y":
                 self.head.append("%-7s %-30s %-11s%-144s%-11s" % ("Acc-Num",
-                    "Description", "  Open-Bal  ", self.text, " Close-Bal  "))
+                    "Description", "  Open-Bal  ", text, " Close-Bal  "))
                 self.linu = "%7s %30s %s  %s  %s  %s  %s  %s  %s  %s  %s  "\
                     "%s  %s  %s  %s  %s" % ("", "", self.ulc*10, self.ulc*10,
                     self.ulc*10, self.ulc*10, self.ulc*10, self.ulc*10,
@@ -1041,58 +1073,41 @@
                     self.ulc*10, self.ulc*10, self.ulc*10, self.ulc*10)
             else:
                 self.head.append("%-30s %-11s%-144s%-11s" % ("Description",
-                    "  Open-Bal  ", self.text, " Close-Bal  "))
+                    "  Open-Bal  ", text, " Close-Bal  "))
                 self.linu = "%30s %s  %s  %s  %s  %s  %s  %s  %s  %s  %s  "\
                     "%s  %s  %s  %s" % ("",self.ulc*10, self.ulc*10,
                     self.ulc*10, self.ulc*10, self.ulc*10, self.ulc*10,
                     self.ulc*10, self.ulc*10, self.ulc*10, self.ulc*10,
                     self.ulc*10, self.ulc*10, self.ulc*10, self.ulc*10)
             self.width = self.head[0]
-        else:
-            head = ""
-            self.text = ''
-            stop = None
+        elif self.typ == "C":
+            self.lhead = ""
+            self.ltext = ''
+            self.stop = None
             for col in self.cols:
-                text = self.titles[col[0]]
-                if text[0] in ("Acc-Num", "Description"):
-                    hd = "%-" + str(int(text[2])) + "s  "
-                    head = head + hd % col[2]
-                else:
-                    hd = "%" + str(int(text[2]) - 1) + "s   "
-                    head = head + hd % col[2]
-                if not self.text:
-                    self.text = '"%s"' % col[2]
-                else:
-                    self.text = '%s,"%s"' % (self.text, col[2])
-                self.lind = self.lind + "%" + str(int(text[2])) + "s  "
-                if not stop:
-                    self.linh = self.linh + "%-" + str(int(text[2])) + "s  "
-                self.linu = self.linu + "%" + str(int(text[2]) - 1) + "s   "
-                if text[0] == "Acc-Num":
-                    if not stop:
-                        self.linh = self.linh % " "
-                    self.linu = self.linu % " "
-                    self.linw = self.linw + "%s,"
-                elif text[0] == "Description":
-                    self.linu = self.linu % " "
-                    self.linw = self.linw + '"%s",'
-                    stop = True
-                else:
-                    if not stop:
-                        self.linh = self.linh % " "
-                    self.linu = self.linu % ((int(text[2]) - 1) * self.ulc)
-                    self.linw = self.linw + "%s,"
-            head = head[:-2]
-            head = head.replace("C-Year", self.cyr)
-            self.text = self.text.replace("C-Year", self.cyr)
-            head = head.replace("P-Year", self.pyr)
-            self.text = self.text.replace("P-Year", self.pyr)
+                col = list(col)
+                if col[0] == 4:
+                    col[2] = self.vardes
+                if col[0] == 8:
+                    for x in range(3):
+                        hdr = CCD(self.fin.pers[x+1]["e_per"], "D2", 7)
+                        col[2] = hdr.disp
+                        self.doLoadLine(col)
+                else:
+                    if not col[2]:
+                        col[2] = col[1]
+                    self.doLoadLine(col)
+            self.lhead = self.lhead[:-2]
+            self.lhead = self.lhead.replace("C-Year", self.cyr)
+            self.ltext = self.ltext.replace("C-Year", self.cyr)
+            self.lhead = self.lhead.replace("P-Year", self.pyr)
+            self.ltext = self.ltext.replace("P-Year", self.pyr)
             self.lind = self.lind[:-2]
             self.linh = self.linh[:-2]
             self.linw = self.linw[:-1]
-            self.heds.append(head)
-            self.width = head
-        if "args" not in self.opts:
+            self.heds.append(self.lhead)
+            self.width = self.lhead
+        if "args" not in self.opts or "noprint" in self.opts["args"]:
             self.fpdf = MyFpdf(name=__name__, head=self.width)
         self.pgnum = 0
         self.pglin = 999
@@ -1110,6 +1125,7 @@
                 self.doHeading(dat)
             elif dat[0] in ("C","G","L","P","S","T"):
                 self.doValues(dat)
+                self.fpdf.setFont()
             elif dat[0] == "U":
                 self.doUnderline(dat)
             self.counter = dat[6]
@@ -1120,6 +1136,37 @@
                 pdfnam=self.pdfnam, header=self.emlhead,
                 repprt=self.repprt, repeml=self.repeml)
 
+    def doLoadLine(self, col):
+        text = self.titles[col[0]]
+        if text[0] in ("Acc-Num", "Description"):
+            hd = "%-" + str(int(text[2])) + "s  "
+            self.lhead = self.lhead + hd % col[2]
+        else:
+            hd = "%" + str(int(text[2]) - 1) + "s   "
+            self.lhead = self.lhead + hd % col[2]
+        if not self.ltext:
+            self.ltext = '"%s"' % col[2]
+        else:
+            self.ltext = '%s,"%s"' % (self.ltext, col[2])
+        self.lind = self.lind + "%" + str(int(text[2])) + "s  "
+        if not self.stop:
+            self.linh = self.linh + "%-" + str(int(text[2])) + "s  "
+        self.linu = self.linu + "%" + str(int(text[2]) - 1) + "s   "
+        if text[0] == "Acc-Num":
+            if not self.stop:
+                self.linh = self.linh % " "
+            self.linu = self.linu % " "
+            self.linw = self.linw + "%s,"
+        elif text[0] == "Description":
+            self.linu = self.linu % " "
+            self.linw = self.linw + '"%s",'
+            self.stop = True
+        else:
+            if not self.stop:
+                self.linh = self.linh % " "
+            self.linu = self.linu % ((int(text[2]) - 1) * self.ulc)
+            self.linw = self.linw + "%s,"
+
     def doHeading(self, line):
         if line[3] == "Y":
             if self.repprt[2] == "export":
@@ -1144,6 +1191,8 @@
                 self.fpdf.setFont(style="B")
             if self.typ == "S":
                 self.fpdf.drawText("%17s  %s" % ("", line[5]))
+            elif self.typ == "H":
+                self.fpdf.drawText("%s" % line[5])
             elif self.typ == "L":
                 if self.num == "Y":
                     self.fpdf.drawText("%7s  %s" % ("", line[5]))
@@ -1171,11 +1220,16 @@
         else:
             des = CCD(line[5], "NA", 30)
         sgn = line[12]
-        if self.typ in ("S", "L", "C"):
-            lyr = CCD(line[8][1], "CD", 17.2)
+        if self.typ in ("S", "H", "L", "C"):
+            if self.typ in ("C", "H"):
+                lyr = []
+                for x in range(3):
+                    lyr.append(CCD(line[8][x+1], "CD", 17.2))
+            else:
+                lyr = CCD(line[8][3], "CD", 17.2)
             if self.typ == "L":
-                mth = CCD(line[8][2], "CD", 17.2)
-                bud = CCD(long(line[8][3]), "CI", 14)
+                mth = CCD(line[8][4], "CD", 17.2)
+                bud = CCD(long(line[8][5]), "CI", 14)
                 if typ == "P":
                     vmt = CCD(0, "NA", 14)
                     vmtper = CCD(0, "NA", 7)
@@ -1194,8 +1248,8 @@
                     else:
                         vmtper = 0
                     vmtper = CCD(vmtper, "SD", 7.2)
-            ytd = CCD(line[8][4], "CD", 17.2)
-            btd = CCD(long(line[8][5]), "CI", 14)
+            ytd = CCD(line[8][6], "CD", 17.2)
+            btd = CCD(long(line[8][7]), "CI", 14)
             if typ == "P":
                 vtd = CCD(0, "NA", 14)
                 vtdper = CCD(0, "NA", 7)
@@ -1220,23 +1274,37 @@
                     line[9][x] = float(ASD(0) - ASD(line[9][x]))
                 ldic["mp%s" % x] = CCD(long(line[9][x]), "SL", 11)
                 ldic["mx%s" % x] = CCD(line[9][x], "SD", 14.2)
-        if self.repprt[2] != "export" and line[2] == "Y":
-            self.fpdf.setFont(style="B")
         if self.repprt[2] == "export":
             if typ == "T":
                 txt = "TOTAL"
             else:
                 txt = "BODY"
+        elif line[2] == "Y":
+            self.fpdf.setFont(style="B")
         if self.typ == "S":
-            if self.zer == "Y" and not lyr.work and not ytd.work and not \
-                    btd.work and not vtd.work:
-                pass
-            elif self.repprt[2] == "export":
+            if self.zer == "Y" and not lyr.work and not ytd.work \
+                    and not btd.work and not vtd.work:
+                return
+            if self.repprt[2] == "export":
                 self.expdatas.append([txt, [lyr.work, des.work, ytd.work,
                     btd.work, vtd.work, vtdper.work]])
             else:
                 self.fpdf.drawText("%s  %s  %s  %s  %s  %s" % (lyr.disp,
-                    des.disp,ytd.disp,btd.disp,vtd.disp,vtdper.disp))
+                    des.disp, ytd.disp, btd.disp, vtd.disp, vtdper.disp))
+                self.pglin += 1
+                self.last = True
+        elif self.typ == "H":
+            if self.zer == "Y" and not lyr[0].work and not lyr[1].work \
+                    and not lyr[2].work and not ytd.work and not btd.work \
+                    and not vtd.work:
+                return
+            if self.repprt[2] == "export":
+                self.expdatas.append([txt, [des.work, lyr[0].work, lyr[1].work,
+                    lyr[2].work, ytd.work, btd.work, vtd.work, vtdper.work]])
+            else:
+                self.fpdf.drawText("%s  %s  %s  %s  %s  %s  %s  %s" %
+                    (des.disp, lyr[0].disp, lyr[1].disp, lyr[2].disp,
+                    ytd.disp, btd.disp, vtd.disp, vtdper.disp))
                 self.pglin += 1
                 self.last = True
         elif self.typ == "L":
@@ -1385,10 +1453,16 @@
                     disp.append(vtdper.disp)
                     work.append(vtdper.work)
                 elif self.titles[col[0]][0] == "Last-Year":
-                    disp.append(lyr.disp)
-                    work.append(lyr.work)
-                    if lyr.work:
+                    disp.append(lyr[2].disp)
+                    work.append(lyr[2].work)
+                    if lyr[2].work:
                         zero = False
+                elif self.titles[col[0]][0] == "Last-3-Years":
+                    for x in range(3):
+                        disp.append(lyr[x].disp)
+                        work.append(lyr[x].work)
+                        if lyr[x].work:
+                            zero = False
             if self.zer == "Y" and zero:
                 pass
             elif self.repprt[2] == "export":
@@ -1397,8 +1471,6 @@
                 self.fpdf.drawText(self.lind % tuple(disp))
                 self.pglin += 1
                 self.last = True
-        if self.repprt[2] != "export":
-            self.fpdf.setFont()
 
     def doUnderline(self, line):
         if self.repprt[2] == "export":
@@ -1508,6 +1580,9 @@
                     if self.typ == "S":
                         self.fpdf.drawText("%-97s %4s %5s" % (head,
                             "Page", self.pgnum))
+                    elif self.typ == "H":
+                        self.fpdf.drawText("%-135s %4s %5s" % (head,
+                            "Page", self.pgnum))
                     elif self.typ == "L":
                         if self.num == "Y":
                             self.fpdf.drawText("%-147s %4s %5s" % (head,
@@ -1523,7 +1598,7 @@
                         else:
                             self.fpdf.drawText("%-186s %4s %5s" % (head,
                                 "Page", self.pgnum))
-                    else:
+                    elif self.typ == "C":
                         self.fpdf.setFont(style="B", size=14)
                         self.fpdf.drawText(head)
                         self.fpdf.setFont(style="B")
@@ -1543,11 +1618,18 @@
                         "                     "))
                     self.pglin += 1
                 elif line[1] == "B" and num == 4:
-                    self.fpdf.drawText(data.replace(
-                        "Description                               "\
-                        "Actual          Budget        Variance    Var-%",
-                        "Description                               "\
-                        "                                               "))
+                    if data.count("Prev-Year"):
+                        self.fpdf.drawText(data.replace(
+                            "Description                               "\
+                            "Actual       Prev-Year        Variance    Var-%",
+                            "Description                               "\
+                            "                                               "))
+                    else:
+                        self.fpdf.drawText(data.replace(
+                            "Description                               "\
+                            "Actual          Budget        Variance    Var-%",
+                            "Description                               "\
+                            "                                               "))
                     self.pglin += 1
                 else:
                     self.fpdf.drawText(data)
@@ -1587,7 +1669,7 @@
                 self.end)], group="gdm_desc", limit=1)
             des = det[0]
             ytd = CCD(det[1], "CD", 17.2).disp
-            if self.typ in ("C", "M", "S"):
+            if self.typ in ("C", "M", "S", "H"):
                 txt += "Detail: %s - Y.T.D. %s" % (des, ytd)
             elif self.typ == "L":
                 txt += "Detail: %s - Month %s  Y.T.D. %s" % (des, mtd, ytd)

=== modified file 'gen/gl3140_rne.py'
--- gen/gl3140_rne.py	2019-01-13 16:38:59 +0000
+++ gen/gl3140_rne.py	2019-04-04 07:02:16 +0000
@@ -315,7 +315,7 @@
         prt.append(CCD(var, "SD", 7.2).disp)
         if self.df.repprt[2] != "export" and line[2] == "Y":
             self.fpdf.setFont(style="B")
-        if not exp[-1] and not exp[-2]:
+        if not exp[-2] and not exp[-3]:
             pass
         elif self.df.repprt[2] == "export":
             if typ == "T":

=== modified file 'gen/gl3150_rne.py'
--- gen/gl3150_rne.py	2019-01-13 16:38:59 +0000
+++ gen/gl3150_rne.py	2019-04-04 07:02:37 +0000
@@ -315,7 +315,7 @@
         prt.append(CCD(var, "SD", 7.2).disp)
         if self.df.repprt[2] != "export" and line[2] == "Y":
             self.fpdf.setFont(style="B")
-        if not exp[-1] and not exp[-2]:
+        if not exp[-2] and not exp[-3]:
             pass
         elif self.df.repprt[2] == "export":
             if typ == "T":

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2019-02-24 15:37:36 +0000
+++ mst/ms0000.py	2019-04-07 13:32:37 +0000
@@ -43,7 +43,7 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2].strip()))
 else:
-    VERSION = (5, 4, 5)
+    VERSION = (5, 4, 6)
     os.environ["TARVER"] = "%s.%s.%s" % VERSION
 if __name__ == "__main__":
     # Run Tartan

=== modified file 'pos/ps2010.py'
--- pos/ps2010.py	2019-01-23 09:10:12 +0000
+++ pos/ps2010.py	2019-03-17 13:23:12 +0000
@@ -354,7 +354,7 @@
         # Create slip printer
         ####################################################################
         try:
-            if self.dtp == "I" or not self.prn:
+            if self.dtp == "I" or not self.prn or self.prn == "view":
                 raise Exception
             if ESCPOS:
                 self.prtr = printer.Network(host=self.prn, port=9100)
@@ -1072,9 +1072,16 @@
                 "=", self.opts["conum"]), ("srr_group", "=", self.grp),
                 ("srr_code", "=", self.code), ("srr_loc", "=", self.loc)])
             if not recs:
+                self.window.bell()
                 return
             incl = 0
             for rec in recs:
+                st1 = self.sql.getRec(tables="strmf1", cols=["st1_type"],
+                    where=[("st1_cono", "=", rec[0]), ("st1_group", "=",
+                    rec[4]), ("st1_code", "=", rec[5])], limit=1)
+                if st1[0] == "X":
+                    self.window.bell()
+                    return
                 pr, ec, ic = self.doCalSell(rec[4], rec[5], rec[6])
                 incl = float(ASD(incl) + ASD(ic.work))
             prc = CCD(incl, "UD", 10.2)

=== modified file 'pos/psc110.py'
--- pos/psc110.py	2019-01-13 16:38:59 +0000
+++ pos/psc110.py	2019-03-11 07:22:28 +0000
@@ -104,8 +104,7 @@
         prt = {
             "stype": "C",
             "titl": "Valid Printers",
-            "data": showPrinters(),
-            "index": 1}
+            "data": showPrinters()}
         tpl = {
             "stype": "R",
             "tables": ("tplmst",),

=== modified file 'rca/rc2010.py'
--- rca/rc2010.py	2019-01-13 16:38:59 +0000
+++ rca/rc2010.py	2019-03-13 12:33:44 +0000
@@ -27,7 +27,7 @@
 import time
 from TartanClasses import ASD, GetCtl, NotesCreate, PwdConfirm, Sql
 from TartanClasses import SelectChoice, TartanDialog
-from tartanFunctions import getVatRate, mthendDate, runModule
+from tartanFunctions import getVatRate, mthendDate, projectDate, runModule
 from tartanWork import rcmvtp, rctrtp
 
 class rc2010:
@@ -62,6 +62,7 @@
         else:
             mt += 1
         self.nme = mthendDate((yr * 10000) + (mt * 100) + 1)
+        self.chk = projectDate(self.nme, 1)
         if self.glint == "Y":
             self.glbnk = rcactl["cte_glbnk"]
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
@@ -293,8 +294,8 @@
         self.trnref = w
 
     def doOwnDat(self, frt, pag, r, c, p, i, w):
-        if w <= self.lme or w > self.nme:
-            return "Invalid Date (<= %s or > %s)" % (self.lme, self.nme)
+        if w <= self.lme or w > self.chk:
+            return "Invalid Date (<= %s or > %s)" % (self.lme, self.chk)
         self.trndat = w
         data = []
         for x in xrange(2, len(rctrtp)+1):
@@ -348,8 +349,8 @@
         self.trnref = w
 
     def doTntDat(self, frt, pag, r, c, p, i, w):
-        if w <= self.lme or w > self.nme:
-            return "Invalid Date (<= %s or > %s)" % (self.lme, self.nme)
+        if w <= self.lme or w > self.chk:
+            return "Invalid Date (<= %s or > %s)" % (self.lme, self.chk)
         self.trndat = w
         data = []
         for x in xrange(1, len(rctrtp)+1):

=== modified file 'rca/rc3050.py'
--- rca/rc3050.py	2019-01-13 16:38:59 +0000
+++ rca/rc3050.py	2019-03-09 09:52:21 +0000
@@ -251,7 +251,7 @@
             for _ in xrange(lines):
                 trn = rtt.pop(0)
                 bal = float(ASD(bal) + ASD(trn[otc.index("rot_tramt")]))
-            trn[otc.index("rot_type")] = 3
+            trn[otc.index("rot_type")] = 4
             trn[otc.index("rot_refno")] = "B/FWD"
             trn[otc.index("rot_batch")] = ""
             trn[otc.index("rot_tramt")] = bal

=== modified file 'rca/rc3060.py'
--- rca/rc3060.py	2019-01-13 16:38:59 +0000
+++ rca/rc3060.py	2019-03-09 11:23:45 +0000
@@ -306,9 +306,11 @@
             lines = len(rtt) - self.form.maxlines + 1
             for _ in xrange(lines):
                 trn = rtt.pop(0)
+                if trn[ttc.index("rtu_mtyp")] == 2:
+                    continue
                 bal = float(ASD(bal) + ASD(trn[ttc.index("balance")]))
             trn[ttc.index("rtu_refno")] = "B/FWD"
-            trn[ttc.index("rtu_type")] = 3
+            trn[ttc.index("rtu_type")] = 4
             trn[ttc.index("rtu_desc")] = "Balance Brought Forward"
             trn[ttc.index("balance")] = bal
             rtt.insert(0, trn)
@@ -340,6 +342,7 @@
     def doBody(self, ttc, rtt, tdc):
         page = 0
         count = 0
+        rbal = 0
         text = tdc.index("tpd_text")
         for trans in rtt:
             if not count:
@@ -366,8 +369,20 @@
                 elif cod == "mvtype_code":
                     ttyp = trans[ttc.index(c)]
                     self.form.newdic[d][text] = rcmvtp[ttyp - 1][0]
+                elif cod == "running_balance":
+                    self.form.newdic[d][text] = rbal
                 else:
                     self.form.newdic[d][text] = trans[ttc.index(c)]
+                    if cod == "line_balance":
+                        mtp = trans[ttc.index("rtu_mtyp")]
+                        if trans[ttc.index("rtu_desc")]:
+                            dsc = trans[ttc.index("rtu_desc")].split()[0]
+                        else:
+                            dsc = ""
+                        if mtp == 2 and dsc not in ("Outstanding", "Overpaid"):
+                            pass
+                        else:
+                            rbal = float(ASD(rbal) + ASD(trans[ttc.index(c)]))
                 self.form.doDrawDetail(self.form.newdic[d])
             count += 1
         for x in xrange(count, self.form.maxlines):

=== modified file 'sls/si2010.py'
--- sls/si2010.py	2019-02-24 15:37:36 +0000
+++ sls/si2010.py	2019-03-17 13:06:10 +0000
@@ -777,6 +777,8 @@
             ok = self.doRecipe(atype="I", lineno=self.newline)
             if ok == "NoItems":
                 return "Invalid Recipe, No Items"
+            elif ok == "Redundant":
+                return "Invalid Recipe, Has Redundant Items"
             elif ok == "NoQty":
                 return "cl"
             elif ok == "Quit":
@@ -826,6 +828,11 @@
             self.recipe = []
             needpwd = False
             for item in recipe:
+                st1 = self.sql.getRec(tables="strmf1", cols=["st1_type"],
+                    where=[("st1_cono", "=", item[0]), ("st1_group", "=",
+                    item[4]), ("st1_code", "=", item[5])], limit=1)
+                if st1[0] == "X":
+                    return "Redundant"
                 quant = item[6] * self.qty
                 vals = self.doCalCost(item[4], item[5], self.loc, 1)
                 if vals[0] != "N" and quant > vals[3]:

=== modified file 'sls/si3020.py'
--- sls/si3020.py	2019-01-13 16:38:59 +0000
+++ sls/si3020.py	2019-04-04 09:50:04 +0000
@@ -93,8 +93,14 @@
                 "","Y",self.doGroup,grp,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doCut(self, frt, pag, r, c, p, i, w):
         self.cutoff = w
@@ -206,12 +212,13 @@
         if self.fpdf.page and not p.quit:
             self.groupTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         self.grp = CCD(data[0], "UA", 3)

=== modified file 'sls/si3030.py'
--- sls/si3030.py	2019-01-13 16:38:59 +0000
+++ sls/si3030.py	2019-04-04 09:50:10 +0000
@@ -80,8 +80,15 @@
                 "","Y",self.doGroup,grp,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPer(self, frt, pag, r, c, p, i, w):
         if w < int(self.opts["period"][1][0] / 100) or \
@@ -192,12 +199,13 @@
         if self.fpdf.page and not p.quit:
             self.groupTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3040.py'
--- sls/si3040.py	2019-01-13 16:38:59 +0000
+++ sls/si3040.py	2019-04-04 09:45:48 +0000
@@ -109,8 +109,14 @@
                 "Y","Y",self.doDrsAcc,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doCut(self, frt, pag, r, c, p, i, w):
         self.coffw = w
@@ -228,8 +234,6 @@
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
         self.head = ("%03u %-30s %110s %40s" % (self.opts["conum"],
             self.opts["conam"], "", self.sysdttm))
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
         self.fpdf = MyFpdf(name=__name__, head=self.head)
         self.pgnum = 0
         self.pglin = 999
@@ -253,6 +257,10 @@
             return
         self.groupTotal()
         self.grandTotal()
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            return
+        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+            self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
             header=self.tit, repprt=self.df.repprt, fromad=self.fromad,

=== modified file 'sls/si3050.py'
--- sls/si3050.py	2019-01-13 16:38:59 +0000
+++ sls/si3050.py	2019-04-04 09:46:47 +0000
@@ -109,8 +109,14 @@
                 "Y","Y",self.doVals,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doSdate(self, frt, pag, r, c, p, i, w):
         self.sdate = w
@@ -253,12 +259,13 @@
         if self.fpdf.page and not p.quit:
             self.drsTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3060.py'
--- sls/si3060.py	2019-01-13 16:38:59 +0000
+++ sls/si3060.py	2019-04-04 09:47:34 +0000
@@ -72,8 +72,14 @@
                 "","Y",self.doRep,rpm,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doSdate(self, frt, pag, r, c, p, i, w):
         self.sdate = w
@@ -165,12 +171,13 @@
         if self.fpdf.page and not p.quit:
             self.repTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3070.py'
--- sls/si3070.py	2019-01-13 16:38:59 +0000
+++ sls/si3070.py	2019-04-04 09:48:46 +0000
@@ -72,8 +72,14 @@
                 "Last Rep Code","","Y",self.doRep2,rep,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doDat(self, frt, pag, r, c, p, i, w):
         self.end = w
@@ -177,15 +183,17 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
-            CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],
-                [self.start, self.end], [[self.opts["conam"],
-                "Saleman's Sales History"], "Values"], None, self.mchart)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
+                CreateChart(self.opts["mf"], self.opts["conum"],
+                    self.opts["conam"], [self.start, self.end],
+                    [[self.opts["conam"], "Saleman's Sales History"],
+                    "Values"], None, self.mchart)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2019-02-24 15:37:36 +0000
+++ std/TartanClasses.py	2019-04-06 06:34:33 +0000
@@ -4301,6 +4301,7 @@
                    "Y" = Address Field (noblank) - Entered Address
                    "N" = No Address Field (default N) - Address from account
                    "B" = Address Field (efld) - Combination of both
+                   "D" = No Address or Email Field, defaults to Y.
                 prnt  is "Y" or "N" to choose to view/print emailed docs or not
                 dflt is the default answer
                 desc is the description to replace the default description
@@ -4462,13 +4463,12 @@
             self.eflds = list(self.eflds)
             if self.repprt[0] == "Y":
                 # View/Print/Export dialog
-                printers = showPrinters()
+                prts = showPrinters()
                 prt = {
                     "stype": "C",
                     "titl": "Available Printers",
                     "head": ("Name", "Description"),
-                    "data": printers}
-                row += 1
+                    "data": prts}
                 rvs = [("View","V"),("Print","P"),("None","N")]
                 mes = """Select what to do with the generated report.
 
@@ -4485,70 +4485,82 @@
 
 Export - The report in the selected format will be opened
          in the default spreadsheet application.""" % mes
+                row += 1
                 self.eflds.append((("T",0,row,col),("IRB",rvs),0,"Output",
                     "Output Method",self.view[1].upper(),"Y",self.setView,
                     None,None, None,None,mes))
                 row += 1
                 self.eflds.append((("T",0,row,col),"INA",(30,50),"Printer Name",
-                    "","Default","Y",self.setPrtr,prt,None,("in", printers)))
+                    "","Default","Y",self.setPrtr,prt,None,("in", prts)))
             if self.repeml[0] == "Y":
                 # Email dialog
-                row += 1
                 yns = (("Yes","Y"),("No","N"))
-                if len(self.mail) == 4:
-                    dflt = self.mail[2]
-                    desc = self.mail[3]
-                else:
-                    desc = "Email Document"
-                if len(self.mail) == 3:
-                    dflt = self.mail[2]
-                else:
-                    dflt = "N"
-                self.eflds.append((("T",0,row,col),("IRB",yns),0,
-                    desc,"",dflt,"N",self.setMail,None,None,None))
-                if self.mail[0].lower() in ("b", "y"):
-                    # Email addresses
-                    sql = Sql(self.mf.dbm, ["telmst", "telcon"], prog=__name__)
-                    data = []
-                    tdm = sql.getRec(tables="telmst", cols=["tdm_name",
-                        "tdm_email"], where=[("tdm_email", "<>", "")],
-                        order="tdm_name")
-                    for t in tdm:
-                        data.append([t[0], "", "", t[1]])
-                    tdc = sql.getRec(tables="telcon", cols=["tdc_name",
-                        "tdc_contact", "tdc_desig", "tdc_email"],
-                        where=[("tdc_email", "<>", "")],
-                        order="tdc_name, tdc_contact")
-                    if tdc:
-                        data.extend(tdc)
-                    adr = {
-                        "stype": "C",
-                        "titl": "Available Addresses",
-                        "head": ("Name", "Contact", "Designation", "Address"),
-                        "typs": (("NA",0,"Y"),("NA",0),("NA",0),("NA",0)),
-                        "data": data,
-                        "mode": "M",
-                        "comnd": self.getAddr}
+                if self.mail[0].lower() == "d":
+                    self.repeml[1] = "Y"
+                else:
+                    if len(self.mail) == 4:
+                        dflt = self.mail[2]
+                        desc = self.mail[3]
+                    else:
+                        desc = "Email Document"
+                    if len(self.mail) == 3:
+                        dflt = self.mail[2]
+                    else:
+                        dflt = "N"
+                    row += 1
+                    self.eflds.append((("T",0,row,col),("IRB",yns),0,
+                        desc,"",dflt,"N",self.setMail,None,None,None))
+                if self.mail[0].lower() in ("b", "d", "y"):
+                    if self.mail[0].lower in ("b", "y"):
+                        # Email addresses
+                        data = []
+                        sql = Sql(self.mf.dbm, ["telmst", "telcon"],
+                            prog=__name__)
+                        tdm = sql.getRec(tables="telmst", cols=["tdm_name",
+                            "tdm_email"], where=[("tdm_email", "<>", "")],
+                            order="tdm_name")
+                        for t in tdm:
+                            data.append([t[0], "", "", t[1]])
+                        tdc = sql.getRec(tables="telcon", cols=["tdc_name",
+                            "tdc_contact", "tdc_desig", "tdc_email"],
+                            where=[("tdc_email", "<>", "")],
+                            order="tdc_name, tdc_contact")
+                        if tdc:
+                            data.extend(tdc)
+                        adr = {
+                            "stype": "C",
+                            "titl": "Available Addresses",
+                            "head": (
+                                "Name", "Contact", "Designation", "Address"),
+                            "typs": (("NA",0,"Y"),("NA",0),("NA",0),("NA",0)),
+                            "data": data,
+                            "mode": "M",
+                            "comnd": self.getAddr}
+                    else:
+                        adr = None
                     row += 1
                     a = [("T",0,row,col),"ITX",50,"E-Mail Address","",
                         "","N",self.setAddr,adr,None]
-                    if self.mail[0].lower() == "y":
+                    if self.mail[0].lower() in ("d", "y"):
                         a.append(("email", False))
                     else:
                         a.append(("email", True))
                     a.extend([None,"E-Mail Addresses, Comma Separated"])
                     self.eflds.append(tuple(a))
-                # Email message and additional attachments
-                row += 1
-                self.eflds.append((
-                    ("T",0,row,col),("IRB",yns),0,"E-Mail Message","",
-                        "N","N",self.setMess,None,None,None))
-                if self.mail[1].lower() == "y":
-                    # View/Print emailed document
+                if self.mail[0].lower() == "d":
+                    pass
+                else:
+                    # Email message and additional attachments
                     row += 1
-                    self.eflds.append((("T",0,row,col),("IRB",yns),0,
-                        "View/Print Emailed Document","","N","Y",
-                        self.setPrint,None,None,None))
+                    self.eflds.append((
+                        ("T",0,row,col),("IRB",yns),0,"E-Mail Message","",
+                            "N","N",self.setMess,None,None,None))
+                    if self.mail[1].lower() == "y":
+                        # View/Print emailed document
+                        row += 1
+                        self.eflds.append((("T",0,row,col),("IRB",yns),0,
+                            "View/Print Emailed Document","","N","Y",
+                            self.setPrint,None,None,None))
         if not self.eflds:
             return
         #=======================================================================
@@ -4787,7 +4799,7 @@
             elif self.repeml[0] == "Y":
                 self.repeml[1] = "N"
                 self.loadEntry(frt, pag, p+2, data="N")
-                if self.mail and self.mail[0].lower() in ("b", "y"):
+                if self.mail and self.mail[0].lower() in ("b", "d", "y"):
                     self.repeml[2] = ""
                     self.loadEntry(frt, pag, p+3, data="")
                 return "nd"
@@ -6542,6 +6554,8 @@
                         no = self.doCheckEmail(e, True)
                     if no:
                         return ("no", "Invalid %s, %s" % (des, no))
+            elif len(val) == 2 and not val[1]:
+                return ("no", "Missing Address")
             return ("ok", )
         elif val[0] == "chars":
             if len(wrk) > val[1]:
@@ -7520,7 +7534,7 @@
             self.tree.bind("<Home>", self.doScroll)
             self.tree.bind("<Next>", self.doScroll)
             self.tree.bind("<End>", self.doScroll)
-        if not self.chek and self.live:
+        if not self.chek and self.live is True:
             self.tree.bind("<Double-1>", self.doSelect)
             self.tree.bind("<KP_Enter>", self.doSelect)
             self.tree.bind("<Return>", self.doSelect)
@@ -10075,7 +10089,7 @@
         Description i.e. Description or Single/Double/Blank for underlines
         Line count
         Number of lines to skip
-        List of Amounts (N/A,Lyr,Cyr,Bud,Ytd,Btd) for type "N"
+        List of Amounts (N/A,Lyr x 3,Cmt,Bmt,Ytd,Btd) for type "N"
         List of Monthly Amounts (Balances or Values) x 14 i.e.
             Opening Balance + 12 Monthly Balances + Closing Balance for type 'M'
         Chart Label i.e.
@@ -10168,44 +10182,66 @@
             "gendtm", "gendtt", "genmst", "genrpt", "gentrn"], prog=__name__)
         if self.sql.error:
             return
-        self.i_per = int(self.period[1][0] / 100)
-        self.e_per = int(self.period[2][0] / 100)
-        df = self.e_per - self.i_per - 87
+        """
+        self.pers: Dictionary of current period and 3 previous periods:
+
+        o_dte = Opening balance date
+        i_per = Starting Period
+        e_per = Ending Period
+        d_per = Number of months over 12
+        s_per = Starting period in 12 month period
+        """
+        self.pers = {0: {}, 1: {}, 2: {}, 3: {}}
+        # Current Period
+        self.pers[0]["o_dte"] = self.period[1][0]
+        self.pers[0]["i_per"] = int(self.period[1][0] / 100)
+        self.pers[0]["e_per"] = int(self.period[2][0] / 100)
+        df = dateDiff(self.period[2][0], self.period[1][0], "months") + 1
         if df > 12:
-            self.d_per = df - 12
+            self.pers[0]["d_per"] = df - 12
             yr = int(self.i_per / 100)
             mt = self.i_per % 100
-            for _ in xrange(self.d_per):
+            for _ in range(self.pers[0]["d_per"]):
                 mt += 1
                 if mt > 12:
                     mt -= 12
                     yr += 1
-            self.s_per = (yr * 100) + mt
+            self.pers[0]["s_per"] = (yr * 100) + mt
         else:
-            self.d_per = 0
-            self.s_per = self.i_per
+            self.pers[0]["d_per"] = 0
+            self.pers[0]["s_per"] = self.pers[0]["i_per"]
+        # Previous Periods
         if self.period[0]:
-            self.s_lyr, e_lyr, fin = getPeriods(self.mf, self.conum,
-                (self.period[0] - 1))
-            self.i_pyr = int(self.s_lyr.work / 100)
-            self.e_pyr = int(e_lyr.work / 100)
-            df = self.e_pyr - self.i_pyr - 87
-            if df > 12:
-                self.d_pyr = df - 12
-                yr = int(self.i_pyr / 100)
-                mt = self.i_pyr % 100
-                for _ in xrange(self.d_pyr):
-                    mt += 1
-                    if mt > 12:
-                        mt -= 12
-                        yr += 1
-                self.s_pyr = (yr * 100) + mt
+            if self.period[0] > 2:
+                rng = 4
             else:
-                self.d_pyr = 0
-                self.s_pyr = self.i_pyr
-        else:
-            self.d_pyr = 0
-            self.s_pyr = 0
+                rng = self.period[0] + 1
+            for p in range(1, rng):
+                if p == 1:
+                    s = 3
+                elif p == 2:
+                    s = 2
+                else:
+                    s = 1
+                i_lyr, e_lyr, fin = getPeriods(self.mf, self.conum,
+                    self.period[0] - p)
+                self.pers[s]["o_dte"] = i_lyr.work
+                self.pers[s]["i_per"] = int(i_lyr.work / 100)
+                self.pers[s]["e_per"] = int(e_lyr.work / 100)
+                df = dateDiff(e_lyr.work, i_lyr.work, "months") + 1
+                if df > 12:
+                    self.pers[s]["d_per"] = df - 12
+                    yr = int(self.pers[s]["i_pyr"] / 100)
+                    mt = self.pers[s]["i_per"] % 100
+                    for _ in xrange(self.pers[s]["d_per"]):
+                        mt += 1
+                        if mt > 12:
+                            mt -= 12
+                            yr += 1
+                    self.pers[s]["s_per"] = (yr * 100) + mt
+                else:
+                    self.pers[s]["d_per"] = 0
+                    self.pers[s]["s_per"] = self.pers[s]["i_per"]
         self.cmth = self.curdt % 100
         self.lines = 1
         self.count = 0
@@ -10213,9 +10249,9 @@
         self.xits = False
         self.clearData()
         self.allFields = []
-        self.val_tot = makeArray(6, 10, 1)
+        self.val_tot = makeArray(8, 10, 1)
         self.mth_tot = makeArray(14, 10, 1)
-        self.val_str = makeArray(6, 100, 1)
+        self.val_str = makeArray(8, 100, 1)
         self.mth_str = makeArray(14, 100, 1)
         if type(self.consol) == str:
             if self.consol == "Y":
@@ -10263,9 +10299,10 @@
     def getDcode(self):
         acc = self.sql.getRec(tables=["gendtm", "gendtt"],
             cols=["gdm_desc", "round(sum(gdt_value), 2)"],
-            where=[("gdm_cono", "=", self.conum), ("gdm_code", "=",
-            self.dcode), ("gdt_cono=gdm_cono",), ("gdt_cono=gdm_cono",),
-            ("gdt_code=gdm_code",), ("gdt_curdt", "between", self.s_per,
+            where=[("gdm_cono", "=", self.conum), ("gdm_code",
+            "=", self.dcode), ("gdt_cono=gdm_cono",),
+            ("gdt_cono=gdm_cono",), ("gdt_code=gdm_code",),
+            ("gdt_curdt", "between", self.pers[0]["s_per"],
             self.curdt)], group="gdm_desc", limit=1)
         self.ddet = [acc[0], CCD(acc[1], "SD", 13.2).disp]
 
@@ -10320,7 +10357,7 @@
                     self.mth[mth] = float(ASD(self.mth[mth]) +
                         ASD(self.mth[mth-1]))
             if self.rtype == "Y":
-                amt = self.val[4]
+                amt = self.val[6]
             else:
                 amt = self.mth[self.cmth]
             if self.s_print == "+" and amt < 0:
@@ -10355,7 +10392,7 @@
             for mth in xrange(1, 13):
                 self.mth[mth] = float(ASD(self.mth[mth]) + ASD(self.mth[mth-1]))
         if self.rtype == "Y":
-            amt = self.val[4]
+            amt = self.val[6]
         else:
             amt = self.mth[self.cmth]
         if self.s_print == "+" and amt < 0:
@@ -10373,12 +10410,12 @@
 
     def doTotal(self):
         self.pb.displayProgress()
-        for x in xrange(0, 6):
+        for x in xrange(0, 8):
             self.val[x] = self.val_tot[self.s_total][x]
         for x in xrange(0, 14):
             self.mth[x] = self.mth_tot[self.s_total][x]
         if self.rtype == "Y":
-            amt = self.val[4]
+            amt = self.val[6]
         else:
             amt = self.mth[self.cmth]
         if self.s_print == "+" and amt < 0:
@@ -10396,14 +10433,14 @@
         self.clearData()
         if self.s_clear == "Y":
             for x in xrange(0, self.s_total+1):
-                for y in xrange(0, 6):
+                for y in xrange(0, 8):
                     self.val_tot[x][y] = 0
                 for y in xrange(0, 14):
                     self.mth_tot[x][y] = 0
 
     def doStore(self):
         self.pb.displayProgress()
-        for x in xrange(0, 6):
+        for x in xrange(0, 8):
             if self.val_str[self.s_snum1][x] == 0:
                 self.val[x] = 0
             else:
@@ -10417,7 +10454,7 @@
                     self.s_strper / 100.0), 2)
                 self.mth[13] = float(ASD(self.mth[13]) + ASD(self.mth[x]))
         if self.rtype == "Y":
-            amt = self.val[4]
+            amt = self.val[6]
         else:
             amt = self.mth[self.cmth]
         if self.s_print == "+" and amt < 0:
@@ -10433,7 +10470,7 @@
         self.accumTotals(self.s_acbal)
         self.clearData()
         if self.s_clear == "Y":
-            for x in xrange(0, 6):
+            for x in xrange(0, 8):
                 self.val_str[self.s_snum1][x] = 0
             for x in xrange(0, 14):
                 self.mth_str[self.s_snum1][x] = 0
@@ -10451,7 +10488,7 @@
 
     def doPercent(self):
         self.pb.displayProgress()
-        for x in xrange(0, 6):
+        for x in xrange(0, 8):
             if self.val_str[self.s_snum1][x] == 0 or \
                     self.val_str[self.s_snum2][x] == 0:
                 self.val[x] = 0
@@ -10470,7 +10507,7 @@
 
     def doCalc(self):
         self.pb.displayProgress()
-        for x in xrange(0, 6):
+        for x in xrange(0, 8):
             amt1 = self.val_str[self.s_snum2][x]
             if self.s_cbase == "S":
                 amt2 = self.val_str[self.s_snum3][x]
@@ -10627,32 +10664,37 @@
     def accumData(self):
         if self.rpt_dic["glr_obal"] == "Y" and self.vcode not in ("B", "X"):
             o_lyr, o_cyr = self.getObal()
-            self.val[1] = float(ASD(self.val[1]) + ASD(o_lyr))
+            self.val[1] = float(ASD(self.val[1]) + ASD(o_lyr[0]))
+            self.val[2] = float(ASD(self.val[2]) + ASD(o_lyr[1]))
+            self.val[3] = float(ASD(self.val[3]) + ASD(o_lyr[2]))
             if self.varcd == "P":
-                self.val[5] = float(ASD(self.val[5]) + ASD(o_lyr))
-            self.val[4] = float(ASD(self.val[4]) + ASD(o_cyr))
+                self.val[7] = float(ASD(self.val[7]) + ASD(o_lyr[2]))
+            self.val[6] = float(ASD(self.val[6]) + ASD(o_cyr))
             self.mth[0] = float(ASD(self.mth[0]) + ASD(o_cyr))
             self.mth[13] = float(ASD(self.mth[13]) + ASD(o_cyr))
-        if self.d_pyr and self.vcode not in ("B", "C", "X"):
-            # Previous Financial period exceeds 12 months
-            cy = int(self.i_pyr / 100) - 100
-            cm = (self.i_pyr % 100) - 100
-            for _ in xrange(self.d_pyr):
-                curdt = (cy * 100) + cm
-                lyr, cyr, bud = self.getMbal(curdt)
-                self.val[1] = float(ASD(self.val[1]) + ASD(lyr))
-                if self.varcd == "P":
-                    self.val[3] = float(ASD(self.val[3]) + ASD(bud))
-                    self.val[5] = float(ASD(self.val[5]) + ASD(bud))
-                cm += 1
-                if cm > 12:
-                    cm -= 12
-                    cy += 1
-        if self.d_per:
+        for p in range(1, 4):
+            if not self.pers[p]:
+                continue
+            if self.pers[p]["d_per"] and self.vcode not in ("B", "C", "X"):
+                # Previous Financial period exceeds 12 months
+                cy = int(self.pers[p]["i_per"] / 100)
+                cm = int(self.pers[p]["i_per"] % 100)
+                for _ in xrange(self.pers[p]["d_per"]):
+                    curdt = (cy * 100) + cm
+                    lyr, cyr, bud = self.getMbal(curdt)
+                    self.val[p] = float(ASD(self.val[p]) + ASD(lyr[p-1]))
+                    if p == 3 and self.varcd == "P":
+                        self.val[5] = float(ASD(self.val[5]) + ASD(bud))
+                        self.val[7] = float(ASD(self.val[7]) + ASD(bud))
+                    cm += 1
+                    if cm > 12:
+                        cm -= 12
+                        cy += 1
+        if self.pers[0]["d_per"]:
             # Current Financial period exceeds 12 months
-            cy = int(self.i_per / 100)
-            cm = self.i_per % 100
-            for _ in xrange(self.d_per):
+            cy = int(self.pers[0]["i_per"] / 100)
+            cm = int(self.pers[0]["i_per"] % 100)
+            for _ in xrange(self.pers[0]["d_per"]):
                 curdt = (cy * 100) + cm
                 lyr, cyr, bud = self.getMbal(curdt)
                 if self.vcode == "B":
@@ -10667,11 +10709,13 @@
                     self.mth[1] = float(ASD(self.mth[1]) - ASD(cyr))
                     self.mth[13] = float(ASD(self.mth[13]) - ASD(cyr))
                 else:
-                    self.val[1] = float(ASD(self.val[1]) + ASD(lyr))
-                    self.val[2] = float(ASD(self.val[2]) + ASD(cyr))
-                    self.val[3] = float(ASD(self.val[3]) + ASD(bud))
+                    self.val[1] = float(ASD(self.val[1]) + ASD(lyr[0]))
+                    self.val[2] = float(ASD(self.val[2]) + ASD(lyr[1]))
+                    self.val[3] = float(ASD(self.val[3]) + ASD(lyr[2]))
                     self.val[4] = float(ASD(self.val[4]) + ASD(cyr))
                     self.val[5] = float(ASD(self.val[5]) + ASD(bud))
+                    self.val[6] = float(ASD(self.val[6]) + ASD(cyr))
+                    self.val[7] = float(ASD(self.val[7]) + ASD(bud))
                     self.mth[1] = float(ASD(self.mth[1]) + ASD(cyr))
                     self.mth[13] = float(ASD(self.mth[13]) + ASD(cyr))
                 cm += 1
@@ -10680,7 +10724,7 @@
                     cy += 1
         if self.vcode == "C":
             cut = False
-        curdt = self.s_per
+        curdt = self.pers[0]["s_per"]
         for mth in xrange(1, 13):
             lyr, cyr, bud = self.getMbal(curdt)
             if self.vcode == "B" or (self.vcode == "C" and cut):
@@ -10695,12 +10739,14 @@
                 self.mth[mth] = float(ASD(self.mth[mth]) - ASD(cyr))
                 self.mth[13] = float(ASD(self.mth[13]) - ASD(cyr))
             else:
-                self.val[1] = float(ASD(self.val[1]) + ASD(lyr))
+                self.val[1] = float(ASD(self.val[1]) + ASD(lyr[0]))
+                self.val[2] = float(ASD(self.val[2]) + ASD(lyr[1]))
+                self.val[3] = float(ASD(self.val[3]) + ASD(lyr[2]))
                 if curdt == self.curdt:
-                    self.val[2] = float(ASD(self.val[2]) + ASD(cyr))
-                    self.val[3] = float(ASD(self.val[3]) + ASD(bud))
-                self.val[4] = float(ASD(self.val[4]) + ASD(cyr))
-                self.val[5] = float(ASD(self.val[5]) + ASD(bud))
+                    self.val[4] = float(ASD(self.val[4]) + ASD(cyr))
+                    self.val[5] = float(ASD(self.val[5]) + ASD(bud))
+                self.val[6] = float(ASD(self.val[6]) + ASD(cyr))
+                self.val[7] = float(ASD(self.val[7]) + ASD(bud))
                 self.mth[mth] = float(ASD(self.mth[mth]) + ASD(cyr))
                 self.mth[13] = float(ASD(self.mth[13]) + ASD(cyr))
             if curdt == self.curdt:
@@ -10709,7 +10755,7 @@
                 else:
                     break
             y = int(curdt / 100)
-            m = curdt % 100
+            m = int(curdt % 100)
             m += 1
             if m > 12:
                 y += 1
@@ -10717,62 +10763,85 @@
             curdt = (y * 100) + m
 
     def getObal(self):
+        lyr = [0, 0, 0]
         if not self.consol:
             if self.sysdp[0] == "Y" and not self.depart:
                 bas = 10 ** (7 - self.sysdp[1])
                 acc = self.s_acno % bas
-                if not self.period[0]:
-                    lyr = None
-                else:
-                    lyr = self.sql.getRec(tables="genbal",
-                        cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono",
-                        "=", self.s_cono), ("glo_acno", "%", bas, "=", acc),
-                        ("glo_trdt", "=", self.s_lyr.work)], limit=1)[0]
+                if self.period[0]:
+                    for p in self.pers:
+                        if self.pers[p]:
+                            bal = self.sql.getRec(tables="genbal",
+                                cols=["round(sum(glo_cyr), 2)"],
+                                where=[("glo_cono", "=", self.s_cono),
+                                ("glo_acno", "%", bas, "=", acc),
+                                ("glo_trdt", "=", self.pers[p]["o_dte"])],
+                                limit=1)
+                            if not bal[0]:
+                                lyr[p-1] = 0
+                            else:
+                                lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="genbal",
                     cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono", "=",
                     self.s_cono), ("glo_acno", "%", bas, "=", acc),
-                    ("glo_trdt", "=", self.period[1][0])], limit=1)[0]
+                    ("glo_trdt", "=", self.pers[0]["o_dte"])], limit=1)[0]
             else:
-                if not self.period[0]:
-                    lyr = None
-                else:
-                    lyr = self.sql.getRec(tables="genbal",
-                        cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono",
-                        "=", self.s_cono), ("glo_acno", "=", self.s_acno),
-                        ("glo_trdt", "=", self.s_lyr.work)], limit=1)[0]
+                if self.period[0]:
+                    for p in self.pers:
+                        if self.pers[p]:
+                            bal = self.sql.getRec(tables="genbal",
+                                cols=["round(sum(glo_cyr), 2)"],
+                                where=[("glo_cono", "=", self.s_cono),
+                                ("glo_acno", "=", self.s_acno),
+                                ("glo_trdt", "=", self.pers[p]["o_dte"])],
+                                limit=1)
+                            if not bal[0]:
+                                lyr[p-1] = 0
+                            else:
+                                lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="genbal",
                     cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono", "=",
                     self.s_cono), ("glo_acno", "=", self.s_acno), ("glo_trdt",
-                    "=", self.period[1][0])], limit=1)[0]
+                    "=", self.pers[0]["o_dte"])], limit=1)[0]
         else:
             if self.sysdp[0] == "Y" and not self.depart:
                 bas = 10 ** (7 - self.sysdp[1])
                 acc = self.s_acno % bas
-                if not self.period[0]:
-                    lyr = None
-                else:
-                    lyr = self.sql.getRec(tables="genbal",
-                        cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono",
-                        "in", self.consol), ("glo_acno", "%", bas, "=", acc),
-                        ("glo_trdt", "=", self.s_lyr.work)], limit=1)[0]
+                if self.period[0]:
+                    for p in self.pers:
+                        if self.pers[p]:
+                            bal = self.sql.getRec(tables="genbal",
+                                cols=["round(sum(glo_cyr), 2)"],
+                                where=[("glo_cono", "in", self.consol),
+                                ("glo_acno", "%", bas, "=", acc),
+                                ("glo_trdt", "=", self.pers[p]["o_dte"])],
+                                limit=1)
+                            if not bal[0]:
+                                lyr[p-1] = 0
+                            else:
+                                lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="genbal",
                     cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono", "in",
                         self.consol), ("glo_acno", "%", bas, "=", acc),
-                        ("glo_trdt", "=", self.period[1][0])], limit=1)[0]
+                        ("glo_trdt", "=", self.per[0]["o_dte"])], limit=1)[0]
             else:
-                if not self.period[0]:
-                    lyr = None
-                else:
-                    lyr = self.sql.getRec(tables="genbal",
-                        cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono",
-                        "in", self.consol), ("glo_acno", "=", self.s_acno),
-                        ("glo_trdt", "=", self.s_lyr.work)], limit=1)[0]
+                if self.period[0]:
+                    for p in self.pers:
+                        if self.pers[p]:
+                            bal = self.sql.getRec(tables="genbal",
+                                cols=["round(sum(glo_cyr), 2)"],
+                                where=[("glo_cono", "in", self.consol),
+                                ("glo_acno", "=", self.s_acno),
+                                ("glo_trdt", "=", self.pers[p]["o_dte"])],
+                                limit=1)
+                            if not bal[0]:
+                                lyr[p-1] = 0
+                            else:
+                                lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="genbal",
                     cols=["round(sum(glo_cyr), 2)"], where=[("glo_cono", "in",
                     self.consol), ("glo_acno", "=", self.s_acno), ("glo_trdt",
-                    "=", self.period[1][0])], limit=1)[0]
-        if not lyr:
-            lyr = 0
+                    "=", self.pers[0]["o_dte"])], limit=1)[0]
         if not cyr:
             cyr = 0
         return (lyr, cyr)
@@ -10782,32 +10851,48 @@
             if self.sysdp[0] == "Y" and not self.depart:
                 bas = 10 ** (7 - self.sysdp[1])
                 acc = self.s_acno % bas
-                lyr = self.sql.getRec(tables="gentrn",
-                    cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono",
-                    "=", self.s_cono), ("glt_acno", "%", bas, "=", acc),
-                    ("glt_curdt", "=", (curdt - 100))], limit=1)[0]
+                lyr = [0, 0, 0]
+                cdt = curdt
+                for p in range(3, 0, -1):
+                    if self.pers[p]:
+                        cdt -= 100
+                        bal = self.sql.getRec(tables="gentrn",
+                            cols=["round(sum(glt_tramt), 2)"],
+                            where=[("glt_cono", "=", self.s_cono),
+                            ("glt_acno", "%", bas, "=", acc),
+                            ("glt_curdt", "=", cdt)], limit=1)
+                        if bal[0]:
+                            lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="gentrn",
                     cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono",
                     "=", self.s_cono), ("glt_acno", "%", bas, "=", acc),
                     ("glt_curdt", "=", curdt)], limit=1)[0]
                 if self.varcd == "P":
-                    bud = lyr
+                    bud = lyr[2]
                 else:
                     bud = self.sql.getRec(tables="genbud",
                         cols=["sum(glb_tramt)"], where=[("glb_cono",
                         "=", self.s_cono), ("glb_acno", "%", bas, "=", acc),
                         ("glb_curdt", "=", curdt)], limit=1)[0]
             else:
-                lyr = self.sql.getRec(tables="gentrn",
-                    cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono",
-                    "=", self.s_cono), ("glt_acno", "=", self.s_acno),
-                    ("glt_curdt", "=", (curdt - 100))], limit=1)[0]
+                lyr = [0, 0, 0]
+                cdt = curdt
+                for p in range(3, 0, -1):
+                    if self.pers[p]:
+                        cdt -= 100
+                        bal = self.sql.getRec(tables="gentrn",
+                            cols=["round(sum(glt_tramt), 2)"],
+                            where=[("glt_cono", "=", self.s_cono),
+                            ("glt_acno", "=", self.s_acno),
+                            ("glt_curdt", "=", cdt)], limit=1)
+                        if bal[0]:
+                            lyr[p-1] = bal[0]
                 cyr = self.sql.getRec(tables="gentrn",
                     cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono",
                     "=", self.s_cono), ("glt_acno", "=", self.s_acno),
                     ("glt_curdt", "=", curdt)], limit=1)[0]
                 if self.varcd == "P":
-                    bud = lyr
+                    bud = lyr[2]
                 else:
                     bud = self.sql.getRec(tables="genbud",
                         cols=["sum(glb_tramt)"], where=[("glb_cono",
@@ -10816,37 +10901,51 @@
         elif self.sysdp[0] == "Y" and not self.depart:
             bas = 10 ** (7 - self.sysdp[1])
             acc = self.s_acno % bas
-            lyr = self.sql.getRec(tables="gentrn",
-                cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "in",
-                self.consol), ("glt_acno", "%", bas, "=", acc),
-                ("glt_curdt", "=", (curdt - 100))], limit=1)[0]
+            lyr = [0, 0, 0]
+            cdt = curdt
+            for p in range(3, 0, -1):
+                if self.pers[p]:
+                    cdt -= 100
+                    bal = self.sql.getRec(tables="gentrn",
+                        cols=["round(sum(glt_tramt), 2)"],
+                        where=[("glt_cono", "in", self.consol),
+                        ("glt_acno", "%", bas, "=", acc),
+                        ("glt_curdt", "=", cdt)], limit=1)
+                    if bal[0]:
+                        lyr[p-1] = bal[0]
             cyr = self.sql.getRec(tables="gentrn",
                 cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "in",
                 self.consol), ("glt_acno", "%", bas, "=", acc),
                 ("glt_curdt", "=", curdt)], limit=1)[0]
             if self.varcd == "P":
-                bud = lyr
+                bud = lyr[2]
             else:
                 bud = self.sql.getRec(tables="genbud", cols=["sum(glb_tramt)"],
                     where=[("glb_cono", "in", self.consol), ("glb_acno", "%",
                     bas, "=", acc), ("glb_curdt", "=", curdt)], limit=1)[0]
         else:
-            lyr = self.sql.getRec(tables="gentrn",
-                cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "in",
-                self.consol), ("glt_acno", "=", self.s_acno), ("glt_curdt",
-                "=", (curdt - 100))], limit=1)[0]
+            lyr = [0, 0, 0]
+            cdt = curdt
+            for p in range(3, 0, -1):
+                if self.pers[p]:
+                    cdt -= 100
+                    bal = self.sql.getRec(tables="gentrn",
+                        cols=["round(sum(glt_tramt), 2)"],
+                        where=[("glt_cono", "in", self.consol),
+                        ("glt_acno", "=", self.s_acno),
+                        ("glt_curdt", "=", cdt)], limit=1)
+                    if bal[0]:
+                        lyr[p-1] = bal[0]
             cyr = self.sql.getRec(tables="gentrn",
                 cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "in",
                 self.consol), ("glt_acno", "=", self.s_acno), ("glt_curdt",
                 "=", curdt)], limit=1)[0]
             if self.varcd == "P":
-                bud = lyr
+                bud = lyr[2]
             else:
                 bud = self.sql.getRec(tables="genbud", cols=["sum(glb_tramt)"],
                     where=[("glb_cono", "in", self.consol), ("glb_acno", "=",
                     self.s_acno), ("glb_curdt", "=", curdt)], limit=1)[0]
-        if not lyr:
-            lyr = 0
         if not cyr:
             cyr = 0
         if not bud:
@@ -10870,7 +10969,7 @@
         self.lines = 1
 
     def doDcode(self):
-        curdt = self.s_per
+        curdt = self.pers[0]["s_per"]
         val_d = [0,0,0]
         mth_d = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
         val_p = [0,0,0,0,0,0]
@@ -10901,19 +11000,19 @@
         if val_d[0] == 0:
             val_p[1] = 0
         else:
-            val_p[1] = round((self.val[1] / val_d[0]) * 100, 2)
+            val_p[1] = round((self.val[3] / val_d[0]) * 100, 2)
         if val_d[1] == 0:
             val_p[2] = 0
             val_p[3] = 0
         else:
-            val_p[2] = round((self.val[2] / val_d[1]) * 100, 2)
-            val_p[3] = round((self.val[3] / val_d[1]) * 100, 2)
+            val_p[2] = round((self.val[4] / val_d[1]) * 100, 2)
+            val_p[3] = round((self.val[5] / val_d[1]) * 100, 2)
         if val_d[2] == 0:
             val_p[4] = 0
             val_p[5] = 0
         else:
-            val_p[4] = round((self.val[4] / val_d[2]) * 100, 2)
-            val_p[5] = round((self.val[5] / val_d[2]) * 100, 2)
+            val_p[4] = round((self.val[6] / val_d[2]) * 100, 2)
+            val_p[5] = round((self.val[7] / val_d[2]) * 100, 2)
         for x in xrange(0, 14):
             if mth_d[x] == 0:
                 mth_p[x] = 0
@@ -10922,16 +11021,20 @@
         return (val_p, mth_p)
 
     def getDbal(self, curdt):
-        lyr = self.sql.getRec(tables="gendtt", cols=["gdt_value"],
-            where=[("gdt_cono", "=", self.conum), ("gdt_code", "=", self.dcode),
-            ("gdt_curdt", "=", (curdt - 100))], limit=1)
+        cdt = curdt
+        lyr = [0, 0, 0]
+        for p in range(1, 4):
+            if self.pers[p]:
+                cdt -= 100
+                bal = self.sql.getRec(tables="gendtt", cols=["gdt_value"],
+                    where=[("gdt_cono", "=", self.conum),
+                    ("gdt_code", "=", self.dcode),
+                    ("gdt_curdt", "=", cdt)], limit=1)
+                if bal:
+                    lyr[p-1] = bal[0]
         cyr = self.sql.getRec(tables="gendtt", cols=["gdt_value"],
             where=[("gdt_cono", "=", self.conum), ("gdt_code", "=", self.dcode),
             ("gdt_curdt", "=", curdt)], limit=1)
-        if not lyr:
-            lyr = 0
-        else:
-            lyr = lyr[0]
         if not cyr:
             cyr = 0
         else:
@@ -10940,7 +11043,7 @@
 
     def signChkChg(self):
         if self.s_type in ("C","G","L","S","T") and self.s_norm == "N":
-            for x in xrange(0, 6):
+            for x in xrange(0, 8):
                 self.val[x] = float(ASD(0) - ASD(self.val[x]))
             for x in xrange(0, 14):
                 self.mth[x] = float(ASD(0) - ASD(self.mth[x]))
@@ -10948,14 +11051,14 @@
     def accumTotals(self, acbal):
         for x in xrange(1, 10):
             if acbal == "A":
-                for y in xrange(0, 6):
+                for y in xrange(0, 8):
                     self.val_tot[x][y] = \
                         float(ASD(self.val_tot[x][y]) + ASD(self.val[y]))
                 for y in xrange(0, 14):
                     self.mth_tot[x][y] = \
                         float(ASD(self.mth_tot[x][y]) + ASD(self.mth[y]))
             elif acbal == "S":
-                for y in xrange(0, 6):
+                for y in xrange(0, 8):
                     self.val_tot[x][y] = \
                         float(ASD(self.val_tot[x][y]) - ASD(self.val[y]))
                 for y in xrange(0, 14):
@@ -10964,14 +11067,14 @@
 
     def storeBalances(self):
         if self.s_acstr == "A":
-            for x in xrange(0, 6):
+            for x in xrange(0, 8):
                 self.val_str[self.s_snum1][x] = \
                     float(ASD(self.val_str[self.s_snum1][x]) + ASD(self.val[x]))
             for x in xrange(0, 14):
                 self.mth_str[self.s_snum1][x] = \
                     float(ASD(self.mth_str[self.s_snum1][x]) + ASD(self.mth[x]))
         elif self.s_acstr == "S":
-            for x in xrange(0, 6):
+            for x in xrange(0, 8):
                 self.val_str[self.s_snum1][x] = \
                     float(ASD(self.val_str[self.s_snum1][x]) - ASD(self.val[x]))
             for x in xrange(0, 14):

=== modified file 'std/bwlimp.py'
--- std/bwlimp.py	2019-01-23 09:10:12 +0000
+++ std/bwlimp.py	2019-04-06 08:20:03 +0000
@@ -35,7 +35,6 @@
 import tb1020
 import tb1030
 import bm1010
-import pm1010
 import rp1010
 import td1010
 import tdc110

=== modified file 'std/bwlmod.py'
--- std/bwlmod.py	2019-01-23 09:10:12 +0000
+++ std/bwlmod.py	2019-04-06 08:20:03 +0000
@@ -1,2 +1,2 @@
 # List of Tartan Modules Packaged for a Distribution
-modlst = ['bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'ms0000', 'ms1010', 'ms3030', 'msc000', 'msc110', 'tb1020', 'tb1030', 'bm1010', 'pm1010', 'rp1010', 'td1010', 'tdc110']
\ No newline at end of file
+modlst = ['bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'ms0000', 'ms1010', 'ms3030', 'msc000', 'msc110', 'tb1020', 'tb1030', 'bm1010', 'rp1010', 'td1010', 'tdc110']
\ No newline at end of file

=== modified file 'std/tarimp.py'
--- std/tarimp.py	2019-01-23 09:10:12 +0000
+++ std/tarimp.py	2019-04-06 10:15:09 +0000
@@ -273,8 +273,8 @@
 import tb3010
 import bm1010
 import fc1010
-import pm1010
 import rp1010
+import rp1020
 import td1010
 import tdc110
 import tp1010

=== modified file 'std/tarmod.py'
--- std/tarmod.py	2019-01-23 09:10:12 +0000
+++ std/tarmod.py	2019-04-06 10:15:09 +0000
@@ -1,2 +1,2 @@
 # List of Tartan Modules Packaged for a Distribution
-modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'arc110', 'arc210', 'arc310', 'arc320', 'bk1010', 'bk1020', 'bk2010', 'bk3010', 'bk3020', 'bk3030', 'bk3040', 'bk3050', 'bk3060', 'bk3070', 'bk3080', 'bk3090', 'bkc110', 'bkc210', 'bkc310', 'bkc410', 'bkc510', 'bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'cr1010', 'cr2010', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr4010', 'cr6010', 'cr6020', 'crc110', 'dr1010', 'dr1020', 'dr2010', 'dr2020', 'dr2030', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'dr6030', 'drc110', 'drc210', 'drc220', 'drc310', 'drc320', 'drc410', 'drc420', 'drc510', 'drc520', 'drc610', 'drc710', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ml1010', 'ml2010', 'ml2020', 'ml3010', 'ml3020', 'ml3030', 'ml3040', 'ml3050', 'ml3060', 'ml3070', 'ml3080', 'ml3090', 'ml3100', 'ml3110', 'ml3120', 'ml6010', 'ml6020', 'ml6030', 'mlc110', 'mlc210', 'mlc310', 'mlc410', 'mlm010', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy020', 'ps2010', 'ps2020', 'ps2030', 'psc110', 'rc1010', 'rc1020', 'rc1030', 'rc2010', 'rc3010', 'rc3020', 'rc3030', 'rc3040', 'rc3050', 'rc3060', 'rc3070', 'rc3080', 'rc3090', 'rc4010', 'rc4020', 'rcc110', 'rcc210', 'rcc220', 'rcc310', 'rcm010', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3070', 'si3080', 'si6010', 'sic110', 'st1010', 'st1020', 'st2010', 'st2020', 'st2030', 'st2040', 'st3010', 'st3020', 'st3030', 'st3040', 'st3050', 'st3060', 'st3070', 'st3080', 'st3090', 'st3100', 'st3110', 'st3120', 'st4010', 'st5010', 'st5020', 'st5030', 'st5040', 'st6010', 'st6020', 'st6030', 'st6040', 'stc110', 'stc210', 'stc220', 'stc310', 'stc320', 'stc410', 'stc420', 'tb1010', 'tb1020', 'tb1030', 'tb1040', 'tb3010', 'bm1010', 'fc1010', 'pm1010', 'rp1010', 'td1010', 'tdc110', 'tp1010', 'sl1010', 'sl2010', 'sl2020', 'sl2030', 'sl3010', 'sl3020', 'sl3030', 'sl3040', 'sl4010', 'wg1010', 'wg2010', 'wg2020', 'wg2030', 'wg3010', 'wg3020', 'wg3030', 'wg3040', 'wg3050', 'wg3060', 'wg3070', 'wg4010', 'wgc110', 'wgc210', 'wgc220', 'wgc310', 'wgc320', 'wgc410', 'wgc420', 'wgc610']
\ No newline at end of file
+modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'arc110', 'arc210', 'arc310', 'arc320', 'bk1010', 'bk1020', 'bk2010', 'bk3010', 'bk3020', 'bk3030', 'bk3040', 'bk3050', 'bk3060', 'bk3070', 'bk3080', 'bk3090', 'bkc110', 'bkc210', 'bkc310', 'bkc410', 'bkc510', 'bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'cr1010', 'cr2010', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr4010', 'cr6010', 'cr6020', 'crc110', 'dr1010', 'dr1020', 'dr2010', 'dr2020', 'dr2030', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'dr6030', 'drc110', 'drc210', 'drc220', 'drc310', 'drc320', 'drc410', 'drc420', 'drc510', 'drc520', 'drc610', 'drc710', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ml1010', 'ml2010', 'ml2020', 'ml3010', 'ml3020', 'ml3030', 'ml3040', 'ml3050', 'ml3060', 'ml3070', 'ml3080', 'ml3090', 'ml3100', 'ml3110', 'ml3120', 'ml6010', 'ml6020', 'ml6030', 'mlc110', 'mlc210', 'mlc310', 'mlc410', 'mlm010', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy020', 'ps2010', 'ps2020', 'ps2030', 'psc110', 'rc1010', 'rc1020', 'rc1030', 'rc2010', 'rc3010', 'rc3020', 'rc3030', 'rc3040', 'rc3050', 'rc3060', 'rc3070', 'rc3080', 'rc3090', 'rc4010', 'rc4020', 'rcc110', 'rcc210', 'rcc220', 'rcc310', 'rcm010', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3070', 'si3080', 'si6010', 'sic110', 'st1010', 'st1020', 'st2010', 'st2020', 'st2030', 'st2040', 'st3010', 'st3020', 'st3030', 'st3040', 'st3050', 'st3060', 'st3070', 'st3080', 'st3090', 'st3100', 'st3110', 'st3120', 'st4010', 'st5010', 'st5020', 'st5030', 'st5040', 'st6010', 'st6020', 'st6030', 'st6040', 'stc110', 'stc210', 'stc220', 'stc310', 'stc320', 'stc410', 'stc420', 'tb1010', 'tb1020', 'tb1030', 'tb1040', 'tb3010', 'bm1010', 'fc1010', 'rp1010', 'rp1020', 'td1010', 'tdc110', 'tp1010', 'sl1010', 'sl2010', 'sl2020', 'sl2030', 'sl3010', 'sl3020', 'sl3030', 'sl3040', 'sl4010', 'wg1010', 'wg2010', 'wg2020', 'wg2030', 'wg3010', 'wg3020', 'wg3030', 'wg3040', 'wg3050', 'wg3060', 'wg3070', 'wg4010', 'wgc110', 'wgc210', 'wgc220', 'wgc310', 'wgc320', 'wgc410', 'wgc420', 'wgc610']
\ No newline at end of file

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2019-01-23 09:10:12 +0000
+++ std/tartanFunctions.py	2019-04-03 07:53:29 +0000
@@ -1420,7 +1420,10 @@
         df.enableButtonsTags(state=state)
         df.focusField(df.frt, df.pag, df.col)
     if ret:
-        return getattr(mod, ret)
+        try:
+            return getattr(mod, ret)
+        except:
+            return
     else:
         return True
 

=== modified file 'std/tartanWork.py'
--- std/tartanWork.py	2019-02-24 15:37:36 +0000
+++ std/tartanWork.py	2019-04-06 10:02:05 +0000
@@ -344,6 +344,7 @@
             "line_debit": [["", "SD", 11.2, "Line Debit Amount"], []],
             "line_credit": [["", "SD", 11.2, "Line Credit Amount"], []],
             "line_balance": [["", "SD", 11.2, "Line Balance"], []],
+            "running_balance": [["", "SD", 11.2, "Running Balance"], []],
             "carried_forward": [["", "NA", 22, "Carried Forward"], []],
             "brought_forward": [["", "NA", 22, "Brought Forward"], []],
             # Invoice
@@ -3782,6 +3783,7 @@
         ["PYNN","mm_uy","bm1010",3,"Bulk Mail/SMS Utility"],
         ["PNNN","mm_uy","fc1010",0,"Loan/Lease Calculator"],
         ["PNNY","mm_uy","rp1010",2,"Report Generator"],
+        ["PYYY","mm_uy","rp1020",3,"Report Stream"],
         ["PNNN","mm_uy","tp1010",5,"Template Manager"],
         ["F","mm_hp","doAbout",0,"About"],
         ["F","mm_hp","doManual",0,"Reference Manual"],
@@ -3943,7 +3945,7 @@
         ["PYNN","st_tb","st6010",5,"Change Product Codes"],
         ["PYYY","st_tb","st6020",5,"Revalue Stock Records",0],
         ["PYYY","st_tb","st6030",5,"Delete Purchase Orders",0],
-        ["PYNN","st_tb","st6040",5,"Stock Redundancy",0],
+        ["PYNY","st_tb","st6040",5,"Stock Redundancy",0],
         ["PYYY","mm_st","st4010",0,"Interrogation"]],
 
     # Sales Invoicing Routines
@@ -4684,29 +4686,23 @@
     "tplmst": [
         ["booking_form", "Booking Form", "B", "BKM", "", "A4", "P"],
         ["booking_invoice", "Booking Invoice", "I", "BKM", "", "A4", "L"],
-        ["booking_statement", "Booking Statement", "S", "BKM", "N", "A4",
-            "P"],
+        ["booking_statement", "Booking Statement", "S", "BKM", "N", "A4", "P"],
         ["comp_cards", "Competition Cards", "C", "BWL", "", "A4", "P"],
         ["member_cards", "Membership Cards", "M", "MEM", "", "CC", "P"],
         ["payslip", "Payslip", "P", "WAG", "", "A4", "P"],
         ["purchase_order", "Purchase Order", "O", "STR", "", "A4", "L"],
-        ["remittance_advice", "Remittance Advice", "R", "CRS", "", "A4",
-            "P"],
+        ["remittance_advice", "Remittance Advice", "R", "CRS", "", "A4", "P"],
         ["sales_document", "Sales Document", "I", "INV", "", "A4", "L"],
         ["pos_invoice", "Point of Sales Invoice", "J", "POS", "", "A4", "L"],
         ["pos_slip_6", "Point of Sales Slip", "J", "POS", "", "S6", "P"],
         ["pos_slip_8", "Point of Sales Slip", "J", "POS", "", "S8", "P"],
         ["statement_loan", "Statement (Loan)", "S", "LON", "N", "A4", "P"],
-        ["statement_member", "Statement (Member)", "S", "MEM", "N", "A4",
-            "P"],
-        ["statement_normal", "Statement (Normal)", "S", "DRS", "N", "A4",
-            "P"],
+        ["statement_member", "Statement (Member)", "S", "MEM", "N", "A4", "P"],
+        ["statement_normal", "Statement (Normal)", "S", "DRS", "N", "A4", "P"],
         ["statement_other", "Statement (Other)", "S", "DRS", "O", "A4", "P"],
         ["statement_owner", "Statement (Owner)", "S", "RCA", "O", "A4", "P"],
-        ["statement_rental", "Statement (Rental)", "S", "RTL", "N", "A4",
-            "P"],
-        ["statement_tenant", "Statement (Tenant)", "S", "RCA", "T", "A4",
-            "P"]],
+        ["statement_rental", "Statement (Rental)", "S", "RTL", "N", "A4", "P"],
+        ["statement_tenant", "Statement (Tenant)", "S", "RCA", "T", "A4", "P"]],
     "tpldet": [
         ["booking_form", 1.0, "I", "A", "", "", "", 0, "", "", "", "", "",
             "", "", 10.0, 0, 201.0, 10.0, 30.0, 40.0, 0.0, "letterhead", "",
@@ -6481,143 +6477,143 @@
             "N", "N", "L", "LRB", "N", 15.0, 76, 178.0, 271.0, 4.0, 275.0, 2,
             1],
         ["statement_other", 1.0, "I", "A", "", "", "", 0, "#000000", "", "",
-            "", "", "", "", 15.0, 0, 130.0, 15.0, 20.0, 35.0, 0.0,
-            "ctm_logo", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0,
-            0.0, 0.0, 0.0, 0.0, 0, 0],
+            "", "", "", "", 10.0, 0, 125.0, 15.0, 20, 35.0, 0.0, "ctm_logo",
+            "", 0, "#000000", "", "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0,
+            0.0, 0, 0],
         ["statement_other", 2.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_name",
-            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            129.0, 15.0, 5.0, 20.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_name",
+            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            128.0, 15.0, 5, 20.0, 1, 1],
         ["statement_other", 3.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add1",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 21.0, 4.0, 25.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add1",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 21.0, 4, 25.0, 1, 1],
         ["statement_other", 4.0, "C", "A", "L", "RegNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 21.0,
-            4.0, 25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 21.0, 4.0, 25.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 21.0, 4,
+            25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 20, 139.0, 21.0, 4, 25.0, 1, 1],
         ["statement_other", 5.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add2",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 25.0, 3.0, 28.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add2",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 25.0, 3, 28.0, 1, 1],
         ["statement_other", 6.0, "C", "A", "L", "TaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 25.0,
-            4.0, 29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 25.0, 4.0, 29.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 25.0, 4,
+            29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 20, 139.0, 25.0, 4, 29.0, 1, 1],
         ["statement_other", 7.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add3",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 29.0, 4.0, 33.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add3",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 29.0, 4, 33.0, 1, 1],
         ["statement_other", 8.0, "C", "A", "L", "TelNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 29.0,
-            4.0, 33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 29.0, 4.0, 33.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 29.0, 4,
+            33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 15, 129.0, 29.0, 4, 33.0, 1, 1],
         ["statement_other", 9.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_pcode",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 4,
-            23.0, 33.0, 4.0, 37.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_pcode",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 4,
+            21.0, 33.0, 4, 37.0, 1, 1],
         ["statement_other", 10.0, "C", "A", "L", "FaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 33.0,
-            4.0, 37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 33.0, 4.0, 37.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 33.0, 4,
+            37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 15, 129.0, 33.0, 4, 37.0, 1, 1],
         ["statement_other", 11.0, "T", "A", "", "STATEMENT & INVOICE",
-            "courier", 14, "#000000", "Y", "N", "N", "R", "TLRB", "N", 148.0,
-            9, 178.0, 15.0, 5.0, 20.0, 0.0, "", "", 0, "#000000", "", "", "",
-            "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
+            "courier", 14, "#000000", "Y", "N", "N", "R", "TLRB", "N", 158.0,
+            9, 188.0, 15.0, 5, 20.0, 0.0, "", "", 0, "", "", "", "", "", "",
+            "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0, 0],
         ["statement_other", 12.0, "C", "A", "H", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 30, 81.0, 45.0,
-            5.0, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 30, 81.0, 50.0, 4.0, 54.0, 5,
-            1],
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0, 30, 76.0, 45.0,
+            5, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 10.0, 30, 76.0, 50.0, 4, 54.0, 5, 1],
         ["statement_other", 13.0, "C", "A", "H", "Chain", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            47.0, 5.0, 52.0, 0.0, "drm_chain", "courier", 10, "#000000", "N",
-            "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 52.0, 4.0, 56.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            47.0, 5, 52.0, 0.0, "drm_chain", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 52.0, 4, 56.0, 1,
             1],
         ["statement_other", 14.0, "C", "A", "H", "Acc-Num", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            56.0, 5.0, 61.0, 0.0, "drm_acno", "courier", 10, "#000000", "N",
-            "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 61.0, 4.0, 65.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            56.0, 5, 61.0, 0.0, "drm_acno", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 61.0, 4, 65.0, 1,
             1],
         ["statement_other", 15.0, "C", "A", "H", "Page", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            65.0, 5.0, 70.0, 0.0, "page_number", "courier", 10, "#000000",
-            "N", "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 70.0, 4.0,
-            74.0, 1, 1],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            65.0, 5, 70.0, 0.0, "page_number", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 70.0, 4, 74.0, 1,
+            1],
         ["statement_other", 16.0, "C", "A", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            74.0, 5.0, 79.0, 0.0, "document_date", "courier", 10, "#000000",
-            "N", "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 79.0, 4.0,
-            83.0, 1, 1],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            74.0, 5, 79.0, 0.0, "document_date", "courier", 10, "#000000",
+            "N", "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 79.0, 4, 83.0,
+            1, 1],
         ["statement_other", 17.0, "C", "B", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 15.0, 10, 38.0, 85.0,
-            5.0, 90.0, 0.0, "drt_trdt", "courier", 10, "#000000", "N", "N",
-            "N", "C", "LR", "N", 15.0, 10, 38.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 10.0, 10, 33.0, 85.0,
+            5, 90.0, 0.0, "drt_trdt", "courier", 10, "#000000", "N", "N",
+            "N", "C", "LR", "N", 10.0, 10, 33.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 18.0, "C", "B", "H", "Reference", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 38.0, 9, 59.0, 85.0,
-            5.0, 90.0, 0.0, "drt_ref1", "courier", 10, "#000000", "N", "N",
-            "N", "L", "R", "N", 38.0, 9, 59.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 33.0, 9, 54.0, 85.0,
+            5, 90.0, 0.0, "drt_ref1", "courier", 10, "#000000", "N", "N",
+            "N", "L", "R", "N", 33.0, 9, 54.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 19.0, "C", "B", "H", "Typ", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 59.0, 3, 67.0, 85.0,
-            5.0, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
-            "N", "C", "R", "N", 59.0, 3, 67.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 54.0, 3, 62.0, 85.0,
+            5, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
+            "N", "C", "R", "N", 54.0, 3, 62.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 20.0, "C", "B", "H", "Details", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 67.0, 30, 148.0,
-            85.0, 5.0, 90.0, 0.0, "drt_desc", "courier", 10, "#000000", "N",
-            "N", "N", "L", "R", "N", 67.0, 30, 148.0, 90.0, 4.0, 94.0, 1,
-            38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 62.0, 30, 128.0,
+            85.0, 5, 90.0, 0.0, "drt_desc", "courier", 10, "#000000", "N",
+            "N", "N", "L", "R", "N", 62.0, 30, 128.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 21.0, "C", "B", "H", "Amount", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            85.0, 5.0, 90.0, 0.0, "drt_tramt", "courier", 10, "#000000", "N",
-            "N", "N", "R", "R", "N", 148.0, 13, 178.0, 90.0, 4.0, 94.0, 1,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 128.0, 13, 158.0,
+            85.0, 5, 90.0, 0.0, "drt_tramt", "courier", 10, "#000000", "N",
+            "N", "N", "R", "R", "N", 128.0, 13, 158.0, 90.0, 4, 94.0, 1, 38],
+        ["statement_other", 22.0, "C", "B", "H", "Balance", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 158.0, 13, 188.0,
+            85.0, 5, 90.0, 0.0, "running_balance", "courier", 10, "#000000",
+            "N", "N", "N", "R", "R", "N", 158.0, 13, 188.0, 90.0, 4, 94.0, 1,
             38],
-        ["statement_other", 22.0, "C", "C", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0,
+        ["statement_other", 23.0, "C", "C", "N", "", "", 0, "#000000", "",
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0,
             "carried_forward", "courier", 10, "#000000", "Y", "N", "N", "R",
-            "LRB", "N", 129.0, 22, 178.0, 244.0, 5.0, 249.0, 1, 1],
-        ["statement_other", 23.0, "C", "C", "H", "Arrears", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 15.0, 13, 88.0,
-            244.0, 5.0, 249.0, 0.0, "total_arrears", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 15.0, 13, 88.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 24.0, "C", "C", "H", "Month-Excl", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 88.0, 13, 118.0,
-            244.0, 5.0, 249.0, 0.0, "month_exclusive", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 88.0, 13, 118.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 25.0, "C", "C", "H", "Month-VAT", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 118.0, 13, 148.0,
-            244.0, 5.0, 249.0, 0.0, "month_tax", "courier", 10, "#000000",
-            "Y", "N", "N", "R", "TLRB", "N", 118.0, 13, 148.0, 249.0, 4.0,
+            "LRB", "N", 124.0, 22, 173.0, 244.0, 5, 249.0, 1, 1],
+        ["statement_other", 24.0, "C", "C", "H", "Arrears", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 10.0, 22, 59.0,
+            244.0, 5, 249.0, 0.0, "total_arrears", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "TLRB", "N", 10.0, 22, 59.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_other", 25.0, "C", "C", "H", "Month-Excl", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 59.0, 22, 108.0,
+            244.0, 5, 249.0, 0.0, "month_exclusive", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "N", 59.0, 22, 108.0,
+            249.0, 4, 253.0, 1, 1],
+        ["statement_other", 26.0, "C", "C", "H", "Month-VAT", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 108.0, 22, 158.0,
+            244.0, 5, 249.0, 0.0, "month_tax", "courier", 10, "#000000", "Y",
+            "N", "N", "R", "TLRB", "N", 108.0, 22, 158.0, 249.0, 4, 253.0, 1,
+            1],
+        ["statement_other", 27.0, "C", "C", "H", "Total Due", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 158.0, 13, 188.0,
+            244.0, 5, 249.0, 0.0, "total_balance", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "TLRB", "N", 158.0, 13, 188.0, 249.0, 4,
             253.0, 1, 1],
-        ["statement_other", 26.0, "C", "C", "H", "Total Due", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            244.0, 5.0, 249.0, 0.0, "total_balance", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 148.0, 13, 178.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 27.0, "T", "D", "", "Banking Details:",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0,
-            30, 178.0, 255.0, 5.0, 260.0, 0.0, "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
-        ["statement_other", 28.0, "C", "D", "L", "Bank:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "LB", "N", 15.0, 5, 28.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N",
-            "N", "N", "L", "B", "N", 28.0, 27, 87.0, 260.0, 4.0, 264.0, 1,
-            1],
-        ["statement_other", 29.0, "C", "D", "L", "Branch:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "B", "N", 87.0, 7, 104.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N",
-            "N", "L", "B", "N", 104.0, 8, 123.0, 260.0, 4.0, 264.0, 1, 1],
-        ["statement_other", 30.0, "C", "D", "L", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "B", "N", 123.0, 8, 142.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N",
-            "N", "N", "L", "RB", "N", 142.0, 16, 178.0, 260.0, 4.0, 264.0, 1,
-            1],
-        ["statement_other", 31.0, "C", "D", "H", "Message:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 76, 178.0,
-            266.0, 5.0, 271.0, 0.0, "message", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 76, 178.0, 271.0, 4.0, 275.0,
-            2, 1],
+        ["statement_other", 28.0, "T", "D", "", "Banking Details:",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0,
+            83, 188.0, 255.0, 5, 260.0, 0.0, "", "", 0, "", "", "", "", "",
+            "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0, 0],
+        ["statement_other", 29.0, "C", "D", "L", "Bank:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "LB", "N", 10.0, 5, 23.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N", "N",
+            "N", "L", "B", "N", 23.0, 34, 97.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 30.0, "C", "D", "L", "Branch:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "B", "N", 97.0, 7, 114.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N",
+            "N", "L", "B", "N", 114.0, 8, 133.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 31.0, "C", "D", "L", "Account:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "B", "N", 133.0, 8, 152.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N", "N",
+            "N", "L", "RB", "N", 152.0, 16, 188.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 32.0, "C", "D", "H", "Message:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0, 83, 188.0,
+            266.0, 5, 271.0, 0.0, "message", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 10.0, 83, 188.0, 271.0, 4, 275.0, 2,
+            1],
         ["statement_owner", 1.0, "I", "A", "", "", "", 0, "#000000", "", "",
             "", "", "", "", 15.0, 0, 130.0, 15.0, 20.0, 35.0, 0.0,
             "ctm_logo", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0,
@@ -6910,170 +6906,170 @@
             "N", "N", "L", "TLRB", "N", 10.0, 76, 204.0, 279.0, 4.0, 283.0,
             2, 1],
         ["statement_tenant", 1.0, "I", "A", "", "", "", 0, "#000000", "", "",
-            "", "", "", "", 15.0, 0, 130.0, 15.0, 20.0, 35.0, 0.0,
-            "ctm_logo", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0,
-            0.0, 0.0, 0.0, 0.0, 0, 0],
+            "", "", "", "", 5.0, 0, 120.0, 15.0, 20, 35.0, 0.0, "ctm_logo",
+            "", 0, "#000000", "", "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0,
+            0.0, 0, 0],
         ["statement_tenant", 2.0, "C", "A", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_name",
-            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            129.0, 15.0, 5.0, 20.0, 1, 1],
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_name",
+            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 5.0, 30,
+            123.0, 15.0, 5, 20.0, 1, 1],
         ["statement_tenant", 3.0, "C", "A", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add1",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 21.0, 4.0, 25.0, 1, 1],
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add1",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 5.0, 30,
+            71.0, 21.0, 4, 25.0, 1, 1],
         ["statement_tenant", 4.0, "C", "A", "L", "RegNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 21.0,
-            4.0, 25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 21.0, 4.0, 25.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 75.0, 7, 92.0, 21.0, 4,
+            25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 90.0, 20, 134.0, 21.0, 4, 25.0, 1, 1],
         ["statement_tenant", 5.0, "C", "A", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add2",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 25.0, 3.0, 28.0, 1, 1],
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add2",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 5.0, 30,
+            71.0, 25.0, 3, 28.0, 1, 1],
         ["statement_tenant", 6.0, "C", "A", "L", "TaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 25.0,
-            4.0, 29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 25.0, 4.0, 29.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 75.0, 7, 92.0, 25.0, 4,
+            29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 90.0, 20, 134.0, 25.0, 4, 29.0, 1, 1],
         ["statement_tenant", 7.0, "C", "A", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add3",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 29.0, 4.0, 33.0, 1, 1],
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add3",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 5.0, 30,
+            71.0, 29.0, 4, 33.0, 1, 1],
         ["statement_tenant", 8.0, "C", "A", "L", "TelNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 29.0,
-            4.0, 33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 29.0, 4.0, 33.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 75.0, 7, 92.0, 29.0, 4,
+            33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 90.0, 15, 124.0, 29.0, 4, 33.0, 1, 1],
         ["statement_tenant", 9.0, "C", "A", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_pcode",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 4,
-            23.0, 33.0, 4.0, 37.0, 1, 1],
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_pcode",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 5.0, 4,
+            16.0, 33.0, 4, 37.0, 1, 1],
         ["statement_tenant", 10.0, "C", "A", "L", "FaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 33.0,
-            4.0, 37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 33.0, 4.0, 37.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 75.0, 7, 92.0, 33.0, 4,
+            37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 90.0, 15, 124.0, 33.0, 4, 37.0, 1, 1],
         ["statement_tenant", 11.0, "T", "A", "", "STATEMENT", "courier", 14,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 148.0, 9, 178.0,
-            15.0, 5.0, 20.0, 0.0, "", "", 0, "#000000", "", "", "", "", "",
-            "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
+            "#000000", "Y", "N", "N", "R", "TLRB", "N", 168.0, 9, 198.0,
+            15.0, 5, 20.0, 0.0, "", "", 0, "", "", "", "", "", "", "", 0.0,
+            0, 0.0, 0.0, 0, 0.0, 0, 0],
         ["statement_tenant", 12.0, "C", "A", "H", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 30, 81.0, 45.0,
-            5.0, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 30, 81.0, 50.0, 4.0, 54.0, 5,
-            1],
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 5.0, 30, 71.0, 45.0,
+            5, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 5.0, 30, 71.0, 50.0, 4, 54.0, 5, 1],
         ["statement_tenant", 13.0, "C", "A", "H", "Owner", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            47.0, 5.0, 52.0, 0.0, "rtn_owner", "courier", 10, "#000000", "N",
-            "N", "N", "C", "LRB", "N", 148.0, 13, 178.0, 52.0, 4.0, 56.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 168.0, 13, 198.0,
+            47.0, 5, 52.0, 0.0, "rtn_owner", "courier", 10, "#000000", "N",
+            "N", "N", "C", "LRB", "N", 168.0, 13, 198.0, 52.0, 4, 56.0, 1,
             1],
         ["statement_tenant", 14.0, "C", "A", "H", "Premises", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            56.0, 5.0, 61.0, 0.0, "rtn_code", "courier", 10, "#000000", "N",
-            "N", "N", "C", "LRB", "N", 148.0, 13, 178.0, 61.0, 4.0, 65.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 168.0, 13, 198.0,
+            56.0, 5, 61.0, 0.0, "rtn_code", "courier", 10, "#000000", "N",
+            "N", "N", "C", "LRB", "N", 168.0, 13, 198.0, 61.0, 4, 65.0, 1,
             1],
         ["statement_tenant", 15.0, "C", "A", "H", "Tenant", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            65.0, 5.0, 70.0, 0.0, "rtn_acno", "courier", 10, "#000000", "N",
-            "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 70.0, 4.0, 74.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 168.0, 13, 198.0,
+            65.0, 5, 70.0, 0.0, "rtn_acno", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 168.0, 13, 198.0, 70.0, 4, 74.0, 1,
             1],
         ["statement_tenant", 16.0, "C", "A", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            74.0, 5.0, 79.0, 0.0, "document_date", "courier", 10, "#000000",
-            "N", "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 79.0, 4.0,
-            83.0, 1, 1],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 168.0, 13, 198.0,
+            74.0, 5, 79.0, 0.0, "document_date", "courier", 10, "#000000",
+            "N", "N", "N", "C", "TLRB", "N", 168.0, 13, 198.0, 79.0, 4, 83.0,
+            1, 1],
         ["statement_tenant", 17.0, "C", "B", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 15.0, 10, 38.0, 85.0,
-            5.0, 90.0, 0.0, "rtu_trdt", "courier", 10, "#000000", "N", "N",
-            "N", "C", "LR", "N", 15.0, 10, 38.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 5.0, 10, 28.0, 85.0,
+            5, 90.0, 0.0, "rtu_trdt", "courier", 10, "#000000", "N", "N",
+            "N", "C", "LR", "N", 5.0, 10, 28.0, 90.0, 4, 94.0, 1, 38],
         ["statement_tenant", 18.0, "C", "B", "H", "Reference", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 38.0, 9, 59.0, 85.0,
-            5.0, 90.0, 0.0, "rtu_refno", "courier", 10, "#000000", "N", "N",
-            "N", "L", "R", "N", 38.0, 9, 59.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 28.0, 9, 49.0, 85.0,
+            5, 90.0, 0.0, "rtu_refno", "courier", 10, "#000000", "N", "N",
+            "N", "L", "R", "N", 28.0, 9, 49.0, 90.0, 4, 94.0, 1, 38],
         ["statement_tenant", 19.0, "C", "B", "H", "Typ", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 59.0, 3, 67.0, 85.0,
-            5.0, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
-            "N", "C", "R", "N", 59.0, 3, 67.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 49.0, 3, 57.0, 85.0,
+            5, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
+            "N", "C", "R", "N", 49.0, 3, 57.0, 90.0, 4, 94.0, 1, 38],
         ["statement_tenant", 20.0, "C", "B", "H", "Details", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 67.0, 33, 140.0,
-            85.0, 5.0, 90.0, 0.0, "rtu_desc", "courier", 10, "#000000", "N",
-            "N", "N", "L", "R", "N", 67.0, 33, 140.0, 90.0, 4.0, 94.0, 1,
-            38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 57.0, 33, 130.0,
+            85.0, 5, 90.0, 0.0, "rtu_desc", "courier", 10, "#000000", "N",
+            "N", "N", "L", "R", "N", 57.0, 33, 130.0, 90.0, 4, 94.0, 1, 38],
         ["statement_tenant", 21.0, "C", "B", "H", "CCC", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 140.0, 3, 148.0,
-            85.0, 5.0, 90.0, 0.0, "mvtype_code", "courier", 10, "#000000",
-            "N", "N", "N", "L", "R", "N", 140.0, 3, 148.0, 90.0, 4.0, 94.0,
-            1, 38],
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 130.0, 3, 138.0,
+            85.0, 5, 90.0, 0.0, "mvtype_code", "courier", 10, "#000000", "N",
+            "N", "N", "L", "R", "N", 130.0, 3, 138.0, 90.0, 4, 94.0, 1, 38],
         ["statement_tenant", 22.0, "C", "B", "H", "Amount", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            85.0, 5.0, 90.0, 0.0, "line_balance", "courier", 10, "#000000",
-            "N", "N", "N", "R", "R", "N", 148.0, 13, 178.0, 90.0, 4.0, 94.0,
-            1, 38],
-        ["statement_tenant", 23.0, "C", "C", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0,
-            "carried_forward", "courier", 10, "#000000", "Y", "N", "N", "R",
-            "LRB", "N", 129.0, 22, 178.0, 244.0, 5.0, 249.0, 1, 1],
-        ["statement_tenant", 24.0, "C", "C", "H", "Rentals", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 15.0, 11, 40.0,
-            244.0, 5.0, 249.0, 0.0, "total_rental", "courier", 10, "#000000",
-            "Y", "N", "N", "R", "LRB", "N", 15.0, 11, 40.0, 249.0, 4.0,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 138.0, 13, 168.0,
+            85.0, 5, 90.0, 0.0, "line_balance", "courier", 10, "#000000",
+            "N", "N", "N", "R", "R", "N", 138.0, 13, 168.0, 90.0, 4, 94.0, 1,
+            38],
+        ["statement_tenant", 23.0, "C", "B", "H", "Balance", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 168.0, 13, 198.0,
+            85.0, 5, 90.0, 0.0, "running_balance", "courier", 10, "#000000",
+            "N", "N", "N", "R", "R", "N", 168.0, 13, 198.0, 90.0, 4, 94.0, 1,
+            38],
+        ["statement_tenant", 24.0, "C", "C", "N", "", "", 0, "", "", "", "",
+            "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "carried_forward",
+            "courier", 10, "#000000", "Y", "N", "N", "R", "LRB", "N", 149.0,
+            22, 198.0, 244.0, 5, 249.0, 1, 1],
+        ["statement_tenant", 25.0, "C", "C", "H", "Rentals", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 5.0, 14, 37.0, 244.0,
+            5, 249.0, 0.0, "total_rental", "courier", 10, "#000000", "Y",
+            "N", "N", "R", "LRB", "N", 5.0, 14, 37.0, 249.0, 4, 253.0, 1, 1],
+        ["statement_tenant", 26.0, "C", "C", "H", "Deposit", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 37.0, 14, 69.0,
+            244.0, 5, 249.0, 0.0, "total_receipts", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "RB", "N", 37.0, 14, 69.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_tenant", 27.0, "C", "C", "H", "Fees", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 69.0, 14, 101.0,
+            244.0, 5, 249.0, 0.0, "total_payments", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "RB", "N", 69.0, 14, 101.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_tenant", 28.0, "C", "C", "H", "Services", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 101.0, 14, 133.0,
+            244.0, 5, 249.0, 0.0, "total_journals", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "RB", "N", 101.0, 14, 133.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_tenant", 29.0, "C", "C", "H", "Repairs", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 133.0, 15, 168.0,
+            244.0, 5, 249.0, 0.0, "total_deposit", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "RB", "N", 133.0, 15, 168.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_tenant", 30.0, "C", "C", "H", "Total Due", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 168.0, 13, 198.0,
+            244.0, 5, 249.0, 0.0, "total_balance", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "LRB", "N", 168.0, 13, 198.0, 249.0, 4,
             253.0, 1, 1],
-        ["statement_tenant", 25.0, "C", "C", "H", "Deposit", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 40.0, 11, 65.0,
-            244.0, 5.0, 249.0, 0.0, "total_receipts", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "RB", "N", 40.0, 11, 65.0, 249.0,
-            4.0, 253.0, 1, 1],
-        ["statement_tenant", 26.0, "C", "C", "H", "Fees", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 65.0, 11, 90.0,
-            244.0, 5.0, 249.0, 0.0, "total_payments", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "RB", "N", 65.0, 11, 90.0, 249.0,
-            4.0, 253.0, 1, 1],
-        ["statement_tenant", 27.0, "C", "C", "H", "Services", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 90.0, 12, 118.0,
-            244.0, 5.0, 249.0, 0.0, "total_journals", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "RB", "N", 90.0, 12, 118.0, 249.0,
-            4.0, 253.0, 1, 1],
-        ["statement_tenant", 28.0, "C", "C", "H", "Repairs", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 118.0, 13, 148.0,
-            244.0, 5.0, 249.0, 0.0, "total_deposit", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "RB", "N", 118.0, 13, 148.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_tenant", 29.0, "C", "C", "H", "Total Due", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            244.0, 5.0, 249.0, 0.0, "total_balance", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "RB", "N", 148.0, 13, 178.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_tenant", 30.0, "T", "D", "",
+        ["statement_tenant", 31.0, "T", "D", "",
             "Banking and Property Details:", "courier", 10, "#000000", "Y",
-            "N", "N", "L", "TLRB", "Y", 15.0, 76, 178.0, 255.0, 5.0, 260.0,
-            0.0, "", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0, 0.0,
-            0.0, 0.0, 0.0, 0, 0],
-        ["statement_tenant", 31.0, "C", "D", "L", "Bank:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "L", "N", 15.0, 5, 28.0, 260.0,
-            5.0, 265.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N",
-            "N", "N", "L", "", "N", 28.0, 27, 87.0, 260.0, 5.0, 265.0, 1, 1],
-        ["statement_tenant", 32.0, "C", "D", "L", "Branch:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 87.0, 7, 104.0, 260.0,
-            5.0, 265.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N",
-            "N", "L", "", "N", 104.0, 8, 123.0, 260.0, 5.0, 265.0, 1, 1],
-        ["statement_tenant", 33.0, "C", "D", "L", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 123.0, 8, 142.0, 260.0,
-            5.0, 265.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N",
-            "N", "N", "L", "R", "N", 142.0, 16, 178.0, 260.0, 5.0, 265.0, 1,
-            1],
-        ["statement_tenant", 34.0, "T", "D", "", "BLANK", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "LR", "N", 15.0, 76, 178.0, 264.0,
-            2.0, 266.0, 0.0, "", "", 0, "#000000", "", "", "", "", "", "",
-            0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
-        ["statement_tenant", 35.0, "C", "D", "L", "Property:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "LB", "N", 15.0, 9, 36.0, 266.0,
-            6.0, 272.0, 0.0, "rcp_addr1", "courier", 10, "#000000", "N", "N",
-            "N", "L", "B", "N", 36.0, 45, 133.0, 266.0, 6.0, 272.0, 1, 1],
-        ["statement_tenant", 36.0, "C", "D", "L", "Deposit:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "B", "N", 133.0, 8, 153.0, 266.0,
-            6.0, 272.0, 0.0, "deposit", "courier", 10, "#000000", "N", "N",
-            "N", "L", "RB", "N", 153.0, 11, 178.0, 266.0, 6.0, 272.0, 1, 1],
-        ["statement_tenant", 37.0, "C", "D", "H", "Message:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 76, 178.0,
-            274.0, 5.0, 279.0, 0.0, "message", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 76, 178.0, 279.0, 4.0, 283.0,
-            2, 1]],
+            "N", "N", "L", "TLRB", "Y", 5.0, 90, 198.0, 255.0, 5, 260.0, 0.0,
+            "", "", 0, "", "", "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0,
+            0, 0],
+        ["statement_tenant", 32.0, "C", "D", "L", "Bank:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "L", "N", 5.0, 5, 18.0, 260.0, 5,
+            265.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N", "N",
+            "N", "L", "", "N", 18.0, 30, 84.0, 260.0, 5, 265.0, 1, 1],
+        ["statement_tenant", 33.0, "C", "D", "L", "Branch:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "", "N", 84.0, 7, 101.0, 260.0, 5,
+            265.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N", "N",
+            "L", "", "N", 101.0, 10, 124.0, 260.0, 5, 265.0, 1, 1],
+        ["statement_tenant", 34.0, "C", "D", "L", "Account:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "", "N", 124.0, 8, 143.0, 260.0,
+            5, 265.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N", "N",
+            "N", "L", "R", "N", 143.0, 25, 198.0, 260.0, 5, 265.0, 1, 1],
+        ["statement_tenant", 35.0, "T", "D", "", "BLANK", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "LR", "N", 5.0, 90, 198.0, 264.0,
+            2, 266.0, 0.0, "", "", 0, "", "", "", "", "", "", "", 0.0, 0,
+            0.0, 0.0, 0, 0.0, 0, 0],
+        ["statement_tenant", 36.0, "C", "D", "L", "Property:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "LB", "N", 5.0, 9, 26.0, 266.0, 6,
+            272.0, 0.0, "rcp_addr1", "courier", 10, "#000000", "N", "N", "N",
+            "L", "B", "N", 26.0, 54, 142.0, 266.0, 6, 272.0, 1, 1],
+        ["statement_tenant", 37.0, "C", "D", "L", "Deposit:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "B", "N", 142.0, 8, 161.0, 266.0,
+            6, 272.0, 0.0, "deposit", "courier", 10, "#000000", "N", "N",
+            "N", "R", "RB", "N", 161.0, 16, 198.0, 266.0, 6, 272.0, 1, 1],
+        ["statement_tenant", 38.0, "C", "D", "H", "Message:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 5.0, 90, 198.0,
+            274.0, 5, 279.0, 0.0, "message", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 5.0, 90, 198.0, 279.0, 4, 283.0, 2,
+            1]],
     "wagrcv": [
         [3601, "Income - Taxable"],
         [3602, "Income - Non-Taxable"],

=== modified file 'std/tartanWork_rne.py'
--- std/tartanWork_rne.py	2019-02-24 15:37:36 +0000
+++ std/tartanWork_rne.py	2019-04-04 16:29:29 +0000
@@ -2090,7 +2090,6 @@
         ["PNNN","ms_rp","ms3030",3,"Email Log Report"],
         ["PYYY","ms_ye","msy010",6,"Year End Routine (Single Company)"],
         ["PNNY","ms_ye","msy030",6,"Year End Routine (All Companies)"],
-        ["PYNN","mm_uy","bm1010",3,"Bulk Mail Utility"],
         ["PNNN","mm_uy","fc1010",0,"Loan/Lease Calculator"],
         ["PNNY","mm_uy","rp1010",2,"Report Generator"],
         ["PNNN","mm_uy","ss1010",1,"Stock Sheets"],
@@ -3195,143 +3194,143 @@
             "N", "N", "L", "LRB", "N", 15.0, 76, 178.0, 271.0, 4.0, 275.0, 2,
             1],
         ["statement_other", 1.0, "I", "A", "", "", "", 0, "#000000", "", "",
-            "", "", "", "", 15.0, 0, 130.0, 15.0, 20.0, 35.0, 0.0,
-            "ctm_logo", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0,
-            0.0, 0.0, 0.0, 0.0, 0, 0],
+            "", "", "", "", 10.0, 0, 125.0, 15.0, 20, 35.0, 0.0, "ctm_logo",
+            "", 0, "#000000", "", "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0,
+            0.0, 0, 0],
         ["statement_other", 2.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_name",
-            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            129.0, 15.0, 5.0, 20.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_name",
+            "courier", 18, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            128.0, 15.0, 5, 20.0, 1, 1],
         ["statement_other", 3.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add1",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 21.0, 4.0, 25.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add1",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 21.0, 4, 25.0, 1, 1],
         ["statement_other", 4.0, "C", "A", "L", "RegNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 21.0,
-            4.0, 25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 21.0, 4.0, 25.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 21.0, 4,
+            25.0, 0.0, "ctm_regno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 20, 139.0, 21.0, 4, 25.0, 1, 1],
         ["statement_other", 5.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add2",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 25.0, 3.0, 28.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add2",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 25.0, 3, 28.0, 1, 1],
         ["statement_other", 6.0, "C", "A", "L", "TaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 25.0,
-            4.0, 29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 20, 142.0, 25.0, 4.0, 29.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 25.0, 4,
+            29.0, 0.0, "ctm_taxno", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 20, 139.0, 25.0, 4, 29.0, 1, 1],
         ["statement_other", 7.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_add3",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 30,
-            78.0, 29.0, 4.0, 33.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_add3",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 30,
+            76.0, 29.0, 4, 33.0, 1, 1],
         ["statement_other", 8.0, "C", "A", "L", "TelNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 29.0,
-            4.0, 33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 29.0, 4.0, 33.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 29.0, 4,
+            33.0, 0.0, "ctm_tel", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 15, 129.0, 29.0, 4, 33.0, 1, 1],
         ["statement_other", 9.0, "C", "A", "N", "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, "ctm_pcode",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 15.0, 4,
-            23.0, 33.0, 4.0, 37.0, 1, 1],
+            "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0, "ctm_pcode",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "", "N", 10.0, 4,
+            21.0, 33.0, 4, 37.0, 1, 1],
         ["statement_other", 10.0, "C", "A", "L", "FaxNo:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "", "N", 85.0, 7, 100.0, 33.0,
-            4.0, 37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N",
-            "N", "L", "", "N", 100.0, 15, 132.0, 33.0, 4.0, 37.0, 1, 1],
+            "#000000", "Y", "N", "N", "L", "", "N", 80.0, 7, 97.0, 33.0, 4,
+            37.0, 0.0, "ctm_fax", "courier", 10, "#000000", "Y", "N", "N",
+            "L", "", "N", 95.0, 15, 129.0, 33.0, 4, 37.0, 1, 1],
         ["statement_other", 11.0, "T", "A", "", "STATEMENT & INVOICE",
-            "courier", 14, "#000000", "Y", "N", "N", "R", "TLRB", "N", 148.0,
-            9, 178.0, 15.0, 5.0, 20.0, 0.0, "", "", 0, "#000000", "", "", "",
-            "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
+            "courier", 14, "#000000", "Y", "N", "N", "R", "TLRB", "N", 158.0,
+            9, 188.0, 15.0, 5, 20.0, 0.0, "", "", 0, "", "", "", "", "", "",
+            "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0, 0],
         ["statement_other", 12.0, "C", "A", "H", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 30, 81.0, 45.0,
-            5.0, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 30, 81.0, 50.0, 4.0, 54.0, 5,
-            1],
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0, 30, 76.0, 45.0,
+            5, 50.0, 0.0, "account_details", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 10.0, 30, 76.0, 50.0, 4, 54.0, 5, 1],
         ["statement_other", 13.0, "C", "A", "H", "Chain", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            47.0, 5.0, 52.0, 0.0, "drm_chain", "courier", 10, "#000000", "N",
-            "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 52.0, 4.0, 56.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            47.0, 5, 52.0, 0.0, "drm_chain", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 52.0, 4, 56.0, 1,
             1],
         ["statement_other", 14.0, "C", "A", "H", "Acc-Num", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            56.0, 5.0, 61.0, 0.0, "drm_acno", "courier", 10, "#000000", "N",
-            "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 61.0, 4.0, 65.0, 1,
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            56.0, 5, 61.0, 0.0, "drm_acno", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 61.0, 4, 65.0, 1,
             1],
         ["statement_other", 15.0, "C", "A", "H", "Page", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            65.0, 5.0, 70.0, 0.0, "page_number", "courier", 10, "#000000",
-            "N", "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 70.0, 4.0,
-            74.0, 1, 1],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            65.0, 5, 70.0, 0.0, "page_number", "courier", 10, "#000000", "N",
+            "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 70.0, 4, 74.0, 1,
+            1],
         ["statement_other", 16.0, "C", "A", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 148.0, 13, 178.0,
-            74.0, 5.0, 79.0, 0.0, "document_date", "courier", 10, "#000000",
-            "N", "N", "N", "C", "TLRB", "N", 148.0, 13, 178.0, 79.0, 4.0,
-            83.0, 1, 1],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 158.0, 13, 188.0,
+            74.0, 5, 79.0, 0.0, "document_date", "courier", 10, "#000000",
+            "N", "N", "N", "C", "TLRB", "N", 158.0, 13, 188.0, 79.0, 4, 83.0,
+            1, 1],
         ["statement_other", 17.0, "C", "B", "H", "Date", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 15.0, 10, 38.0, 85.0,
-            5.0, 90.0, 0.0, "drt_trdt", "courier", 10, "#000000", "N", "N",
-            "N", "C", "LR", "N", 15.0, 10, 38.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 10.0, 10, 33.0, 85.0,
+            5, 90.0, 0.0, "drt_trdt", "courier", 10, "#000000", "N", "N",
+            "N", "C", "LR", "N", 10.0, 10, 33.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 18.0, "C", "B", "H", "Reference", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 38.0, 9, 59.0, 85.0,
-            5.0, 90.0, 0.0, "drt_ref1", "courier", 10, "#000000", "N", "N",
-            "N", "L", "R", "N", 38.0, 9, 59.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 33.0, 9, 54.0, 85.0,
+            5, 90.0, 0.0, "drt_ref1", "courier", 10, "#000000", "N", "N",
+            "N", "L", "R", "N", 33.0, 9, 54.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 19.0, "C", "B", "H", "Typ", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 59.0, 3, 67.0, 85.0,
-            5.0, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
-            "N", "C", "R", "N", 59.0, 3, 67.0, 90.0, 4.0, 94.0, 1, 38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 54.0, 3, 62.0, 85.0,
+            5, 90.0, 0.0, "type_code", "courier", 10, "#000000", "N", "N",
+            "N", "C", "R", "N", 54.0, 3, 62.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 20.0, "C", "B", "H", "Details", "courier", 10,
-            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 67.0, 30, 148.0,
-            85.0, 5.0, 90.0, 0.0, "drt_desc", "courier", 10, "#000000", "N",
-            "N", "N", "L", "R", "N", 67.0, 30, 148.0, 90.0, 4.0, 94.0, 1,
-            38],
+            "#000000", "Y", "N", "N", "C", "TLRB", "Y", 62.0, 30, 128.0,
+            85.0, 5, 90.0, 0.0, "drt_desc", "courier", 10, "#000000", "N",
+            "N", "N", "L", "R", "N", 62.0, 30, 128.0, 90.0, 4, 94.0, 1, 38],
         ["statement_other", 21.0, "C", "B", "H", "Amount", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            85.0, 5.0, 90.0, 0.0, "drt_tramt", "courier", 10, "#000000", "N",
-            "N", "N", "R", "R", "N", 148.0, 13, 178.0, 90.0, 4.0, 94.0, 1,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 128.0, 13, 158.0,
+            85.0, 5, 90.0, 0.0, "drt_tramt", "courier", 10, "#000000", "N",
+            "N", "N", "R", "R", "N", 128.0, 13, 158.0, 90.0, 4, 94.0, 1, 38],
+        ["statement_other", 22.0, "C", "B", "H", "Balance", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 158.0, 13, 188.0,
+            85.0, 5, 90.0, 0.0, "running_balance", "courier", 10, "#000000",
+            "N", "N", "N", "R", "R", "N", 158.0, 13, 188.0, 90.0, 4, 94.0, 1,
             38],
-        ["statement_other", 22.0, "C", "C", "N", "", "", 0, "#000000", "",
-            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0,
+        ["statement_other", 23.0, "C", "C", "N", "", "", 0, "#000000", "",
+            "", "", "", "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0.0,
             "carried_forward", "courier", 10, "#000000", "Y", "N", "N", "R",
-            "LRB", "N", 129.0, 22, 178.0, 244.0, 5.0, 249.0, 1, 1],
-        ["statement_other", 23.0, "C", "C", "H", "Arrears", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 15.0, 13, 88.0,
-            244.0, 5.0, 249.0, 0.0, "total_arrears", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 15.0, 13, 88.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 24.0, "C", "C", "H", "Month-Excl", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 88.0, 13, 118.0,
-            244.0, 5.0, 249.0, 0.0, "month_exclusive", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 88.0, 13, 118.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 25.0, "C", "C", "H", "Month-VAT", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 118.0, 13, 148.0,
-            244.0, 5.0, 249.0, 0.0, "month_tax", "courier", 10, "#000000",
-            "Y", "N", "N", "R", "TLRB", "N", 118.0, 13, 148.0, 249.0, 4.0,
+            "LRB", "N", 124.0, 22, 173.0, 244.0, 5, 249.0, 1, 1],
+        ["statement_other", 24.0, "C", "C", "H", "Arrears", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 10.0, 22, 59.0,
+            244.0, 5, 249.0, 0.0, "total_arrears", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "TLRB", "N", 10.0, 22, 59.0, 249.0, 4, 253.0,
+            1, 1],
+        ["statement_other", 25.0, "C", "C", "H", "Month-Excl", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 59.0, 22, 108.0,
+            244.0, 5, 249.0, 0.0, "month_exclusive", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "N", 59.0, 22, 108.0,
+            249.0, 4, 253.0, 1, 1],
+        ["statement_other", 26.0, "C", "C", "H", "Month-VAT", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 108.0, 22, 158.0,
+            244.0, 5, 249.0, 0.0, "month_tax", "courier", 10, "#000000", "Y",
+            "N", "N", "R", "TLRB", "N", 108.0, 22, 158.0, 249.0, 4, 253.0, 1,
+            1],
+        ["statement_other", 27.0, "C", "C", "H", "Total Due", "courier", 10,
+            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 158.0, 13, 188.0,
+            244.0, 5, 249.0, 0.0, "total_balance", "courier", 10, "#000000",
+            "Y", "N", "N", "R", "TLRB", "N", 158.0, 13, 188.0, 249.0, 4,
             253.0, 1, 1],
-        ["statement_other", 26.0, "C", "C", "H", "Total Due", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "Y", 148.0, 13, 178.0,
-            244.0, 5.0, 249.0, 0.0, "total_balance", "courier", 10,
-            "#000000", "Y", "N", "N", "R", "TLRB", "N", 148.0, 13, 178.0,
-            249.0, 4.0, 253.0, 1, 1],
-        ["statement_other", 27.0, "T", "D", "", "Banking Details:",
-            "courier", 10, "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0,
-            30, 178.0, 255.0, 5.0, 260.0, 0.0, "", "", 0, "#000000", "", "",
-            "", "", "", "", 0.0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0],
-        ["statement_other", 28.0, "C", "D", "L", "Bank:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "LB", "N", 15.0, 5, 28.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N",
-            "N", "N", "L", "B", "N", 28.0, 27, 87.0, 260.0, 4.0, 264.0, 1,
-            1],
-        ["statement_other", 29.0, "C", "D", "L", "Branch:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "B", "N", 87.0, 7, 104.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N",
-            "N", "L", "B", "N", 104.0, 8, 123.0, 260.0, 4.0, 264.0, 1, 1],
-        ["statement_other", 30.0, "C", "D", "L", "Account:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "B", "N", 123.0, 8, 142.0, 260.0,
-            4.0, 264.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N",
-            "N", "N", "L", "RB", "N", 142.0, 16, 178.0, 260.0, 4.0, 264.0, 1,
-            1],
-        ["statement_other", 31.0, "C", "D", "H", "Message:", "courier", 10,
-            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 15.0, 76, 178.0,
-            266.0, 5.0, 271.0, 0.0, "message", "courier", 10, "#000000", "N",
-            "N", "N", "L", "TLRB", "N", 15.0, 76, 178.0, 271.0, 4.0, 275.0,
-            2, 1],
+        ["statement_other", 28.0, "T", "D", "", "Banking Details:",
+            "courier", 10, "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0,
+            83, 188.0, 255.0, 5, 260.0, 0.0, "", "", 0, "", "", "", "", "",
+            "", "", 0.0, 0, 0.0, 0.0, 0, 0.0, 0, 0],
+        ["statement_other", 29.0, "C", "D", "L", "Bank:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "LB", "N", 10.0, 5, 23.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_name", "courier", 10, "#000000", "N", "N",
+            "N", "L", "B", "N", 23.0, 34, 97.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 30.0, "C", "D", "L", "Branch:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "B", "N", 97.0, 7, 114.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_ibt", "courier", 10, "#000000", "N", "N",
+            "N", "L", "B", "N", 114.0, 8, 133.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 31.0, "C", "D", "L", "Account:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "B", "N", 133.0, 8, 152.0, 260.0,
+            4, 264.0, 0.0, "ctm_b_acno", "courier", 10, "#000000", "N", "N",
+            "N", "L", "RB", "N", 152.0, 16, 188.0, 260.0, 4, 264.0, 1, 1],
+        ["statement_other", 32.0, "C", "D", "H", "Message:", "courier", 10,
+            "#000000", "Y", "N", "N", "L", "TLRB", "Y", 10.0, 83, 188.0,
+            266.0, 5, 271.0, 0.0, "message", "courier", 10, "#000000", "N",
+            "N", "N", "L", "TLRB", "N", 10.0, 83, 188.0, 271.0, 4, 275.0, 2,
+            1],
         ["statement_rental", 1.0, "I", "A", "", "", "", 0, "#000000", "", "",
             "", "", "", "", 10.0, 0, 130.0, 15.0, 20.0, 35.0, 0.0,
             "ctm_logo", "", 0, "#000000", "", "", "", "", "", "", 0.0, 0,

=== modified file 'str/st2020.py'
--- str/st2020.py	2019-01-13 16:38:59 +0000
+++ str/st2020.py	2019-03-17 12:24:28 +0000
@@ -234,37 +234,45 @@
                 err = "Line %s: %s" % ((num + 1), code.err)
                 break
             self.code = code.work
-            chk = self.sql.getRec(tables="strmf1", where=[("st1_group", "=",
+            st1 = self.sql.getRec(tables="strmf1", where=[("st1_group", "=",
                 self.group), ("st1_code", "=", self.code), ("st1_type", "<>",
                 "X")], limit=1)
-            if not chk:
+            err = False
+            if not st1:
                 err = "Line %s: Invalid Group %s or Code %s" % ((num + 1),
                     self.group, self.code)
+            elif st1[self.sql.strmf1_col.index("st1_type")] == "R":
+                err = "Line %s: Invalid Code (Recipe Item)" % (num + 1)
+            elif st1[self.sql.strmf1_col.index("st1_type")] == "X":
+                err = "Line %s: Invalid Code (Redundant" % (num + 1)
+            elif st1[self.sql.strmf1_col.index("st1_type")] == "N":
+                err = "Line %s: Invalid Code (Value Indicator)" % (num + 1)
+            if err:
                 break
-            self.desc = chk[self.sql.strmf1_col.index("st1_desc")]
-            chk = self.sql.getRec(tables="strmf2", where=[("st2_loc", "=",
+            self.desc = st1[self.sql.strmf1_col.index("st1_desc")]
+            st2 = self.sql.getRec(tables="strmf2", where=[("st2_loc", "=",
                 self.loc), ("st2_group", "=", self.group), ("st2_code", "=",
                 self.code)], limit=1)
-            if not chk and self.allloc == "Y":
-                chk = self.sql.getRec(tables="strmf2", where=[("st2_loc", "=",
+            if not st2 and self.allloc == "Y":
+                st2 = self.sql.getRec(tables="strmf2", where=[("st2_loc", "=",
                     "1"), ("st2_group", "=", self.group), ("st2_code", "=",
                     self.code)], limit=1)
-                if chk:
-                    chk[self.sql.strmf2_col.index("st2_loc")] = self.loc
-                    chk[self.sql.strmf2_col.index("st2_bin")] = ""
-                    chk[self.sql.strmf2_col.index("st2_reord_ind")] = "A"
-                    chk[self.sql.strmf2_col.index("st2_reord_level")] = 0
-                    chk[self.sql.strmf2_col.index("st2_reord_qty")] = 0
-                    self.sql.insRec("strmf2", data=chk)
-            if not chk:
+                if st2:
+                    st2[self.sql.strmf2_col.index("st2_loc")] = self.loc
+                    st2[self.sql.strmf2_col.index("st2_bin")] = ""
+                    st2[self.sql.strmf2_col.index("st2_reord_ind")] = "A"
+                    st2[self.sql.strmf2_col.index("st2_reord_level")] = 0
+                    st2[self.sql.strmf2_col.index("st2_reord_qty")] = 0
+                    self.sql.insRec("strmf2", data=st2)
+            if not st2:
                 err = "Line %s: Invalid Location %s" % ((num + 1), self.loc)
                 break
-            qty = CCD(line[idx+2], "UD", 10.2)
+            qty = CCD(line[idx + 2], "UD", 10.2)
             if qty.err:
                 err = "Line %s: %s" % ((num + 1), qty.err)
                 break
             self.qty = qty.work
-            cst = CCD(line[idx+3], "UD", 10.2)
+            cst = CCD(line[idx + 3], "UD", 10.2)
             if cst.err:
                 err = "Line %s: %s" % ((num + 1), cst.err)
                 break

=== modified file 'str/st2030.py'
--- str/st2030.py	2019-01-13 16:38:59 +0000
+++ str/st2030.py	2019-03-17 12:53:43 +0000
@@ -214,10 +214,8 @@
 
     def doQty(self, frt, pag, r, c, p, i, w):
         self.quant = w
-        if self.gtype == "R":
-            err = self.doRecipe()
-            if err:
-                return "ff2"
+        if self.gtype == "R" and self.doRecipe():
+            return "ff2"
         if self.extractCost():
             return "rf"
         self.df.loadEntry("C", pag, p+1, data=self.ucost)
@@ -229,9 +227,9 @@
             ("srr_code", "=", self.code), ("srr_loc", "=", self.loc)],
             order="srr_rgroup, srr_rcode")
         if not self.recipe:
-            mess = "Invalid Recipe, No Items"
-            showError(self.opts["mf"].body, "Recipe Error", mess)
-            return mess
+            err = "Invalid Recipe, No Items"
+            showError(self.opts["mf"].body, "Recipe Error", err)
+            return err
         else:
             return self.doRecChg()
 
@@ -239,18 +237,23 @@
         # Display recipe items and allow editing of quantities etc.
         data = []
         for num, item in enumerate(self.recipe):
-            desc = self.sql.getRec(tables="strmf1", cols=["st1_desc"],
-                where=[("st1_cono", "=", self.opts["conum"]), ("st1_group",
-                "=", item[4]), ("st1_code", "=", item[5])], limit=1)
-            if not desc:
-                mess = "Invalid Stock Record in Recipe"
+            st1 = self.sql.getRec(tables="strmf1", cols=["st1_type",
+                "st1_desc"], where=[("st1_cono", "=", self.opts["conum"]),
+                ("st1_group", "=", item[4]), ("st1_code", "=", item[5])],
+                limit=1)
+            err = False
+            if not st1:
+                err = "Invalid Stock Record in Recipe"
+            elif st1[0] == "X":
+                err = "Redundant Stock Record in Recipe"
+            if err:
                 showError(self.opts["mf"].body, "Recipe Error",
                     """%s!
 
 Group: %s
-Code:  %s""" % (mess, item[4], item[5]))
-                return mess
-            data.append([num, item[4], item[5], desc[0], item[6]])
+Code:  %s""" % (err, item[4], item[5]))
+                return err
+            data.append([num, item[4], item[5], st1[1], item[6]])
         titl = "Recipe Items"
         head = ("Seq","Grp","Product-Code", "Description", "Quantity")
         lin = {

=== modified file 'str/st3020.py'
--- str/st3020.py	2019-01-13 16:38:59 +0000
+++ str/st3020.py	2019-04-04 09:50:15 +0000
@@ -96,8 +96,14 @@
                 "Y","Y",self.doTots,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPtyp(self, frt, pag, r, c, p, i, w):
         self.ptyp = w
@@ -256,12 +262,13 @@
             self.batchTotal()
             self.typeTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st3080.py'
--- str/st3080.py	2019-01-13 16:38:59 +0000
+++ str/st3080.py	2019-04-04 09:50:22 +0000
@@ -95,8 +95,14 @@
             fld[1][1] = "OUA"
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("Y","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
         if w > int(self.sysdtw / 100):
@@ -227,12 +233,13 @@
         if self.fpdf.page and not p.quit:
             self.groupTotal()
             self.grandTotal()
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)

=== modified file 'str/st3090.py'
--- str/st3090.py	2019-01-13 16:38:59 +0000
+++ str/st3090.py	2019-04-04 09:50:33 +0000
@@ -88,8 +88,14 @@
             fld[2][1] = "OUA"
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
+        if "args" in self.opts and "noprint" in self.opts["args"]:
+            view = None
+            mail = None
+        else:
+            view = ("N","V")
+            mail = ("Y","N")
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=view, mail=mail)
 
     def doSdate(self, frt, pag, r, c, p, i, w):
         self.sdate = w
@@ -200,12 +206,13 @@
                     self.pglin += 1
         p.closeProgress()
         if self.fpdf.page and not p.quit:
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
-                fromad=self.fromad, repeml=self.df.repeml)
+            if "args" not in self.opts or "noprint" not in self.opts["args"]:
+                pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+                    self.opts["conum"], ext="pdf")
+                self.fpdf.output(pdfnam, "F")
+                doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, grp, cod, desc):
         self.fpdf.add_page()

=== modified file 'str/st6040.py'
--- str/st6040.py	2019-01-13 16:38:59 +0000
+++ str/st6040.py	2019-03-15 13:42:26 +0000
@@ -37,7 +37,8 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["strmf1", "strtrn"], prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["strmf1", "strtrn", "chglog"],
+            prog=__name__)
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
@@ -132,6 +133,7 @@
                 "No Redundant Records")
         else:
             self.cnt = 0
+            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
             p = ProgressBar(self.opts["mf"].body, mxs=len(chgs),
                 typ="Redundant Items")
             for num, rec in enumerate(chgs):
@@ -139,6 +141,9 @@
                 self.sql.updRec("strmf1", cols=["st1_type"], data=["X"],
                     where=[("st1_cono", "=", self.opts["conum"]),
                     ("st1_group", "=", rec[0]), ("st1_code", "=", rec[1])])
+                key = "%03i%-3s%-20s" % (self.opts["conum"], rec[0], rec[1])
+                self.sql.insRec("chglog", data=["strmf1", "U", key, "st1_type",
+                dte, self.opts["capnm"], "N", "X", 0])
             p.closeProgress()
             mess = """%s Items Will be Marked as Redundant.
 

=== modified file 'tab/tb1030.py'
--- tab/tb1030.py	2019-01-13 16:38:59 +0000
+++ tab/tb1030.py	2019-04-03 16:46:59 +0000
@@ -25,8 +25,8 @@
     along with this program. If not, see <https://www.gnu.org/licenses/>.
 """
 
-from TartanClasses import CCD, SChoice, Sql, TartanDialog
-from tartanFunctions import showError
+from TartanClasses import ASD, CCD, SChoice, Sql, TartanDialog
+from tartanFunctions import askQuestion, showError
 
 class tb1030:
     def __init__(self, **opts):
@@ -245,7 +245,121 @@
     def doDelete(self, widget=None):
         if self.read == "N":
             return
-        self.sql.delRec(self.table, data=self.olddata)
+        if self.table in ("gentrn", "crstrn", "drstrn"):
+            ask = askQuestion(self.opts["mf"].body, "Delete",
+                "Delete All Associated Records?", default="no")
+        else:
+            ask = "no"
+        if ask == "yes":
+            err = ""
+            tabs = ["gentrn", "ctlvtf", "crsctl", "crstrn", "drsctl", "drstrn"]
+            sql = Sql(self.opts["mf"].dbm, tables=tabs)
+            conum = self.olddata[0]
+            if self.table == "gentrn":
+                system = "G"
+                docnum = CCD(self.olddata[5], "Na", 9).work
+                date = CCD(self.olddata[3], "D1", 10).work
+                dtyp = CCD(self.olddata[4], "UI", 2).work
+                gtyp = dtyp
+            elif self.table == "crstrn":
+                system = "C"
+                docnum = CCD(self.olddata[3], "Na", 9).work
+                date = CCD(self.olddata[5], "D1", 10).work
+                dtyp = CCD(self.olddata[2], "UI", 2).work
+                if dtyp in (1, 4):
+                    gtyp = 5                        # Purchase
+                elif dtyp == 2:
+                    gtyp = 6                        # Receipt
+                elif dtyp == 3:
+                    gtyp = 4                        # Journal
+                elif dtyp == 5:
+                    gtyp = 2                        # Payment
+                integr = sql.getRec(tables="crsctl", cols=["ctc_glint"],
+                    where=[("ctc_cono", "=", conum)], limit=1)[0]
+            else:
+                system = "D"
+                docnum = CCD(self.olddata[4], "Na", 9).work
+                date = CCD(self.olddata[6], "D1", 10).work
+                dtyp = CCD(self.olddata[3], "UI", 2).work
+                if dtyp in (1, 4):
+                    gtyp = 1                        # Sale
+                elif dtyp == 2:
+                    gtyp = 6                        # Receipt
+                elif dtyp == 3:
+                    gtyp = 4                        # Journal
+                elif dtyp == 5:
+                    gtyp = 2                        # Payment
+                integr = sql.getRec(tables="drsctl", cols=["ctd_glint"],
+                    where=[("ctd_cono", "=", conum)], limit=1)[0]
+            sqv = [("vtt_cono", "=", conum), ("vtt_styp", "=", system),
+                ("vtt_refno", "=", docnum), ("vtt_refdt", "=", date),
+                ("vtt_ttyp", "=", dtyp)]
+            recs = sql.getRec("ctlvtf", where=sqv)
+            if len(recs) > 1:
+                err = "ctlvtf recs %s\n" % len(recs)
+            texc = 0
+            ttax = 0
+            for rec in recs:
+                texc = float(ASD(texc) + ASD(rec[11]))
+                ttax = float(ASD(ttax) + ASD(rec[12]))
+            ttot = float(ASD(texc) + ASD(ttax))
+            ok = "y"
+            if system == "G" or integr == "Y":
+                sqg = [("glt_cono", "=", conum), ("glt_refno", "=", docnum),
+                    ("glt_trdt", "=", date), ("glt_type", "=", gtyp)]
+                recs = sql.getRec("gentrn", where=sqg)
+                gamt = 0
+                gtax = 0
+                for rec in recs:
+                    gamt = float(ASD(gamt) + ASD(rec[7]))
+                    gtax = float(ASD(gtax) + ASD(rec[8]))
+                if gtax != ttax:
+                    err = "%sctlvtf %s <> gentrn %s\n" % (err, ttax, gtax)
+                if gamt:
+                    err = "%sgentrn debits <> credits" % err
+            elif system == "C":
+                sqc = [("crt_cono", "=", conum), ("crt_ref1", "=", docnum),
+                    ("crt_trdt", "=", date), ("crt_type", "=", dtyp)]
+                recs = sql.getRec("crstrn", where=sqc)
+                if len(recs) > 1:
+                    err = "%scrstrn recs %s" % (err, len(recs))
+                camt = 0
+                ctax = 0
+                for rec in recs:
+                    camt = float(ASD(camt) + ASD(rec[7]))
+                    ctax = float(ASD(ctax) + ASD(rec[8]))
+                if ctax != ttax:
+                    err = "%sctlvtf %s <> crstrn %s" % (err, ttax, ctax)
+                if camt != ttot:
+                    err = "%sctlvtf total <> crstrn total" % err
+            else:
+                sqd = [("drt_cono", "=", conum), ("drt_ref1", "=", docnum),
+                    ("drt_trdt", "=", date), ("drt_type", "=", dtyp)]
+                recs = sql.getRec("drstrn", where=sqd)
+                if len(recs) > 1:
+                    err = "%sdrstrn recs %s" % (err, len(recs))
+                damt = 0
+                dtax = 0
+                for rec in recs:
+                    damt = float(ASD(damt) + ASD(rec[8]))
+                    dtax = float(ASD(dtax) + ASD(rec[9]))
+                if dtax != ttax:
+                    err = "%sctlvtf %s <> drstrn %s" % (err, (ttax, ctax))
+                if damt != ttot:
+                    err = "%sctlvtf total <> drstrn total" % err
+            if err:
+                ok = askQuestion(self.opts["mf"].body, "Error",
+                    "%s\n\nDelete transaction (y/n)?" % err)
+            if ok == "y":
+                sql.delRec("ctlvtf", where=sqv)
+                if system == "G":
+                    sql.delRec("gentrn", where=sqg)
+                elif system == "C":
+                    sql.delRec("crstrn", where=sqc)
+                else:
+                    sql.delRec("drstrn", where=sqd)
+        else:
+            self.sql.delRec(self.table, data=self.olddata)
         self.olddata = []
         self.doReset()
 
@@ -271,7 +385,17 @@
         self.click = []
 
     def doExit(self, widget=None):
-        self.opts["mf"].dbm.commitDbase(ask=True)
+        mes = None
+        dft = "yes"
+        if self.table == "gentrn":
+            bals = self.sql.getRec(tables="gentrn", cols=["sum(glt_tramt)"],
+                limit=1)
+            if bals[0]:
+                amt = CCD(bals[0], "SD", 13.2)
+                mes = "General Ledger Out of Balance by %s\n\n"\
+                    "Commit Anyway?" % amt.disp.lstrip()
+                dft = "no"
+        self.opts["mf"].dbm.commitDbase(ask=True, mess=mes, default=dft)
         self.df.closeProcess()
         self.opts["mf"].closeLoop()
 

=== modified file 'uty/bm1010.py'
--- uty/bm1010.py	2019-01-13 16:38:59 +0000
+++ uty/bm1010.py	2019-04-04 11:36:26 +0000
@@ -52,8 +52,6 @@
         if self.setVariables():
             self.mainProcess()
             self.opts["mf"].startLoop()
-        else:
-            print("ERR")
 
     def setVariables(self):
         gc = GetCtl(self.opts["mf"])

=== modified file 'uty/pkgprg.py'
--- uty/pkgprg.py	2019-02-24 15:37:36 +0000
+++ uty/pkgprg.py	2019-04-06 10:04:23 +0000
@@ -98,8 +98,8 @@
     custom = ["oth", ["ms1010"]]
     exclude = [
         "tb1010", "tb1040", "tb3010", "ms1020", "ms1030", "ms1040", "ms3010",
-        "ms3020", "msy010", "msy020", "msy030", "fc1010", "pw1010", "ss1010",
-        "tp1010"]
+        "ms3020", "msy010", "msy020", "msy030", "fc1010", "pm1010", "pw1010",
+        "rp1020", "ss1010", "tp1010"]
 elif system == "c":
     system = "cshana"
     chgfle = "tarchg"
@@ -140,7 +140,7 @@
         "st3070", "st3080", "st3090", "st3100", "st3110", "st3120", "st4010",
         "st5010", "st5020", "st5030", "st5040", "st6010", "st6020", "st6030",
         "st6040", "stc220", "stc320", "stc410", "stc420", "tb1010", "tb1040",
-        "tb3010", "pw1010"]
+        "tb3010", "bm1010", "pm1010", "pw1010", "rs1010"]
 elif system == "s":
     system = "seccmp"
     chgfle = "tarchg"
@@ -156,7 +156,7 @@
         "ass", "bkm", "bwl", "crs", "drs", "gen", "lon", "mem", "pos", "rca",
         "rtl", "sls", "str", "uty", "wag"])
     custom = [""]
-    exclude = ["msy030", "pw1010", "ss1010"]
+    exclude = ["msy030", "pm1010", "pw1010", "ss1010"]
 else:
     sys.exit()
 csys = system.capitalize()

=== modified file 'uty/pm1010.py'
--- uty/pm1010.py	2019-01-13 16:38:59 +0000
+++ uty/pm1010.py	2019-03-15 12:09:06 +0000
@@ -373,7 +373,10 @@
         print("Usage: -r rcfile")
         print("")
         sys.exit()
-    rcdic = loadRcFile(opts[0][1])
+    if opts:
+        rcdic = loadRcFile(opts[0][1])
+    else:
+        rcdic = loadRcFile()
     mf = MainFrame(rcdic=rcdic)
     pm1010(**{"mf": mf, "capnm": getpass.getuser()})
 

=== added file 'uty/rp1020.py'
--- uty/rp1020.py	1970-01-01 00:00:00 +0000
+++ uty/rp1020.py	2019-04-06 10:00:47 +0000
@@ -0,0 +1,243 @@
+"""
+SYNOPSIS
+    Report Stream Utility.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2019 Paul Malherbe.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program. If not, see <https://www.gnu.org/licenses/>.
+"""
+
+import os, shutil, time
+from TartanClasses import GetCtl, SelectChoice, SplashScreen, Sql, TartanDialog
+from tartanFunctions import askQuestion, callModule, doPrinter, sendMail
+from tartanFunctions import showError, showPrinters
+from tartanWork import finsys, tarmen
+
+class rp1020:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        gc = GetCtl(self.opts["mf"])
+        # Get System Details
+        ctlsys = gc.getCtl("ctlsys")
+        if not ctlsys:
+            return
+        self.smtp = []
+        for fld in ("msvr", "mprt", "msec", "maut", "mnam", "mpwd"):
+            self.smtp.append(ctlsys["sys_%s" % fld])
+        if not self.smtp[0]:
+            showError(self.opts["mf"].body, "SMTP Error",
+                "There is NO SMTP Server Available.")
+            return
+        # Get Company Details
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        if not ctlmst:
+            return
+        self.fadd = ctlmst["ctm_email"]
+        if self.smtp and not self.fadd:
+            showError(self.opts["mf"].body, "From Error",
+                "There is NO Email Address on the Company Record!")
+            return
+        mods = []
+        for x in xrange(0, len(ctlmst["ctm_modules"].rstrip()), 2):
+            mods.append(ctlmst["ctm_modules"][x:x+2])
+        self.sql = Sql(self.opts["mf"].dbm, tables="emllog", prog=__name__)
+        if self.sql.error:
+            return
+        amod = {
+            "GL": ["GEN",
+                "gl3020", "gl3030", "gl3040", "gl3050"],
+            "CR": ["CRS",
+                "cr3020", "cr3030", "cr3040", "cr3050"],
+            "DR": ["DRS",
+                "dr3020", "dr3030", "dr3040", "dr3050"],
+            "ST": ["STR",
+                "st3020", "st3080", "st3090"],
+            "SI": ["INV",
+                "si3020", "si3030", "si3040", "si3050", "si3060", "si3070"]}
+        self.mods = []
+        for mod in mods:
+            if mod not in amod:
+                continue
+            sss = finsys[amod[mod][0]][0]
+            for rpt in amod[mod][1:]:
+                for men in tarmen["%smod" % mod.lower()]:
+                    if men[2] == rpt:
+                        self.mods.append([rpt, sss, men[4], men[0]])
+        return True
+
+    def mainProcess(self):
+        self.tit = "Email Reports"
+        prts = showPrinters()
+        prt = {
+            "stype": "C",
+            "titl": "Available Printers",
+            "head": ("Name", "Description"),
+            "data": prts}
+        r1s = (("E-Mail", "E"), ("Print", "P"))
+        fld = [
+            (("T",0,0,0),("IRB",r1s),0,"Output","",
+                "E","Y",self.doTyp,None,None,None),
+            (("T",0,1,0),"INA",(30,50),"Printer Name",
+                "","Default","Y",self.doPrt,prt,None,("in", prts)),
+            (("T",0,2,0),"ITX",50,"From Address","",
+                self.fadd,"N",self.doFad,None,None,("email", False),None,
+                "From E-Mail Address"),
+            (("T",0,3,0),"ITX",50,"To   Address","",
+                "","N",self.doTad,None,None,("email", False),None,
+                "To E-Mail Address")]
+        tnd = ((self.doEnd, "y"), )
+        txt = (self.doExit, )
+        self.df = TartanDialog(self.opts["mf"], tops=True, title=self.tit,
+            eflds=fld, tend=tnd, txit=txt)
+
+    def doTyp(self, frt, pag, r, c, p, i, w):
+        self.styp = w
+        if self.styp == "E":
+            self.sprt = ""
+            self.df.loadEntry(frt, pag, p+1, data="")
+            return "sk1"
+
+    def doPrt(self, frt, pag, r, c, p, i, w):
+        self.sprt = w
+        self.fadd = self.tadd = ""
+        self.df.loadEntry(frt, pag, p+1, data="")
+        self.df.loadEntry(frt, pag, p+2, data="")
+        return "nd"
+
+    def doFad(self, frt, pag, r, c, p, i, w):
+        self.fadd = w
+
+    def doTad(self, frt, pag, r, c, p, i, w):
+        self.tadd = w
+
+    def doEnd(self):
+        self.df.closeProcess()
+        titl = "Report Stream"
+        data = []
+        for mod in self.mods:
+            data.append(["", mod[0], mod[1], mod[2]])
+        cols = (
+            ("a", "", 0, "CB", "N"),
+            ("b", "R-Code", 6, "NA", "N"),
+            ("c", "System", 25, "NA", "N"),
+            ("d", "Report", 30, "NA", "N"))
+        sc = SelectChoice(self.opts["mf"].body, titl, cols, data)
+        if sc.selection:
+            self.fles = []
+            tmp = os.path.join(self.opts["mf"].rcdic["wrkdir"], "temp")
+            if os.path.exists(tmp):
+                shutil.rmtree(tmp)
+            os.mkdir(tmp)
+            if self.styp == "E":
+                self.mess = "Attached please find the following reports:\n"
+            else:
+                self.mess = "Reports to Print:\n"
+            for num, mod in enumerate(sc.selection):
+                self.opts["mf"].head.configure(text="")
+                pdf = callModule(self.opts["mf"], None, mod[1],
+                    coy=(self.opts["conum"], self.opts["conam"]),
+                    period=self.opts["period"], user=self.opts["capnm"],
+                    args="noprint", ret="fpdf")
+                if pdf:
+                    nam = os.path.join(tmp, "report%s.pdf" % (num + 1))
+                    self.fles.append(nam)
+                    pdf.output(nam)
+                    self.mess = "%s\n%2s) %s - %s" % (self.mess, num+1,
+                        mod[2], mod[3])
+            if self.fles:
+                if self.styp == "E":
+                    self.mess = "%s\n\nRegards" % self.mess
+                    ok = askQuestion(self.opts["mf"].body, "Mail Reports",
+                        self.mess, default="yes")
+                    if ok == "yes":
+                        self.doEmailReps()
+                else:
+                    ok = askQuestion(self.opts["mf"].body, "Print Reports",
+                        self.mess, default="yes")
+                    if ok == "yes":
+                        self.doPrintReps()
+        self.closeProcess()
+
+    def doEmailReps(self):
+        subj = "Sundry Reports"
+        ok = False
+        while not ok:
+            sp = SplashScreen(self.opts["mf"].body, "E-Mailing the "\
+                "Message to %s\n\nPlease Wait........" % self.tadd)
+            ok = sendMail(self.smtp, self.fadd, self.tadd, subj,
+                mess=self.mess, attach=self.fles)
+            sp.closeSplash()
+            if not ok:
+                if self.skip == "Y":
+                    ok = "SKIPPED"
+                else:
+                    ok = askQuestion(self.opts["mf"].body, "E-Mail Error",
+                        "Problem Delivering This Message.\n\nTo: "\
+                        "%s\nSubject: %s\n\nWould You Like to Retry?" \
+                        % (self.tadd, subj))
+                if ok == "yes":
+                    ok = False
+                else:
+                    ok = "FAILED"
+            else:
+                ok = "OK"
+        # Log the email attempt into table emllog.
+        self.sql.insRec("emllog", data=[self.fadd, self.tadd, subj,
+            "%04i-%02i-%02i %02i:%02i" % time.localtime()[0:5], ok])
+        self.opts["mf"].dbm.commitDbase()
+
+    def doPrintReps(self):
+        repprt = ["Y", "P", self.sprt]
+        for fle in self.fles:
+            doPrinter(mf=self.opts["mf"], pdfnam=fle, repprt=repprt)
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.closeProcess()
+
+    def closeProcess(self):
+        self.opts["mf"].closeLoop()
+
+if __name__ == "__main__":
+    import getopt, sys
+    from TartanClasses import Dbase, MainFrame
+    from tartanFunctions import loadRcFile
+    try:
+        opts, args = getopt.getopt(sys.argv[1:],"r:")
+    except:
+        print("")
+        print("Usage: -r rcfile")
+        print("")
+    rcdic = loadRcFile(opts[0][1])
+    mf = MainFrame(rcdic=rcdic)
+    mf.dbm = Dbase(rcdic=rcdic)
+    mf.dbm.openDbase()
+    coy = 1
+    nam = "Test Company"
+    per = (4, (20180301, "2018-03-01"), (20190228, "2019-02-28"))
+    ex = rp1020(**{"mf": mf, "conum": coy, "conam": nam, "period": per, "capnm": "paul"})
+    mf.dbm.closeDbase()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

