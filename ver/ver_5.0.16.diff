=== modified file 'ass/ar2010.py'
--- ass/ar2010.py	2014-12-30 15:37:38 +0000
+++ ass/ar2010.py	2015-06-08 07:25:06 +0000
@@ -73,7 +73,7 @@
                 "r","N",self.doAssGrp,grp,None,None),
             (("C",0,0,1),"INa",7,"Cod-Num","Asset Code",
                 "","N",self.doAssCod,cod,None,("notblank",)),
-            (("C",0,0,2),"INA",30,"Description","",
+            (("C",0,0,2),"INA",30,"Description","Description",
                 "","N",self.doDesc,None,None,("notblank",)),
             (("C",0,0,3),"INa",3,"Dep","Depreciation Code",
                 "","N",self.doDepCode,dep,None,("notblank",)),
@@ -127,9 +127,12 @@
         fi = FileImport(self.opts["mf"], impcol=impcol)
         err = False
         for row, data in enumerate(fi.impdat):
-            for col, func in enumerate(("doAssGrp", "doAssCod", "doDesc",
-                    "doDepCode", "doPurDat", "doCost", "doCDep", "doRDep")):
-                exec "err = self.%s('', 0, 0, 0, 0, 0, data[col])" % func
+            funcs = ["doAssGrp", "doAssCod", "doDesc", "doDepCode",
+                "doPurDat", "doCost", "doCDep"]
+            if self.rordp == "Y":
+                funcs.append("doRDep")
+            for col, func in enumerate(funcs):
+                err = getattr(self, "%s" % func)("", 0, 0, 0, 0, 0, data[col])
                 if err:
                     showError(self.opts["mf"].body, "Import Error",
                         """Row %s Column %s - %s - %s

=== modified file 'ass/ar2030.py'
--- ass/ar2030.py	2015-02-07 06:31:11 +0000
+++ ass/ar2030.py	2015-06-08 07:26:16 +0000
@@ -209,7 +209,7 @@
             cval = self.cap
             crat = dep[self.sql.assdep_col.index("asd_rate1c")]
             for x in xrange(2, years + 2):
-                exec "n = dep[self.sql.assdep_col.index('asd_rate%sc')]" % x
+                n = dep[self.sql.assdep_col.index("asd_rate%sc" % x)]
                 if n:
                     crat = n
         else:
@@ -235,7 +235,7 @@
                 rval = self.cap
                 rrat = dep[self.sql.assdep_col.index("asd_rate1r")]
                 for x in xrange(2, years + 2):
-                    exec "n=dep[self.sql.assdep_col.index('asd_rate%sr')]" % x
+                    n = dep[self.sql.assdep_col.index("asd_rate%sr" % x)]
                     if n:
                         rrat = n
             else:

=== modified file 'ass/ar3040.py'
--- ass/ar3040.py	2015-02-07 06:31:11 +0000
+++ ass/ar3040.py	2015-06-08 07:32:59 +0000
@@ -212,13 +212,16 @@
                 self.pglin = 999
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading(grp)
+            ldic = {}
             for num, val in enumerate(vals):
-                exec "v%s = CCD(val, 'SD', 13.2)" % num
+                ldic["v%s" % num] = CCD(val, "SD", 13.2)
                 self.stot[num] = float(ASD(self.stot[num]) + ASD(val))
                 self.gtot[num] = float(ASD(self.gtot[num]) + ASD(val))
             self.fpdf.drawText("%s %s %s %s %s %s %s %s %s %s %s %s" %
-                (code.disp, desc.disp, v0.disp, v1.disp, v2.disp, v3.disp,
-                v4.disp, v5.disp, v6.disp, v7.disp, v8.disp, v9.disp))
+                (code.disp, desc.disp, ldic["v0"].disp, ldic["v1"].disp,
+                ldic["v2"].disp, ldic["v3"].disp, ldic["v4"].disp,
+                ldic["v5"].disp, ldic["v6"].disp, ldic["v7"].disp,
+                ldic["v8"].disp, ldic["v9"].disp))
             self.pglin += 1
             self.oldgrp = grp.work
         p.closeProgress()
@@ -311,13 +314,15 @@
                 ["", "Group %s Totals" % self.oldgrp] + self.stot])
             self.stot = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
             return
+        ldic = {}
         for num, val in enumerate(self.stot):
-            exec "v%s = CCD(val, 'SD', 13.2)" % num
+            ldic["v%s" % num] = CCD(val, "SD", 13.2)
         self.fpdf.drawText()
         self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s "\
-            "%13s %13s %13s" % ("", "Group %s Totals" % self.oldgrp, v0.disp,
-            v1.disp, v2.disp, v3.disp, v4.disp, v5.disp, v6.disp, v7.disp,
-            v8.disp, v9.disp))
+            "%13s %13s %13s" % ("", "Group %s Totals" % self.oldgrp,
+            ldic["v0"].disp, ldic["v1"].disp, ldic["v2"].disp, ldic["v3"].disp,
+            ldic["v4"].disp, ldic["v5"].disp, ldic["v6"].disp, ldic["v7"].disp,
+            ldic["v8"].disp, ldic["v9"].disp))
         self.fpdf.drawText()
         self.stot = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
 
@@ -327,11 +332,14 @@
             self.expdatas.append(["TOTAL", ["", "Grand Totals"] + self.gtot])
             self.expdatas.append(["ULINED"])
             return
+        ldic = {}
         for num, val in enumerate(self.gtot):
-            exec "v%s = CCD(val, 'SD', 13.2)" % num
+            ldic["v%s" % num] = CCD(val, "SD", 13.2)
         self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s "\
-            "%13s %13s %13s" % (" ", "Grand Totals", v0.disp, v1.disp, v2.disp,
-            v3.disp, v4.disp, v5.disp, v6.disp, v7.disp, v8.disp, v9.disp))
+            "%13s %13s %13s" % (" ", "Grand Totals", ldic["v0"].disp,
+            ldic["v1"].disp, ldic["v2"].disp, ldic["v3"].disp, ldic["v4"].disp,
+            ldic["v5"].disp, ldic["v6"].disp, ldic["v7"].disp, ldic["v8"].disp,
+            ldic["v9"].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'bkm/bk1020.py'
--- bkm/bk1020.py	2015-05-20 16:03:01 +0000
+++ bkm/bk1020.py	2015-06-16 02:24:47 +0000
@@ -979,6 +979,11 @@
             self.grpdte = w
 
     def doRemarks(self, frt, pag, r, c, p, i, w):
+        lines = len(self.units.split(":"))
+        lines += len(textFormat(w, width=60, blong=False))
+        if lines > 24:
+            self.df.loadEntry(frt, pag, p, data=w)
+            return "Remarks Too Long, Please Shorten"
         self.remarks = w
 
     def doContact(self, frt, pag, r, c, p, i, w):
@@ -1496,7 +1501,7 @@
                     self.df.setWidget(self.df.mstFrame, state="hide")
                     callModule(self.opts["mf"], None, "bk3080",
                         coy=(self.opts["conum"], self.opts["conam"]),
-                        args=self.number)
+                        args=[self.number])
                     self.df.setWidget(self.df.mstFrame, state="show")
                     break
                 elif rec.selection:
@@ -1627,6 +1632,8 @@
             if self.terms:
                 att = [getFileName(self.terms,
                     wrkdir=self.opts["mf"].rcdic["wrkdir"])]
+            else:
+                att = None
             self.form.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], rep=pdfnam,
                 head=self.tit, view=view, prtnam=prtnam, mail=mail,
@@ -1737,11 +1744,12 @@
             else:
                 txt = "%-35s" % u[2]
             nd["%s_C%02i" % (t, s)][tc.index("tpd_text")] = txt
-        # Special
+        # Remarks
         if bd[14]:
             s += 1
-            lines = textFormat(bd[14], width=nd["%s_C%02i" %
-                (t, s)][tc.index("tpd_mrg_chrs")], blong=False)
+            #lines = textFormat(bd[14], width=nd["%s_C%02i" %
+            #    (t, s)][tc.index("tpd_mrg_chrs")], blong=False)
+            lines = textFormat(bd[14], width=60, blong=False)
             for num, line in enumerate(lines):
                 s += 1
                 if  not num:

=== modified file 'bkm/bk2010.py'
--- bkm/bk2010.py	2015-02-07 06:31:11 +0000
+++ bkm/bk2010.py	2015-06-05 11:13:37 +0000
@@ -38,7 +38,7 @@
                 "ctm_name", "ctm_add1", "ctm_add2", "ctm_add3", "ctm_pcode",
                 "ctm_regno", "ctm_taxno", "ctm_taxdf", "ctm_tel", "ctm_fax",
                 "ctm_b_name", "ctm_b_ibt", "ctm_b_acno", "ctm_logo"):
-            exec "self.%s = ctl['%s']" % (col, col)
+            setattr(self, "%s" % col, ctl[col])
         if self.ctm_logo and "LETTERHEAD" in os.environ:
             self.ctm_logo = os.environ["LETTERHEAD"]
         if not self.ctm_logo or not os.path.exists(self.ctm_logo):
@@ -132,7 +132,7 @@
         dic = {}
         for c in col:
             for t in tab:
-                exec "d = self.sql.%s_dic" % t
+                d = getattr(self.sql, "%s_dic" % t)
                 if c in d:
                     dic[c] = d[c]
         if self.bkmdoc == "S":

=== modified file 'bkm/bk3030.py'
--- bkm/bk3030.py	2015-05-20 16:03:01 +0000
+++ bkm/bk3030.py	2015-06-16 03:04:38 +0000
@@ -17,8 +17,8 @@
 from textwrap import wrap
 from TartanClasses import ASD, CCD, GetCtl, MyFpdf, PrintBookingInvoice
 from TartanClasses import Sql, TartanDialog
-from tartanFunctions import dateDiff, doDrawTable, doPrinter, getModName
-from tartanFunctions import getVatRate, projectDate
+from tartanFunctions import callModule, dateDiff, doDrawTable, doPrinter
+from tartanFunctions import getModName, getVatRate, projectDate
 from tartanWork import mthnam
 
 class bk3030:
@@ -42,7 +42,7 @@
                 "ctm_name", "ctm_add1", "ctm_add2", "ctm_add3", "ctm_pcode",
                 "ctm_regno", "ctm_taxno", "ctm_taxdf", "ctm_tel", "ctm_fax",
                 "ctm_b_name", "ctm_b_ibt", "ctm_b_acno", "ctm_logo"):
-            exec "self.%s = ctl['%s']" % (col, col)
+            setattr(self, col, ctl[col])
         if self.ctm_logo and "LETTERHEAD" in os.environ:
             self.ctm_logo = os.environ["LETTERHEAD"]
         if not self.ctm_logo or not os.path.exists(self.ctm_logo):
@@ -210,10 +210,15 @@
             doPrinter(mf=self.opts["mf"], conum=1, rep=pdfnam, head=subj,
                 view=self.df.repprt[0][1], prtnam=self.df.repprt[0][2],
                 mail=self.df.repprt[1][2])
-        if self.prtinv == "Y" and self.books:
-            self.books.sort()
+        if self.prtinv == "Y" and self.docs:
+            # Print Invoice
+            self.docs.sort()
             PrintBookingInvoice(self.opts["mf"], self.opts["conum"], "I",
-                self.books, tname=self.tname, prtnam=self.df.repprt[0][2])
+                self.docs, tname=self.tname, prtnam=self.df.repprt[0][2])
+            # Print Statements
+            self.book.sort()
+            callModule(self.opts["mf"], None, "bk3080", coy=(self.opts["conum"],
+                self.opts["conam"]), args=self.book)
         self.opts["mf"].closeLoop()
 
     def doArrival(self):
@@ -223,7 +228,8 @@
         recs = self.sql.getRec(tables="bkmmst", where=[("bkm_cono", "=",
             self.opts["conum"]), ("bkm_state", "in", tuple(state))],
             order="bkm_ccode")
-        self.books = []
+        self.book = []
+        self.docs = []
         last = 0
         for rec in recs:
             number = rec[self.sql.bkmmst_col.index("bkm_number")]
@@ -238,6 +244,8 @@
             elif depart < self.start or arrive > self.end:
                 continue
             if self.geninv == "Y":
+                if not number in self.book:
+                    self.book.append(number)
                 self.doRaiseInvoice(number, arrive)
             con = self.sql.getRec(tables="bkmcon", where=[("bkc_cono", "=",
                 self.opts["conum"]), ("bkc_ccode", "=", ccode)], limit=1)
@@ -247,8 +255,6 @@
                 name = "%s %s" % (names.split()[0], sname)
             else:
                 name = sname
-            #if group:
-            #    name = "%-25s %s" % (name, group)
             bal = self.sql.getRec(tables="bkmtrn", cols=["sum(bkt_tramt)"],
                 where=[("bkt_cono", "=", self.opts["conum"]), ("bkt_number",
                 "=", number)], limit=1)
@@ -439,7 +445,7 @@
         if not recs:
             return
         invno = self.getRef(number)
-        self.books.append(invno)
+        self.docs.append(invno)
         for seq, rec in enumerate(recs):
             utyp = rec[self.sql.bkmrtt_col.index("brt_utype")]
             ucod = rec[self.sql.bkmrtt_col.index("brt_ucode")]

=== modified file 'bkm/bk3040.py'
--- bkm/bk3040.py	2015-03-21 07:40:04 +0000
+++ bkm/bk3040.py	2015-06-08 08:15:39 +0000
@@ -232,11 +232,12 @@
                 ["","","","Grand Totals",""] + self.gtots])
             self.expdatas.append(["ULINED"])
             return
-        for x in xrange(0, 3):
-            exec "t%s = CCD(self.gtots[x], 'SD', 13.2)" % x
+        gt = []
+        for x in xrange(3):
+            gt.append(CCD(self.gtots[x], "SD", 13.2))
         self.fpdf.drawText()
-        self.fpdf.drawText("%-17s %-30s %30s %13s %13s %13s" %
-            ("", "Grand Totals", "", t0.disp, t1.disp, t2.disp))
+        self.fpdf.drawText("%-17s %-30s %30s %13s %13s %13s" % ("",
+            "Grand Totals", "", gt[0].disp, gt[1].disp, gt[2].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'bkm/bk3080.py'
--- bkm/bk3080.py	2015-02-07 06:31:11 +0000
+++ bkm/bk3080.py	2015-06-16 03:35:13 +0000
@@ -26,8 +26,8 @@
             if "args" in self.opts:
                 self.tname = self.stpl
                 self.whole = "R"
-                self.snum = self.opts["args"]
-                self.enum = self.opts["args"]
+                self.snum = 0
+                self.enum = 0
                 self.doEnd()
             else:
                 self.mainProcess()
@@ -137,10 +137,13 @@
         if not self.enum:
             self.enum = 9999999
         tab = ["bkmmst"]
-        whr = [
-            ("bkm_cono", "=", self.opts["conum"]),
-            ("bkm_number", ">=", self.snum),
-            ("bkm_number", "<=", self.enum)]
+        whr = [("bkm_cono", "=", self.opts["conum"])]
+        if "args" in self.opts:
+            whr.append(("bkm_number", "in", self.opts["args"]))
+        else:
+            whr.extend(
+                ("bkm_number", ">=", self.snum),
+                ("bkm_number", "<=", self.enum))
         if self.cancel == "N":
             whr.append(("bkm_state", "<>", "X"))
         odr = "bkm_number"
@@ -153,7 +156,7 @@
             dic = {}
             for c in col:
                 for t in tab:
-                    exec "d = self.sql.%s_dic" % t
+                    d = getattr(self, "sql.%s_dic" % t)
                     if c in d:
                         dic[c] = d[c]
             data = self.sql.getRec(tables=tab, cols=col, where=whr, order=odr)
@@ -274,6 +277,7 @@
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page)
+            ldic = {}
             for cod in self.form.body:
                 if cod in ("type_code", "line_paid", "line_balance"):
                     continue
@@ -283,12 +287,11 @@
                     if not des[-1]:
                         del des[-1]
                 else:
-                    exec "%s = CCD(trans[btc.index(cod)], "\
-                        "self.form.tptp[cod][0][1], "\
-                        "self.form.tptp[cod][0][2])" % cod
-            line_paid = 0
-            line_balance = bkt_tramt.work
-            self.tbal = float(ASD(self.tbal) + ASD(bkt_tramt.work))
+                    ldic[cod] = CCD(trans[btc.index(cod)],
+                        self.form.tptp[cod][0][1], self.form.tptp[cod][0][2])
+            ldic["line_paid"] = 0
+            ldic["line_balance"] = ldic["bkt_tramt"].work
+            self.tbal = float(ASD(self.tbal) + ASD(ldic["bkt_tramt"].work))
             for n, l in enumerate(des):
                 if count == self.form.maxlines:
                     page = self.doCfwd(page)
@@ -312,7 +315,7 @@
                         if code == "type_code":
                             data = bktrtp[trans[btc.index("bkt_type")] - 1][0]
                         else:
-                            exec "data = %s.work" % code
+                            data = ldic[code].work
                     else:
                         data = "BLANK"
                     self.form.newdic[seq][tdc.index("tpd_text")] = data

=== modified file 'bkm/bk3090.py'
--- bkm/bk3090.py	2015-02-07 06:31:11 +0000
+++ bkm/bk3090.py	2015-06-05 05:54:14 +0000
@@ -133,7 +133,7 @@
         dic = {}
         for c in col:
             for t in tab:
-                exec "d = self.sql.%s_dic" % t
+                d = getattr(self.sql, "%s_dic" % t)
                 if c in d:
                     dic[c] = d[c]
         if self.select == "S":

=== modified file 'bwl/bc1010.py'
--- bwl/bc1010.py	2015-04-10 10:19:18 +0000
+++ bwl/bc1010.py	2015-05-26 12:25:51 +0000
@@ -60,17 +60,17 @@
         tab = {
             "stype": "R",
             "tables": ("bwltab",),
-            "cols": (
+            "cols": [
                 ("btb_tab", "", 0, "Cod"),
-                ("btb_surname", "", 0, "Surame", "Y"),
+                ("btb_surname", "", 0, "Surname", "Y"),
                 ("btb_names", "", 0, "Names"),
-                ("btb_memno", "", 0, "Mem-No"),
-                ("btb_bsano", "", 0, "BSA-No")),
+                ("btb_bsano", "", 0, "BSA-No")],
             "where": [("btb_cono", "=", self.opts["conum"])],
             "order": "btb_surname"}
         if self.mlint == "N":
             mlm = None
         else:
+            tab["cols"].insert(3, ("btb_memno", "", 0, "Mem-No"))
             mlm = {
                 "stype": "R",
                 "tables": ("memmst",),
@@ -383,8 +383,11 @@
     def doPrint(self, widget=None):
         state = self.df.disableButtonsTags()
         self.df.setWidget(self.df.mstFrame, state="hide")
-        self.colsd = [
-            ["Membership Number", "N", "btb_memno"],
+        if self.mlint == "Y":
+            self.colsd = [["Membership Number", "N", "btb_memno"]]
+        else:
+            self.colsd = []
+        self.colsd.extend([
             ["Surname & Initials", "Y", "name"],
             ["Surname", "N", "btb_surname"],
             ["First Names", "N", "btb_names"],
@@ -394,7 +397,7 @@
             ["Telephone - Work", "N", "btb_work"],
             ["Telephone - Cell", "N", "btb_cell"],
             ["Email Address", "N", "btb_mail"],
-            ["Ratings", "N", "ratings"]]
+            ["Ratings", "N", "ratings"]])
         tit = ("Print Details",)
         r1s = (("Members", "M"), ("Guests", "G"), ("All", "A"))
         r2s = (("Males","M"), ("Females","F"), ("All","A"))
@@ -524,7 +527,11 @@
         self.cgender = w
 
     def doCField(self, frt, pag, r, c, p, i, w):
-        if p == 3 and w == "Y":
+        if self.mlint == "N":
+            idx = 2
+        else:
+            idx = 3
+        if p == idx and w == "Y":
             self.cf.loadEntry(frt, pag, p+1, data="N")
             self.cf.loadEntry(frt, pag, p+2, data="N")
             return "sk2"
@@ -532,7 +539,11 @@
     def doCEnd(self):
         self.cf.closeProcess()
         self.cols = ["btb_tab"]
-        for num, dat in enumerate(self.cf.t_work[0][0][2:-4]):
+        if self.cf.repprt[1][0] == "N":
+            end = -2
+        else:
+            end = -4
+        for num, dat in enumerate(self.cf.t_work[0][0][2:end]):
             if dat == "Y":
                 self.cols.append(self.colsd[num][2])
         self.opts["mf"].closeLoop()
@@ -611,23 +622,25 @@
             chk = self.sql.getRec(tables="bwltab", where=[("btb_cono", "=",
                 self.opts["conum"]), ("btb_tab", "=", line[0])], limit=1)
             if not chk:
-                err = "%s %s Does Not Exist" % (fi.impcol[0][0], line[0])
-                break
-            if self.dbase == "P":
-                tmp = ["btb_pos1", "btb_pos2"]
-            elif self.dbase == "R":
-                tmp = ["btb_rate1", "btb_rate2"]
+                if self.impdet == "R":
+                    err = "%s %s Does Not Exist" % (fi.impcol[0][0], line[0])
+                    break
+                line.insert(0, self.opts["conum"])
+                if self.mlint == "N":
+                    line.insert(2, 0)
+                self.sql.insRec("bwltab", data=line)
             else:
                 tmp = ["btb_pos1", "btb_rate1", "btb_pos2", "btb_rate2"]
-            if self.impdet == "R":
-                cols = tmp
-            else:
-                cols = ["btb_surname", "btb_names", "btb_gender", "btb_add1",
-                    "btb_add2", "btb_add3", "btb_pcod", "btb_home", "btb_work",
-                    "btb_cell", "btb_mail"] + tmp + ["btb_bsano"]
-            self.sql.updRec("bwltab", cols=cols, data=line[1:],
-                where=[("btb_cono", "=", self.opts["conum"]),
-                ("btb_tab", "=", line[0])])
+                if self.impdet == "R":
+                    cols = tmp
+                else:
+                    cols = ["btb_surname", "btb_names", "btb_gender",
+                        "btb_add1", "btb_add2", "btb_add3", "btb_pcod",
+                        "btb_home", "btb_work", "btb_cell",
+                        "btb_mail"] + tmp + ["btb_bsano"]
+                self.sql.updRec("bwltab", cols=cols, data=line[1:],
+                    where=[("btb_cono", "=", self.opts["conum"]),
+                    ("btb_tab", "=", line[0])])
         sp.closeProgress()
         if err:
             err = "Line %s: %s" % ((num + 1), err)
@@ -645,11 +658,9 @@
         self.impdet = w
 
     def doImpEnd(self):
-        self.impskp = ["btb_cono", "btb_memno"]
-        if self.dbase == "P":
-            self.impskp.extend(["btb_rate1", "btb_rate2"])
-        elif self.dbase == "R":
-            self.impskp.extend(["btb_pos1", "btb_pos2"])
+        self.impskp = ["btb_cono"]
+        if self.mlint == "N":
+            self.impskp.append("btb_memno")
         if self.impdet == "R":
             self.impskp.extend(["btb_surname", "btb_names", "btb_gender",
                 "btb_add1", "btb_add2", "btb_add3", "btb_pcod", "btb_home",

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2015-04-02 19:32:07 +0000
+++ bwl/bc2010.py	2015-06-16 05:08:41 +0000
@@ -159,6 +159,10 @@
         r4s = (("Male", "M"), ("Female", "F"))
         r5s = (("Skip", "4"), ("Third", "3"), ("Second", "2"), ("Lead", "1"))
         tag = (("Tabs",None,None,None),)
+        if self.dbase in ("C", "R"):
+            vfy = ("notzero",)
+        else:
+            vfy = ("efld",)
         fld = (
             (("T",0,0,0),"ID1",10,"Date","",
                 self.sysdt,"Y",self.doDate,None,None,("efld",)),
@@ -186,7 +190,7 @@
             (("T",1,4,0),("IRB",r5s),0,"Position","",
                 "2","N",self.doPosition,None,None,None),
             (("T",1,5,0),"IUI",2,"Rating","",
-                10,"N",None,None,None,("efld",)),
+                0,"N",None,None,None,vfy),
             (("T",1,6,0),("IRB",r2s),0,"Paid","",
                 "Y","N",None,None,self.doDelete,None))
         but = (
@@ -875,8 +879,8 @@
 Combination Number %10s"""
                 splash = SplashScreen(self.opts["mf"].body, text)
                 splash.label.configure(text=text % "")
-                # Do 5000 iterations and then look for the best one
-                for retry in xrange(5000):
+                # Do 10000 iterations and then look for the best one
+                for retry in xrange(10000):
                     tot = self.doDrawRest(splash, text)
                     scl = 0
                     bcl = 0
@@ -927,8 +931,8 @@
                     alldraw.append([scl, bcl, len(tcl), tot, self.adraw2, tcl])
                 splash.closeSplash()
                 # Select the lowest draw where there are least clashes
-                alldraw.sort()
-                self.scl, self.bcl, self.tcl, self.tot, draw, t = alldraw[0]
+                self.scl, self.bcl, self.tcl, self.tot, draw, t = \
+                    sorted(alldraw, key=itemgetter(0, 1, 2, 3))[0]
                 self.adraw1.extend(draw)
                 for d in draw:
                     if d[0] in self.rinks1:
@@ -960,9 +964,10 @@
                 else:
                     self.lead1.append(tab)
             # Calculate the number of players, by position, required
-            teams = len(grp) / (self.tsize * 2)
-            odds = []
-            rem = len(grp) % (self.tsize * 2)
+            # Treating 2nds as 3rds in trips
+            teams = len(grp) / (self.tsize * 2)  # full teams
+            odds = []                            # others
+            rem = len(grp) % (self.tsize * 2)    # players short
             if rem:
                 if self.tsize == 3:
                     if rem == 1:
@@ -1045,26 +1050,28 @@
                 self.thirds = teams * 2
                 for o in odds:
                     if o == "4/3":
-                        self.thirds += 1
+                        self.thirds += 2
                 self.seconds = teams * 2
                 for o in odds:
-                    if not o in ("2/2", "1/1",):
+                    if o == "4/3":
+                        self.seconds += 1
+                    elif not o in ("2/2", "1/1",):
                         self.seconds += 2
                 self.leads = teams * 2
                 for o in odds:
                     if not o in ("1/1",):
                         self.leads += 2
             elif self.tsize == 3:
-                self.thirds = 0
+                self.thirds = teams * 2
+                for o in odds:
+                    if o in ("4/4", "4/3"):
+                        self.thirds += 2
+                self.seconds = 0
                 for o in odds:
                     if o == "4/4":
-                        self.thirds += 2
+                        self.seconds += 2
                     elif o == "4/3":
-                        self.thirds += 1
-                self.seconds = teams * 2
-                for o in odds:
-                    if not o in ("2/2", "1/1"):
-                        self.seconds += 2
+                        self.seconds += 1
                 self.leads = teams * 2
                 for o in odds:
                     if not o in ("1/1",):
@@ -1106,9 +1113,6 @@
             self.third1 = sorted(self.third1, key=itemgetter(5), reverse=rev)
             self.third1 = sorted(self.third1, key=itemgetter(4))
             # Thirds
-            if self.tsize == 3:
-                self.second1.extend(self.third1)
-                self.third1 = []
             while self.second1 and len(self.third1) < self.thirds:
                 if self.dbase == "P":
                     idx = random.randrange(0, len(self.second1), 1)
@@ -1171,8 +1175,6 @@
                 ("bdt_rink", "=", rec[self.sql.bwldrt_col.index("bdt_rink")])])
             for opp in opps:
                 self.hist[tab][1].append(opp[0])
-        days -= 7
-        return days
 
     def doDrawRest(self, splash, text):
         self.count += 1
@@ -1213,10 +1215,10 @@
         draws = sorted(draws, key=itemgetter(0))
         for x in xrange(0, len(draws), 2):
             g = rinks2.pop(0)
-            if len(draws[x]) > len(draws[x+1]):
-                draws[x+1][1] += draws[x][-1][5]
-            elif len(draws[x]) < len(draws[x+1]):
-                draws[x][1] += draws[x+1][-1][5]
+            #if len(draws[x]) > len(draws[x+1]):
+            #    draws[x+1][1] += draws[x+1][-1][5]
+            #elif len(draws[x]) < len(draws[x+1]):
+            #    draws[x][1] += draws[x][-1][5]
             self.loadData(g, draws[x])
             tot = draws[x][1]
             self.loadData(g, draws[x+1])
@@ -1238,16 +1240,16 @@
             return self.lead2.pop()
 
     def loadData(self, g, d):
-        drw = [g, d[1], [d[2][0], "%s, %s" % (d[2][1], d[2][2][0])]]
+        drw = [g, d[1], [d[2][0], "%s, %s" % (d[2][1], d[2][2][0]), d[2][5]]]
         if d[0] == 1:
-            drw.extend([[0,""], [0,""], [0,""]])
+            drw.extend([[0,"",0], [0,"",0], [0,"",0]])
         elif d[0] == 2:
-            drw.extend([[0,""], [0,""]])
+            drw.extend([[0,"",0], [0,"",0]])
         elif d[0] == 3:
-            drw.append([0,""])
+            drw.append([0,"",0])
         if len(d) > 3:
             for f in d[3:]:
-                drw.append([f[0], "%s, %s" % (f[1], f[2][0])])
+                drw.append([f[0], "%s, %s" % (f[1], f[2][0]), f[5]])
         self.adraw2.append(drw)
 
     def doSave(self):
@@ -1432,10 +1434,10 @@
         cols = (
             ("rink", "RK", 2, "UA", "N"),
             ("rate", "RTE", 3, "UI", "N"),
-            ("skip", "Skip", 20, "UA", "N"),
-            ("third", "Third", 20, "UA", "N"),
-            ("second", "Second", 20, "UA", "N"),
-            ("lead", "Lead", 20, "UA", "N"))
+            ("skip", "Skip", 24, "UA", "N"),
+            ("third", "Third", 24, "UA", "N"),
+            ("second", "Second", 24, "UA", "N"),
+            ("lead", "Lead", 24, "UA", "N"))
         data = []
         for d in draw:
             dat = [d[0], d[1]]
@@ -1443,7 +1445,9 @@
                 if not t[0]:
                     dat.append("%3s %-20s" % ("", ""))
                 else:
-                    dat.append("%3s %-20s" % tuple(t))
+                    if len(t) == 2:
+                        t.append(0)
+                    dat.append("%3s %-16s(%2s)" % (t[0], t[1][:16], t[2]))
             data.append(dat)
         sel = SelectChoice(self.opts["mf"].window, title, cols, data,
             live=select)

=== modified file 'bwl/bc2050.py'
--- bwl/bc2050.py	2015-02-07 06:31:11 +0000
+++ bwl/bc2050.py	2015-06-07 14:03:18 +0000
@@ -278,9 +278,9 @@
         grns = w.split(",")
         for x in xrange(1, 6):
             if x <= len(grns):
-                exec "self.gr%s = '%s'" % (x, grns[x-1][0])
+                setattr(self, "gr%s" % x, grns[x-1][0])
             else:
-                exec "self.gr%s = '%s'" % (x, "")
+                setattr(self, "gr%s" % x, "")
         if self.groups == "N" or not self.game == self.games:
             self.grpgrn = "N"
             self.df.loadEntry(frt, pag, p+1, data=self.grpgrn)

=== modified file 'bwl/bc3020.py'
--- bwl/bc3020.py	2015-04-02 19:32:07 +0000
+++ bwl/bc3020.py	2015-06-07 09:54:47 +0000
@@ -113,13 +113,13 @@
             side[pos] = ["", nam]
             dte = CCD(r[c.index("bdt_date")], "D1", 10).disp
             for x in xrange(1, 4):
-                exec "tm = self.getName(r[c.index('bdt_team%s')])" % x
+                tm = self.getName(r[c.index("bdt_team%s" % x)])
                 if not tm:
                     continue
                 cl = ""
                 if self.clash:
                     cl = "X"
-                exec "pos = (0 - (r[c.index('bdt_pos%s')] - 4))" % x
+                pos = (0 - (r[c.index("bdt_pos%s" % x)] - 4))
                 side[pos] = [cl, tm]
             if not self.tab == l:
                 if l:

=== modified file 'bwl/bc3080.py'
--- bwl/bc3080.py	2015-04-02 19:32:07 +0000
+++ bwl/bc3080.py	2015-06-07 13:50:28 +0000
@@ -93,8 +93,9 @@
     def drawFormat(self):
         whr=[("bct_cono", "=", self.conum), ("bct_code", "=", self.ctyp)]
         rec = self.sql.getRec(tables="bwltyp", where=whr, limit=1)
+        ldic = {}
         for col in self.sql.bwltyp_col[3:]:
-            exec "%s = rec[self.sql.bwltyp_col.index(col)]" % col
+            ldic[col] = rec[self.sql.bwltyp_col.index(col)]
         if self.card:
             self.fpdf = MyFpdf()
             self.fpdf.set_margins(55, 5, 55)
@@ -114,45 +115,45 @@
             self.fpdf.add_page()
             self.fpdf.drawText(txt=self.sql.bwltyp_dic["bct_cfmat"][4],
                 h=h, ln=0)
-            if bct_cfmat == "T":
+            if ldic["bct_cfmat"] == "T":
                 txt = "Tournament"
-            elif bct_cfmat == "K":
+            elif ldic["bct_cfmat"] == "K":
                 txt = "Knockout"
             else:
                 txt = "Round Robin"
             self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
             self.fpdf.drawText(txt=self.sql.bwltyp_dic["bct_tsize"][4],
                 h=h, ln=0)
-            self.fpdf.drawText(txt=bct_tsize, x=x1, h=h, ctyp="M")
-            if bct_cfmat in ("K", "R"):
+            self.fpdf.drawText(txt=ldic["bct_tsize"], x=x1, h=h, ctyp="M")
+            if ldic["bct_cfmat"] in ("K", "R"):
                 return
             self.fpdf.drawText(txt="Draw", h=h, ln=0)
-            if bct_drawn == bct_games:
+            if ldic["bct_drawn"] == ldic["bct_games"]:
                 txt = "All Games will be Random Draws."
             else:
-                if bct_drawn == 1:
+                if ldic["bct_drawn"] == 1:
                     txt = "The First Game will be a Random Draw and "\
                         "thereafter Strength v Strength."
                 else:
                     txt = "The First %s Games will be Random Draws and "\
-                        "thereafter Strength v Strength." % bct_drawn
+                        "thereafter Strength v Strength." % ldic["bct_drawn"]
             self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
             self.fpdf.drawText(txt=self.sql.bwltyp_dic["bct_games"][4],
                 h=h, ln=0)
-            self.fpdf.drawText(txt=bct_games, x=x1, h=h, ctyp="M")
+            self.fpdf.drawText(txt=ldic["bct_games"], x=x1, h=h, ctyp="M")
             self.fpdf.drawText(txt=self.sql.bwltyp_dic["bct_ends"][4],h=h,ln=0)
-            self.fpdf.drawText(txt=bct_ends, x=x1, h=h, ctyp="M")
-            if bct_grgame:
+            self.fpdf.drawText(txt=ldic["bct_ends"], x=x1, h=h, ctyp="M")
+            if ldic["bct_grgame"]:
                 self.fpdf.drawText(txt="Groups", h=h, ln=0)
                 txt = "Teams will be Split into Groups After Game %s." % \
-                    bct_grgame
+                    ldic["bct_grgame"]
                 self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                if bct_adjust == "Y":
+                if ldic["bct_adjust"] == "Y":
                     txt = "With the Exception of Group A, the Scores will be "\
                         "Adjusted as follows:"
                     self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                    if bct_expunge:
-                        gms = bct_expunge.split(",")
+                    if ldic["bct_expunge"]:
+                        gms = ldic["bct_expunge"].split(",")
                         if len(gms) == 1:
                             txt = "Game %s will be Expunged" % gms[0]
                         else:
@@ -161,49 +162,50 @@
                                 txt = "%s, %s" % (txt, g)
                             txt = "%s will be Expunged." % txt
                         self.fpdf.drawText(txt=txt, x=x2, h=h, ctyp="M")
-                    if bct_percent:
-                        if bct_expunge:
+                    if ldic["bct_percent"]:
+                        if ldic["bct_expunge"]:
                             txt = "The Balance of the Games"
                         else:
                             txt = "All Games"
                         txt = "%s will Retain %s%s of their score." % (txt,
-                            bct_percent, "%")
+                            ldic["bct_percent"], "%")
                         self.fpdf.drawText(txt=txt, x=x2, h=h, ctyp="M")
             self.fpdf.drawText(h=4)
-            if bct_sends:
+            if ldic["bct_sends"]:
                 self.fpdf.drawText(txt="Skins", h=h, ln=0)
                 self.fpdf.drawText(txt="Each Set of %s Ends will Constitute "\
-                    "a Skin." % bct_sends, x=x1, h=h, ctyp="M")
+                    "a Skin." % ldic["bct_sends"], x=x1, h=h, ctyp="M")
             self.fpdf.drawText(txt="Points", h=h, ln=0)
             txt = ""
             pts = 0
-            if bct_e_points:
-                if bct_e_points == 1:
-                    txt = "%s Point per End" % bct_e_points
-                else:
-                    txt = "%s Points per End" % bct_e_points
-                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                pts += (bct_e_points * bct_ends)
-            if bct_s_points:
-                if bct_s_points == 1:
-                    txt = "%s Point per Skin" % bct_s_points
-                else:
-                    txt = "%s Points per Skin" % bct_s_points
-                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                pts += (bct_s_points * (bct_ends / bct_sends))
-            if bct_g_points:
-                if bct_g_points == 1:
-                    txt = "%s Point per Game" % bct_g_points
-                else:
-                    txt = "%s Points per Game" % bct_g_points
-                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                pts += bct_g_points
-            if bct_bonus == "Y":
+            if ldic["bct_e_points"]:
+                if ldic["bct_e_points"] == 1:
+                    txt = "%s Point per End" % ldic["bct_e_points"]
+                else:
+                    txt = "%s Points per End" % ldic["bct_e_points"]
+                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
+                pts += (ldic["bct_e_points"] * ldic["bct_ends"])
+            if ldic["bct_s_points"]:
+                if ldic["bct_s_points"] == 1:
+                    txt = "%s Point per Skin" % ldic["bct_s_points"]
+                else:
+                    txt = "%s Points per Skin" % ldic["bct_s_points"]
+                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
+                pts += (ldic["bct_s_points"] * (ldic["bct_ends"] /
+                    ldic["bct_sends"]))
+            if ldic["bct_g_points"]:
+                if ldic["bct_g_points"] == 1:
+                    txt = "%s Point per Game" % ldic["bct_g_points"]
+                else:
+                    txt = "%s Points per Game" % ldic["bct_g_points"]
+                self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
+                pts += ldic["bct_g_points"]
+            if ldic["bct_bonus"] == "Y":
                 txt = "1 Bonus Point will be Awarded as Follows:"
                 self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
-                txt = "Winning by %s or More Shots or" % (bct_win_by + 1)
+                txt = "Winning by %s or More Shots or" % (ldic["bct_win_by"]+1)
                 self.fpdf.drawText(txt=txt, x=x2, h=h, ctyp="M")
-                txt = "Losing by %s or Less Shots" % (bct_lose_by - 1)
+                txt = "Losing by %s or Less Shots" % (ldic["bct_lose_by"]-1)
                 self.fpdf.drawText(txt=txt, x=x2, h=h, ctyp="M")
                 pts += 1
             txt = "Therefore a Maximum of %s Points per Game." % pts

=== modified file 'bwl/bc6010.py'
--- bwl/bc6010.py	2015-04-02 19:32:07 +0000
+++ bwl/bc6010.py	2015-06-07 14:04:13 +0000
@@ -147,7 +147,7 @@
             nstart += 1
         for ot in self.tables:
             tt = "%s_temp" % ot[0]
-            exec "cc = self.sql.%s_col" % ot[0]
+            cc = getattr(self, "sql.%s_col" % ot[0])
             recs = self.sql.sqlRec("Select * from %s" % tt)
             for rec in recs:
                 for k in ot[2:]:

=== modified file 'bwl/bc6020.py'
--- bwl/bc6020.py	2015-04-02 19:32:07 +0000
+++ bwl/bc6020.py	2015-06-13 12:07:42 +0000
@@ -2,7 +2,7 @@
 
 """
 SYNOPSIS
-    Bowls League Clear History Dialog.
+    Bowls Clear History Dialog.
 
     This file is part of Tartan Financial Systems (TARTAN).
 
@@ -30,32 +30,42 @@
 
     def mainProcess(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Clear Selection History (%s)" % __name__)
-        r1s = (("Yes","Y"), ("No","N"))
-        fld = ((("T",0,1,0),("IRB",r1s),0,"Clear Opponents","",
-                "N","N",self.doOpps,None,None,None),)
+            "Clear History (%s)" % __name__)
+        r1s = (("League","L"), ("Tabs Draw","D"), ("Both","B"))
+        r2s = (("Yes","Y"), ("No","N"))
+        fld = (
+            (("T",0,0,0),("IRB",r1s),0,"Clear","",
+                "L","N",self.doType,None,None,None),
+            (("T",0,1,0),("IRB",r2s),0,"Opponents","",
+                "N","N",self.doOpps,None,None,None))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
             eflds=fld, tend=tnd, txit=txt)
 
-    def doPlay(self, frt, pag, r, c, p, i, w):
-        self.play = w
+    def doType(self, frt, pag, r, c, p, i, w):
+        self.ctyp = w
 
     def doOpps(self, frt, pag, r, c, p, i, w):
         self.opps = w
 
     def doEnd(self):
         self.df.closeProcess()
+        if self.ctyp in ("B", "D"):
+            self.sql.delRec("bwldrm", where=[("bdm_cono", "=",
+                self.opts["conum"])])
+            self.sql.delRec("bwldrt", where=[("bdt_cono", "=",
+                self.opts["conum"])])
+        if self.ctyp in ("B", "L"):
+            self.sql.delRec("bwlfls", where=[("bfs_cono", "=",
+                self.opts["conum"])])
+            self.sql.delRec("bwlflm", where=[("bfm_cono", "=",
+                self.opts["conum"])])
+            self.sql.delRec("bwlflt", where=[("bft_cono", "=",
+                self.opts["conum"])])
         if self.opps == "Y":
             self.sql.delRec("bwlflo", where=[("bfo_cono", "=",
                 self.opts["conum"])])
-        self.sql.delRec("bwlfls", where=[("bfs_cono", "=",
-            self.opts["conum"])])
-        self.sql.delRec("bwlflm", where=[("bfm_cono", "=",
-            self.opts["conum"])])
-        self.sql.delRec("bwlflt", where=[("bft_cono", "=",
-            self.opts["conum"])])
         self.opts["mf"].dbm.commitDbase(ask=True)
         self.opts["mf"].closeLoop()
 

=== modified file 'bwl/bcc110.py'
--- bwl/bcc110.py	2015-04-10 10:19:18 +0000
+++ bwl/bcc110.py	2015-05-26 10:25:28 +0000
@@ -30,6 +30,7 @@
             if self.sql.error == ["memctl"]:
                 self.memctl = False
                 self.mlint = None
+                self.same = "N"
             else:
                 return
         else:
@@ -97,7 +98,8 @@
         if not self.memctl:
             self.chgint = False
             self.df.loadEntry("T", 0, 0, data="N")
-            self.df.focusField("T", 0, 2)
+            self.df.loadEntry("T", 0, 1, data="N")
+            self.df.focusField("T", 0, 3)
 
     def doMlint(self, frt, pag, r, c, p, i, w):
         if w == "Y" and not self.mlint:

=== modified file 'crs/cr2020_rne.py'
--- crs/cr2020_rne.py	2015-05-20 16:03:01 +0000
+++ crs/cr2020_rne.py	2015-05-30 07:28:39 +0000
@@ -424,8 +424,7 @@
             self.acno.work), ("crt_payind", "=", "Y"), ("crt_paydt",
             "<=", self.cutdt), ("crt_payamt", "<>", 0)]
         odr = "crt_paydt, crt_trdt, crt_ref1"
-        ctc, crt = getTrn(self.opts["mf"].dbm, "crs", whr=whr, odr=odr,
-            zer="N")
+        ctc, crt = getTrn(self.opts["mf"].dbm, "crs", whr=whr, odr=odr, zer="N")
         if not crt:
             return
         # Print the Remittance Advices

=== modified file 'crs/cr3050.py'
--- crs/cr3050.py	2015-02-07 06:31:11 +0000
+++ crs/cr3050.py	2015-06-08 08:05:58 +0000
@@ -306,21 +306,23 @@
             self.expdatas.append(["TOTAL", ["", "Grand Totals"] + self.gtots])
             self.expdatas.append(["ULINED"])
             return
+        t = []
+        p = []
         for x in xrange(0, 7):
-            exec "t%s = CCD(self.gtots[x], 'SD', 13.2)" % x
+            t.append(CCD(self.gtots[x], "SD", 13.2))
             if self.gtots[1] == 0:
-                exec "p%s = CCD(0, 'SD', 13.2)" % x
+                p.append(CCD(0, "SD", 13.2))
             else:
-                exec "p%s = CCD(round((self.gtots[x]/self.gtots[1]*100),2), "\
-                    "'SD', 13.2)" % x
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Grand Totals", t0.disp, t1.disp, t2.disp, t3.disp,
-            t4.disp, t5.disp, t6.disp))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Percentages", p0.disp, p1.disp, p2.disp, p3.disp,
-            p4.disp, p5.disp, p6.disp))
+                p.append(CCD(round(
+                    (self.gtots[x] / self.gtots[1] * 100), 2), "SD", 13.2))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Grand Totals", t[0].disp, t[1].disp, t[2].disp, t[3].disp,
+            t[4].disp, t[5].disp, t[6].disp))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-7s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Percentages", p[0].disp, p[1].disp, p[2].disp, p[3].disp,
+            p[4].disp, p[5].disp, p[6].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'crs/cr3070_rne.py'
--- crs/cr3070_rne.py	2015-02-07 06:31:11 +0000
+++ crs/cr3070_rne.py	2015-05-30 07:41:52 +0000
@@ -114,7 +114,7 @@
             ("crt_cono", "=", self.opts["conum"]),
             ("crt_acno", "=", self.acno.work)]
         odr = "crt_curdt, crt_trdt, crt_ref1"
-        self.ctc, self.crt = getTrn(self.opts["mf"].dbm, "crs", dte=self.curdt,
+        self.ctc, self.crt = getTrn(self.opts["mf"].dbm, "rtf", dte=self.curdt,
             whr=whr, odr=odr)
         if self.crt:
             if self.prnt == "N":
@@ -185,7 +185,6 @@
         self.fpdf.setFont()
 
     def printBody(self):
-        rfc = self.sql.crsrtf_col
         for trn in self.crt:
             ttyp = CCD(trn[self.ctc.index("crt_type")], "UI", 1)
             ref1 = CCD(trn[self.ctc.index("crt_ref1")], "Na", 9)
@@ -195,13 +194,9 @@
             taxind = CCD(trn[self.ctc.index("crt_taxind")], "UA", 1)
             payamt = CCD(trn[self.ctc.index("paid")], "SD", 13.2)
             owebal = CCD(trn[self.ctc.index("balance")], "SD", 13.2)
-            whr = [("rtf_cono", "=", self.opts["conum"]), ("rtf_acno", "=",
-                self.acno.work), ("rtf_type", "=", ttyp.work),
-                ("rtf_ref1", "=", ref1.work)]
-            rtf = self.sql.getRec(tables="crsrtf", where=whr, limit=1)
-            if rtf:
-                depno = CCD(rtf[rfc.index("rtf_depno")], "UI", 3)
-                pjno = CCD(rtf[rfc.index("rtf_pjno")], "UI", 4)
+            if not trn[self.ctc.index("rtf_depno")] is None:
+                depno = CCD(trn[self.ctc.index("rtf_depno")], "UI", 3)
+                pjno = CCD(trn[self.ctc.index("rtf_pjno")], "UI", 4)
             else:
                 depno = CCD(0, "UI", 3)
                 pjno = CCD(0, "UI", 4)

=== modified file 'crs/cr3330_rne.py'
--- crs/cr3330_rne.py	2015-02-07 06:31:11 +0000
+++ crs/cr3330_rne.py	2015-06-08 08:11:30 +0000
@@ -143,7 +143,8 @@
             # New Calculated Values
             tab = ["ctlmst", "crsage"]
             jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-                "rtf_acno=cra_acno and rtf_type=cra_type and rtf_ref1=cra_ref1"
+                "rtf_acno=cra_acno and rtf_type=cra_type and "\
+                "rtf_ref1=cra_ref1"
             col = [
                 "rtf_depno", "ctm_name",
                 "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
@@ -305,20 +306,21 @@
         self.pglin = 8
 
     def grandTotal(self):
+        t = []
         for x in xrange(10):
-            exec "t%s = CCD(self.tots[x], 'SD', 14.2)" % x
+            t.append(CCD(self.tots[x], "SD", 14.2))
         if self.df.repprt[0][2] == "export":
             self.expdatas.append(["ULINES"])
-            self.expdatas.append(["TOTAL", ["", "Grand Totals", t0.work,
-                t1.work, t2.work, t3.work, t4.work, t5.work, t6.work, t7.work,
-                t8.work, t9.work]])
+            self.expdatas.append(["TOTAL", ["", "Grand Totals", t[0].work,
+                t[1].work, t[2].work, t[3].work, t[4].work, t[5].work,
+                t[6].work, t[7].work, t[8].work, t[9].work]])
             self.expdatas.append(["ULINED"])
             return
         self.fpdf.underLine(txt=self.head)
         self.fpdf.drawText("%-3s %-30s %14s %14s %14s %14s %14s %14s %14s "\
-            "%14s %14s %14s" % (" ", "Grand Totals", t0.disp, t1.disp,
-            t2.disp, t3.disp, t4.disp, t5.disp, t6.disp, t7.disp,
-            t8.disp, t9.disp))
+            "%14s %14s %14s" % (" ", "Grand Totals", t[0].disp, t[1].disp,
+            t[2].disp, t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp,
+            t[8].disp, t[9].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'crs/cr3340_rne.py'
--- crs/cr3340_rne.py	2015-02-07 06:31:11 +0000
+++ crs/cr3340_rne.py	2015-06-08 08:21:21 +0000
@@ -184,7 +184,8 @@
         # New Discounts
         tab = ["crsmst", "crsage"]
         jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-            "rtf_acno=cra_acno and rtf_type=cra_type and rtf_ref1=cra_ref1"
+            "rtf_acno=cra_acno and rtf_type=cra_type and "\
+            "rtf_ref1=cra_ref1"
         col = [
             "rtf_depno", "rtf_acno", "crm_name",
             "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
@@ -338,31 +339,31 @@
         self.pglin = 8
 
     def doBranchTotal(self):
+        t = []
         for x in xrange(8):
-            exec "t%s = CCD(self.stot[x], 'SD', 14.2)" % x
+            t.append(CCD(self.stot[x], "SD", 14.2))
             self.gtot[x] = float(ASD(self.gtot[x]) + ASD(self.stot[x]))
             self.stot[x] = 0
         self.fpdf.underLine(txt=self.head)
         self.fpdf.drawText("%-7s %-30s %14s %14s %14s %14s %14s %14s %14s "\
-            "%14s" % (" ", "Branch Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+            "%14s" % (" ", "Branch Totals", t[0].disp, t[1].disp, t[2].disp,
+            t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
 
     def doGrandTotal(self):
+        t = []
         for x in xrange(8):
-            exec "t%s = CCD(self.gtot[x], 'SD', 14.2)" % x
+            t.append(CCD(self.gtot[x], "SD", 14.2))
         if self.df.repprt[0][2] == "export":
             self.expdatas.append(["ULINES"])
-            self.expdatas.append(["TOTAL", ["", "", "Grand Totals", t0.work,
-                t1.work, t2.work, t3.work, t4.work, t5.work, t6.work,
-                t7.work]])
+            self.expdatas.append(["TOTAL", ["", "", "Grand Totals",
+                t[0].work, t[1].work, t[2].work, t[3].work, t[4].work,
+                t[5].work, t[6].work, t[7].work]])
             self.expdatas.append(["ULINED"])
-            return
-        for x in xrange(8):
-            exec "t%s = CCD(self.gtot[x], 'SD', 14.2)" % x
-        self.fpdf.underLine(txt=self.head)
-        self.fpdf.drawText("%-7s %-30s %14s %14s %14s %14s %14s %14s %14s "\
-            "%14s" % (" ", "Grand Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+        else:
+            self.fpdf.underLine(txt=self.head)
+            self.fpdf.drawText("%-7s %-30s %14s %14s %14s %14s %14s %14s %14s "\
+                "%14s" % (" ", "Grand Totals", t[0].disp, t[1].disp, t[2].disp,
+                t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'crs/cr3350_rne.py'
--- crs/cr3350_rne.py	2015-02-07 06:31:11 +0000
+++ crs/cr3350_rne.py	2015-06-08 08:24:02 +0000
@@ -171,7 +171,8 @@
         # New Discounts
         tab = ["ctlmst", "crsage"]
         jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-            "rtf_acno=cra_acno and rtf_type=cra_type and rtf_ref1=cra_ref1"
+            "rtf_acno=cra_acno and rtf_type=cra_type and "\
+            "rtf_ref1=cra_ref1"
         col = [
             "rtf_acno", "rtf_depno", "ctm_name",
             "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
@@ -284,23 +285,25 @@
         self.pglin += 2
 
     def doSupplierTotal(self):
+        t = []
         for x in xrange(8):
-            exec "t%s = CCD(self.stot[x], 'SD', 14.2)" % x
+            t.append(CCD(self.stot[x], "SD", 14.2))
             self.gtot[x] = float(ASD(self.gtot[x]) + ASD(self.stot[x]))
             self.stot[x] = 0
         self.fpdf.drawText()
         self.fpdf.drawText("%-3s %-30s %14s %14s %14s %14s %14s %14s %14s "\
-            "%14s" % (" ", "Supplier Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+            "%14s" % (" ", "Supplier Totals", t[0].disp, t[1].disp, t[2].disp,
+            t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
         self.fpdf.underLine(txt=self.head)
         self.pglin += 3
 
     def doGrandTotal(self):
+        t = []
         for x in xrange(8):
-            exec "t%s = CCD(self.gtot[x], 'SD', 14.2)" % x
+            t.append(CCD(self.gtot[x], "SD", 14.2))
         self.fpdf.drawText("%-3s %-30s %14s %14s %14s %14s %14s %14s %14s "\
-            "%14s" % (" ", "Grand Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+            "%14s" % (" ", "Grand Totals", t[0].disp, t[1].disp, t[2].disp,
+            t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'crs/cr3360_rne.py'
--- crs/cr3360_rne.py	2015-02-07 06:31:11 +0000
+++ crs/cr3360_rne.py	2015-05-30 07:46:10 +0000
@@ -235,7 +235,6 @@
                 count = self.doHeader(page, clr=True)
             ttyp = CCD(tr[ctc.index("crt_type")], "UI", 1)
             ref1 = CCD(tr[ctc.index("crt_ref1")], "Na", 9)
-            # trdt = CCD(tr[ctc.index("crt_trdt")], "D1", 10)
             payamt = tr[ctc.index("crt_tramt")]
             disper = CCD(tr[ctc.index("crt_disper")], "UD", 5.2)
             rtf = self.sql.getRec(tables="crsrtf", where=[("rtf_cono", "=",

=== modified file 'crs/cr3370_rne.py'
--- crs/cr3370_rne.py	2015-04-03 08:19:00 +0000
+++ crs/cr3370_rne.py	2015-06-08 08:25:40 +0000
@@ -38,7 +38,7 @@
                     "ctm_pcode", "ctm_regno", "ctm_taxno", "ctm_tel",
                     "ctm_fax", "ctm_b_name", "ctm_b_ibt", "ctm_b_acno",
                     "ctm_logo"):
-            exec "self.%s = ctl[self.sql.ctlmst_col.index('%s')]" % (col, col)
+            setattr(self, "%s" % col, ctl[self.sql.ctlmst_col.index(col)])
         if "LETTERHEAD" in os.environ:
             self.ctm_logo = os.environ["LETTERHEAD"]
         if not self.ctm_logo or not os.path.exists(self.ctm_logo):

=== modified file 'crs/cr4010_rne.py'
--- crs/cr4010_rne.py	2015-05-20 16:03:01 +0000
+++ crs/cr4010_rne.py	2015-06-01 07:10:54 +0000
@@ -245,72 +245,50 @@
         if self.history == "Y":
             if self.year:
                 whr.append(("crt_trdt", "between", self.start, self.end))
-            col, recs = getTrn(self.opts["mf"].dbm, "crs", whr=whr)
+            col, recs = getTrn(self.opts["mf"].dbm, "rtf", whr=whr)
         else:
-            col, recs = getTrn(self.opts["mf"].dbm, "crs", dte=self.curdt,
+            col, recs = getTrn(self.opts["mf"].dbm, "rtf", dte=self.curdt,
                 whr=whr)
         if recs:
+            cols = []
             data = []
-            for dat in recs:
-                rtf = self.sql.getRec(tables="crsrtf", where=[("rtf_cono",
-                    "=", self.opts["conum"]), ("rtf_acno", "=", self.acno),
-                    ("rtf_type", "=", dat[col.index("crt_type")]),
-                    ("rtf_ref1", "=", dat[col.index("crt_ref1")])], limit=1)
-                if not rtf:
-                    depno = 0
-                    pjno = 0
-                    disamt = 0
-                    distax = 0
-                    incamt = 0
-                    #inctax = 0
-                    advamt = 0
-                    #advtax = 0
-                else:
-                    depno = rtf[self.sql.crsrtf_col.index("rtf_depno")]
-                    pjno = rtf[self.sql.crsrtf_col.index("rtf_pjno")]
-                    disamt = rtf[self.sql.crsrtf_col.index("rtf_disamt")]
-                    distax = rtf[self.sql.crsrtf_col.index("rtf_distax")]
-                    incamt = rtf[self.sql.crsrtf_col.index("rtf_incamt")]
-                    #inctax = rtf[self.sql.crsrtf_col.index("rtf_inctax")]
-                    advamt = rtf[self.sql.crsrtf_col.index("rtf_advamt")]
-                    #advtax = rtf[self.sql.crsrtf_col.index("rtf_advtax")]
-                data.append([
-                    dat[col.index("crt_trdt")],
-                    dat[col.index("crt_curdt")],
-                    dat[col.index("crt_batch")],
-                    dat[col.index("crt_type")],
-                    dat[col.index("crt_ref1")],
-                    dat[col.index("crt_ref2")],
-                    depno, pjno,
-                    dat[col.index("crt_tramt")],
-                    dat[col.index("crt_taxamt")],
-                    dat[col.index("paid")],
-                    dat[col.index("balance")],
-                    disamt, incamt, advamt])
-                    #disamt, distax, incamt, inctax, advamt, advtax])
-            tit = "Transactions for Account: %s - %s" % (self.acno, self.name)
-            col = (
-                ("crt_trdt", "   Date", 10, "D1", "N"),
-                ("crt_curdt", "Curr-Dt", 7, "D2", "N"),
-                ("crt_batch", "Batch", 7, "Na", "N"),
-                ("crt_type", "Typ", 3, ("XX", crtrtp), "N"),
-                ("crt_ref1", "Reference", 9, "Na", "Y"),
-                ("crt_ref2", "Ref-Num-2", 9, "Na", "N"),
-                ("rtf_depno", "Dep", 3, "UI", "N"),
-                ("rtf_pjno", "PjNo", 4, "UI", "N"),
-                ("crt_tramt", "    Amount", 13.2, "SD", "N"),
-                ("crt_taxamt", "    V.A.T.", 13.2, "SD", "N"),
-                ("paid", "      Paid", 13.2, "SD", "N"),
-                ("balance", "   Balance", 13.2, "SD", "N"),
-                ("rtf_disamt", "Dis-Amount", 13.2, "SD", "N"),
-                ("rtf_incamt", "Inc-Discnt", 13.2, "SD", "N"),
-                ("rtf_advamt", "Adv-Discnt", 13.2, "SD", "N"))
-                #("rtf_distax", "Dis-V.A.T.", 13.2, "SD", "N"),
-                #("rtf_inctax", "Inc-V.A.T.", 13.2, "SD", "N"),
-                #("rtf_advtax", "Adv-V.A.T.", 13.2, "SD", "N"))
+            dc1 = self.sql.crstrn_dic
+            dc2 = self.sql.crsrtf_dic
+            for num, rec in enumerate(recs):
+                if rec[col.index("rtf_depno")] is None:
+                    rec[col.index("rtf_depno")] = 0
+                    rec[col.index("rtf_pjno")] = 0
+                    rec[col.index("rtf_disamt")] = 0
+                    rec[col.index("rtf_distax")] = 0
+                    rec[col.index("rtf_incamt")] = 0
+                    rec[col.index("rtf_advamt")] = 0
+                dat = []
+                for nam in ["crt_trdt", "crt_curdt", "crt_batch",
+                        "crt_type", "crt_ref1", "crt_ref2", "rtf_depno",
+                        "rtf_pjno", "crt_tramt", "crt_taxamt", "paid",
+                        "balance", "rtf_disamt", "rtf_incamt", "rtf_advamt"]:
+                    if not num:
+                        if nam == "paid":
+                            cols.append(("paid","Paid",13.2,"SD","N"))
+                        elif nam == "balance":
+                            cols.append(("balance","Balance",13.2,"SD","N"))
+                        elif nam == "crt_type":
+                            cols.append((nam, "Typ", 3, ("XX", crtrtp), "N"))
+                        elif nam == "crt_ref1":
+                            cols.append((nam, dc1[nam][5], dc1[nam][3],
+                                dc1[nam][2], "Y"))
+                        elif nam[:3] == "crt":
+                            cols.append((nam, dc1[nam][5], dc1[nam][3],
+                                dc1[nam][2], "N"))
+                        elif nam[:3] == "rtf":
+                            cols.append((nam, dc2[nam][5], dc2[nam][3],
+                                dc2[nam][2], "N"))
+                    dat.append(rec[col.index(nam)])
+                data.append(dat)
+            titl = "Transactions for Account: %s - %s" % (self.acno, self.name)
             state = self.df.disableButtonsTags()
             while True:
-                rec = SelectChoice(self.df.nb.Page4, tit, col, data)
+                rec = SelectChoice(self.df.nb.Page4, titl, cols, data)
                 # Display all transaction details
                 if rec.selection:
                     self.df.setWidget(self.df.mstFrame, state="hide")
@@ -377,27 +355,21 @@
                 if self.history == "Y":
                     if self.year:
                         whr.append(("crt_trdt","between",self.start,self.end))
-                    col, recs = getTrn(self.opts["mf"].dbm, "crs", whr=whr)
+                    col, recs = getTrn(self.opts["mf"].dbm, "rtf", whr=whr)
                 else:
-                    col, recs = getTrn(self.opts["mf"].dbm, "crs",
+                    col, recs = getTrn(self.opts["mf"].dbm, "rtf",
                         dte=self.curdt, whr=whr)
                 cols = []
                 data = []
                 dc1 = self.sql.crstrn_dic
                 dc2 = self.sql.crsrtf_dic
                 for num, rec in enumerate(recs):
-                    rtf = self.sql.getRec(tables="crsrtf", where=[("rtf_cono",
-                        "=", self.opts["conum"]), ("rtf_acno", "=", self.acno),
-                        ("rtf_type", "=", rec[col.index("crt_type")]),
-                        ("rtf_ref1", "=", rec[col.index("crt_ref1")])],
-                        limit=1)
                     dat = []
                     for nam in ["crt_trdt", "crt_curdt", "crt_batch",
                             "crt_type", "crt_ref1", "crt_ref2", "rtf_depno",
                             "rtf_pjno", "crt_tramt", "crt_taxamt", "paid",
-                            "balance", "rtf_disamt", "rtf_distax", "rtf_incamt",
+                            "balance", "rtf_disamt", "rtf_incamt",
                             "rtf_advamt"]:
-                            #"rtf_inctax", "rtf_advamt", "rtf_advtax"]:
                         if not num:
                             if nam == "paid":
                                 cols.append(["paid", "SD", 13.2, "Paid"])
@@ -409,14 +381,7 @@
                             elif nam[:3] == "rtf":
                                 cols.append([nam, dc2[nam][2], dc2[nam][3],
                                     dc2[nam][5]])
-                        if nam in ("paid", "balance"):
-                            dat.append(rec[col.index(nam)])
-                        elif nam[:3] == "crt":
-                            dat.append(rec[col.index(nam)])
-                        elif nam[:3] == "rtf" and rtf:
-                            dat.append(rtf[self.sql.crsrtf_col.index(nam)])
-                        else:
-                            dat.append(0)
+                        dat.append(rec[col.index(nam)])
                     data.append(dat)
                 gtots=["crt_tramt", "crt_taxamt", "paid", "balance"]
                 if view:

=== modified file 'crs/crc110.py'
--- crs/crc110.py	2014-12-30 15:37:38 +0000
+++ crs/crc110.py	2015-06-17 15:18:29 +0000
@@ -14,7 +14,7 @@
 """
 
 import time
-from TartanClasses import Sql, TartanDialog
+from TartanClasses import GetCtl, Sql, TartanDialog
 
 class crc110:
     def __init__(self, **opts):
@@ -24,8 +24,8 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["crsctl", "tplmst", "chglog"],
-            prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlctl", "crsctl", "tplmst",
+            "chglog"], prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="crsctl", where=[("ctc_cono", "=",
@@ -36,11 +36,27 @@
                 "remittance_advice"]
         else:
             self.new = False
+        gc = GetCtl(self.opts["mf"])
+        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+        self.ctl = []
+        for ctl in ("crs_ctl", "dis_rec"):
+            if ctl in ctlctl:
+                self.ctl.append(ctlctl[ctl])
+            else:
+                self.ctl.append(0)
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Creditors Control File Maintenance (%s)" % __name__)
+        glm = {
+            "stype": "R",
+            "tables": ("genmst",),
+            "cols": (
+                ("glm_acno", "", 0, "G/L-Num"),
+                ("glm_desc", "", 30, "Description")),
+            "where": [
+                ("glm_cono", "=", self.opts["conum"])]}
         ctl = {
             "stype": "R",
             "tables": ("ctlctl", "genmst"),
@@ -70,15 +86,21 @@
         self.fld = (
             (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
                 self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),("IRB",r2s),0,"G/L Input Method","",
+            (("T",0,1,0),"IUI",7,"Control Account","",
+                self.ctl[0],"N",self.doGenAcc,glm,None,("efld",)),
+            (("T",0,1,0),"ONA",30,""),
+            (("T",0,2,0),"IUI",7,"Discount Received","",
+                self.ctl[0],"N",self.doGenAcc,glm,None,("efld",)),
+            (("T",0,2,0),"ONA",30,""),
+            (("T",0,3,0),("IRB",r2s),0,"G/L Input Method","",
                 self.acc[2],"N",None,None,None,None),
-            (("T",0,2,0),"INA",4,"Best Account Code","Best",
+            (("T",0,4,0),"INA",4,"Best Account Code","Best",
                 self.acc[3],"N",self.doBestAcc,None,None,("efld",)),
-            (("T",0,3,0),"IUI",2,"Best Account Type","BT",
+            (("T",0,5,0),"IUI",2,"Best Account Type","BT",
                 self.acc[4],"N",None,None,None,("efld",)),
-            (("T",0,4,0),"IUI",7,"Bank Account Code","Bank-Ac",
+            (("T",0,6,0),"IUI",7,"Bank Account Code","Bank-Ac",
                 self.acc[5],"N",self.doBankAcc,ctl,None,("efld",)),
-            (("T",0,5,0),"INA",20,"Remittance Template","",
+            (("T",0,7,0),"INA",20,"Remittance Template","",
                 self.acc[6],"N",self.doTplNam,tpm,None,("efld",)))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
@@ -88,14 +110,41 @@
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
+            s = 0
             for n, f in enumerate(self.acc[1:]):
-                self.df.loadEntry("T", 0, n, data=f)
+                self.df.loadEntry("T", 0, s, data=f)
+                s += 1
+                if not n:
+                    for c in self.ctl:
+                        self.df.loadEntry("T", 0, s, data=c)
+                        s += 1
+                        self.df.loadEntry("T", 0, s, data=self.getDes(c))
+                        s += 1
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         self.glint = w
         if self.glint == "N":
-            self.df.loadEntry(frt, pag, p+1, data="E")
-            return "sk1"
+            self.df.loadEntry(frt, pag, p+1, data="")
+            self.df.loadEntry(frt, pag, p+2, data="")
+            self.df.loadEntry(frt, pag, p+3, data="")
+            self.df.loadEntry(frt, pag, p+4, data="")
+            self.df.loadEntry(frt, pag, p+5, data="E")
+            return "sk5"
+
+    def doGenAcc(self, frt, pag, r, c, p, i, w):
+        des = self.getDes(w)
+        if not des:
+            return "Invalid Account Number"
+        self.df.loadEntry(frt, pag, p+1, data=des)
+
+    def getDes(self, acno):
+        acc = self.sql.getRec(tables="genmst", cols=["glm_desc"],
+            where=[("glm_cono", "=", self.opts["conum"]),
+            ("glm_acno", "=", acno)], limit=1)
+        if acc:
+            return acc[0]
+        else:
+            return ""
 
     def doBestAcc(self, frt, pag, r, c, p, i, w):
         if not w or self.glint == "N":
@@ -104,9 +153,10 @@
             return "sk2"
 
     def doBankAcc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="genmst", cols=["glm_desc"],
-            where=[("glm_cono", "=", self.opts["conum"]), ("glm_acno", "=",
-            w)], limit=1)
+        acc = self.sql.getRec(tables=["genmst", "ctlctl"], cols=["glm_desc"],
+            where=[("glm_cono", "=", self.opts["conum"]), ("glm_acno", "=", w),
+                ("ctl_code", "like", "bank_%"), ("ctl_cono=glm_cono",),
+                ("ctl_conacc=glm_acno",)], limit=1)
         if not acc:
             return "Invalid Bank Account"
 
@@ -117,12 +167,38 @@
             return "Invalid Template"
 
     def doEnd(self):
+        ctls = []
         data = [self.opts["conum"]]
-        for x in xrange(0, len(self.df.t_work[0][0])):
-            data.append(self.df.t_work[0][0][x])
+        for x, d in enumerate(self.df.t_work[0][0]):
+            if x == 1:
+                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                    "=", self.opts["conum"]), ("ctl_code", "=", "crs_ctl")],
+                    limit=1)
+                if chk:
+                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                        where=[("ctl_cono", "=", self.opts["conum"]),
+                        ("ctl_code", "=", "crs_ctl")])
+                else:
+                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                        "crs_ctl", "Creditors Control", d, "", "N", "N"])
+            elif x == 3:
+                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                    "=", self.opts["conum"]), ("ctl_code", "=", "dis_all")],
+                    limit=1)
+                if chk:
+                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                        where=[("ctl_cono", "=", self.opts["conum"]),
+                        ("ctl_code", "=", "dis_all")])
+                else:
+                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                        "dis_all", "Creditors Control", d, "", "N", "N"])
+            elif x in (2, 4):
+                continue
+            else:
+                data.append(d)
         if self.new:
             self.sql.insRec("crsctl", data=data)
-        elif data != self.acc:
+        elif not data == self.acc:
             self.sql.updRec("crsctl", data=data, where=[("ctc_cono", "=",
                 self.opts["conum"])])
             dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])

=== modified file 'csv/crspay_fld.csv'
--- csv/crspay_fld.csv	2015-05-20 16:03:01 +0000
+++ csv/crspay_fld.csv	2015-05-27 10:39:39 +0000
@@ -2,6 +2,6 @@
 1,"cpt_acno","NA","7.0","Account Number","Acc-Num"
 2,"cpt_name","NA","30.0","Account Name","Account-Name"
 3,"cpt_ref1","Na","9.0","Reference Number","Reference"
-4,"cpt_eftr","UI","10.0","EFT Reference","EFT-RefNum"
+4,"cpt_eftr","NA","10.0","EFT Reference","EFT-RefNum"
 5,"cpt_amnt","SD","13.2","Payment Amount","Pay-Amount"
 6,"cpt_flag","UA","1.0","Paid Flag","P"

=== modified file 'doc/AR.rst'
--- doc/AR.rst	2014-03-28 07:32:49 +0000
+++ doc/AR.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Asset's Register
-~~~~~~~~~~~~~~~~
+----------------
 File Maintenance (AR)
 .....................
 Control Record (AR)

=== modified file 'doc/BC.rst'
--- doc/BC.rst	2015-04-10 10:19:18 +0000
+++ doc/BC.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Bowls Clubs
-~~~~~~~~~~~
+-----------
 File Maintenance
 ................
 Control Record (BC)

=== modified file 'doc/BK.rst'
--- doc/BK.rst	2015-02-07 06:31:11 +0000
+++ doc/BK.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Bookings Manager
-~~~~~~~~~~~~~~~~
+----------------
 File Maintenance (BK)
 .....................
 Control Record (BK)

=== modified file 'doc/Bowls.rst'
--- doc/Bowls.rst	2015-02-11 16:45:23 +0000
+++ doc/Bowls.rst	2015-06-01 09:57:51 +0000
@@ -2,12 +2,12 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.0.4
+:Version:   5.0.15
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
 :Copyright: Paul Malherbe (C) 2004-2015.
-:Licence:   Free use of this software and all it's modules is granted under the terms of the License.
+:Licence:   Free use of this software and all it's modules is granted under the terms of the Licence.
 
 :Note: This document is not intended as an accounting manual. It is primarily a manual for people with some accounting expertise to learn how to use Tartan as an accounting tool.
 
@@ -55,10 +55,12 @@
 Ensure that the following dependencies are installed on your system:
 
 + python >= 2.7.5 and < 3.0.0
-+ python-tk >= 2.7.5 and < 3.0.0
-+ python-imaging >= 2.3.0
-+ python-pil >= 2.3.0
-+ python-pil.imagetk >= 2.3.0
++ pillow >= 2.3.0
++ fpdf >= 1.7.0
+
+Windows also requires the following:
+
++ pywin32 >= build 217
 
 Additionally, the following dependencies should also be installed using pip:
 
@@ -70,19 +72,19 @@
 
 And, depending on your database needs, one of:
 
-+ Pysqlite >= 2.6.3
-
-or one of:
-
-+ Postgresql >= 8.4.0
-+ Psycopg2 >= 2.0.4
-
-or one of:
-
-+ Mysql >= 5.0.4
-+ Mysql-python >= 1.2.0
-
-Download the following file from ftp://ftp.tartan.co.za
++ pysqlite >= 2.6.3
+
+or
+
++ postgresql >= 8.4.0
++ psycopg2 >= 2.0.4
+
+or
+
++ mysql >= 5.0.1
++ MySql-python >= 1.2.0
+
+Then download the following file from ftp://ftp.tartan.co.za
 
 + Tartan_5.x.x.tar.gz
 
@@ -125,7 +127,7 @@
     5) Click the `OK` button (or press Enter on your keyboard if the button is highlighted by default).
     6) Finish by clicking `Apply` and then `OK`. Your preferences have been saved. Next time you open the shortcut to the application you performed the task for your computer will no longer require administrative permission.
 
-Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `c:\Tartan\prg` directory and double clicking on the `ms0000[.exe]` file.
+Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `C:\\Tartan\\prg` directory and double clicking on the `ms0000[.exe]` file.
 
 Both
 ~~~~
@@ -480,7 +482,7 @@
 + **Draw Base** - By pre-allocated Position, Rating or a Combination of both.
 + **Rating Order** - Whether the rating system is ascending or descending, like golf handicaps.
 + **Replace Fours** - When doing a trips tabs-in draw use pairs instead of fours for eight players.
-+ **Weeks Between Draws** - The minimum number of weeks that team members should not be in the same team again. The could however be drawn to play against them.
++ **Weeks Between Draws** - The minimum number of weeks that team members should not be in the same team again. They could however be drawn to play against them.
 + **Rate - Member** - The member's rate.
 + **Rate - Visitor** - The visitor's rate.
 + **Greens** - The available green codes e.g. AB
@@ -515,9 +517,10 @@
 + **Rating - Mixed** - The person's rating in mixed bowls.
 + **Association Number** - The person's number with the bowling association.
 
-In addition there is the following button.
+In addition there are the following buttons.
 
 + **Import** - Use this button to import, only tab ratings for existing tabs or all tab details for existing and new members, from an excel (xls) or comma separated (csv) file.
++ **Print** - Use this button to print a listing of member's details.
 
 League Formats
 ++++++++++++++

=== modified file 'doc/CR.rst'
--- doc/CR.rst	2015-03-21 07:40:04 +0000
+++ doc/CR.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Creditor's Ledger
-~~~~~~~~~~~~~~~~~
+-----------------
 File Maintenance (CR)
 .....................
 Control Record (CR)

=== modified file 'doc/CR_rne.rst'
--- doc/CR_rne.rst	2015-04-02 19:32:07 +0000
+++ doc/CR_rne.rst	2015-06-16 10:19:50 +0000
@@ -1,6 +1,5 @@
-
 Creditor's Ledger
-~~~~~~~~~~~~~~~~~
+-----------------
 File Maintenance (CR)
 .....................
 Control Record (CR)

=== modified file 'doc/DR.rst'
--- doc/DR.rst	2015-04-02 19:32:07 +0000
+++ doc/DR.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Debtor's Ledger
-~~~~~~~~~~~~~~~
+---------------
 File Maintenance (DR)
 .....................
 Control Record (DR)

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2015-05-20 16:03:01 +0000
+++ doc/Downloads.rst	2015-06-17 15:23:32 +0000
@@ -11,23 +11,23 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.0.15 and was released on the 20th May, 2015.
+The latest version of Tartan is 5.0.16 and was released on the 17th June, 2015.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.0.15.tar.gz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.0.16.tar.gz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tar.gz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tar.gz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tar.gz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.0.15.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.0.16.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.0.15.tar.gz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.0.15.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.0.15.tar.gz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.0.15.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.0.16.tar.gz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.0.16.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.0.16.tar.gz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.0.16.exe
 
 |linux| Linux
 =============

=== modified file 'doc/GL.rst'
--- doc/GL.rst	2015-04-02 19:32:07 +0000
+++ doc/GL.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 General Ledger
-~~~~~~~~~~~~~~
+--------------
 File Maintenance (GL)
 .....................
 Control Record (GL)

=== modified file 'doc/HD.rst'
--- doc/HD.rst	2015-02-07 06:31:11 +0000
+++ doc/HD.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Help
-~~~~
+----
 About Tartan
 ............
 This routine will display the copyright details, version and contact information for Tartan Systems.

=== modified file 'doc/MB.rst'
--- doc/MB.rst	2015-05-20 16:03:01 +0000
+++ doc/MB.rst	2015-06-17 15:23:32 +0000
@@ -1,8 +1,8 @@
-===============================
+================================
  TARTAN SYSTEMS - Bowling Clubs
-===============================
+================================
 
-:Version:   5.0.15
+:Version:   5.0.16
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -45,7 +45,7 @@
 Common Routines
 ---------------
 Printer Selection
-~~~~~~~~~~~~~~~~~
+-----------------
 Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record`_ record.
 
 * **Output** - Select the required output option.
@@ -60,7 +60,7 @@
 Menus and Sub Menus
 -------------------
 System
-~~~~~~
+------
 Update File Formats
 ...................
 Everytime you perfor an upgrade of Tartan you will have to run this routine as well. This routine will automatically update all table formats in the database.
@@ -142,7 +142,7 @@
 Select this to exit Tartan.
 
 Control
-~~~~~~~
+-------
 System Record
 .............
 This routine is used to create or amend a system control record by entering the following:
@@ -168,7 +168,7 @@
 + **E-Mail Address** - Your default email address.
 
 Bowling Clubs
-~~~~~~~~~~~~~
+-------------
 File Maintenance
 ................
 Control Record (BC)
@@ -188,9 +188,9 @@
 + **Rate - Visitor** - The visitor's rate.
 + **Greens** - The available green codes e.g. AB
 
-Club Records
-++++++++++++
-Use this routine to add, amend and delete opposition clubs.
+Club's Records
+++++++++++++++
+Use this routine to add, amend and delete clubs.
 
 + **Club Code** - The applicable club's code. A zero code will automatically select the next available code.
 + **Club Name** - The name of the club.

=== modified file 'doc/MD.rst'
--- doc/MD.rst	2015-05-20 16:03:01 +0000
+++ doc/MD.rst	2015-06-17 15:23:32 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.0.15
+:Version:   5.0.16
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -51,7 +51,7 @@
 Installation Procedure
 ----------------------
 Linux and Source
-~~~~~~~~~~~~~~~~
+----------------
 Ensure that the following dependencies are installed on your system:
 
 + python >= 2.7.5 and < 3.0.0
@@ -95,7 +95,7 @@
 Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
 
 Windows Binary
-~~~~~~~~~~~~~~
+--------------
 Download the following files from ftp://ftp.tartan.co.za or if you are in possession of a CD this is not necessary.
 
 + Tartan_full_5.x.x.exe
@@ -107,7 +107,7 @@
 Startup Procedure
 -----------------
 Linux and Source
-~~~~~~~~~~~~~~~~
+----------------
 Start Tartan by entering the following command:
 
     `python -OO program_path/ms0000.py [options]`
@@ -115,7 +115,7 @@
 To find out what the available command line options are, use the -h option.
 
 Windows Binary
-~~~~~~~~~~~~~~
+--------------
 .. NOTE::
 
   Users must first perform the following steps:
@@ -130,7 +130,7 @@
 Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `C:\\Tartan\\prg` directory and double clicking on the `ms0000[.exe]` file.
 
 Both
-~~~~
+----
 The first time you run Tartan you will automatically be taken to `Preferences`_ where you will have to enter various parameters relating to your installation. After saving the preferences and restarting Tartan you will be prompted to create the database. Once the database has been created you will have to create the System record as per `System Record Maintenance`_ as well as a Company record as per `Company Records Maintenance`_.
 
 Status Line
@@ -154,15 +154,15 @@
 There are various common routines. Rather than continually describing them they will be described once here only.
 
 User Validation
-~~~~~~~~~~~~~~~
+---------------
 If no users have been created using the `User's Maintenance`_ routine on the `System`_ menu and no password has been allocated to the **admin** user, the system will automatically log in using **admin** as the user name. In all other cases a user must log in by entering a valid name and password. If no password exists for the **admin** user a password should be created as soon as possible using the `Change Password`_ routine on the System_ menu.
 
 Company Selection
-~~~~~~~~~~~~~~~~~
+-----------------
 For every routine which is company specific and where you have more than 1 company, you will be required to select the relevant company. In some cases you will also have to enter a financial period. Please note that you will not always be prompted for the financial period as this only applies to routines which require it. Also note that for both selections there is a `F1 Record Selection` option as per `Common Keyboard Functions`_.
 
 Batch Details
-~~~~~~~~~~~~~
+-------------
 Most data capture routines require you to enter batch details. The reason for a batch is ease of balancing and the resolution of errors made during data capture. After you exit a data capture routine a totals summary will be displayed. If there is a discrepancy between the expected and entered values all the various systems have a routine to print the batch details thus enabling you to determine where the error is and therefore to correct it.
 
 + **Batch Number** - Any 7 character unique alphanumeric code.
@@ -176,7 +176,7 @@
 + **Bank Control** - For all batches in general ledger and other systems integrated with the general ledger, that affect the bank accounts, enter the bank control code.
 
 Ageing Transactions
-~~~~~~~~~~~~~~~~~~~
+-------------------
 While capturing transactions for various systems you will be required to allocate the amount to existing outstanding transactions for ageing purposes.
 
 There are four different methods of ageing a transaction:
@@ -194,7 +194,7 @@
 + **Current** - This will leave the full transaction as unallocated.
 
 Printer Selection
-~~~~~~~~~~~~~~~~~
+-----------------
 Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record Maintenance`_ record.
 
 * **Output** - Select the required output option.
@@ -211,7 +211,7 @@
 Please note that depending on the system modules selected when creating the company records, as detailed in `Company Records Maintenance`_, and the security level of the user, some of the menus detailed below might not appear.
 
 System
-~~~~~~
+------
 Please note that depending on the security level of the user some of these routines might not be available.
 
 Change User
@@ -369,7 +369,7 @@
 Select this to exit Tartan.
 
 Control
-~~~~~~~
+-------
 System Record Maintenance
 .........................
 This routine is used to create or amend a system control record by entering the following:

=== modified file 'doc/ML.rst'
--- doc/ML.rst	2014-03-28 07:32:49 +0000
+++ doc/ML.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Member's Ledger
-~~~~~~~~~~~~~~~
+---------------
 File Maintenance (ML)
 .....................
 Control Record (ML)

=== modified file 'doc/QS.rst'
--- doc/QS.rst	2015-02-11 16:45:23 +0000
+++ doc/QS.rst	2015-06-01 10:36:38 +0000
@@ -29,7 +29,7 @@
 The General Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
 
 Creditor's Ledger
------------------
+.................
 If you are going to use the `Creditor's Ledger` you must perform the following procedures in order:
 
 + Create a control record for the company using `Control Record`.
@@ -45,7 +45,7 @@
 Please also note that within the Creditor's system all balances are stored as positive even though they are stored as credits in the General Ledger.  Therefore to increase a supplier's balance you would capture a Journal Credit and to decrease a supplier's balance you would capture a Journal Debit.
 
 Debtor's Ledger
----------------
+...............
 If you are going to use the `Debtor's Ledger` you must perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -64,7 +64,7 @@
 The Debtor's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
 
 Store's Ledger
---------------
+..............
 If you are going to use the `Store's Ledger` you must perform the following procedures in order:
 
 + Create a control record for the company using `Control Record`.
@@ -82,7 +82,7 @@
 The Store's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
 
 Sales Invoicing
----------------
+...............
 If you are going to use `Sales Invoicing` you must perform the following procedures in order:
 
 + Setup the Debtor's System as in 8) above ensuring that you create at least one salesman's record.
@@ -92,7 +92,7 @@
 The Sales's Invoicing system is at this stage fully functional and you can capture invoices, credit notes, sales orders and quotations.
 
 Asset's Ledger
---------------
+..............
 If you are going to use the `Asset's Register` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -103,7 +103,7 @@
 The Asset's Register system is at this stage fully functional and you can capture payments, receipts and journal entries. Please note that new assets are captured via the data capture routines i.e. Payments and/or Journal Entries.
 
 Bookings Manager
-----------------
+................
 If you are going to use the `Booking's Manager` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -114,7 +114,7 @@
 The Booking's Manager system is at this stage fully functional and you can capture bookings and booking's movements.
 
 Bowling Clubs
--------------
+.............
 If you are going to use `Bowling Clubs` you must first of all ensure that the `System and Company` records have been created.
 
 + Create a systems record, by selecting `System Record Maintenance` from the Control menu.
@@ -146,7 +146,7 @@
     * Print the game and match results by selecting the applicable routines from the menu.
 
 Member's Ledger
----------------
+...............
 If you are going to use the `Member's Ledger` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -157,7 +157,7 @@
 The Member's Ledger system is at this stage fully functional and you can add members, edit member details, capture postings, produce basic reports and do interrogations etc.
 
 Rental's Ledger - Standard
---------------------------
+..........................
 If you are going to use the `Rental's Ledger (Standard)` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -167,7 +167,7 @@
 The Rental's Ledger (Standard) system is at this stage fully functional and you can capture payments, receipts and journal entries.
 
 Rental's Ledger - Extended
---------------------------
+..........................
 If you are going to use the `Rental's Ledger (Extended)` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -178,7 +178,7 @@
 The Rental's Ledger (Standard) system is at this stage fully functional and you can capture payments, receipts and journal entries.
 
 Salaries and Wages
-------------------
+..................
 If you are going to use `Salaries and Wages` you must at least perform the following procedures in order:
 
 + Create a control record using `Control Record`.
@@ -191,7 +191,7 @@
 The Salaries and Wages system is at this stage fully functional and you can capture clock cards and produce payslips etc.
 
 Staff Loans
------------
+...........
 If you are going to use `Staff Loans` you must first of all set up `Salaries and Wages` as in 14) above and then, at least, perform the following procedures in order:
 
 + Ensure that there is a deduction record, in the salaries system, for loan repayments.

=== modified file 'doc/RC.rst'
--- doc/RC.rst	2014-05-08 17:02:33 +0000
+++ doc/RC.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Rental's Ledger (Extended)
-~~~~~~~~~~~~~~~~~~~~~~~~~~
+--------------------------
 File Maintenance (RC)
 .....................
 Control Record (RC)

=== modified file 'doc/RT.rst'
--- doc/RT.rst	2014-05-08 17:02:33 +0000
+++ doc/RT.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Rental's Ledger (Standard)
-~~~~~~~~~~~~~~~~~~~~~~~~~~
+--------------------------
 File Maintenance (RT)
 .....................
 Control Record (RT)

=== modified file 'doc/SC.rst'
--- doc/SC.rst	2015-02-07 06:31:11 +0000
+++ doc/SC.rst	2015-06-01 10:36:38 +0000
@@ -45,7 +45,7 @@
 Common Routines
 ---------------
 Printer Selection
-~~~~~~~~~~~~~~~~~
+-----------------
 Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record`_ record.
 
 * **Output** - Select the required output option.
@@ -60,7 +60,7 @@
 Menus and Sub Menus
 -------------------
 System
-~~~~~~
+------
 Update File Formats
 ...................
 Everytime you perfor an upgrade of Tartan you will have to run this routine as well. This routine will automatically update all table formats in the database.
@@ -142,7 +142,7 @@
 Select this to exit Tartan.
 
 Master
-~~~~~~
+------
 Maintenance
 ...........
 System Record

=== modified file 'doc/SI.rst'
--- doc/SI.rst	2014-03-28 07:32:49 +0000
+++ doc/SI.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Sales Invoicing
-~~~~~~~~~~~~~~~
+---------------
 File Maintenance (SI)
 .....................
 Control Record (SI)

=== modified file 'doc/SL.rst'
--- doc/SL.rst	2014-03-28 07:32:49 +0000
+++ doc/SL.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Staff Loans
-~~~~~~~~~~~
+-----------
 File Maintenance (SL)
 .....................
 Loans Masterfile

=== modified file 'doc/ST.rst'
--- doc/ST.rst	2014-03-28 07:32:49 +0000
+++ doc/ST.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Store's Ledger
-~~~~~~~~~~~~~~
+--------------
 File Maintenance (ST)
 .....................
 Control Record (ST)

=== modified file 'doc/UD.rst'
--- doc/UD.rst	2015-02-07 06:31:11 +0000
+++ doc/UD.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Utilities
-~~~~~~~~~
+---------
 Bulk Mail Utility
 .................
 Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Control Record` using `System Record Maintenance`_.

=== modified file 'doc/WG.rst'
--- doc/WG.rst	2015-02-11 16:45:23 +0000
+++ doc/WG.rst	2015-06-01 10:36:38 +0000
@@ -1,5 +1,5 @@
 Salaries and Wages
-~~~~~~~~~~~~~~~~~~
+------------------
 File Maintenance (WG)
 .....................
 Control Record (WG)

=== modified file 'drs/dr1020.py'
--- drs/dr1020.py	2015-04-04 09:29:12 +0000
+++ drs/dr1020.py	2015-06-07 16:28:39 +0000
@@ -179,7 +179,7 @@
             if self.num == 999:
                 return "Invalid Number (999), Reserved for Sales Invoices"
             self.new_num = "y"
-            self.next = 1
+            self.nxt = 1
         else:
             d = self.sql.drsrcm_col
             self.new_num = "n"
@@ -250,7 +250,7 @@
         if self.new_num == "y":
             self.sql.insRec("drsrcm", data=data)
             self.df.loadEntry("C", 0, 0, data=1)
-            self.df.focusField("C", 0, self.next)
+            self.df.focusField("C", 0, self.nxt)
         else:
             self.sql.updRec("drsrcm", data=data, where=[("dcm_cono", "=",
                 self.opts["conum"]), ("dcm_num", "=", self.num)])
@@ -378,11 +378,11 @@
                 self.df.loadEntry("C", 0, p+7, data=t[7])
             if p == last:
                 self.df.scrollScreen(0)
-                self.next = last + 1
+                self.nxt = last + 1
             else:
-                self.next = p + 9
+                self.nxt = p + 9
         else:
-            self.next = 1
-        self.df.focusField("C", 0, self.next)
+            self.nxt = 1
+        self.df.focusField("C", 0, self.nxt)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'drs/dr2030.py'
--- drs/dr2030.py	2015-04-04 09:29:12 +0000
+++ drs/dr2030.py	2015-06-07 16:11:05 +0000
@@ -51,7 +51,7 @@
                     "ctm_pcode", "ctm_regno", "ctm_taxno", "ctm_tel",
                     "ctm_fax", "ctm_b_name", "ctm_b_ibt", "ctm_b_acno",
                     "ctm_logo"):
-            exec "self.%s = ctl[self.sql.ctlmst_col.index('%s')]" % (col, col)
+            setattr(self, "%s" % col, ctl[self.sql.ctlmst_col.index(col)])
         if "LETTERHEAD" in os.environ:
             self.ctm_logo = os.environ["LETTERHEAD"]
         if not self.ctm_logo or not os.path.exists(self.ctm_logo):

=== modified file 'drs/dr3050.py'
--- drs/dr3050.py	2015-02-07 06:31:11 +0000
+++ drs/dr3050.py	2015-06-07 14:47:27 +0000
@@ -320,21 +320,24 @@
                 self.gtots])
             self.expdatas.append(["ULINED"])
             return
+        ldic = {}
         for x in xrange(0, 7):
-            exec "t%s = CCD(self.gtots[x], 'SD', 13.2)" % x
+            ldic["t%s" % x] = CCD(self.gtots[x], "SD", 13.2)
             if self.gtots[1] == 0:
-                exec "p%s = CCD(0, 'SD', 13.2)" % x
+                ldic["p%s" % x] = CCD(0, "SD", 13.2)
             else:
-                exec "p%s = CCD(round((self.gtots[x]/self.gtots[1]*100),2), "\
-                "'OSD', 13.2)" % x
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-11s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Grand Totals", t0.disp, t1.disp, t2.disp, t3.disp,
-            t4.disp, t5.disp, t6.disp))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-11s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Percentages", p0.disp, p1.disp, p2.disp, p3.disp,
-            p4.disp, p5.disp, p6.disp))
+                ldic["p%s" % x] = CCD(round((self.gtots[x] / self.gtots[1]
+                    * 100), 2), "OSD", 13.2)
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-11s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Grand Totals", ldic["t0"].disp, ldic["t1"].disp,
+            ldic["t2"].disp, ldic["t3"].disp, ldic["t4"].disp,
+            ldic["t5"].disp, ldic["t6"].disp))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-11s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Percentages", ldic["p0"].disp, ldic["p1"].disp,
+            ldic["p2"].disp, ldic["p3"].disp, ldic["p4"].disp,
+            ldic["p5"].disp, ldic["p6"].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'gen/gl1010.py'
--- gen/gl1010.py	2015-02-07 06:31:11 +0000
+++ gen/gl1010.py	2015-06-05 07:22:08 +0000
@@ -282,7 +282,7 @@
             "Populating Records\n\nPlease Wait ...")
         # genmst
         csvfle = open(os.path.join(self.opts["mf"].rcdic["prgdir"],
-            "csv", "genmst.dat"), "rb")
+            "csv", "genmst.dat"), "r")
         data = csv.reader(csvfle, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
             dat.insert(0, self.opts["conum"])
@@ -294,7 +294,7 @@
             self.sql.insRec("genmst", data=dat)
         # genrpt
         csvfle = open(os.path.join(self.opts["mf"].rcdic["prgdir"],
-            "csv", "genrpt.dat"), "rb")
+            "csv", "genrpt.dat"), "r")
         data = csv.reader(csvfle, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
             dat.insert(0, self.opts["conum"])
@@ -304,7 +304,7 @@
         drsctl = 0
         stksoh = 0
         csvfle = open(os.path.join(self.opts["mf"].rcdic["prgdir"],
-            "csv", "ctlctl.dat"), "rb")
+            "csv", "ctlctl.dat"), "r")
         data = csv.reader(csvfle, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
             if dat[0] in ("crs_ctl", "dis_rec"):

=== modified file 'gen/gl1020.py'
--- gen/gl1020.py	2014-12-30 15:37:38 +0000
+++ gen/gl1020.py	2015-06-16 12:54:13 +0000
@@ -99,7 +99,7 @@
             self.opts["conum"]), ("gjm_num", "=", self.num)], limit=1)
         if not num:
             self.new_num = "y"
-            self.next = 1
+            self.nxtcol = 1
         else:
             d = self.sql.genjlm_col
             self.new_num = "n"
@@ -148,7 +148,7 @@
             self.sql.updRec("genjlm", data=data, where=[("gjm_cono", "=",
                 self.opts["conum"]), ("gjm_num", "=", self.num)])
             self.doReload()
-        self.df.focusField("C", 0, self.next)
+        self.df.focusField("C", 0, self.nxtcol)
 
     def exitTop(self, widget=None):
         self.df.closeProcess()
@@ -176,7 +176,7 @@
         self.sql.delRec("genjlt", where=[("gjt_cono", "=", self.opts["conum"]),
             ("gjt_num", "=", self.num), ("gjt_seq", "=", self.seq)])
         self.doReload()
-        self.df.focusField("C", 0, self.next)
+        self.df.focusField("C", 0, self.nxtcol)
 
     def doAcc(self, frt, pag, r, c, p, i, w):
         data = self.readGenAcc(w)
@@ -219,7 +219,7 @@
                 self.opts["conum"]), ("gjt_num", "=", self.num),
                 ("gjt_seq", "=", self.seq)])
         self.doReload()
-        self.df.focusField("C", 0, self.next)
+        self.df.focusField("C", 0, self.nxtcol)
 
     def exitCol(self):
         tot = self.sql.getRec(tables="genjlt", cols=["count(*)",
@@ -261,9 +261,9 @@
                 self.df.loadEntry("C", 0, p+4, data=t[4])
         if p == last:
             self.df.scrollScreen(0)
-            self.next = last + 1
+            self.nxtcol = last + 1
         else:
-            self.next = p + 6
+            self.nxtcol = p + 6
 
     def doTotal(self, widget=None):
         tot = self.sql.getRec(tables="genjlt", cols=["round(sum(gjt_amnt),2)"],

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2015-05-20 16:03:01 +0000
+++ gen/gl2030.py	2015-05-23 13:00:22 +0000
@@ -929,8 +929,8 @@
     def doTrnRef(self, frt, pag, r, c, p, i, w):
         if self.pcash and not w:
             a = self.sql.getRec(tables="gentrn", cols=["glt_refno"],
-                where=[("glt_cono", "=", self.opts["conum"]), ("glt_acno", "=",
-                self.conacc),("glt_refno", "like", "PC_______")],
+                where=[("glt_cono", "=", self.opts["conum"]), ("glt_acno",
+                "=", self.conacc),("glt_refno", "like", "PC_______")],
                 group="glt_refno", order="glt_refno desc")
             auto = False
             for r in a:
@@ -1119,10 +1119,12 @@
                 self.rtlctl.append(a[0])
 
     def doAccNum(self, frt, pag, r, c, p, i, w):
+        if self.allcoy == self.opts["conum"] and w == self.bh.acc:
+            return "Invalid Number, Same as Origin"
         acc = self.sql.getRec(tables="genmst", where=[("glm_cono", "=",
             self.allcoy), ("glm_acno", "=", w)], limit=1)
         if not acc:
-            return "Invalid Account"
+            return "Invalid Number, Does Not Exist"
         self.others = None
         self.othtot = 0
         self.vattot = 0

=== modified file 'gen/gl3050.py'
--- gen/gl3050.py	2015-04-30 10:16:15 +0000
+++ gen/gl3050.py	2015-06-17 11:06:25 +0000
@@ -1113,6 +1113,7 @@
             self.pglin += 2
 
     def doValues(self, line):
+        ldic = {}
         typ = line[0]
         acc = CCD(line[4], "UL", 7)
         if acc.work == 0:
@@ -1165,8 +1166,8 @@
             for x in xrange(0, 14):
                 if self.val == "X" and sgn == "N":
                     line[9][x] = float(ASD(0) - ASD(line[9][x]))
-                exec "mp%s = CCD(long(line[9][x]), 'SL', 11.0)" % x
-                exec "mx%s = CCD(line[9][x], 'SD', 14.2)" % x
+                ldic["mp%s" % x] = CCD(long(line[9][x]), "SL", 11.0)
+                ldic["mx%s" % x] = CCD(line[9][x], "SD", 14.2)
         if self.prtnam != "export" and line[2] == "Y":
             self.fpdf.setFont(style="B")
         if self.prtnam == "export":
@@ -1244,9 +1245,9 @@
                 p = "n"
                 for x in xrange(0, 14):
                     if self.prtnam == "export":
-                        exec "a = mx%s.work" % x
+                        a = ldic["mx%s" % x].work
                     else:
-                        exec "a = mp%s.work" % x
+                        a = ldic["mp%s" % x].work
                     if a:
                         p = "y"
             else:
@@ -1255,42 +1256,55 @@
                 pass
             elif self.prtnam == "export":
                 if self.num == "Y":
-                    self.expdatas.append([txt, [acc.work, des.work, mx0.work,
-                        mx1.work, mx2.work, mx3.work, mx4.work, mx5.work,
-                        mx6.work, mx7.work, mx8.work, mx9.work, mx10.work,
-                        mx11.work, mx12.work, mx13.work]])
+                    self.expdatas.append([txt, [acc.work, des.work,
+                        ldic["mx0"].work, ldic["mx1"].work, ldic["mx2"].work,
+                        ldic["mx3"].work, ldic["mx4"].work, ldic["mx5"].work,
+                        ldic["mx6"].work, ldic["mx7"].work, ldic["mx8"].work,
+                        ldic["mx9"].work, ldic["mx10"].work, ldic["mx11"].work,
+                        ldic["mx12"].work, ldic["mx13"].work]])
                 else:
-                    self.expdatas.append([txt, [des.work, mx0.work, mx1.work,
-                        mx2.work, mx3.work, mx4.work, mx5.work, mx6.work,
-                        mx7.work, mx8.work, mx9.work, mx10.work, mx11.work,
-                        mx12.work, mx13.work]])
+                    self.expdatas.append([txt, [des.work, ldic["mx0"].work,
+                        ldic["mx1"].work, ldic["mx2"].work, ldic["mx3"].work,
+                        ldic["mx4"].work, ldic["mx5"].work, ldic["mx6"].work,
+                        ldic["mx7"].work, ldic["mx8"].work, ldic["mx9"].work,
+                        ldic["mx10"].work, ldic["mx11"].work, ldic["mx12"].work,
+                        ldic["mx13"].work]])
             else:
                 if self.num == "Y":
                     self.fpdf.drawText(
                         "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s" % \
-                        (acc.disp, des.disp, mp0.disp, mp1.disp, mp2.disp,
-                        mp3.disp, mp4.disp, mp5.disp, mp6.disp, mp7.disp,
-                        mp8.disp, mp9.disp, mp10.disp, mp11.disp, mp12.disp,
-                        mp13.disp))
+                        (acc.disp, des.disp, ldic["mp0"].disp, ldic["mp1"].disp,
+                        ldic["mp2"].disp, ldic["mp3"].disp, ldic["mp4"].disp,
+                        ldic["mp5"].disp, ldic["mp6"].disp, ldic["mp7"].disp,
+                        ldic["mp8"].disp, ldic["mp9"].disp, ldic["mp10"].disp,
+                        ldic["mp11"].disp, ldic["mp12"].disp,
+                        ldic["mp13"].disp))
                 else:
                     self.fpdf.drawText(
                         "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s" % \
-                        (des.disp, mp0.disp, mp1.disp, mp2.disp, mp3.disp,
-                        mp4.disp, mp5.disp, mp6.disp, mp7.disp, mp8.disp,
-                        mp9.disp, mp10.disp, mp11.disp, mp12.disp, mp13.disp))
+                        (des.disp, ldic["mp0"].disp, ldic["mp1"].disp,
+                        ldic["mp2"].disp, ldic["mp3"].disp, ldic["mp4"].disp,
+                        ldic["mp5"].disp, ldic["mp6"].disp, ldic["mp7"].disp,
+                        ldic["mp8"].disp, ldic["mp9"].disp, ldic["mp10"].disp,
+                        ldic["mp11"].disp, ldic["mp12"].disp,
+                        ldic["mp13"].disp))
                 self.pglin += 1
                 self.last = True
                 if line[10]:
-                    self.achart.append([typ, line[10], mp1.work, mp2.work,
-                        mp3.work, mp4.work, mp5.work, mp6.work, mp7.work,
-                        mp8.work, mp9.work, mp10.work, mp11.work, mp12.work])
+                    self.achart.append([typ, line[10], ldic["mp1"].work,
+                        ldic["mp2"].work, ldic["mp3"].work, ldic["mp4"].work,
+                        ldic["mp5"].work, ldic["mp6"].work, ldic["mp7"].work,
+                        ldic["mp8"].work, ldic["mp9"].work, ldic["mp10"].work,
+                        ldic["mp11"].work, ldic["mp12"].work])
                 if typ in ("L", "T", "G") and des.work:
                     dsc = des.work
-                    for x in (47, 123, 125):
-                        dsc = dsc.replace(chr(x), "%s%s" % (chr(47), chr(x)))
-                    self.mchart.append([typ, dsc, mp1.work, mp2.work, mp3.work,
-                        mp4.work, mp5.work, mp6.work, mp7.work, mp8.work,
-                        mp9.work, mp10.work, mp11.work, mp12.work])
+                    for x in ("/", "{", "}"):
+                        dsc = dsc.replace(x, "/%s" % x)
+                    self.mchart.append([typ, dsc, ldic["mp1"].work,
+                        ldic["mp2"].work, ldic["mp3"].work, ldic["mp4"].work,
+                        ldic["mp5"].work, ldic["mp6"].work, ldic["mp7"].work,
+                        ldic["mp8"].work, ldic["mp9"].work, ldic["mp10"].work,
+                        ldic["mp11"].work, ldic["mp12"].work])
         elif self.typ == "C":
             disp = []
             work = []

=== modified file 'gen/gl4020.py'
--- gen/gl4020.py	2015-02-11 16:45:23 +0000
+++ gen/gl4020.py	2015-06-08 08:43:29 +0000
@@ -738,8 +738,7 @@
     def storeRepRecord(self):
         self.s_acno = 0
         for key in self.rpt_dic:
-            k = key.split("_")
-            exec "self.s_%s = self.rpt_dic[key]" % k[1]
+            setattr(self, "s_%s" % key.split("_")[1], self.rpt_dic[key])
 
     def doDisplayReport(self):
         if not self.allFields:

=== modified file 'gen/gl6020.py'
--- gen/gl6020.py	2014-12-30 15:37:38 +0000
+++ gen/gl6020.py	2015-06-09 07:26:25 +0000
@@ -109,9 +109,10 @@
                     typ="Copying %s" % tab)
                 for num, acc in enumerate(recs):
                     p.displayProgress(num)
-                    exec "acc[self.sql.%s_col.index('%s_cono')] = %s" % (tab,
-                        ref, self.opts["conum"])
-                    exec "self.sql.insRec('%s', data=acc)" % tab
+                    coy = "%s_cono" % ref
+                    col = getattr(self.sql, "%s_col" % tab)
+                    acc[col.index(coy)] = self.opts["conum"]
+                    self.sql.insRec(tab, data=acc)
                 p.closeProgress()
         self.opts["mf"].dbm.commitDbase(ask=True)
         self.opts["mf"].closeLoop()

=== modified file 'mem/ml3030.py'
--- mem/ml3030.py	2015-02-07 06:31:11 +0000
+++ mem/ml3030.py	2015-06-08 08:56:59 +0000
@@ -374,21 +374,23 @@
             self.expdatas.append(["TOTAL", ["", "Grand Totals"] + self.gtots])
             self.expdatas.append(["ULINED"])
             return
-        for x in xrange(0, 7):
-            exec "t%s = CCD(self.gtots[x], 'SD', 13.2)" % x
+        t = []
+        p = []
+        for x in xrange(7):
+            t.append(CCD(self.gtots[x], "SD", 13.2))
             if self.gtots[1] == 0:
-                exec "p%s = CCD(0, 'SD', 13.2)" % x
+                p.append(CCD(0, "SD", 13.2))
             else:
-                exec "p%s = CCD(round((self.gtots[x]/self.gtots[1]*100),2), "\
-                    "'SD', 13.2)" % x
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-6s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Grand Totals", t0.disp, t1.disp, t2.disp, t3.disp,
-            t4.disp, t5.disp, t6.disp))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-6s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
-            (" ", "Percentages", p0.disp, p1.disp, p2.disp, p3.disp,
-            p4.disp, p5.disp, p6.disp))
+                p.append(CCD(round(
+                    (self.gtots[x] / self.gtots[1] * 100), 2), "SD", 13.2))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-6s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Grand Totals", t[0].disp, t[1].disp, t[2].disp, t[3].disp,
+            t[4].disp, t[5].disp, t[6].disp))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-6s %-30s %13s %13s %13s %13s %13s %13s %13s" % \
+            (" ", "Percentages", p[0].disp, p[1].disp, p[2].disp, p[3].disp,
+            p[4].disp, p[5].disp, p[6].disp))
 
     def getOptions(self):
         if self.stat == "B":

=== modified file 'men/bwlmen.py'
--- men/bwlmen.py	2015-04-10 10:19:18 +0000
+++ men/bwlmen.py	2015-06-13 12:04:34 +0000
@@ -96,5 +96,5 @@
     ["PYNN","bc_cc","bc3110",0,"Match Results Report"],
     ["PYNN","bc_cc","bc3120",0,"Contact Request Forms"],
     ["PYNN","bc_tb","bc6010",3,"Change Tab Numbers"],
-    ["PYNN","bc_tb","bc6020",0,"Clear League History"]]
+    ["PYNN","bc_tb","bc6020",0,"Clear History"]]
 # End

=== modified file 'men/stdmen.py'
--- men/stdmen.py	2015-04-30 10:16:15 +0000
+++ men/stdmen.py	2015-06-13 12:04:27 +0000
@@ -87,13 +87,11 @@
     ["PYYN","mm_ms","msy020",6,"Change Year End Date"],
     ["PYNN","mm_uy","bm1010",3,"Bulk Mail/SMS Utility"],
     ["PNNN","mm_uy","fc1010",0,"Loan/Lease Calculator"],
-    ["PNNY","mm_uy","pm1010",0,"Personal Password Manager"],
     ["PNNY","mm_uy","rp1010",2,"Report Generator"],
-    ["PNNN","mm_uy","pw1010",5,"Server User Maintenance"],
     ["PNNN","mm_uy","tp1010",5,"Template Manager"],
     ["F","mm_hp","doAbout",0,"About"],
     ["F","mm_hp","doManual",0,"Reference Manual"],
-    ["F","mm_hp","doQuick",0,"Quick Start Manual"]]
+    ["F","mm_hp","doQuick",0,"Quick Start Guide"]]
 
 # General Ledger Routines
 glmen = [
@@ -485,7 +483,7 @@
     ["PYNN","bc_cc","bc3110",0,"Match Results Report"],
     ["PYNN","bc_cc","bc3120",0,"Contact Request Forms"],
     ["PYNN","bc_tb","bc6010",3,"Change Tab Numbers"],
-    ["PYNN","bc_tb","bc6020",0,"Clear League History"]]
+    ["PYNN","bc_tb","bc6020",0,"Clear History"]]
 
 # Telephone Directory
 tdmen = [

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2015-05-20 16:03:01 +0000
+++ mst/ms0000.py	2015-06-17 15:23:32 +0000
@@ -37,7 +37,7 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2]))
 else:
-    VERSION = (5, 0, 15)
+    VERSION = (5, 0, 16)
 if __name__ == "__main__":
     # Run Tartan
     try:

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2015-05-20 16:03:01 +0000
+++ mst/msc000.py	2015-06-09 10:24:18 +0000
@@ -43,7 +43,7 @@
         else:
             default.append(("output", False))
         for arg, val in default:
-            exec "self.%s = val" % arg
+            setattr(self, arg, val)
         for o, v in opts:
             if o in ("-b", "--bpwd"):
                 self.bpwd = v
@@ -157,7 +157,7 @@
             -z, --zerobar           Do not have a progressbar
 """)
             self.doExit(dbm=False)
-        if not self.xdisplay:
+        if not self.version and not self.xdisplay:
             nodisp = ("tarBck", "tarUpd", "ml6030")
             if not self.query and not self.program in nodisp:
                 print("xdisplay False but program not in %s" % str(nodisp))
@@ -165,7 +165,7 @@
             elif not self.user:
                 print("xdisplay False but no User Name")
                 self.doExit(dbm=False)
-        if self.xdisplay and not GUI:
+        if not self.version and self.xdisplay and not GUI:
             print("Tkinter/ttk not Available or Installed")
             self.doExit(dbm=False)
         if self.version:
@@ -369,12 +369,12 @@
 
     def setVariables(self):
         stdmen = __import__(self.menu)
-        self.sys = {}
+        self.sss = {}
         self.men = []
         self.mod = []
         self.cono = []
         for s in stdmen.systems:
-            self.sys[s[0]] = s[1]
+            self.sss[s[0]] = s[1]
             try:
                 exec "self.men.extend(stdmen.%2smen)" % s[0]
                 exec "self.mod.extend(stdmen.%2smod)" % s[0]
@@ -486,9 +486,9 @@
                         self.cono.append(int(co))
                 nos = []
                 # All systems not in the company modules
-                for sys in self.sys:
-                    if sys not in ("ca", "ms", "rp", "td"):
-                        nos.append(sys)
+                for sss in self.sss:
+                    if sss not in ("ca", "ms", "rp", "td"):
+                        nos.append(sss)
                 ctm = sql.getRec(tables="ctlmst", cols=["ctm_modules"])
                 for m in ctm:
                     for x in xrange(0, len(m[0]), 2):
@@ -509,11 +509,11 @@
                     where=[("mpw_usr", "=", self.user["name"]), ("mpw_prg",
                     "<>", ""), ("mpw_pwd", "<>", "")])
                 if vop:
-                    for sys, mod in vop:
-                        if sys in nos:
-                            nos.remove(sys)
+                    for sss, mod in vop:
+                        if sss in nos:
+                            nos.remove(sss)
                             for prg in self.mod:
-                                if prg[2][:2] == sys:
+                                if prg[2][:2] == sss:
                                     if prg[2][2:] == mod:
                                         continue
                                     nop.append([prg[2][:2], prg[2][2:]])
@@ -521,18 +521,18 @@
                 self.usrmod = []
                 for men in self.men:
                     add = True
-                    for sys in nos:
-                        if men[1] == "mm_%s" % sys:
+                    for sss in nos:
+                        if men[1] == "mm_%s" % sss:
                             add = False
                     if add:
                         self.usrmen.append(men)
                 for mod in self.mod:
                     add = True
-                    for sys in nos:
-                        if mod[2][:2] == sys:
+                    for sss in nos:
+                        if mod[2][:2] == sss:
                             add = False
-                    for sys, prg in nop:
-                        if mod[2] == "%s%s" % (sys, prg):
+                    for sss, prg in nop:
+                        if mod[2] == "%s%s" % (sss, prg):
                             add = False
                     if add:
                         self.usrmod.append(mod)
@@ -607,7 +607,7 @@
                 self.mf.head.configure(text="%s (%s)" % (tit, prg))
                 self.mf.updateStatus("")
             try:
-                exec "self.%s()" % prg
+                getattr(self, prg)()
             except:
                 if self.xdisplay:
                     showException(self.mf.body, self.rcdic["wrkdir"],
@@ -1068,20 +1068,20 @@
         self.mf.closeLoop()
 
     def tarUsr(self):
-        sys = []
+        sss = []
         prg = {}
-        keys = self.sys.keys()
+        keys = self.sss.keys()
         keys.sort()
         for s in keys:
-            sys.append((self.sys[s], s))
-            exec "%sm = []" % s
+            sm = []
+            sss.append((self.sss[s], s))
             for mod in self.mod:
                 if mod[0][0] == "P" and mod[2][:2] == s:
                     if len(mod) == 6:
                         mod[2] = "%s%s" % (mod[2][:5], mod[5])
-                    exec "%sm.append((mod[3], mod[2][2:], mod[4]))" % s
-            exec "prg['%s'] = %sm" % (s, s)
-        TartanUser(self.mf, sys, prg)
+                    sm.append((mod[3], mod[2][2:], mod[4]))
+            prg[s] = sm
+        TartanUser(self.mf, sss, prg)
 
     def sysUpd(self):
         tit = ("System Upgrade",)
@@ -1167,7 +1167,7 @@
             v = flenam.getvalue()
             flenam.close()
             # Read and create Tartan file
-            v = v.replace(chr(10), "").replace(chr(13), "").split(".")
+            v = v.rstrip().split(".")
             self.newver = (int(v[0]), int(v[1]), int(v[2]))
             self.nvtxt = "%s.%s.%s" % self.newver
             if self.newver[0] > self.current[0][0]:
@@ -1262,7 +1262,7 @@
             "pth": os.path.join(self.mf.rcdic["prgdir"], "csv"),
             "pwd": self.mf.rcdic["dbpwd"],
             "rcf": self.rcfile,
-            "sys": self.sysfle,
+            "sss": self.sysfle,
             "tab": [],
             "upd": False,
             "usr": self.mf.rcdic["dbuser"],
@@ -1393,10 +1393,10 @@
         self.doBrowser("Manual")
 
     def doQuick(self):
-        self.doBrowser("Quickstart")
+        self.doBrowser("QuickStart")
 
     def doBrowser(self, doc):
-        pdf = os.path.join(self.rcdic["prgdir"], "doc", doc)
+        pdf = os.path.join(self.rcdic["prgdir"], "doc", "%s.pdf" % doc)
         if os.path.exists(pdf):
             exe, cmd = parsePrg(self.rcdic["vwr"])
             cmd.append(pdf)
@@ -1496,7 +1496,7 @@
         chk = self.conoCheck(1, ctl=True)
         if not chk:
             return
-        if "sc" in self.sys:
+        if "sc" in self.sss:
             for mod in self.mod:
                 if mod[2] in ("ms1010", "scc110"):
                     module = mod[2]
@@ -1515,18 +1515,18 @@
             sql = Sql(self.db, "ctlsys", prog="msc000", errs=False)
             if sql.error:
                 raise Exception
-            sys = sql.getRec(tables="ctlsys", cols=cols, limit=1)
-            if not sys:
+            sss = sql.getRec(tables="ctlsys", cols=cols, limit=1)
+            if not sss:
                 raise Exception
             if len(cols) == 1:
-                return sys[0]
+                return sss[0]
             else:
-                return sys
+                return sss
         except:
-            sys = []
+            sss = []
             for col in cols:
-                sys.append(None)
-            return sys
+                sss.append(None)
+            return sss
 
     def doSqlCmd(self):
         if type(self.query) is list:
@@ -1539,7 +1539,7 @@
                 return "Invalid Query File (%s)" % name
         self.db.openDbase()
         for line in flenam:
-            line = line.replace(chr(10), "").replace(chr(13), "")
+            line = line.rstrip()
             if not line or line[0] == "#":
                 continue
             comm = line.split()

=== modified file 'mst/msy010.py'
--- mst/msy010.py	2015-05-20 16:03:01 +0000
+++ mst/msy010.py	2015-06-08 09:35:18 +0000
@@ -366,7 +366,7 @@
                     whr = whrt[:]
                     for k in keyt:
                         if not k.count("_cono"):
-                            exec "dat = rec[sql.%s_col.index(k)]" % tab[0]
+                            dat = rec[getattr(sql, "%s_col" % tab[0]).index(k)]
                             whr.append((k, '=', dat))
                     if tab[0] == "asstrn":
                         whr.append(("ast_mtyp", "<>", 1))

=== modified file 'mst/msy010_rne.py'
--- mst/msy010_rne.py	2015-05-20 16:03:01 +0000
+++ mst/msy010_rne.py	2015-06-08 09:36:08 +0000
@@ -357,7 +357,7 @@
                     whr = whrt[:]
                     for k in keyt:
                         if not k.count("_cono"):
-                            exec "dat = rec[sql.%s_col.index(k)]" % tab[0]
+                            dat = rec[getattr(sql, "%s_col" % tab[0]).index(k)]
                             whr.append((k, '=', dat))
                     if tab[0] == "asstrn":
                         whr.append(("ast_mtyp", "<>", 1))

=== modified file 'rca/rc3040.py'
--- rca/rc3040.py	2015-02-07 06:31:11 +0000
+++ rca/rc3040.py	2015-06-08 09:38:10 +0000
@@ -79,8 +79,7 @@
         self.df.closeProcess()
         odr = "rcc_code, rcc_acno, rcc_cnum"
         whr = [
-            ("rcc_cono", "=", self.opts["conum"]),
-            ("rcc_start", "<=", self.date)]
+            ("rcc_cono", "=", self.opts["conum"])]
         if self.styp == "X":
             whr.append(("rcc_status", "=", "X"))
         if self.cons == "Y":
@@ -220,11 +219,13 @@
             self.tots[4] = float(ASD(self.tots[4]) + ASD(rep.work))
             self.tots[5] = float(ASD(self.tots[5]) + ASD(bal.work))
             self.pglin += 1
+        t = []
         for x in xrange(6):
-            exec "t%s = CCD(self.tots[x], 'SD', 13.2).disp" % x
+            t.append(CCD(self.tots[x], "SD", 13.2).disp)
         self.fpdf.underLine(txt=self.head)
-        self.fpdf.drawText("%27s %-30s %29s %-13s %-13s %-13s %-13s %-13s "\
-            "%-13s" % ("", "Grand Totals", "", t0, t1, t2, t3, t4, t5))
+        self.fpdf.drawText("%27s %-30s %29s %-13s %-13s %-13s %-13s "\
+            "%-13s %-13s" % ("", "Grand Totals", "", t[0], t[1], t[2],
+            t[3], t[4], t[5]))
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,

=== modified file 'rca/rc3090.py'
--- rca/rc3090.py	2015-02-07 06:31:11 +0000
+++ rca/rc3090.py	2015-05-27 12:11:41 +0000
@@ -25,7 +25,7 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["rcatnm", "rcacon"],
+        self.sql = Sql(self.opts["mf"].dbm, ["rcatnm", "rcatnt"],
             prog=__name__)
         if self.sql.error:
             return
@@ -53,9 +53,11 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        recs = self.sql.getRec(tables="rcacon", where=[("rcc_cono", "=",
-            self.opts["conum"]), ("rcc_start", "<=", self.date),
-            ("rcc_cnum", "=", 1)], order="rcc_code, rcc_acno, rcc_cnum")
+        grp = "rtu_owner, rtu_code, rtu_acno"
+        recs = self.sql.getRec(tables="rcatnt", cols=["rtu_owner", "rtu_code",
+            "rtu_acno"], where=[("rtu_cono", "=", self.opts["conum"]),
+            ("rtu_mtyp", "=", 2), ("rtu_trdt", "<=", self.date)],
+            group=grp, order=grp)
         if not recs:
             showError(self.opts["mf"].body, "Selection Error",
                 "No Records Selected")
@@ -65,15 +67,12 @@
 
     def printReport(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-        con = self.sql.rcacon_col
         data = []
         for num, dat in enumerate(recs):
             p.displayProgress(num)
             if p.quit:
                 break
-            owner = dat[con.index("rcc_owner")]
-            code = dat[con.index("rcc_code")]
-            acno = dat[con.index("rcc_acno")]
+            owner, code, acno = dat
             dep = getDeposit(self.opts["mf"], self.opts["conum"], self.date,
                 owner, code, acno)
             if not dep:
@@ -89,7 +88,11 @@
             name = self.sql.getRec(tables="rcatnm", cols=["rtn_name"],
                 where=[("rtn_cono", "=", self.opts["conum"]), ("rtn_owner",
                 "=", owner), ("rtn_code", "=", code), ("rtn_acno", "=", acno)],
-                limit=1)[0]
+                limit=1)
+            if name:
+                name = name[0]
+            else:
+                name = "Unknown"
             if dept:
                 data.append([code, acno, name, dept, intr, balance, admn])
         p.closeProgress()

=== modified file 'rca/rc6010.py'
--- rca/rc6010.py	2014-12-30 15:37:38 +0000
+++ rca/rc6010.py	2015-06-09 10:39:53 +0000
@@ -87,9 +87,7 @@
         data = open(self.file, "r")
         raw = data.readlines()
         for line in raw:
-            for c in (10, 12, 13):
-                line = line.replace(chr(c), "")
-            line = line.split(",")
+            line = line.rstrip().split(",")
             if self.rtyp == "O":
                 if len(line) > 6:
                     yes = askQuestion(self.opts["mf"].body, "Owner Error",

=== modified file 'rca/rc6020.py'
--- rca/rc6020.py	2014-12-30 15:37:38 +0000
+++ rca/rc6020.py	2015-06-09 10:40:22 +0000
@@ -89,9 +89,7 @@
         data = open(self.file, "r")
         raw = data.readlines()
         for line in raw:
-            for c in (10, 12, 13):
-                line = line.replace(chr(c), "")
-            line = line.split(",")
+            line = line.rstrip().split(",")
             if self.atyp == "O":
                 if len(line) > 6:
                     yes = askQuestion(self.opts["mf"].body, "Owner Error",

=== modified file 'rtl/rt3030.py'
--- rtl/rt3030.py	2015-02-07 06:31:11 +0000
+++ rtl/rt3030.py	2015-06-08 09:40:36 +0000
@@ -160,7 +160,7 @@
                 while mm > 12:
                     yy += 1
                     mm -= 12
-                chkmth = copy.deepcopy(mthnam)
+                chkmth = mthnam[:]
                 if mm == 2:
                     if (yy % 4) == 0:
                         chkmth[2][2] = 29
@@ -216,11 +216,12 @@
             self.tots[3] = float(ASD(self.tots[3]) + ASD(jnl.work))
             self.tots[4] = float(ASD(self.tots[4]) + ASD(bal.work))
             self.pglin += 1
+        t = []
         for x in xrange(5):
-            exec "t%s = CCD(self.tots[x], 'SD', 13.2).disp" % x
+            t.append(CCD(self.tots[x], "SD", 13.2).disp)
         self.fpdf.underLine(txt=self.head)
         self.fpdf.drawText("%19s %-30s %29s %-13s %-13s %-13s %-13s %-13s" % \
-            ("", "Grand Totals", "", t0, t1, t2, t3, t4))
+            ("", "Grand Totals", "", t[0], t[1], t[2], t[3], t[4]))
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,

=== modified file 'scp/sc2020.py'
--- scp/sc2020.py	2014-12-30 15:37:38 +0000
+++ scp/sc2020.py	2015-06-09 10:44:58 +0000
@@ -1729,6 +1729,7 @@
                 self.ccod), ("scg_snum", "=", sec), ("scg_subs", "=", sub),
                 ("scg_scod", "=", skp[3])], limit=1)
             nskp[skp[0]][3][skp[2]] = [skp[3], opp[0]] + skp[4:8]
+        po = ["A", "B", "C", "D"]
         ox = cw * ox
         oy = ld * oy
         sk = 0
@@ -1739,7 +1740,7 @@
                 tot = [0, 0, 0.0]
                 skp = nskp[sk]
                 self.fpdf.set_font_size(20)
-                cd = chr(sk+65)
+                cd = po[sk]
                 self.fpdf.drawText(cd,x=x+cw,y=y,w=5,h=(ld*h*2),align="C")
                 self.fpdf.setFont(style="", size=ft)
                 self.fpdf.drawText(skp[1], x=x+(cw*10), y=y, w=30, h=(ld*h))
@@ -1748,7 +1749,7 @@
                 for rnd in xrange(1, self.rnds + 1):
                     self.fpdf.drawText(rnd, x=x, w=(cw*5), h=(ld*h),
                         ln=0, align="C")
-                    cd = chr(skp[3][rnd][1]+65)
+                    cd = po[skp[3][rnd][1]]
                     self.fpdf.drawText(cd, w=(cw*5), h=(ld*h),
                         ln=0, align="C")
                     if skp[0] > 900000 or skp[3][rnd][0] > 900000:

=== modified file 'sls/si2010.py'
--- sls/si2010.py	2015-04-24 13:45:12 +0000
+++ sls/si2010.py	2015-06-15 10:02:22 +0000
@@ -714,10 +714,10 @@
             self.df.loadEntry("C", 0, pos+8, self.incamt)
             self.totvat = float(ASD(self.totvat) + ASD(self.vatamt))
             self.totinv = float(ASD(self.totinv) + ASD(self.incamt))
-        if seq >= self.row[0]:
+        if seq >= (self.row[0] - 1):
             self.df.scrollScreen(0)
         else:
-            self.df.focusField("C", 0, pos+10)
+            self.df.focusField("C", 0, pos + 10)
         self.df.setViewPort(self.typs, self.totinv)
 
     def doTopExit(self, widget=None):

=== modified file 'sls/si2020.py'
--- sls/si2020.py	2015-05-20 16:03:01 +0000
+++ sls/si2020.py	2015-06-08 11:01:59 +0000
@@ -360,7 +360,8 @@
             self.grpf.grid_columnconfigure(col, minsize=self.mincol, weight=1)
         for row in xrange(5):
             for col in xrange(4):
-                exec "var = self.GR%sC%s = tk.StringVar()" % (row, col)
+                var = tk.StringVar()
+                setattr(self, "GR%sC%s" % (row, col), var)
                 b = self.doButton(self.grpf, "", (self.doGroup, (row, col)),
                     False, "G", var)
                 b.grid(column=col, row=row, sticky="nsew")
@@ -380,7 +381,8 @@
             self.itmf.grid_columnconfigure(col, minsize=self.mincol, weight=1)
         for row in xrange(5):
             for col in xrange(4):
-                exec "var = self.IR%sC%s = tk.StringVar()" % (row, col)
+                var = tk.StringVar()
+                setattr(self, "IR%sC%s" % (row, col), var)
                 b = self.doButton(self.itmf, "", (self.doCode, (row, col)),
                     False, "I", var)
                 b.grid(row=row, column=col, sticky="nsew")
@@ -460,7 +462,8 @@
         return newt
 
     def doCode(self, args):
-        exec "butt = self.IR%sC%s.get()" % args
+        b = getattr(self, "IR%sC%s" % args)
+        butt = b.get()
         if not butt:
             return
         self.code = self.ilist[self.page][(args[0] * 4) + args[1]][0]

=== modified file 'sls/si3080.py'
--- sls/si3080.py	2015-04-24 13:45:12 +0000
+++ sls/si3080.py	2015-06-05 05:41:49 +0000
@@ -140,7 +140,7 @@
         dic = {}
         for c in col:
             for t in tab:
-                exec "d = self.sql.%s_dic" % t
+                d = getattr(self.sql, "%s_dic" % t)
                 if c in d:
                     dic[c] = d[c]
         if self.select == "S":

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2015-05-20 16:03:01 +0000
+++ std/TartanClasses.py	2015-06-16 03:31:06 +0000
@@ -29,8 +29,8 @@
 # PyFPDF
 #========================================================
 try:
-    from fpdf import fpdf
-    if not fpdf.Image:
+    import fpdf
+    if not fpdf.fpdf.Image:
         raise Exception
 except:
     print("Missing fpdf or python-imaging module")
@@ -935,15 +935,14 @@
             cut_pasteMenu(event)
 
         def checkHeight(self, event):
-            text = event.widget.get("1.0", "end").replace("\n", "")
+            text = event.widget.get("1.0", "end").rstrip()
             if event.char.isalpha():
                 text += event.char
             else:
                 text = text[:-1]
             wrap = textwrap.TextWrapper(width=event.widget["width"],
                 break_long_words=False)
-            line = wrap.wrap(text)
-            event.widget["height"] = len(line)
+            event.widget["height"] = len(wrap.wrap(text))
 
     class MyTextView_V(tk.Text):
         def __init__(self, parent, bg=None, fg=None, bd=1, **kwargs):
@@ -1007,9 +1006,15 @@
             ww = int(self.window.winfo_screenwidth())
             wh = int(self.window.winfo_screenheight())
             self.window.maxsize(width=ww, height=wh)
-            # Style and fonts
+            # Style and fonts and colours
             style = ttk.Style()
             style.configure("TScrollbar", arrowsize=30)
+            if "mf" in self.opts:
+                self.nbg = self.opts["mf"].rcdic["nbg"]
+                self.nfg = self.opts["mf"].rcdic["nfg"]
+            else:
+                self.nbg = "white"
+                self.nfg = "black"
             if "font" in self.opts:
                 ft = self.opts["font"][0]
                 fs = self.opts["font"][1]
@@ -1129,9 +1134,9 @@
                 else:
                     y2 = y1 + (ch * 2)
                 rect = self.cv1.create_rectangle(x1, y1, x2, y2, width=2,
-                    fill=self.opts["mf"].rcdic["nbg"])
+                    fill=self.nbg)
                 text = self.cv1.create_text(x1+10, y1+(ch/2), text=lab[0],
-                    anchor="w", font=bold, fill=self.opts["mf"].rcdic["nfg"])
+                    anchor="w", font=bold, fill=self.nfg)
                 x1 = x2
             # Column headings
             x1 = 0
@@ -1143,12 +1148,11 @@
                     x2 = x1 + (col[1] * cw)     # column span
                     y2 = y1 + ch
                     rect = self.cv3.create_rectangle(x1, y1, x2, y2, width=2,
-                        fill=self.opts["mf"].rcdic["nbg"])
+                        fill=self.nbg)
                     txt = "{:^%i}" % cc
                     txt = txt.format(col[0])
                     text = self.cv3.create_text(x1+10, y1+(ch/2), text=txt,
-                        font=bold, fill=self.opts["mf"].rcdic["nfg"],
-                        anchor="w")
+                        font=bold, fill=self.nfg, anchor="w")
                     x1 = x2
                 x1 = 0
                 y1 = y2
@@ -1157,9 +1161,9 @@
                 x2 = x1 + cw
                 y2 = y1 + ch
                 rect = self.cv3.create_rectangle(x1, y1, x2, y2, width=2,
-                    fill=self.opts["mf"].rcdic["nbg"])
+                    fill=self.nbg)
                 text = self.cv3.create_text(x1+10, y1+(ch/2), text=col[0],
-                    anchor="w", font=bold, fill=self.opts["mf"].rcdic["nfg"])
+                    anchor="w", font=bold, fill=self.nfg)
                 x1 = x2
             y1 = 0
             # Label and Column data
@@ -1351,7 +1355,7 @@
 def rgb(col):
     # RGB color tuple
     if type(col) == int:
-        return (col // 65536), (col // 256 % 256), (col % 256)
+        return (col / 65536), (col / 256 % 256), (col % 256)
     if col[0] == "#":
         col = col.replace("#", "")
         col = (col[0:2], col[2:4], col[4:6])
@@ -1810,7 +1814,7 @@
                 image = None
             if image:
                 image = image.resize((20, 20), 0)
-                exec "self.image%s = ImageTk.PhotoImage(image)" % stk
+                setattr(self, "image%s" % stk, ImageTk.PhotoImage(image))
                 exec '%s.add("command", label="%s", command=cmd, font=font, '\
                     'underline=pos, image=self.image%s, compound="left")' \
                     % (m[1], m[4], stk)
@@ -2333,8 +2337,8 @@
 
     def createTable(self, table, drop=False, index=True):
         try:
-            fld = open(os.path.join(self.csvdir, "%s_fld.csv" % table), "rb")
-            idx = open(os.path.join(self.csvdir, "%s_idx.csv" % table), "rb")
+            fld = open(os.path.join(self.csvdir, "%s_fld.csv" % table), "r")
+            idx = open(os.path.join(self.csvdir, "%s_idx.csv" % table), "r")
         except:
             showError(self.screen, "Missing",
                 "The csv Files for %s Do Not Exist, Aborting" % table)
@@ -2444,7 +2448,7 @@
             self.cu.execute(qry)
             qry = "Delete from ffield where ff_tabl = '%s'" % table
             self.cu.execute(qry)
-        fld = open(os.path.join(self.csvdir, "%s_fld.csv" % table), "rb")
+        fld = open(os.path.join(self.csvdir, "%s_fld.csv" % table), "r")
         fd = []
         data = csv.reader(fld, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
@@ -3181,7 +3185,7 @@
             except:
                 text = ""
                 for ch in data:
-                    if ord(ch) < 128:
+                    if ord(ch) < 127:
                         text = text + ch
         else:
             text = data
@@ -3214,7 +3218,7 @@
                 if mm < 1 or mm > 12:
                     self.err = "Invalid Date (D1-1)"
                     return
-                chkmth = copy.deepcopy(mthnam)
+                chkmth = mthnam[:]
                 if mm == 2:
                     if (yy % 4) == 0:
                         chkmth[2][2] = 29
@@ -3269,7 +3273,7 @@
                 yy += 1900
             elif yy < 100:
                 yy += 2000
-            chkmth = copy.deepcopy(mthnam)
+            chkmth = mthnam[:]
             if mm == 2:
                 if (yy % 4) == 0:
                     chkmth[2][2] = 29
@@ -3321,7 +3325,7 @@
             if mm < 1 or mm > 12:
                 self.err = "Invalid Date (D1-1)"
                 return
-            chkmth = copy.deepcopy(mthnam)
+            chkmth = mthnam[:]
             if mm == 2:
                 if (yy % 4) == 0:
                     chkmth[2][2] = 29
@@ -5072,27 +5076,30 @@
 
     def selRecord(self, pag, opts):
         # Set the Defaults
+        lic = {}
         for key in ("screen", "tables", "cols", "extra", "group",
                 "title", "order", "wtype", "zero", "butt", "sort"):
             if key in opts:
-                exec "%s = opts['%s']" % (key, key)
+                lic[key] = opts[key]
             elif key == "screen":
-                screen = self.mstFrame
+                lic[key] = self.mstFrame
             elif key == "tables":
-                tables = []
+                lic[key] = []
             elif key == "sort":
-                sort = True
+                lic[key] = True
             elif key == "zero":
-                zero = "N"
+                lic[key] = "N"
             else:
-                exec "%s = None" % key
+                lic[key] = None
+        if not lic["order"]:
+            # Default the order to the first column
+            lic["order"] = lic["cols"][0][0]
         whr = self.setWhere(pag, opts)
-        if not order:
-            # Default the order to the first column
-            order = cols[0][0]
-        sr = SRec(self.mf, screen=screen, tables=tables, title=title,
-            cols=cols, where=whr, group=group, order=order, extra=extra,
-            wtype=wtype, butt=butt, sort=sort, zero=zero)
+        sr = SRec(self.mf, screen=lic["screen"], tables=lic["tables"],
+            title=lic["title"], cols=lic["cols"], where=whr,
+            group=lic["group"], order=lic["order"], extra=lic["extra"],
+            wtype=lic["wtype"], butt=lic["butt"], sort=lic["sort"],
+            zero=lic["zero"])
         return sr
 
     def setWhere(self, pag, opts):
@@ -5593,7 +5600,7 @@
                     fld.insert("1.0", disp.rstrip())
                 elif self.topf[pag][idx][1][1:] == "Tv":
                     fld.delete("1.0", "end")
-                    fld.insert("1.0", disp.replace("\n", "").strip())
+                    fld.insert("1.0", disp.rstrip())
                 else:
                     fld.delete(0, "end")
                     fld.insert(0, disp.rstrip())
@@ -5618,7 +5625,7 @@
                 fld.insert("1.0", disp.rstrip())
             elif self.colf[pag][idx][1][1:] == "Tv":
                 fld.delete("1.0", "end")
-                fld.insert("1.0", disp.replace("\n", "").strip())
+                fld.insert("1.0", disp.rstrip())
             else:
                 fld.delete(0, "end")
                 fld.insert(0, disp.rstrip())
@@ -5650,7 +5657,7 @@
             else:
                 ftxt = fwid.get()
         if not cr:
-            ftxt = ftxt.replace("\n", "")
+            ftxt = ftxt.rstrip()
         if wid and txt:
             return (fwid, ftxt)
         elif wid:
@@ -5718,7 +5725,7 @@
             text = fldd.get("1.0", "end").rstrip()
             fld = CCD(text, flds[1], flds[2][1])
         elif flds[1][1:] == "Tv":
-            text = fldd.get("1.0", "end").replace("\n", "").strip()
+            text = fldd.get("1.0", "end").rstrip()
             fld = CCD(text, flds[1], flds[2][1])
         else:
             fld = CCD(fldd.get(), flds[1], flds[2][1])
@@ -5958,11 +5965,11 @@
             self.has_focus.append(vwr)
             if not data is None:
                 self.loadEntry(frt, pag, self.pos, data=data)
-                vwr.tag_add("sel", "0.0", "end")
+                vwr.tag_add("sel", "1.0", "end")
             vwr.focus_set()
         elif act == "disable":
             vwr.configure(state="disabled")
-            vwr.tag_remove("sel", "0.0", "end")
+            vwr.tag_remove("sel", "1.0", "end")
             if vwr in self.has_focus:
                 self.has_focus.remove(vwr)
 
@@ -6414,9 +6421,9 @@
         state = {"butt": []}
         if self.butt:
             for num in xrange(len(self.butt)):
-                exec "st = str(self.B%s['state'])" % num
-                exec "state['butt'].append((self.B%s, st))" % num
-                exec "self.B%s.configure(state='disabled')" % num
+                bt = getattr(self, "B%s" % num)
+                state["butt"].append((bt, str(bt["state"])))
+                bt.configure(state="disabled")
         if tags and self.tags:
             state["tags"] = self.normaltags
             self.normaltags = []
@@ -6482,7 +6489,7 @@
         for i in range(0, len(words), 2):
             key = words[i][1:]
             value = words[i+1]
-            if str(value)[:1] == '.':
+            if str(value)[:1] == ".":
                 value = root._nametowidget(value)
             dict[key] = value
         return dict
@@ -6864,7 +6871,7 @@
         self.fcol = []
         self.cdet = {}
         self.chek = False
-        self.srch = len(cols)
+        self.srch = None
         for num, col in enumerate(cols):
             if col[3] == "CB":
                 self.chek = True
@@ -6880,6 +6887,8 @@
             else:
                 self.cols.append(col[0])
                 self.cdet[col[0]] = [col[2], col[3], col[4]]
+        if self.srch is None:
+            self.srch = num
         self.data = data
         if self.chek:
             self.srch -= 1
@@ -6903,7 +6912,7 @@
         self.scrl = scrl
         self.styl = styl
         self.font = tkFont.Font(font=font)
-        if self.font.cget("size") < 12:
+        if self.font.cget("size") > 12:
             self.font.configure(size=12)
         self.addh = addh
         self.escape = escape
@@ -7303,11 +7312,12 @@
         for b in self.buttons:
             b.configure(state="normal")
         tcol = fcol[:]
+        ldic = {}
         if diag.data:
             for col in tcol:
                 if diag.data[col[0]]:
-                    exec "flt%s = re.compile('%s', re.IGNORECASE)" % (col[0],
-                        str(diag.data[col[0]]))
+                    ldic["flt%s" % col[0]] = re.compile(
+                        str(diag.data[col[0]]), re.IGNORECASE)
                 else:
                     fcol.remove(col)
         else:
@@ -7317,7 +7327,7 @@
         for dat in olddata:
             matches = []
             for col in fcol:
-                exec "matches.append(flt%s.search(str(dat[col[1]])))" % col[0]
+                matches.append(ldic["flt%s" % col[0]].search(str(dat[col[1]])))
             if not None in matches:
                 newdata.append(dat)
         if not newdata:
@@ -7685,6 +7695,8 @@
                 self.but.pack(fill="x", expand="yes")
                 self.item = None
                 self.frm.mainloop()
+        else:
+            self.cnv = None
 
     def on_mouse_down(self, event):
         if self.item is None:
@@ -7714,10 +7726,11 @@
         self.frm.quit()
 
     def destroyImage(self):
-        self.cnv.destroy()
-        if self.crop:
-            self.but.destroy()
-        self.frm.destroy()
+        if self.cnv:
+            self.cnv.destroy()
+            if self.crop:
+                self.but.destroy()
+            self.frm.destroy()
 
 class TartanConfig:
     """
@@ -8521,12 +8534,12 @@
         hbox.grid_columnconfigure(0, weight=1)
         lab = MyLabel(hbox, text="Allocation Amount")
         lab.grid(row=0, column=0, sticky="ew")
-        self.allAmt = MyEntry(hbox, width=12, maxsize=12, cmd=self.enterAmt)
+        self.allAmt = MyEntry(hbox, width=13, maxsize=13, cmd=self.enterAmt)
         self.allAmt.configure(state="disabled")
         self.allAmt.grid(row=0, column=1, sticky="ew")
         lab = MyLabel(hbox, text="Unallocated")
         lab.grid(row=0, column=2, sticky="ew")
-        self.allBal = MyEntry(hbox, width=12, maxsize=12)
+        self.allBal = MyEntry(hbox, width=13, maxsize=13)
         self.allBal.insert(0, self.total.disp)
         self.allBal.configure(state="disabled")
         self.allBal.grid(row=0, column=3, sticky="ew")
@@ -10746,6 +10759,7 @@
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page, tdc)
+            ldic = {}
             for cod in self.form.body:
                 if cod == "line_value":
                     continue
@@ -10755,15 +10769,14 @@
                     if not des[-1]:
                         del des[-1]
                 else:
-                    exec "%s = CCD(item[ptc.index(cod)], "\
-                        "self.form.tptp[cod][0][1], "\
-                        "self.form.tptp[cod][0][2])" % cod
-            excpri = round((pot_price.work * 1), 2)
-            incrat = float(ASD(100.0) + ASD(pot_vatrat.work))
-            incpri = round((pot_price.work * incrat / 100.0), 4)
-            net = float(ASD(100.0) - ASD(pot_disper.work))
-            excamt = round((pot_qty.work * excpri * net / 100.0), 2)
-            incamt = round((pot_qty.work * incpri * net / 100.0), 2)
+                    ldic[cod] = CCD(item[ptc.index(cod)],
+                        self.form.tptp[cod][0][1], self.form.tptp[cod][0][2])
+            excpri = round((ldic["pot_price"].work * 1), 2)
+            incrat = float(ASD(100.0) + ASD(ldic["pot_vatrat"].work))
+            incpri = round((ldic["pot_price"].work * incrat / 100.0), 4)
+            net = float(ASD(100.0) - ASD(ldic["pot_disper"].work))
+            excamt = round((ldic["pot_qty"].work * excpri * net / 100.0), 2)
+            incamt = round((ldic["pot_qty"].work * incpri * net / 100.0), 2)
             vatamt = float(ASD(incamt) - ASD(excamt))
             if excamt == incamt:
                 self.total_nontaxable = float(ASD(self.total_nontaxable) + \
@@ -10773,7 +10786,7 @@
                     ASD(excamt))
             self.total_tax = float(ASD(self.total_tax) + ASD(vatamt))
             self.total_value = float(ASD(self.total_value) + ASD(incamt))
-            line_value = CCD(incamt, "SD", 11.2)
+            ldic["line_value"] = CCD(incamt, "SD", 11.2)
             for n, l in enumerate(des):
                 if count == self.form.maxlines:
                     page = self.doCfwd(page)
@@ -10793,8 +10806,7 @@
                     if code == "pot_desc":
                         data = l
                     elif code in include:
-                        exec "data = %s" % code
-                        data = data.work
+                        data = ldic[code].work
                     else:
                         data = "BLANK"
                     self.form.newdic[seq][tdc.index("tpd_text")] = data
@@ -10821,7 +10833,7 @@
             if d in self.form.newkey:
                 line = self.form.newdic[d]
                 mrgcod = line[tdc.index("tpd_mrgcod")]
-                exec "line[tdc.index('tpd_text')] = self.%s" % mrgcod
+                line[tdc.index("tpd_text")] = getattr(self, "%s" % mrgcod)
                 self.form.doDrawDetail(line)
 
     def doTail(self, tdc):
@@ -10849,10 +10861,10 @@
         pfx = "PurOrd"
         if self.email.lower() == "y" and not self.emadd:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_%s" % (self.conum, self.docno.work), ext="pdf", wait=1)
+                "%s_%s" % (self.conum, self.docno.work), ext="pdf")
         else:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_all" % self.conum, ext="pdf", wait=1)
+                "%s_all" % self.conum, ext="pdf")
         if self.prtnam == "view":
             view = "V"
         else:
@@ -11055,7 +11067,7 @@
                     self.form.tptp["document_type"][1] = dat
             if self.email.lower() == "y" and not self.emadd:
                 self.doPrint(self.eml)
-                if self.spalsh:
+                if self.splash:
                     sp.refreshSplash()
         if self.splash:
             sp.closeSplash()
@@ -11076,6 +11088,7 @@
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page, tdc)
+            ldic = {}
             for cod in self.form.body:
                 if cod == "line_value":
                     continue
@@ -11085,15 +11098,14 @@
                     if not des[-1]:
                         del des[-1]
                 else:
-                    exec "%s = CCD(item[s2c.index(cod)], "\
-                        "self.form.tptp[cod][0][1], "\
-                        "self.form.tptp[cod][0][2])" % cod
-            excpri = round((si2_price.work * 1), 2)
-            incrat = float(ASD(100.0) + ASD(si2_vat_rate.work))
-            incpri = round((si2_price.work * incrat / 100.0), 4)
-            net = float(ASD(100.0) - ASD(si2_disc_per.work))
-            excamt = round((si2_qty.work * excpri * net / 100.0), 2)
-            incamt = round((si2_qty.work * incpri * net / 100.0), 2)
+                    ldic[cod] = CCD(item[s2c.index(cod)],
+                        self.form.tptp[cod][0][1], self.form.tptp[cod][0][2])
+            excpri = round((ldic["si2_price"].work * 1), 2)
+            incrat = float(ASD(100.0) + ASD(ldic["si2_vat_rate"].work))
+            incpri = round((ldic["si2_price"].work * incrat / 100.0), 4)
+            net = float(ASD(100.0) - ASD(ldic["si2_disc_per"].work))
+            excamt = round((ldic["si2_qty"].work * excpri * net / 100.0), 2)
+            incamt = round((ldic["si2_qty"].work * incpri * net / 100.0), 2)
             vatamt = float(ASD(incamt) - ASD(excamt))
             if excamt == incamt:
                 self.total_nontaxable = float(ASD(self.total_nontaxable) + \
@@ -11103,7 +11115,7 @@
                     ASD(excamt))
             self.total_tax = float(ASD(self.total_tax) + ASD(vatamt))
             self.total_value = float(ASD(self.total_value) + ASD(incamt))
-            line_value = CCD(incamt, "SD", 11.2)
+            ldic["line_value"] = CCD(incamt, "SD", 11.2)
             for n, l in enumerate(des):
                 if count == self.form.maxlines:
                     page = self.doCfwd(page)
@@ -11129,8 +11141,7 @@
                     if code == "si2_desc":
                         data = l
                     elif code in include:
-                        exec "data = %s" % code
-                        data = data.work
+                        data = ldic[code].work
                     else:
                         data = "BLANK"
                     self.form.newdic[seq][tdc.index("tpd_text")] = data
@@ -11159,7 +11170,7 @@
             if d in self.form.newkey:
                 line = self.form.newdic[d]
                 mrgcod = line[tdc.index("tpd_mrgcod")]
-                exec "line[tdc.index('tpd_text')] = self.%s" % mrgcod
+                line[tdc.index("tpd_text")] = getattr(self, "%s" % mrgcod)
                 self.form.doDrawDetail(line)
 
     def doTail(self, tdc):
@@ -11199,10 +11210,10 @@
             pfx = "SlsQte"
         if self.email.lower() == "y" and not self.emadd:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_%s" % (self.conum, self.docno.work), ext="pdf", wait=1)
+                "%s_%s" % (self.conum, self.docno.work), ext="pdf")
         else:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_all" % self.conum, ext="pdf", wait=1)
+                "%s_all" % self.conum, ext="pdf")
         if self.dtype == "I":
             head = "Invoice"
         elif self.dtype == "C":
@@ -11447,24 +11458,24 @@
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page, tdc)
+            ldic = {}
             for cod in self.form.body:
                 if not cod == "line_value":
-                    exec "%s = CCD(item[ttc.index(cod)], "\
-                        "self.form.tptp[cod][0][1], "\
-                        "self.form.tptp[cod][0][2])" % cod
-            ### INVOICE LINES
+                    ldic[cod] = CCD(item[ttc.index(cod)],
+                        self.form.tptp[cod][0][1], self.form.tptp[cod][0][2])
             brt_rbase = item[ttc.index("brt_rbase")]
-            incpri = round((brt_arate.work * 1), 2)
+            incpri = round((ldic["brt_arate"].work * 1), 2)
             if brt_rbase == "A":
-                incamt = brt_quant.work * brt_bdays.work * brt_arate.work
+                incamt = ldic["brt_quant"].work * ldic["brt_bdays"].work \
+                    * ldic["brt_arate"].work
             elif brt_rbase == "C":
-                incamt = brt_bdays.work * brt_arate.work
+                incamt = ldic["brt_bdays"].work * ldic["brt_arate"].work
             else:
-                brt_bdays.work = brt_bdays.disp = ""
+                ldic["brt_bdays"].work = ldic["brt_bdays"].disp = ""
                 if brt_rbase == "B":
-                    incamt = brt_quant.work * brt_arate.work
+                    incamt = ldic["brt_quant"].work * ldic["brt_arate"].work
                 else:
-                    incamt = brt_arate.work
+                    incamt = ldic["brt_arate"].work
             vatrat = float(ASD(100.0) + ASD(item[ttc.index("brt_vrate")]))
             excamt = round((incamt * 100.0 / vatrat), 2)
             vatamt = float(ASD(incamt) - ASD(excamt))
@@ -11476,7 +11487,7 @@
                     ASD(excamt))
             self.total_tax = float(ASD(self.total_tax) + ASD(vatamt))
             self.total_value = float(ASD(self.total_value) + ASD(incamt))
-            line_value = CCD(incamt, "SD", 11.2)
+            ldic["line_value"] = CCD(incamt, "SD", 11.2)
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page, tdc)
@@ -11486,8 +11497,7 @@
                 if code == "rtt_desc":
                     data = l
                 elif code in include:
-                    exec "data = %s" % code
-                    data = data.work
+                    data = ldic[code].work
                 else:
                     data = "BLANK"
                 self.form.newdic[seq][tdc.index("tpd_text")] = data
@@ -11519,7 +11529,7 @@
             if d in self.form.newkey:
                 line = self.form.newdic[d]
                 mrgcod = line[tdc.index("tpd_mrgcod")]
-                exec "line[tdc.index('tpd_text')] = self.%s" % mrgcod
+                line[tdc.index("tpd_text")] = getattr(self, "%s" % mrgcod)
                 self.form.doDrawDetail(line)
 
     def doTail(self, tdc):
@@ -11551,10 +11561,10 @@
             head = "Credit Note"
         if self.email.lower() == "y" and not self.emadd:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_%s" % (self.conum, self.docno.work), ext="pdf", wait=1)
+                "%s_%s" % (self.conum, self.docno.work), ext="pdf")
         else:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_all" % self.conum, ext="pdf", wait=1)
+                "%s_all" % self.conum, ext="pdf")
         if self.email.lower() == "y" and not self.emadd:
             head = "%s %s" % (head, self.docno.work)
         elif len(self.docs) == 1:
@@ -12356,7 +12366,7 @@
             lastdir = os.path.join(self.mf.rcdic["wrkdir"], ".bankdir")
         if os.path.exists(lastdir):
             infle = open(lastdir, "r")
-            name = infle.readline().replace("\n", "")
+            name = infle.readline().rstrip()
             infle.close()
         else:
             name = self.mf.rcdic["wrkdir"]
@@ -12547,7 +12557,7 @@
             return "error"
 
     def importStdFile(self, fname):
-        infle = open(fname, "rb")
+        infle = open(fname, "r")
         data = csv.reader(infle, quoting=csv.QUOTE_MINIMAL)
         err = None
         for dat in data:
@@ -12768,7 +12778,7 @@
                 for tab in alltab:
                     tb = self.removeTables(tab)
                     sql = Sql(self.mf.dbm, tb, prog=__name__)
-                    exec "dic = dict(dic, **sql.%s_dic)" % tb
+                    dic = dict(dic.items()+getattr(sql, "%s_dic" % tb).items())
                 for n, c in enumerate(self.cols):
                     if type(c) == str:
                         self.cols[n] = [c, dic[c][2], dic[c][3], dic[c][5]]
@@ -12896,7 +12906,7 @@
                                 # appended after the last field.
                                 self.end = "y"
                         else:
-                            tf = tf + "%-" + "%d" % (ds-1) + "s "
+                            tf = tf + "%-" + "%d" % (ds - 1) + "s "
                             ds = 0
                         tf = tf + "%-" + "%d" % fsiz + "s"
                         if not c == len(self.gtots) - 1:
@@ -13073,6 +13083,7 @@
             num = 0
             fld = []
             cld = []
+            ldic = {}
             for nam in fn:
                 t = self.fd[nam][0]
                 if t == "TX" and not self.prtnam == "export":
@@ -13087,7 +13098,7 @@
                 if self.refmt:
                     if self.trtp and nam == self.trtp[0]:
                         d = self.trtp[1][int(d) - 1][0]
-                        exec "%s = CCD(d, 'NA', 3)" % nam
+                        ldic[nam] = CCD(d, "NA", 3)
                     else:
                         if nam in self.cg:
                             if not d:
@@ -13097,20 +13108,20 @@
                             else:
                                 d = float(ASD(0) - ASD(d))
                         if self.blank and t[1] in ("D", "I") and not d:
-                            exec "%s = CCD('', 'NA', %s)" % (nam, s)
+                            ldic[nam] = CCD("", "NA", s)
                         else:
-                            exec "%s = CCD(d, '%s', %s)" % (nam, t, s)
+                            ldic[nam] = CCD(d, t, s)
                     if nam in self.pr:
-                        exec "fld.append(%s.disp)" % nam
-                        exec "cld.append(%s.work)" % nam
+                        fld.append(ldic[nam].disp)
+                        cld.append(ldic[nam].work)
                 elif nam in self.pr:
                     fld.append(d)
                     cld.append(d)
                 num += 1
             st = "n"
             for sq1 in xrange((len(self.stots) - 1), -1, -1):
-                exec "w = self.%s_str" % self.stots[sq1][0]
-                exec "f = %s.work" % self.stots[sq1][0]
+                w = getattr(self, "%s_str" % self.stots[sq1][0])
+                f = ldic[self.stots[sq1][0]].work
                 if not w:
                     w = f
                 if not f == w and st == "n":
@@ -13121,23 +13132,21 @@
             if not self.prtnam == "export" and self.pglin >= self.fpdf.lpp:
                 self.pageHeading()
             for gt in self.gtots:
+                gtot = getattr(self, "%s_gtot" % gt)
+                if self.fd[gt][0][1] == "D":
+                    gtot = float(ASD(gtot) + ASD(ldic[gt].work))
+                else:
+                    gtot = gtot + ldic[gt].work
+                setattr(self, "%s_gtot" % gt, gtot)
                 idx = 0
-                if self.fd[gt][0][1] == "D":
-                    # Decimal Amount
-                    exec "self.%s_gtot = float(ASD(self.%s_gtot) + "\
-                        "ASD(%s.work))" % (gt, gt, gt)
-                    for s in self.stots:
-                        exec "self.%s_%s_stot = float(ASD(self.%s_%s_stot) + "\
-                            "ASD(%s.work))" % (gt, idx, gt, idx, gt)
-                        idx += 1
-                else:
-                    # Integer Amount
-                    exec "self.%s_gtot = self.%s_gtot + "\
-                        "%s.work" % (gt, gt, gt)
-                    for s in self.stots:
-                        exec "self.%s_%s_stot = self.%s_%s_stot + "\
-                            "%s.work" % (gt, idx, gt, idx, gt)
-                        idx += 1
+                for s in self.stots:
+                    stot = getattr(self, "%s_%s_stot" % (gt, idx))
+                    if self.fd[gt][0][1] == "D":
+                        stot = float(ASD(stot) + ASD(ldic[gt].work))
+                    else:
+                        stot = stot + ldic[gt].work
+                    setattr(self, "%s_%s_stot" % (gt, idx), stot)
+                    idx += 1
             if not self.prtnam == "export":
                 self.fpdf.drawText(txt=self.h5hf % tuple(fld))
                 self.pglin += 1
@@ -13273,11 +13282,11 @@
                 if n == self.gtots[c]:
                     cldf = True
                     if typ == "s":
-                        exec "j = CCD(self.%s_%s_stot, '%s', %s)" % \
-                            (n, snum, self.fd[n][0], float(self.fd[n][1]))
+                        j = CCD(getattr(self, "%s_%s_stot" % (n, snum)),
+                            self.fd[n][0], float(self.fd[n][1]))
                     else:
-                        exec "j = CCD(self.%s_gtot, '%s', %s)" % \
-                            (n, self.fd[n][0], float(self.fd[n][1]))
+                        j = CCD(getattr(self, "%s_gtot" % n),
+                            self.fd[n][0], float(self.fd[n][1]))
                     if not j.err:
                         fld.append(j.disp)
                         cld.append(j.work)
@@ -14918,7 +14927,7 @@
             self.lastdir = os.path.join(self.mf.rcdic["wrkdir"], ".impdir")
         if os.path.exists(self.lastdir):
             infle = open(self.lastdir, "r")
-            name = infle.readline().replace("\n", "")
+            name = infle.readline().rstrip()
             infle.close()
         else:
             name = self.mf.rcdic["wrkdir"]
@@ -14989,7 +14998,7 @@
         if name.split(".")[1].lower() == "csv":
             self.ftype = "csv"
             try:
-                self.csvfle = open(name, "rb")
+                self.csvfle = open(name, "r")
                 return "sk1"
             except:
                 return "Invalid csv File"
@@ -15491,12 +15500,14 @@
             self.interleaved2of5(text, x1, y1, w=size, h=y2-y1)
 
     def doDrawDetail(self, line, fmat=True):
+        lic = {}
         tdc = self.sql.tpldet_col
         if line[tdc.index("tpd_type")] == "B":
             for key in self.bcode:
                 dat = line[tdc.index(self.bcode[key])]
-                exec "%s = dat" % key
-            self.doBarcode(x1=x1, y1=y1, x2=x2, y2=y2, text=text, size=size)
+                lic[key] = dat
+            self.doBarcode(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"],
+                y2=lic["y2"], text=lic["text"], size=lic["size"])
         elif line[tdc.index("tpd_type")] == "C":
             for key in self.ccode:
                 dat = line[tdc.index(self.ccode[key])]
@@ -15511,36 +15522,44 @@
                             dat = CCD(dat, tp[1], tp[2]).disp
                     if not dat and line[tdc.index("tpd_mrg_border")]:
                         dat = " "
-                exec "%s = dat" % key
+                lic[key] = dat
             if line[tdc.index("tpd_lines")] == 1:
-                self.doText(x1=mrg_x1, y1=mrg_y1, x2=mrg_x2, y2=mrg_y2,
-                    text=text, font=mrg_font, size=mrg_size, colour=mrg_colour,
-                    bold=mrg_bold, italic=mrg_italic, uline=mrg_uline,
-                    align=mrg_align, border=mrg_border, ln=1, fill=mrg_fill)
+                self.doText(x1=lic["mrg_x1"], y1=lic["mrg_y1"],
+                    x2=lic["mrg_x2"], y2=lic["mrg_y2"], text=lic["text"],
+                    font=lic["mrg_font"], size=lic["mrg_size"],
+                    colour=lic["mrg_colour"], bold=lic["mrg_bold"],
+                    italic=lic["mrg_italic"], uline=lic["mrg_uline"],
+                    align=lic["mrg_align"], border=lic["mrg_border"],
+                    ln=1, fill=lic["mrg_fill"])
             else:
-                self.doMultiText(x1=mrg_x1, y1=mrg_y1, x2=mrg_x2, y2=mrg_y2,
-                    text=text, font=mrg_font, size=mrg_size, colour=mrg_colour,
-                    bold=mrg_bold, italic=mrg_italic, uline=mrg_uline,
-                    align=mrg_align, border=mrg_border, ln=0, fill=mrg_fill)
+                self.doMultiText(x1=lic["mrg_x1"], y1=lic["mrg_y1"],
+                    x2=lic["mrg_x2"], y2=lic["mrg_y2"], text=lic["text"],
+                    font=lic["mrg_font"], size=lic["mrg_size"],
+                    colour=lic["mrg_colour"], bold=lic["mrg_bold"],
+                    italic=lic["mrg_italic"], uline=lic["mrg_uline"],
+                    align=lic["mrg_align"], border=lic["mrg_border"],
+                    ln=0, fill=lic["mrg_fill"])
         elif line[tdc.index("tpd_type")] == "I":
             for key in self.icode:
                 dat = line[tdc.index(self.icode[key])]
-                exec "%s = dat" % key
-            if text:
-                text = getFileName(text, wrkdir=self.wrkdir)
-            if text and os.path.isfile(text):
-                self.doImage(x1=x1, y1=y1, x2=x2, y2=y2, text=text)
+                lic[key] = dat
+            if lic["text"]:
+                lic["text"] = getFileName(lic["text"], wrkdir=self.wrkdir)
+            if lic["text"] and os.path.isfile(lic["text"]):
+                self.doImage(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"],
+                    y2=lic["y2"], text=lic["text"])
         elif line[tdc.index("tpd_type")] == "L":
             for key in self.lcode:
                 dat = line[tdc.index(self.lcode[key])]
-                exec "%s = dat" % key
-            self.doLine(x1=x1, y1=y1, x2=x2, y2=y2, font=font, colour=colour,
-                thick=thick)
+                lic[key] = dat
+            self.doLine(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"], y2=lic["y2"],
+                font=lic["font"], colour=lic["colour"], thick=lic["thick"])
         elif line[tdc.index("tpd_type")] == "R":
             for key in self.rcode:
                 dat = line[tdc.index(self.rcode[key])]
-                exec "%s = dat" % key
-            self.doRect(x1=x1, y1=y1, x2=x2, y2=y2, thick=thick)
+                lic[key] = dat
+            self.doRect(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"], y2=lic["y2"],
+                thick=lic["thick"])
         elif line[tdc.index("tpd_type")] == "T":
             for key in self.tcode:
                 dat = line[tdc.index(self.tcode[key])]
@@ -15552,18 +15571,22 @@
                         if mrgcod and self.tptp[mrgcod][0][1][0] == "S":
                             dat = "%s " % dat.strip()
                     if not dat and line[tdc.index("tpd_border")]:
-                        text = " "
-                exec "%s = dat" % key
-            if self.get_string_width(text) > (x2 - x1):
-                self.doMultiText(x1=x1, y1=y1, x2=x2, y2=y2, text=text,
-                    font=font, size=size, colour=colour, bold=bold,
-                    italic=italic, uline=uline, align=align, border=border,
-                    ln=0, fill=fill)
+                        dat = " "
+                lic[key] = dat
+            if self.get_string_width(lic["text"]) > (lic["x2"] - lic["x1"]):
+                self.doMultiText(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"],
+                    y2=lic["y2"], text=lic["text"], font=lic["font"],
+                    size=lic["size"], colour=lic["colour"], bold=lic["bold"],
+                    italic=lic["italic"], uline=lic["uline"],
+                    align=lic["align"], border=lic["border"],
+                    ln=0, fill=lic["fill"])
             else:
-                self.doText(x1=x1, y1=y1, x2=x2, y2=y2, text=text,
-                    font=font, size=size, colour=colour, bold=bold,
-                    italic=italic, uline=uline, align=align, border=border,
-                    ln=1, fill=fill)
+                self.doText(x1=lic["x1"], y1=lic["y1"], x2=lic["x2"],
+                    y2=lic["y2"], text=lic["text"], font=lic["font"],
+                    size=lic["size"], colour=lic["colour"], bold=lic["bold"],
+                    italic=lic["italic"], uline=lic["uline"],
+                    align=lic["align"], border=lic["border"],
+                    ln=1, fill=lic["fill"])
 
     def doNewDetail(self):
         tdc = self.sql.tpldet_col
@@ -15670,7 +15693,7 @@
                 nl[tdc.index("tpd_y2")] = y2
             self.y2 = nl[tdc.index("tpd_y2")]
             if nl[tdc.index("tpd_type")] == "T":
-                if len(nl[tdc.index("tpd_text")]) > nl[tdc.index("tpd_text")]:
+                if len(nl[tdc.index("tpd_text")]) > nl[tdc.index("tpd_chrs")]:
                     nl[tdc.index("tpd_lines")] = 2
             self.newkey.append(detseq)
             self.newdic[detseq] = nl
@@ -15711,22 +15734,19 @@
 
     # Standard Routines
     def letterhead(self, cmc, ctm, fld, img):
-        if not img:
-            if "LETTERHEAD" in os.environ:
-                img = os.environ["LETTERHEAD"]
-            else:
-                img = getFileName(ctm[cmc.index("ctm_logo")],
-                    wrkdir=self.wrkdir)
-            if not img or not os.path.isfile(img):
-                del self.tptp[fld]
-                for col in ("ctm_regno", "ctm_taxno", "ctm_tel", "ctm_fax"):
-                    if col in self.tptp:
-                        dat = ctm[cmc.index(col)]
-                        if dat:
-                            self.tptp[col][1] = dat
-                        else:
-                            del self.tptp[col]
-                return
+        if not img and "LETTERHEAD" in os.environ:
+            img = os.environ["LETTERHEAD"]
+        if img and not getFileName(ctm[cmc.index("ctm_logo")],
+                                        wrkdir=self.wrkdir):
+            del self.tptp[fld]
+            for col in ("ctm_regno", "ctm_taxno", "ctm_tel", "ctm_fax"):
+                if col in self.tptp:
+                    dat = ctm[cmc.index(col)]
+                    if dat:
+                        self.tptp[col][1] = dat
+                    else:
+                        del self.tptp[col]
+            return
         self.tptp[fld][1] = img
         for col in ("ctm_name", "ctm_add1", "ctm_add2", "ctm_add3",
                 "ctm_pcode", "ctm_regno", "ctm_taxno", "ctm_tel", "ctm_fax"):

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2015-05-20 16:03:01 +0000
+++ std/tartanFunctions.py	2015-06-17 12:29:29 +0000
@@ -438,7 +438,7 @@
     prg   = The calling module name
     key   = The key of the report e.g. Company Number/Account Number
     ext   = The file extension e.g. pdf or None
-    wait  = The number of seconds to pause bwfore returning the name
+    wait  = The number of seconds to pause before returning the name
     """
     import os, time
 
@@ -787,7 +787,7 @@
     import copy
     from tartanWork import mthnam
 
-    chkmth = copy.deepcopy(mthnam)
+    chkmth = mthnam[:]
     adate = str(date)
     yy = int(adate[0:4])
     mm = int(adate[4:6])
@@ -904,7 +904,7 @@
     import copy
     from tartanWork import mthnam
 
-    chkmth = copy.deepcopy(mthnam)
+    chkmth = mthnam[:]
     adate = str(jdate)
     dt = int(adate)
     y = dt / 365
@@ -1037,7 +1037,7 @@
                 stdin=subprocess.PIPE, stdout=subprocess.PIPE, close_fds=True)
             lst = proc.stdout.readlines()
             for l in lst:
-                l = l.replace("\n", "").replace('"', "").replace("'", "")
+                l = str(l.rstrip()).replace('"', "").replace("'", "")
                 if l.count("accepting requests"):
                     p = l.split()
                     data.append(p[0].strip())
@@ -1076,6 +1076,7 @@
     This function returns a list of column names and a list of lists of data.
 
     sys = crs - Creditor's Ledger
+          rtf - Creditor's Ledger including crsrtf table
           drs - Debtor's Ledger
           mem - Member's Ledger
     dte = A cut-off curdt period where any transactions zeroed before this
@@ -1102,6 +1103,22 @@
             join = "%s and cra_curdt <= %s" % (join, dte)
         if jon:
             join = "%s and %s" % (join, jon)
+    elif sys == "rtf":
+        tab = "crstrn"
+        sql = Sql(dbm, [tab, "crsrtf"], prog=__name__)
+        col = sql.crstrn_col[:] + sql.crsrtf_col[:]
+        join = "left outer join crsrtf on rtf_cono=crt_cono and "\
+            "rtf_acno=crt_acno and rtf_type=crt_type and rtf_ref1=crt_ref1 "\
+            "left outer join crsage on cra_cono=crt_cono and "\
+            "cra_acno=crt_acno and cra_type=crt_type and cra_ref1=crt_ref1"
+        if dte:
+            if whr:
+                whr.append(("crt_curdt", "<=", dte))
+            else:
+                whr = [("crt_curdt", "<=", dte)]
+            join = "%s and cra_curdt <= %s" % (join, dte)
+        if jon:
+            join = "%s and %s" % (join, jon)
     elif sys == "drs":
         tab = "drstrn"
         sql = Sql(dbm, tab, prog=__name__)
@@ -1137,7 +1154,7 @@
     for c in col:
         grp = "%s%s, " % (grp, c)
     grp = grp[:-2]
-    if sys == "crs":
+    if sys in ("crs", "rtf"):
         col.append("max(cra_curdt)")
         col.append("round(sum(cra_amnt), 2)")
         if not odr:
@@ -1162,7 +1179,7 @@
         recs = [recs]
     tot = 0
     for rec in recs:
-        if sys == "crs":
+        if sys in ("crs", "rtf"):
             amt = rec[col.index("crt_tramt")]
         elif sys == "drs":
             amt = rec[col.index("drt_tramt")]
@@ -1212,6 +1229,8 @@
         if not ctl:
             return "Missing Control Record - assctl"
         if ctl["cta_glint"] == "Y":
+            if not "ass_sls" in ctlctl:
+                return "Missing ass_sls Control"
             ctlacc.append(ctlctl["ass_sls"])
             sql = Sql(mf.dbm, "assgrp", prog=__name__)
             ass = sql.getRec(tables="assgrp", cols=["asg_assacc"],
@@ -1224,13 +1243,26 @@
         if not ctl:
             return "Missing Control Record - crsctl"
         if ctl["ctc_glint"] == "Y":
+            if not "crs_ctl" in ctlctl:
+                return "Missing crs_ctl Control"
             ctlacc.append(ctlctl["crs_ctl"])
+    # Load Bkm Control
+    if mod.count("BK"):
+        ctl = gc.getCtl("bkmctl", coy)
+        if not ctl:
+            return "Missing Control Record - bkmctl"
+        if ctl["cbk_glint"] == "Y":
+            if not "bkm_ctl" in ctlctl:
+                return "Missing bkm_ctl Control"
+            ctlacc.append(ctlctl["bkm_ctl"])
     # Load Drs Control
     if mod.count("DR"):
         ctl = gc.getCtl("drsctl", coy)
         if not ctl:
             return "Missing Control Record - drsctl"
         if ctl["ctd_glint"] == "Y":
+            if not "drs_ctl" in ctlctl:
+                return "Missing drs_ctl Control"
             ctlacc.append(ctlctl["drs_ctl"])
     # Load Mem Control
     if mod.count("ML"):
@@ -1238,6 +1270,8 @@
         if not ctl:
             return "Missing Control Record - memctl"
         if ctl["mcm_glint"] == "Y":
+            if not "mem_ctl" in ctlctl:
+                return "Missing mem_ctl Control"
             ctlacc.append(ctlctl["mem_ctl"])
     # Load Rtl Integration
     if mod.count("RT"):
@@ -1250,6 +1284,15 @@
                 where=[("rtp_cono", "=", coy)])
             for a in rtl:
                 ctlacc.append(a[0])
+    # Load Wag Control
+    if mod.count("SL"):
+        ctl = gc.getCtl("wagctl", coy)
+        if not ctl:
+            return "Missing Control Record - wagctl"
+        if ctl["ctw_glint"] == "Y":
+            if not "wag_slc" in ctlctl:
+                return "Missing wag_slc Control"
+            ctlacc.append(ctlctl["wag_slc"])
     if acc in ctlacc:
         if pwd:
             cf = PwdConfirm(mf, conum=coy, system="GEN", code="NoPost")
@@ -1277,8 +1320,9 @@
         opts["capnm"] = user
     if args is not None:
         opts["args"] = args
-    exec "from %s import %s as module" % (mod, mod)
-    module(**opts)
+    mods = __import__(mod)
+    prog = getattr(mods, mod)
+    prog(**opts)
     if df:
         df.setWidget(df.mstFrame, state="show")
         df.enableButtonsTags(state=state)
@@ -1508,6 +1552,7 @@
         rowx += 1
         # Column headings
         for colx, valx in enumerate(colsh):
+            nc = 0
             for cx, vx in enumerate(valx):
                 if type(vx) in (list, tuple) and len(vx) > 1:
                     if len(vx) == 2:
@@ -1522,10 +1567,12 @@
                     if len(vx) == 3:
                         sheet.write_merge(rowx, rowx, vx[1], vx[2],
                             vx[0].strip(), hxf)
+                        nc = vx[2]
                     else:
-                        sheet.write(rowx, cx, vx[0].strip(), hxf)
+                        sheet.write(rowx, nc, vx[0].strip(), hxf)
                 else:
-                    sheet.write(rowx, cx, vx.strip(), hxf)
+                    sheet.write(rowx, nc, vx.strip(), hxf)
+                nc += 1
                 sheet.col(cx).width = int(args["forms"][cx][1]) * 300
             if colx != len(args["colsh"]) - 1:
                 rowx += 1
@@ -1984,7 +2031,7 @@
         col = cols[:]
         if not dic:
             sql = Sql(mf.dbm, table, prog=__name__)
-            exec "tmp = sql.%s_dic" % table[0]
+            tmp = getattr(sql, "%s_dic" % table[0])
             dic = {}
             for key in tmp:
                 if key in col:
@@ -1995,8 +2042,8 @@
                 head.append(dic[c][5])
     else:
         sql = Sql(mf.dbm, table, prog=__name__)
-        exec "dic = sql.%s_dic" % table[0]
-        exec "col = sql.%s_col" % table[0]
+        dic = getattr(sql, "%s_dic" % table[0])
+        col = getattr(sql, "%s_col" % table[0])
         if not head:
             head = [""]
             for c in cols:
@@ -2075,11 +2122,11 @@
         else:
             return
     # UNC path
+    con = None
+    fle = None
+    pth = None
     try:
         from smb.SMBConnection import SMBConnection
-        con = None
-        fle = None
-        pth = None
         svr = path.replace("/", "|").replace("\\", "|")
         svr = svr.split("|")
         con = SMBConnection("", "", "", svr[2])
@@ -2109,5 +2156,12 @@
         if con:
             con.close()
         return
+
+def base64Convert(typ, txt):
+    import base64
+    if typ == "encode":
+        return base64.encodebytes(txt.encode("utf-8")).decode("utf-8")
+    else:
+        return base64.decodebytes(txt.encode("utf-8")).decode("utf-8")
 # END
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'str/st3060.py'
--- str/st3060.py	2015-02-07 06:31:11 +0000
+++ str/st3060.py	2015-06-08 12:38:32 +0000
@@ -223,15 +223,16 @@
                 figs[5] = float(ASD(figs[5]) - ASD(bal[2]))
         figs[6] = y_cb[0]
         figs[7] = y_cb[1]
-        for y in xrange(0, 8):
-            exec "t%s = CCD(figs[y], 'SD', 12.2)" % y
-            exec "self.stot[y] = float(ASD(self.stot[y]) + ASD(t%s.work))" % y
-            exec "self.gtot[y] = float(ASD(self.gtot[y]) + ASD(t%s.work))" % y
-        if self.zero == "Y" and not t0.work and not t1.work and \
-                not t2.work and not t3.work and not t4.work and \
-                not t5.work and not t6.work and not t7.work:
+        t = [grp, code, desc, uoi]
+        for y in xrange(8):
+            t.append(CCD(figs[y], "SD", 12.2))
+            self.stot[y] = float(ASD(self.stot[y]) + ASD(t[y+4].work))
+            self.gtot[y] = float(ASD(self.gtot[y]) + ASD(t[y+4].work))
+        if self.zero == "Y" and not t[0].work and not t[1].work and \
+                not t[2].work and not t[3].work and not t[4].work and \
+                not t[5].work and not t[6].work and not t[7].work:
             return
-        return (grp, code, desc, uoi, t0, t1, t2, t3, t4, t5, t6, t7)
+        return t
 
     def pageHeading(self):
         self.fpdf.add_page()
@@ -259,12 +260,13 @@
         self.pglin = 11
 
     def groupTotal(self):
-        for x in xrange(0, 8):
-            exec "t%s = CCD(self.stot[x], 'SD', 12.2)" % x
+        t = []
+        for x in xrange(8):
+            t.append(CCD(self.stot[x], "SD", 12.2))
         self.fpdf.drawText()
         self.fpdf.drawText("%-20s %-41s %12s %12s %12s %12s %12s %12s %12s " \
-            "%12s" % (" ", "Group Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+            "%12s" % (" ", "Group Totals", t[0].disp, t[1].disp, t[2].disp,
+            t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
         self.stot = [0] * 8
 
     def grandTotal(self):
@@ -275,12 +277,13 @@
             self.expdatas.append(gtot)
             self.expdatas.append(["ULINED"])
             return
-        for x in xrange(0, 8):
-            exec "t%s = CCD(self.gtot[x], 'SD', 12.2)" % x
+        t = []
+        for x in xrange(8):
+            t.append(CCD(self.gtot[x], "SD", 12.2))
         self.fpdf.drawText()
         self.fpdf.drawText("%-20s %-41s %12s %12s %12s %12s %12s %12s %12s " \
-            "%12s" % (" ", "Grand Totals", t0.disp, t1.disp, t2.disp,
-            t3.disp, t4.disp, t5.disp, t6.disp, t7.disp))
+            "%12s" % (" ", "Grand Totals", t[0].disp, t[1].disp, t[2].disp,
+            t[3].disp, t[4].disp, t[5].disp, t[6].disp, t[7].disp))
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'tab/tb1010.py'
--- tab/tb1010.py	2014-12-30 15:37:38 +0000
+++ tab/tb1010.py	2015-06-09 14:56:16 +0000
@@ -326,14 +326,14 @@
             self.idx = makeArray(12,20,1,"S")
             self.tab = os.path.basename(self.flenam.split("_")[0])
             for n, k in enumerate(key):
-                k = k.replace(chr(10),"").replace(chr(13),"").replace('"',"")
+                k = k.rstrip().replace('"',"")
                 cols = k.split(",")
                 if not n:
                     self.desc = cols[0]
                 cols[1] = n
                 self.idx[n] = cols[1:]
             for n, d in enumerate(dat):
-                d = d.replace(chr(10),"").replace(chr(13),"").replace('"',"")
+                d = d.rstrip().replace('"',"")
                 cols = d.split(",")
                 self.fld[n] = cols[:]
             self.df.loadEntry("T", 0, 0, data=self.tab)

=== modified file 'tab/tb1020.py'
--- tab/tb1020.py	2015-05-20 16:03:01 +0000
+++ tab/tb1020.py	2015-06-09 10:27:24 +0000
@@ -16,7 +16,7 @@
     pth [directory]  = Directory where .csv files are, defaults to "~/prg/csv"
     pwd [password]   = Database Admin Password
     rcf [file]       = tartanrc file to use, defaults to ~/.tartanrc
-    sys [system]     = system file to use, defaults to tartan
+    sss [system]     = system file to use, defaults to tartan
     tab [table]      = String of comma separated Table Names e.g. strmf1,strmf2
     upd [True/False] = Force Update of all records, True or False
     usr [user]       = Database Admin User Name
@@ -270,7 +270,7 @@
             else:
                 print "Table %s Not Found in %s" % (self.table, tab)
             return tipe
-        exec "self.old%s = old" % tipe
+        setattr(self, "old%s" % tipe, old)
         csf = os.path.join(self.opts["pth"], "%s_%s.csv" % (self.table, tipe))
         if not os.path.isfile(csf):
             if self.opts["mf"] and  self.opts["mf"].window:
@@ -280,7 +280,7 @@
                 print "Csv file for %s Table Not Found" % csf
             return "csv"
         new = []
-        of = open(csf, "rb")
+        of = open(csf, "r")
         ot = csv.reader(of, quoting=csv.QUOTE_MINIMAL)
         for t in ot:
             t.insert(0, self.table)
@@ -292,7 +292,7 @@
                 t[1] = int(t[1])
                 t[4] = float(t[4])
             new.append(t)
-        exec "self.new%s = new" % tipe
+        setattr(self, "new%s" % tipe, new)
 
     def doUpdateTable(self):
         for seq, fld in enumerate(self.newidx):
@@ -319,7 +319,7 @@
         # Read Existing Table
         order = ""
         if self.table in self.tabord:
-            exec "cols = sql.%s_col" % self.table
+            cols = getattr(sql, "%s_col" % self.table)
             ords = self.tabord[self.table]
             for fld in ords:
                 if fld in cols:
@@ -658,8 +658,8 @@
         elif self.opts["bar"]:
             print txt
         self.doGetTables()
-        if self.opts["sys"]:
-            sysfle = os.path.join(self.opts["pth"], self.opts["sys"] + ".sys")
+        if self.opts["sss"]:
+            sysfle = os.path.join(self.opts["pth"], self.opts["sss"] + ".sys")
         else:
             sysfle = os.path.join(self.opts["pth"], "tartan.sys")
         if os.path.exists(sysfle):
@@ -675,9 +675,7 @@
         fle.close()
         csf = []
         for l in lin:
-            l = l.replace(chr(10), "")
-            l = l.replace(chr(13), "")
-            l = l.replace(chr(34), "")
+            l = l.replace('"', "").rstrip()
             if l in ("ftable", "ffield"):
                 continue
             csf.append(l)
@@ -786,8 +784,9 @@
                 pass
         # genrcc - Deposits changes to Receipts
         sql = Sql(self.dbm, "genrcc", prog=__name__, errs=False)
-        sql.updRec("genrcc", cols=["grc_rtn"], data=["R"],
-            where=[("grc_rtn", "=", "D")])
+        if not sql.error:
+            sql.updRec("genrcc", cols=["grc_rtn"], data=["R"],
+                where=[("grc_rtn", "=", "D")])
         # Close Splash
         if self.opts["mf"] and  self.opts["mf"].window:
             spl.closeSplash()
@@ -801,11 +800,7 @@
             for l in lin:
                 if l[0] == "#":
                     continue
-                l = l.replace(chr(10), "")
-                l = l.replace(chr(13), "")
-                l = l.replace(chr(34), "")
-                l = l.replace(chr(39), "")
-                l = l.split("|")
+                l = l.replace('"', "").replace("'", "").rstrip().split("|")
                 if table == "wagrcv":
                     l[0] = int(l[0])
                 sql.insRec(table, data=l)
@@ -864,7 +859,7 @@
     import getopt
     opts, args = getopt.getopt(sys.argv[1:], "b:c:d:f:hp:r:s:t:u:v:")
     parg = {"mf": None, "bar": False, "cln": True, "pth": None,
-        "upd": False, "pwd": "", "rcf": None, "sys": "tartan",
+        "upd": False, "pwd": "", "rcf": None, "sss": "tartan",
         "tab": [], "usr": "", "ver": None}
     for o, v in opts:
         if o == "-h":
@@ -899,7 +894,7 @@
         elif o == "-r":
             parg["rcf"] = v
         elif o == "-s":
-            parg["sys"] = v
+            parg["sss"] = v
         elif o == "-t":
             parg["tab"] = []
             try:

=== modified file 'tab/tb1030.py'
--- tab/tb1030.py	2015-02-07 06:31:11 +0000
+++ tab/tb1030.py	2015-06-09 07:31:31 +0000
@@ -74,8 +74,8 @@
         self.opts["mf"].closeLoop()
 
     def mainProcess(self):
-        exec "self.dics = self.sql.%s_dic" % self.table
-        exec "self.lcol = self.sql.%s_col" % self.table
+        self.dics = getattr(self.sql, "%s_dic" % self.table)
+        self.lcol = getattr(self.sql, "%s_col" % self.table)
         self.pgs = ((len(self.lcol) - 1) / 15) + 1
         tit = self.desc
         fld = []
@@ -218,8 +218,8 @@
             for fld in key[4:]:
                 if fld:
                     col.append(fld)
-                    exec "dat.append(newdata[self.sqi.%s_col.index(fld)])" % \
-                        self.table
+                    idx = getattr(self.sqi, "%s_col" % self.table)
+                    dat.append(newdata[idx.index(fld)])
             whr = []
             for num in xrange(len(col)):
                 whr.append((col[num], "=", dat[num]))

=== modified file 'uty/bm1010.py'
--- uty/bm1010.py	2015-03-06 19:01:14 +0000
+++ uty/bm1010.py	2015-06-05 07:28:14 +0000
@@ -515,7 +515,7 @@
             return
         self.impdat = []
         if self.ulist == "V":
-            csvfle = open(self.impfle, "rb")
+            csvfle = open(self.impfle, "r")
             data = csv.reader(csvfle, quoting=csv.QUOTE_MINIMAL)
             for dat in data:
                 try:

=== modified file 'uty/pm1010.py'
--- uty/pm1010.py	2014-12-30 15:37:38 +0000
+++ uty/pm1010.py	2015-06-16 01:24:52 +0000
@@ -80,16 +80,16 @@
                 login = data[2]
                 fill = int(data[3])
                 chrs = data[4].split(",")
-                text = ""
+                txt = ""
                 if not chrs[0]:
                     encrypt = ""
                 else:
                     for n, c in enumerate(chrs):
                         if not n:
-                            text = chr(int(c))
+                            txt = unichr(int(c)).encode("latin-1")
                         else:
-                            text = "%s%s" % (text, chr(int(c)))
-                    encrypt = self.pwd.decrypt(text)
+                            txt = "%s%s" % (txt, chr(int(c)))
+                    encrypt = self.pwd.decrypt(txt).decode("latin-1")
                     if fill:
                         encrypt = encrypt[:-fill]
                 self.data[user][code] = [login, encrypt]
@@ -225,20 +225,20 @@
                     fill = 16 - (len(encrypt) % 16)
                     if fill:
                         encrypt = "%s%s" % (encrypt, ("*" * fill))
-                    hsh = self.pwd.encrypt(encrypt)
-                    text = ""
+                    hsh = self.pwd.encrypt(encrypt).decode("latin-1")
+                    txt = ""
                     for n, c in enumerate(hsh):
                         if not n:
-                            text = ord(c)
+                            txt = ord(c)
                         else:
-                            text = "%s,%s" % (text, ord(c))
+                            txt = "%s,%s" % (txt, ord(c))
                     of.write(
                         "StartUser%sEndUser"\
                         "StartCode%sEndCode"\
                         "StartClear%sEndClear"\
                         "StartFill%sEndFill"\
                         "StartEncrypt%sEndEncrypt\n" % \
-                        (user, code, login, fill, text))
+                        (user, code, login, fill, txt))
             of.close()
         self.df.closeProcess()
         self.opts["mf"].closeLoop()

=== modified file 'uty/td1010.py'
--- uty/td1010.py	2015-03-04 16:05:59 +0000
+++ uty/td1010.py	2015-05-21 07:43:30 +0000
@@ -692,9 +692,9 @@
     def doApply(self, widget=None):
         if self.df.frt == "T":
             if self.newmst:
-                self.sql.insRec("telmst", self.df.t_work[0][0][:-1])
+                self.sql.insRec("telmst", self.df.t_work[0][0])
             else:
-                self.sql.updRec("telmst", data=self.df.t_work[0][0][:-1],
+                self.sql.updRec("telmst", data=self.df.t_work[0][0],
                     where=[("tdm_name", "=", self.name)])
         self.opts["mf"].dbm.commitDbase()
         self.df.focusField("T", 0, 1)

=== modified file 'uty/tp1010.py'
--- uty/tp1010.py	2015-02-07 06:31:11 +0000
+++ uty/tp1010.py	2015-06-08 12:59:32 +0000
@@ -905,7 +905,7 @@
             else:
                 data = self.tpldet[self.sql.tpldet_col.index(f)]
             self.df.loadEntry("T", pag, i, data=data)
-            exec "self.%s = data" % f.split("tpd_")[1]
+            setattr(self, "%s" % f.split("tpd_")[1], data)
         self.df.selPage(self.df.tags[pag - 1][0])
         self.df.focusField("T", pag, 1)
 

=== modified file 'wag/wg3050.py'
--- wag/wg3050.py	2015-02-07 06:31:11 +0000
+++ wag/wg3050.py	2015-06-08 13:09:57 +0000
@@ -554,7 +554,7 @@
             return tax
 
     def doCheckTotals(self):
-        csvrdr = csv.reader(open(self.irp5nm, "rb"), delimiter=",",
+        csvrdr = csv.reader(open(self.irp5nm, "r"), delimiter=",",
             quotechar='"', quoting=csv.QUOTE_MINIMAL)
         empls = 0
         count = 0
@@ -562,14 +562,15 @@
         empcd = (2010, 3010)
         totcd = (4472, 4473, 4474, 4485, 4486, 4487, 4493, 4497)
         fincd = (6010, 6020, 6030)
+        check = {}
         for line in csvrdr:
             for num in xrange(0, len(line), 2):
                 if int(line[0]) in fincd:
                     if not int(line[num]) == 9999:
                         if int(line[num]) in (6010, 6020):
-                            exec "C%s = int(line[num+1])" % line[num]
+                            check["C%s" % line[num]] = int(line[num + 1])
                         else:
-                            exec "C%s = float(line[num+1])" % line[num]
+                            check["C%s" % line[num]] = float(line[num + 1])
                 elif int(line[num]) == 9999:
                     count += int(line[num])
                 else:
@@ -580,10 +581,10 @@
                         total += float(line[num+1])
                     elif int(line[num]) in totcd:
                         total += float(line[num+1])
-        C6010 -= empls
-        C6020 -= count
-        C6030 = float(ASD(C6030) - ASD(total))
-        if C6010 or C6020 or C6030:
+        check["C6010"] -= empls
+        check["C6020"] -= count
+        check["C6030"] = float(ASD(check["C6030"]) - ASD(total))
+        if check["C6010"] or check["C6020"] or check["C6030"]:
             showError(None, "Total Error", "There is a Problem "\
                 "with Totals Record. Please Contact Your IT Manager.")
             self.error = True

