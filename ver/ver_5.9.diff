=== modified file '.bzrignore'
--- .bzrignore	2019-07-03 13:49:08 +0000
+++ .bzrignore	2019-12-19 05:48:21 +0000
@@ -46,3 +46,5 @@
 web/
 mst/fnt
 gen/gl3021.py
+copyrite
+doc/bookz.txt

=== modified file 'bwl/bc1010.py'
--- bwl/bc1010.py	2019-12-07 11:09:33 +0000
+++ bwl/bc1010.py	2019-12-29 07:56:05 +0000
@@ -90,7 +90,7 @@
             "stype": "R",
             "tables": ("bwltab",),
             "cols": [
-                ("btb_tab", "", 0, "Cod"),
+                ("btb_tab", "", 0, "Tab"),
                 ("btb_surname", "", 0, "Surname", "Y"),
                 ("btb_names", "", 0, "Names"),
                 ("btb_bsano", "", 0, "BSA-No")],

=== modified file 'bwl/bc1040.py'
--- bwl/bc1040.py	2019-07-03 13:49:08 +0000
+++ bwl/bc1040.py	2019-12-17 11:33:40 +0000
@@ -68,7 +68,15 @@
             (("T",0,1,0),"I@bct_desc",0,"","",
                 "","N",self.doDesc,None,self.doDelete,("notblank",)),
             (("T",0,2,0),("IRB",r1s),0,"Competition Format","",
-                "T","N",self.doCFmat,None,None,None),
+                "T","N",self.doCFmat,None,None,None,None,
+                """Select the Competition Format as follows:
+
+Tournament: The default format for tournaments.
+K/Out (D): This is for all Drawn Knockout Competitions.
+K/Out (N): This is for Normal Knockout Competitions.
+R/Robin: This is for Round Robin Competitions.
+Teams: This is for Team Competitions e.g. Club V Club.
+"""),
             (("T",0,3,0),"I@bct_tsize",0,"","",
                 4,"N",self.doTSize,None,None,("notzero",)),
             (("T",0,4,0),"I@bct_games",0,"","",

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2019-12-07 11:09:33 +0000
+++ bwl/bc2010.py	2019-12-17 15:35:18 +0000
@@ -80,7 +80,7 @@
     ----------
     self.alltabs: {"tab": [surname, names, gender, position, rating, paid]}
     self.adraw1: [[rink, rate, [tab, nam, rte] x 4], []]
-    self.dtype: Draw Type R - Randon, S - Strength
+    self.dtype: Draw Type S - Strength, R - Randon
     self.hist: Dictionary of all tabs for the past x weeks as follows:
         {tab: [[team members], [opponents]], ...}
     self.tsize = Team Size: Three or Four
@@ -1095,13 +1095,15 @@
             if yn == "no":
                 return
         tit = ("Draw Parameters",)
-        r1s = (("Random", "R"), ("Strength", "S"))
+        r1s = (("Strength", "S"), ("Random", "R"))
         r2s = (("Yes", "Y"), ("No", "N"))
         r3s = (("Three", "3"), ("Four", "4"))
         if self.teams:
             fld = [
                 (("T",0,0,0),("IRB",r1s),0,"Draw Type","",
-                    "S","N",self.doType,None,None,None)]
+                    "S","N",self.doType,None,None,None,None,
+                    """Strength: The draw will try and pair the teams by Strength.
+Random: The teams will be Randomly paired.""")]
             x = 1
         elif self.nbase in ("C", "R"):
             fld = [

=== modified file 'bwl/bc2050.py'
--- bwl/bc2050.py	2019-07-03 13:49:08 +0000
+++ bwl/bc2050.py	2019-12-17 11:43:10 +0000
@@ -242,14 +242,14 @@
             else:
                 self.grpsel = False
                 self.grpgrn = "N"
-                return "sk11"
+                return "sk10"
         elif self.cfmat in ("D", "K"):
             ok = askQuestion(self.opts["mf"].body, "Drawn", "This Knockout "\
                 "Competition has Already Been Drawn, Do You Want to Reprint?")
             if ok == "yes":
                 self.reprint = True
                 self.datd = CCD(gme[0][2], "D1", 10).disp
-                return "sk11"
+                return "sk10"
             else:
                 return "rf"
         for game in gme:

=== modified file 'crs/cr1010.py'
--- crs/cr1010.py	2019-07-03 13:49:08 +0000
+++ crs/cr1010.py	2019-12-13 13:34:54 +0000
@@ -62,7 +62,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])]}
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")]}
         glm = {
             "stype": "R",
             "tables": ("genmst",),
@@ -178,6 +180,8 @@
                 else:
                     return "New Account Creation is Not Allowed"
             self.new = True
+        elif self.old[self.sql.crsmst_col.index("crm_stat")] == "X":
+            return "Invalid Account, Redundant"
         else:
             self.new = False
             self.df.loadEntry("T", pag, p+1, data=self.old[2])
@@ -215,17 +219,17 @@
             where=[("crt_cono", "=", self.opts["conum"]), ("crt_acno",
             "=", self.acno)], limit=1)
         if trs[0]:
-            return "Transactions Exist, Not Deleted"
+            return "%s Transactions Exist, Not Deleted" % trs[0]
         pom = self.sql.getRec(tables="strpom", cols=["count(*)"],
             where=[("pom_cono", "=", self.opts["conum"]), ("pom_acno", "=",
             self.acno)], limit=1)
         if pom[0]:
-            return "Purchase Order Exists, Not Deleted"
+            return "%s Purchase Order Exists, Not Deleted" % pom[0]
         nte = self.sql.getRec(tables="ctlnot", cols=["count(*)"],
             where=[("not_cono", "=", self.opts["conum"]), ("not_sys", "=",
             "CRS"), ("not_key", "=", self.acno)], limit=1)
         if nte[0]:
-            return "Notes Exist, Not Deleted"
+            return "%s Notes Exist, Not Deleted" % nte[0]
         self.sql.delRec("crsmst", where=[("crm_cono", "=", self.opts["conum"]),
             ("crm_acno", "=", self.acno)])
         dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
@@ -247,6 +251,7 @@
         for x in xrange(0, 3):
             for y in xrange(0, len(self.df.t_work[x][0])):
                 data.append(self.df.t_work[x][0][y])
+        data.append("N")
         if self.new:
             self.sql.insRec("crsmst", data=data)
         elif data != self.old:

=== modified file 'crs/cr1010_rne.py'
--- crs/cr1010_rne.py	2019-07-03 13:49:08 +0000
+++ crs/cr1010_rne.py	2019-12-17 05:40:17 +0000
@@ -53,7 +53,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")],
             "autoc": False}
         tag = (
             ("Basic-_A",None,("T",1,1),("T",0,1)),
@@ -177,6 +179,8 @@
                 system="CRS", code="NewAcc")
             if pw.flag == "no":
                 return "New Account Locked"
+        elif self.ol1[self.sql.crsmst_col.index("crm_stat")] == "X":
+            return "Invalid Account, Redundant"
         else:
             self.new = False
             self.df.loadEntry("T", pag, p+1, data=self.ol1[2])

=== modified file 'crs/cr2010.py'
--- crs/cr2010.py	2019-07-03 13:49:08 +0000
+++ crs/cr2010.py	2019-12-13 11:31:31 +0000
@@ -136,7 +136,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])]}
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")]}
         coy = {
             "stype": "R",
             "tables": ("ctlmst",),
@@ -361,11 +363,13 @@
 
     def doCrsAcc(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_terms",
-            "crm_termsb", "crm_stday", "crm_pydis", "crm_glac"],
+            "crm_termsb", "crm_stday", "crm_pydis", "crm_glac", "crm_stat"],
             where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=",
             w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[6] == "X":
+            return "Invalid Account, Redundant"
         self.cracno = w
         self.name, self.term, self.base, self.stdt, self.pdis, self.glac = acc
         self.df.loadEntry(frt, pag, p+1, data=self.name)

=== modified file 'crs/cr2010_rne.py'
--- crs/cr2010_rne.py	2019-01-13 16:38:59 +0000
+++ crs/cr2010_rne.py	2019-12-17 05:40:23 +0000
@@ -94,7 +94,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")],
             "autoc": False}
         bch = {
             "stype": "R",
@@ -174,10 +176,13 @@
 
     def doCrsAcc(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_terms",
-            "crm_termsb", "crm_stday", "crm_pydis"], where=[("crm_cono", "=",
-            self.opts["conum"]), ("crm_acno", "=", w)], limit=1)
+            "crm_termsb", "crm_stday", "crm_pydis", "crm_stat"],
+            where=[("crm_cono", "=", self.opts["conum"]),
+            ("crm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[5] == "X":
+            return "Invalid Account, Redundant"
         self.cracno = w
         name = acc[0]
         self.term = acc[1]

=== modified file 'crs/cr2020_rne.py'
--- crs/cr2020_rne.py	2019-07-03 13:49:08 +0000
+++ crs/cr2020_rne.py	2019-12-17 05:41:31 +0000
@@ -92,7 +92,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")],
             "autoc": False}
         r1s = (("Yes","Y"),("Range","R"),("Singles","S"))
         r2s = (("Yes","Y"),("No","N"))

=== modified file 'crs/cr3050.py'
--- crs/cr3050.py	2019-07-03 13:49:08 +0000
+++ crs/cr3050.py	2019-12-13 15:00:01 +0000
@@ -72,9 +72,9 @@
                 ("crm_name", "", 0, "Name", "Y")),
             "where": [("crm_cono", "=", self.opts["conum"])],
             "autoc": False}
-        r1s = (("Agedt","A"),("Curdt","C"))
-        r2s = (("Yes","Y"),("No","N"))
-        r3s = (("Yes","Y"),("No","N"),("Only","O"))
+        r1s = (("Agedt", "A"),("Curdt","C"))
+        r2s = (("Yes", "Y"), ("No", "N"))
+        r3s = (("Yes", "Y"), ("No", "N"), ("Only", "O"))
         if "args" in self.opts and "noprint" in self.opts["args"]:
             var = self.opts["args"]["work"][0]
             view = None
@@ -165,7 +165,7 @@
 
     def doDebit(self, frt, pag, r, c, p, i, w):
         self.debit = w
-        if self.debit in ("Y", "O"):
+        if self.debit == "O":
             self.zero = "Y"
             self.df.loadEntry(frt, pag, p+1, data=self.zero)
             return "sk1"
@@ -175,9 +175,12 @@
 
     def doEnd(self):
         self.df.closeProcess()
+        whr = [
+            ("crm_cono", "=", self.opts["conum"]),
+            ("crm_acno", ">=", self.acc1),
+            ("crm_acno", "<=", self.acc2)]
         recs = self.sql.getRec(tables="crsmst", cols=["crm_acno", "crm_name"],
-            where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", ">=",
-                self.acc1), ("crm_acno", "<=", self.acc2)], order="crm_acno")
+            where=whr, order="crm_acno")
         if not recs:
             showError(self.opts["mf"].body, "Selection Error",
                 "No Accounts Selected")

=== modified file 'crs/cr3060.py'
--- crs/cr3060.py	2019-01-13 16:38:59 +0000
+++ crs/cr3060.py	2019-12-13 11:48:20 +0000
@@ -54,16 +54,19 @@
     def mainProcess(self):
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Creditors Master Listing (%s)" % __name__)
-        r1s = (("Number","N"),("Name","M"))
-        r2s = (("Yes","Y"),("No","N"))
-        r3s = (("Manager","M"),("Accounts","A"),("Orders","O"))
+        r1s = (("Number", "N"), ("Name", "M"))
+        r2s = (("Yes", "Y"), ("No", "N"))
+        r3s = (("Manager", "M"), ("Accounts", "A"), ("Orders", "O"))
+        r4s = (("Yes", "Y"), ("No", "N"), ("Only", "O"))
         fld = (
             (("T",0,0,0),("IRB",r1s),0,"Sort Order","",
                 "N","Y",self.doSort,None,None,None),
             (("T",0,1,0),("IRB",r2s),0,"Use Full Address","",
                 "N","Y",self.doAddress,None,None,None),
             (("T",0,2,0),("IRB",r3s),0,"Contact Details","",
-                "M","Y",self.doContact,None,None,None))
+                "M","Y",self.doContact,None,None,None),
+            (("T",0,3,0),("IRB",r4s),0,"Include Redundant","",
+                "N","Y",self.doRedu,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
@@ -78,14 +81,21 @@
     def doContact(self, frt, pag, r, c, p, i, w):
         self.condet = w
 
+    def doRedu(self, frt, pag, r, c, p, i, w):
+        self.redu = w
+
     def doEnd(self):
         self.df.closeProcess()
+        whr = [("crm_cono", "=", self.opts["conum"])]
+        if self.redu == "N":
+            whr.append(("crm_stat", "<>", "X"))
+        elif self.redu == "O":
+            whr.append(("crm_stat", "=", "X"))
         if self.sort == "N":
             odr = "crm_acno"
         else:
             odr = "crm_name"
-        recs = self.sql.getRec(tables="crsmst", where=[("crm_cono", "=",
-            self.opts["conum"])], order=odr)
+        recs = self.sql.getRec(tables="crsmst", where=whr, order=odr)
         if not recs:
             showError(self.opts["mf"].body, "Selection Error",
             "No Records Selected")

=== modified file 'crs/cr3080.py'
--- crs/cr3080.py	2019-07-03 13:49:08 +0000
+++ crs/cr3080.py	2019-12-13 11:55:51 +0000
@@ -95,7 +95,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])]}
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")]}
         r1s = (("Yes","Y"),("Range","R"),("Singles", "S"))
         r2s = (("Yes","Y"),("No","N"))
         r3s = (("Number","N"),("Name","M"),("Postal Code","P"))
@@ -141,11 +143,13 @@
             return "sk2"
 
     def doAcc(self, frt, pag, r, c, p, i, w):
-        chk = self.sql.getRec(tables="crsmst", cols=["crm_name"],
+        chk = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
             where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=",
                 w)], limit=1)
         if not chk:
             return "Invalid Creditors Account"
+        if not chk[1] == "X":
+            return "Invalid Account, Redundant"
         if c == 3:
             self.sacc = w
         else:
@@ -189,13 +193,16 @@
             recs = getSingleRecords(self.opts["mf"], "crsmst",
                 ("crm_acno", "crm_name"), where=[("crm_cono", "=",
                 self.opts["conum"]), ("crm_termsb", "=", self.freq),
-                ("crm_pyind", "<>", "N")])
+                ("crm_pyind", "<>", "N"), ("crm_stat", "<>", "X")])
         else:
             if not self.eacc:
                 self.eacc = "zzzzzzz"
-            whr = [("crm_cono", "=", self.opts["conum"]), ("crm_acno",
-                "between", self.sacc, self.eacc), ("crm_termsb", "=",
-                self.freq), ("crm_pyind", "<>", "N")]
+            whr = [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_acno", "between", self.sacc, self.eacc),
+                ("crm_termsb", "=", self.freq),
+                ("crm_pyind", "<>", "N"),
+                ("crm_stat", "<>", "X")]
             if self.sort == "N":
                 odr = "crm_acno"
             elif self.sort == "M":
@@ -259,7 +266,8 @@
                 ("crm_name", "", 0, "Name", "Y")),
             "where": [
                 ("crm_cono", "=", self.opts["conum"]),
-                ("crm_termsb", "=", self.freq)]}
+                ("crm_termsb", "=", self.freq),
+                ("crm_stat", "<>", "X")]}
         crt = {
             "stype": "R",
             "tables": ("crstrn",),
@@ -310,14 +318,16 @@
 
     def doExAcNo(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="crsmst", cols=["crm_name",
-            "crm_termsb", "crm_pyind"], where=[("crm_cono", "=",
-            self.opts["conum"]), ("crm_acno", "=", w)], limit=1)
+            "crm_termsb", "crm_pyind", "crm_stat"], where=[("crm_cono",
+            "=", self.opts["conum"]), ("crm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
         if acc[1] != self.freq:
             return "Invalid Terms Base"
         if acc[2] == "N":
             return "Invalid Payment Indicator"
+        if acc[3] == "X":
+            return "Invalid Account, Redundant"
         self.exacc = w
         self.ex.loadEntry(frt, pag, p+1, data=acc[0])
 

=== modified file 'crs/cr3090.py'
--- crs/cr3090.py	2019-01-13 16:38:59 +0000
+++ crs/cr3090.py	2019-12-13 11:59:46 +0000
@@ -98,7 +98,9 @@
         self.df.closeProcess()
         self.prnt = False
         tab = ["crsmst"]
-        whr = [("crm_cono", "=", self.opts["conum"])]
+        whr = [
+            ("crm_cono", "=", self.opts["conum"]),
+            ("crm_stat", "<>", "X")]
         if self.sort == "N":
             odr = "crm_acno"
         elif self.sort == "M":

=== modified file 'crs/cr4010.py'
--- crs/cr4010.py	2019-07-03 13:49:08 +0000
+++ crs/cr4010.py	2019-12-17 05:27:33 +0000
@@ -111,6 +111,7 @@
             (("T",2,8,0),"OUI",8,"Bank Branch"),
             (("T",2,9,0),"OUA",16,"Bank Account"),
             (("T",2,10,0),"OUI",7,"G/L Account"),
+            (("T",2,11,0),"OUA",1,"Status"),
             (("T",3,0,0),"Od1",10,"Date Last Purchased"),
             (("T",3,1,0),"Od1",10,"Date Last Paid"),
             (("T",3,2,0),"OSD",13.2,"Total Balance"),

=== modified file 'crs/cr4010_rne.py'
--- crs/cr4010_rne.py	2019-07-03 13:49:08 +0000
+++ crs/cr4010_rne.py	2019-12-17 05:29:23 +0000
@@ -114,6 +114,7 @@
             (("T",2,8,0),"OUI",8,"Bank Branch"),
             (("T",2,9,0),"OUA",16,"Bank Account"),
             (("T",2,10,0),"OUI",7,"G/L Account"),
+            (("T",2,11,0),"OUA",1,"Status"),
             (("T",3,0,0),("ORB",r1s),0,"Discount Base"),
             (("T",3,1,0),"OUD",5.2,"Advertising Discount"),
             (("T",3,2,0),"OUD",5.2,"Incentive Discount"),

=== modified file 'crs/cr6020.py'
--- crs/cr6020.py	2019-08-20 08:41:08 +0000
+++ crs/cr6020.py	2019-12-17 05:38:16 +0000
@@ -67,7 +67,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])]}
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")]}
         fld = [
             [["T",0,0,0],"ID2",7,"Period","Current Financial Period",
                 self.curdt,"N",self.doCurdt,None,None,("efld",)],
@@ -90,11 +92,13 @@
         self.curdt = w
 
     def doAccno(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
-            where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=",
-            w)], limit=1)
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
+            where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=", w)],
+            limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.acno = w
         self.key = None
         self.df.loadEntry("T", pag, p+1, data=acc[0])

=== modified file 'crs/cr6020_rne.py'
--- crs/cr6020_rne.py	2019-08-20 08:41:08 +0000
+++ crs/cr6020_rne.py	2019-12-17 05:38:19 +0000
@@ -67,7 +67,9 @@
             "cols": (
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y")),
-            "where": [("crm_cono", "=", self.opts["conum"])]}
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")]}
         fld = [
             [["T",0,0,0],"ID2",7,"Period","Current Financial Period",
                 self.curdt,"N",self.doCurdt,None,None,("efld",)],
@@ -90,11 +92,13 @@
         self.curdt = w
 
     def doAccno(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
-            where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=",
-            w)], limit=1)
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
+            where=[("crm_cono", "=", self.opts["conum"]), ("crm_acno", "=", w)],
+            limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.acno = w
         self.key = None
         self.df.loadEntry("T", pag, p+1, data=acc[0])
@@ -194,6 +198,15 @@
             ("(", "crt_ref1", "like", "EFT______", "or", "crt_ref1",
             "like", "CHQ______", ")")], order="crt_ref1")
         for num, rec in enumerate(recs):
+            col = ["sum(crt_tramt)"]
+            whr = [("crt_cono", "=", self.opts["conum"]), ("crt_acno", "=",
+                self.acno), ("crt_ref1", "=", rec[3])]
+            tot = self.sql.getRec("crstrn", cols=col, where=whr, limit=1)
+            whr = [("crt_cono", "=", self.opts["conum"]), ("crt_acno", "=",
+                self.acno), ("crt_ref2", "=", rec[3])]
+            chk = self.sql.getRec("crstrn", cols=col, where=whr, limit=1)
+            if tot[0] != chk[0]:
+                continue
             data = rec[:4]
             data.extend([rec[10], 5, rec[3], rec[7], 0])
             self.sql.insRec("crsage", data=data)

=== added file 'crs/cr6030.py'
--- crs/cr6030.py	1970-01-01 00:00:00 +0000
+++ crs/cr6030.py	2019-12-15 14:28:26 +0000
@@ -0,0 +1,201 @@
+"""
+SYNOPSIS
+    Creditors Ledger Change Status to Redundant for all Accounts having had No
+    Movement for a Period of Time and with a Zero Balance.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2019 Paul Malherbe.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program. If not, see <https://www.gnu.org/licenses/>.
+"""
+
+import time
+from TartanClasses import GetCtl, ProgressBar, Sql, TartanDialog
+from tartanFunctions import showError
+
+class cr6030:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.dataHeader()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["crsmst", "crstrn", "chglog"],
+            prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        t = time.localtime()
+        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        self.curdt = int(self.sysdtw / 100)
+        return True
+
+    def dataHeader(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Debtors Ledger Redundant Accounts (%s)" % __name__)
+        self.crm = {
+            "stype": "R",
+            "tables": ("crsmst",),
+            "cols": [
+                ("crm_acno", "", 0, "Acc-Num"),
+                ("crm_name", "", 0, "Name", "Y")],
+            "where": [],
+            "index": 0}
+        fld = [
+            (("T",0,0,0),"INA",7,"Acc-Num","Account Number",
+                "","N",self.doAcno,self.crm,None,("notblank",)),
+            (("T",0,1,0),"ONA",30,"Name")]
+        but = (
+            ("Generate",None,self.doGenerate,1,None,(("T",0,1),("T",0,2)),
+                "Mark zero items, which have been inactive, as redundant"),
+            ("Create",None,self.doCreate,1,None,(("T",0,1),("T",0,2)),
+                "Mark a zero item as redundant"),
+            ("Restore",None,self.doRestore,1,None,(("T",0,1),("T",0,2)),
+                "Mark a redundant item as normal"),
+            ("Exit",None,self.exitPage,1,None,(("T",0,1),("T",0,2))))
+        tnd = ((self.endPage, "y"),)
+        txt = (self.exitPage,)
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            butt=but, tend=tnd, txit=txt, focus=False)
+        self.df.setWidget(self.df.B0, state="normal")
+        self.df.setWidget(self.df.B1, state="normal")
+        self.df.setWidget(self.df.B2, state="normal")
+        self.df.setWidget(self.df.B3, state="normal")
+
+    def doGenerate(self):
+        tit = "Generate Redundant Accounts"
+        fld = (
+            (("T",0,0,0),"IUI",2,"Months Inactive","",
+                24,"Y",self.doMonths,None,None,("efld",)),)
+        state = self.df.disableButtonsTags()
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        self.mt = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doMthEnd, "y"),), txit=(self.doMthExit,))
+        self.mt.mstFrame.wait_window()
+        self.df.setWidget(self.df.mstFrame, state="show")
+        self.df.enableButtonsTags(state=state)
+
+    def doMonths(self, frt, pag, r, c, p, i, w):
+        months = w
+        yr = int(self.curdt / 100)
+        mt = self.curdt % 100
+        for mth in range(months):
+            mt -= 1
+            if not mt:
+                mt = 12
+                yr -= 1
+        self.startp = (yr * 100) + mt
+
+    def doMthEnd(self):
+        self.mt.closeProcess()
+        whr = [
+            ("crm_cono", "=", self.opts["conum"]),
+            ("crm_stat", "=", "N")]
+        msts = self.sql.getRec(tables="crsmst", cols=["crm_acno",
+            "crm_opened"], where=whr, order="crm_acno")
+        chgs = []
+        for mst in msts:
+            whr = [
+                ("crt_cono", "=", self.opts["conum"]),
+                ("crt_acno", "=", mst[0])]
+            rec = self.sql.getRec(tables="crstrn", cols=["max(crt_curdt)",
+                "sum(crt_tramt)"], where=whr, limit=1)
+            if rec[0] and rec[0] < self.startp and not rec[1]:
+                chgs.append(mst[0])
+            elif not rec[0] and mst[1] / 100 < self.startp:
+                chgs.append(mst[0])
+        if not chgs:
+            showError(self.opts["mf"].body, "Processing Error",
+                "No New Redundant Records")
+        else:
+            self.cnt = 0
+            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
+            p = ProgressBar(self.opts["mf"].body, mxs=len(chgs),
+                typ="Redundant Accounts")
+            for num, rec in enumerate(chgs):
+                p.displayProgress(num)
+                self.sql.updRec("crsmst", cols=["crm_stat"], data=["X"],
+                    where=[("crm_cono", "=", self.opts["conum"]),
+                    ("crm_acno", "=", rec)])
+                key = "%03i%-7s" % (self.opts["conum"], rec)
+                self.sql.insRec("chglog", data=["crsmst", "U", key, "crm_stat",
+                dte, self.opts["capnm"], "N", "X", 0])
+            p.closeProgress()
+            mess = """%s Accounts Will be Marked as Redundant.
+
+Would you like to COMMIT these Changes?""" % len(chgs)
+            self.opts["mf"].dbm.commitDbase(ask=True, mess=mess, default="no")
+
+    def doMthExit(self):
+        self.mt.closeProcess()
+
+    def doCreate(self):
+        self.flag = "C"
+        self.crm["where"] = [
+            ("crm_cono", "=", self.opts["conum"]),
+            ("crm_stat", "<>", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doRestore(self):
+        self.flag = "R"
+        self.crm["where"] = [
+            ("crm_cono", "=", self.opts["conum"]),
+            ("crm_stat", "=", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doAcno(self, frt, pag, r, c, p, i, w):
+        if self.flag == "C":
+            typ = "<>"
+        else:
+            typ = "="
+        chk = self.sql.getRec(tables="crsmst", where=[("crm_cono",
+            "=", self.opts["conum"]), ("crm_acno", "=", w),
+            ("crm_stat", typ, "X")], limit=1)
+        if not chk:
+            return "Invalid Code"
+        if self.flag == "C":
+            bal = self.sql.getRec(tables="crstrn", cols=["sum(crt_tramt)"],
+                where=[("crt_cono", "=", self.opts["conum"]),
+                ("crt_acno", "=", w)], limit=1)
+            if bal[0]:
+                return "Balance Exists"
+        self.acno = w
+        self.df.loadEntry(frt, pag, p+1, data=chk[4])
+
+    def endPage(self):
+        if self.flag == "C":
+            typ = "X"
+        else:
+            typ = "N"
+        self.sql.updRec("crsmst", cols=["crm_stat"], data=[typ],
+            where=[("crm_cono", "=", self.opts["conum"]),
+            ("crm_acno", "=", self.acno)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.clearFrame("T", 0)
+        self.flag = ""
+
+    def exitPage(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'doc/BKSMST.rst'
--- doc/BKSMST.rst	2019-12-07 11:09:33 +0000
+++ doc/BKSMST.rst	2019-12-31 08:37:37 +0000
@@ -3,7 +3,7 @@
 ==================================
 .. _GPL: http://www.gnu.org/licenses/gpl.html
 
-:Version:   5.8
+:Version:   5.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/BWLMST.rst'
--- doc/BWLMST.rst	2019-12-07 11:09:33 +0000
+++ doc/BWLMST.rst	2019-12-31 08:37:37 +0000
@@ -3,7 +3,7 @@
 ==================================
 .. _GPL: http://www.gnu.org/licenses/gpl.html
 
-:Version:   5.8
+:Version:   5.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/CRS.rst'
--- doc/CRS.rst	2019-01-13 16:38:59 +0000
+++ doc/CRS.rst	2019-12-31 07:22:00 +0000
@@ -24,7 +24,7 @@
 + **Name** - The account name.
 + **Address Line 1** - The first line of the postal address.
 + **Address Line 2** - The second line of the postal address.
-+ **Address Line 3** - The second line of the postal address.
++ **Address Line 3** - The third line of the postal address.
 + **Postal Code** - The postal code.
 + **Telephone Number** - The telephone number.
 + **Fax Number** - The facsimile number.
@@ -216,6 +216,18 @@
 ++++++++++++++++++++++++++++++
 Use this routine to reallocate and age transactions.
 
+Account Redundancy (CR)
++++++++++++++++++++++++
+Use this routine to flag creditor's accounts as redundant. The following buttons are available:
+
++ **Generate** - Automatically mark accounts with a zero balance and are inactive, as redundant.
+    + **Months Inactive** - The number of months the accounts have been inactive.
++ **Create** - Mark individual accounts, which have a zero balance, as redundant.
+    + **Acc-Num** - The account number.
++ **Restore** - Mark individual accounts, which are redundant, as normal.
+    + **Acc-Num** - The account number.
++ **Exit** - Exit the routine.
+
 Interrogation (CR)
 ..................
 This routine is for querying individual creditor's ledger accounts.

=== modified file 'doc/CRS_rne.rst'
--- doc/CRS_rne.rst	2017-08-24 07:49:34 +0000
+++ doc/CRS_rne.rst	2019-12-31 07:22:37 +0000
@@ -22,7 +22,7 @@
 + **Name** - The account name.
 + **Address Line 1** - The first line of the postal address.
 + **Address Line 2** - The second line of the postal address.
-+ **Address Line 3** - The second line of the postal address.
++ **Address Line 3** - The third line of the postal address.
 + **Postal Code** - The postal code.
 + **Telephone Number** - The telephone number.
 + **Fax Number** - The facsimile number.

=== modified file 'doc/CSHMST.rst'
--- doc/CSHMST.rst	2019-12-07 11:09:33 +0000
+++ doc/CSHMST.rst	2019-12-31 08:37:37 +0000
@@ -3,7 +3,7 @@
 ==================================
 .. _GPL: http://www.gnu.org/licenses/gpl.html
 
-:Version:   5.8
+:Version:   5.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/DRS.rst'
--- doc/DRS.rst	2017-08-24 07:49:34 +0000
+++ doc/DRS.rst	2019-12-31 07:33:47 +0000
@@ -39,7 +39,7 @@
 
 Messages (DR)
 +++++++++++++
-Use this routine to create, amend or delete message records. These records are used by `Statements (DR)`_ or `Sales Document`_.
+Use this routine to create, amend or delete message records. These records are used by `Statements (DR)`_ or `Sales Document (SI)`_.
 
 Masterfile Records (DR)
 +++++++++++++++++++++++
@@ -50,7 +50,7 @@
 + **Name** - The account name.
 + **Address Line 1** - The first line of the postal address.
 + **Address Line 2** - The second line of the postal address.
-+ **Address Line 3** - The second line of the postal address.
++ **Address Line 3** - The third line of the postal address.
 + **Postal Code** - The postal code.
 + **Telephone Number** - The telephone number.
 + **Fax Number** - The facsimile number.
@@ -298,6 +298,27 @@
 ++++++++++++++++++++++++++++++
 Use this routine to reallocate and age transactions.
 
+Account Redundancy (DR)
++++++++++++++++++++++++
+Use this routine to flag debtor's accounts as redundant. The following buttons are available:
+
++ **Generate** - Automatically mark accounts with a zero balance and are inactive, as redundant.
+    + **Months Inactive** - The number of months the accounts have been inactive.
++ **Create** - Mark individual accounts, which have a zero balance, as redundant.
+    + **Chain Store** - The chain store number if applicable.
+    + **Acc-Num** - The account number.
++ **Restore** - Mark individual accounts, which are redundant, as normal.
+    + **Chain Store** - The chain store number if applicable.
+    + **Acc-Num** - The account number.
++ **Exit** - Exit the routine.
+
+Populate Credit Ratings (DR)
+++++++++++++++++++++++++++++
+Use this routine to generate credit ratings, based on payment history, for accounts.
+
++ **Current Period** - Enter the current financial period YYYYMM.
++ **Ignore Zero Balances** - Select whether to ignore zero balance accounts.
+
 Interrogation (DR)
 ..................
 This routine is for querying individual debtor's accounts.

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2019-12-07 11:09:33 +0000
+++ doc/Downloads.rst	2019-12-31 08:37:37 +0000
@@ -11,27 +11,27 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.8 and was released on the 7th December, 2019.
+The latest version of Tartan is 5.9 and was released on the 31st December, 2019.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Manual: http://www.tartan.co.za/cgi-bin/simple_web.py/Manual
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.8.tgz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.9.tgz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tgz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tgz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tgz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.8.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.9.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bksclb-5-lnx: ftp://tartan.co.za/Bksclb_5.8.tgz
-.. _Bksclb-5-win: ftp://tartan.co.za/Bksclb_5.8.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.8.tgz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.8.exe
-.. _Cshana-5-lnx: ftp://tartan.co.za/Cshana_5.8.tgz
-.. _Cshana-5-win: ftp://tartan.co.za/Cshana_5.8.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.8.tgz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.8.exe
+.. _Bksclb-5-lnx: ftp://tartan.co.za/Bksclb_5.9.tgz
+.. _Bksclb-5-win: ftp://tartan.co.za/Bksclb_5.9.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.9.tgz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.9.exe
+.. _Cshana-5-lnx: ftp://tartan.co.za/Cshana_5.9.tgz
+.. _Cshana-5-win: ftp://tartan.co.za/Cshana_5.9.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.9.tgz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.9.exe
 
 |linux| Linux
 =============
@@ -43,7 +43,7 @@
 -----------------------------
 If your current version is less than 4.1.10 you must upgrade as follows:
 
-    * If your current version is less than 2.5.8
+    * If your current version is less than 2.5.9
         - Make a backup.
         - Download the last release of version 2, Tartan-2-lnx_
         - Extract the downloaded version into your Tartan/prg directory.
@@ -97,7 +97,7 @@
 -----------------------------
 If your current version is less than 5.0.0 you must upgrade as follows:
 
-    * If your current version is less than 2.5.8
+    * If your current version is less than 2.5.9
         - Make a backup.
         - Download the last release of version 2, Tartan-2-win_
         - Execute the downloaded version by double clicking on it.

=== modified file 'doc/MST.rst'
--- doc/MST.rst	2019-12-07 11:09:33 +0000
+++ doc/MST.rst	2019-12-31 08:37:37 +0000
@@ -3,7 +3,7 @@
 ==================================
 .. _GPL: http://www.gnu.org/licenses/gpl.html
 
-:Version:   5.8
+:Version:   5.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/POS.rst'
--- doc/POS.rst	2019-01-13 16:38:59 +0000
+++ doc/POS.rst	2019-12-15 10:14:53 +0000
@@ -19,15 +19,15 @@
 .................
 Use this routine to capture cash and account sales.
 
-Account Sale
-++++++++++++
+Account Sale (PS)
++++++++++++++++++
 Enter the account details as follows:
 
 + **Account Number** - The account number.
 + **Price Level** - If more than one price level is in use select the appropriate one.
 
-Cash and Account Sales
-++++++++++++++++++++++
+Cash and Account Sales (PS)
++++++++++++++++++++++++++++
 The point of sales screen's buttons and actions are for the most part self explanatory however the normal procedure would be as follows:
 
 Item Selection Screen
@@ -49,8 +49,8 @@
 + **Cash** - To pay by cash select the cash button and then enter the amount tendered by selecting the relevant numeral buttons and ending by selecting the *Enter* button.
 + **Account Sales** only require the *Enter* button.
 
-Cash Up
-+++++++
+Cash Up (PS)
+++++++++++++
 Select this button to go to the Cash Declaration routine.
 
 Cash Declaration (PS)

=== modified file 'doc/SECMST.rst'
--- doc/SECMST.rst	2019-12-07 11:09:33 +0000
+++ doc/SECMST.rst	2019-12-31 08:37:37 +0000
@@ -3,7 +3,7 @@
 ==================================
 .. _GPL: http://www.gnu.org/licenses/gpl.html
 
-:Version:   5.8
+:Version:   5.9
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/SLN.rst'
--- doc/SLN.rst	2016-07-10 11:57:24 +0000
+++ doc/SLN.rst	2019-12-15 10:16:23 +0000
@@ -8,8 +8,8 @@
 
 Data Capture (SL)
 .................
-New Loans
-+++++++++
+New Loans (SL)
+++++++++++++++
 Use this routine to capture new or existing loans.
 
 + **EmpNo** - The employee number.
@@ -22,8 +22,8 @@
 + **Loan-Amt** - The capital amount of the loan.
 + **Ded-Amt** - The amount to be deducted from earnings to repay the loan.
 
-Movements
-+++++++++
+Movements (SL)
+++++++++++++++
 Use this routine to capture movements to existing loans.
 
 + **EmpNo** - The employee number.
@@ -40,8 +40,8 @@
 + **Amount** - The loan amount for types 3, 4 and 5.
 + **Deduct** - The new amount to be deducted from earnings to repay the loan.
 
-Raise Interest
-++++++++++++++
+Raise Interest (SL)
++++++++++++++++++++
 Use this routine to raise interest on loans.
 
 + **Transaction Date** - The date on which the interest must be raised.
@@ -65,15 +65,15 @@
 + **Batch-Number** - The batch number or blank for all.
 + **Totals Only** - Yes or No.
 
-Master Listing
-++++++++++++++
+Master Listing (SL)
++++++++++++++++++++
 Use this routine to list all existing loans.
 
 + **Sort Order** - Select whether to sort by Number or Name.
 + **Ignore Zero Balances** - Select whether to exclude repaid loans.
 
-Statements
-++++++++++
+Statements (SL)
++++++++++++++++
 Use this routine to print loan statements as follows:
 
 + **Start Date** - Only include loans issued on or after this date.

=== modified file 'doc/SLS.rst'
--- doc/SLS.rst	2017-08-24 07:49:34 +0000
+++ doc/SLS.rst	2019-12-15 13:40:55 +0000
@@ -11,48 +11,20 @@
 + **Invoice Template** - Enter the template to be used for sales documents.
 + **Email Address** - The email address of the person in charge of sales, if not the default email address in the company record.
 
-Reporting (SI)
-..............
-Sales By Product (SI)
-+++++++++++++++++++++
-Use this routine to produce a sales by product report.
-
-Period Sales By Product (SI)
-++++++++++++++++++++++++++++
-Use this routine to sales by product by period report.
-
-Product Sales History (SI)
-++++++++++++++++++++++++++
-Use this routine to produce a product sales history report.
-
-Sales By Customer By Product (SI)
-+++++++++++++++++++++++++++++++++
-Use this routine to produce a product sales by customer report.
-
-Sales By Salesman (SI)
-++++++++++++++++++++++
-Use this routine to produce a product sales by salesman report.
-
-Salesman's Sales History (SI)
-+++++++++++++++++++++++++++++
-Use this routine to produce a salesman's sales history report.
-
-Data Capture (SI)
-.................
+Sales Documents (SI)
+....................
 Use this routine to produce sales documents.
 
-Date and Printer Selection
-++++++++++++++++++++++++++
-
+Date and Printer Selection (SI)
++++++++++++++++++++++++++++++++
 + **Document Date** - This is the actual date of the invoices.
 + **Delivery Notes** - Whether or not to print delivery notes.
 + **Print Choice** - Select whether to print, view or simply store the invoices without printing.
 + **Printer Name** - If printing was selected, this is the printer to use.
 + **E-Mail** - Whether to email the invoices. This will be dependent on a valid email address on the debtor's record as well as a valid `SMTP Server` in the `System Record Maintenance`_.
 
-Sales Document
-++++++++++++++
-
+Sales Document (SI)
++++++++++++++++++++
 + **Type** - The document type.
 + **Mode** - The mode of payment. Cash invoices will automatically be debited to a debtor's account `CASHSLS`.
 + **Acc-Num** - The account code for account mode.
@@ -80,3 +52,45 @@
     + **StrQuery** - This button is for interrogating a stores item.
     + **Exit** - To exit the sales routine.
     + **Accept** - This button is to accept and complete the document.
+
+Reporting (SI)
+..............
+Sales By Product (SI)
++++++++++++++++++++++
+Use this routine to produce a sales by product report.
+
+Period Sales By Product (SI)
+++++++++++++++++++++++++++++
+Use this routine to sales by product by period report.
+
+Product Sales History (SI)
+++++++++++++++++++++++++++
+Use this routine to produce a product sales history report.
+
+Sales By Customer By Product (SI)
++++++++++++++++++++++++++++++++++
+Use this routine to produce a product sales by customer report.
+
+Sales By Salesman (SI)
+++++++++++++++++++++++
+Use this routine to produce a product sales by salesman report.
+
+Salesman's Sales History (SI)
++++++++++++++++++++++++++++++
+Use this routine to produce a salesman's sales history report.
+
+Toolbox (SI)
+............
+Change Customer Order Number (SI)
++++++++++++++++++++++++++++++++++
+Use this routine to change the customer's order number on the invoice.
+
++ **Invoice Number** - The invoice number to be changed.
++ **Customer Order Number** - Change to the required order number.
+
+Cancel Outstanding Documents (SI)
++++++++++++++++++++++++++++++++++
+Use this routine to cancel all outstanding sales documents older than a number of months.
+
++ **Documents** - Select the Document Type to cancel or select All Types.
++ **Months Outstanding** - The number of months the documents must be older than.

=== modified file 'doc/STR.rst'
--- doc/STR.rst	2019-12-07 11:09:33 +0000
+++ doc/STR.rst	2019-12-15 14:32:26 +0000
@@ -346,16 +346,16 @@
 ++++++++++++++++++++++++++
 Use this routine to revalue stock records by average or last cost. It also provides for the zeroing of items with negative balances.
 
-Delete Purchase Orders (ST)
+Cancel Purchase Orders (ST)
 +++++++++++++++++++++++++++
-Use this routine to delete outstanding purchases orders.
+Use this routine to cancel outstanding purchases orders.
 
 Stock Redundancy (ST)
 +++++++++++++++++++++
 Use this routine to flag store's items as redundant. The following buttons are available:
 
 + **Generate** - Automatically mark items, with a zero balance and are inactive, as redundant.
-    **Months** - The number of months items have been inactive.
+    + **Months Inactive** - The number of months the items have been inactive.
 + **Create** - Mark individual items, which have a zero balance, as redundant.
 + **Restore** - Mark individual items, which are redundant, as normal.
 + **Exit** - Exit the routine.

=== added file 'doc/gnugpl.md'
--- doc/gnugpl.md	1970-01-01 00:00:00 +0000
+++ doc/gnugpl.md	2019-12-17 14:05:31 +0000
@@ -0,0 +1,675 @@
+### GNU GENERAL PUBLIC LICENSE
+
+Version 3, 29 June 2007
+
+Copyright (C) 2007 Free Software Foundation, Inc.
+<https://fsf.org/>
+
+Everyone is permitted to copy and distribute verbatim copies of this
+license document, but changing it is not allowed.
+
+### Preamble
+
+The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works. By contrast,
+the GNU General Public License is intended to guarantee your freedom
+to share and change all versions of a program--to make sure it remains
+free software for all its users. We, the Free Software Foundation, use
+the GNU General Public License for most of our software; it applies
+also to any other work released this way by its authors. You can apply
+it to your programs, too.
+
+When we speak of free software, we are referring to freedom, not
+price. Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights. Therefore, you
+have certain responsibilities if you distribute copies of the
+software, or if you modify it: responsibilities to respect the freedom
+of others.
+
+For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received. You must make sure that they, too, receive
+or can get the source code. And you must show them these terms so they
+know their rights.
+
+Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software. For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the
+manufacturer can do so. This is fundamentally incompatible with the
+aim of protecting users' freedom to change the software. The
+systematic pattern of such abuse occurs in the area of products for
+individuals to use, which is precisely where it is most unacceptable.
+Therefore, we have designed this version of the GPL to prohibit the
+practice for those products. If such problems arise substantially in
+other domains, we stand ready to extend this provision to those
+domains in future versions of the GPL, as needed to protect the
+freedom of users.
+
+Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish
+to avoid the special danger that patents applied to a free program
+could make it effectively proprietary. To prevent this, the GPL
+assures that patents cannot be used to render the program non-free.
+
+The precise terms and conditions for copying, distribution and
+modification follow.
+
+### TERMS AND CONDITIONS
+
+#### 0. Definitions.
+
+"This License" refers to version 3 of the GNU General Public License.
+
+"Copyright" also means copyright-like laws that apply to other kinds
+of works, such as semiconductor masks.
+
+"The Program" refers to any copyrightable work licensed under this
+License. Each licensee is addressed as "you". "Licensees" and
+"recipients" may be individuals or organizations.
+
+To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of
+an exact copy. The resulting work is called a "modified version" of
+the earlier work or a work "based on" the earlier work.
+
+A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy. Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies. Mere interaction with a user
+through a computer network, with no transfer of a copy, is not
+conveying.
+
+An interactive user interface displays "Appropriate Legal Notices" to
+the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License. If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+#### 1. Source Code.
+
+The "source code" for a work means the preferred form of the work for
+making modifications to it. "Object code" means any non-source form of
+a work.
+
+A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form. A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities. However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work. For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+The Corresponding Source need not include anything that users can
+regenerate automatically from other parts of the Corresponding Source.
+
+The Corresponding Source for a work in source code form is that same
+work.
+
+#### 2. Basic Permissions.
+
+All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met. This License explicitly affirms your unlimited
+permission to run the unmodified Program. The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work. This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+You may make, run and propagate covered works that you do not convey,
+without conditions so long as your license otherwise remains in force.
+You may convey covered works to others for the sole purpose of having
+them make modifications exclusively for you, or provide you with
+facilities for running those works, provided that you comply with the
+terms of this License in conveying all material for which you do not
+control copyright. Those thus making or running the covered works for
+you must do so exclusively on your behalf, under your direction and
+control, on terms that prohibit them from making any copies of your
+copyrighted material outside their relationship with you.
+
+Conveying under any other circumstances is permitted solely under the
+conditions stated below. Sublicensing is not allowed; section 10 makes
+it unnecessary.
+
+#### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such
+circumvention is effected by exercising rights under this License with
+respect to the covered work, and you disclaim any intention to limit
+operation or modification of the work as a means of enforcing, against
+the work's users, your or third parties' legal rights to forbid
+circumvention of technological measures.
+
+#### 4. Conveying Verbatim Copies.
+
+You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+#### 5. Conveying Modified Source Versions.
+
+You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these
+conditions:
+
+-   a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+-   b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under
+    section 7. This requirement modifies the requirement in section 4
+    to "keep intact all notices".
+-   c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy. This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged. This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+-   d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit. Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+#### 6. Conveying Non-Source Forms.
+
+You may convey a covered work in object code form under the terms of
+sections 4 and 5, provided that you also convey the machine-readable
+Corresponding Source under the terms of this License, in one of these
+ways:
+
+-   a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+-   b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the Corresponding
+    Source from a network server at no charge.
+-   c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source. This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+-   d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge. You need not require recipients to copy the
+    Corresponding Source along with the object code. If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source. Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+-   e) Convey the object code using peer-to-peer transmission,
+    provided you inform other peers where the object code and
+    Corresponding Source of the work are being offered to the general
+    public at no charge under subsection 6d.
+
+A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal,
+family, or household purposes, or (2) anything designed or sold for
+incorporation into a dwelling. In determining whether a product is a
+consumer product, doubtful cases shall be resolved in favor of
+coverage. For a particular product received by a particular user,
+"normally used" refers to a typical or common use of that class of
+product, regardless of the status of the particular user or of the way
+in which the particular user actually uses, or expects or is expected
+to use, the product. A product is a consumer product regardless of
+whether the product has substantial commercial, industrial or
+non-consumer uses, unless such uses represent the only significant
+mode of use of the product.
+
+"Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to
+install and execute modified versions of a covered work in that User
+Product from a modified version of its Corresponding Source. The
+information must suffice to ensure that the continued functioning of
+the modified object code is in no case prevented or interfered with
+solely because modification has been made.
+
+If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information. But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or
+updates for a work that has been modified or installed by the
+recipient, or for the User Product in which it has been modified or
+installed. Access to a network may be denied when the modification
+itself materially and adversely affects the operation of the network
+or violates the rules and protocols for communication across the
+network.
+
+Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+#### 7. Additional Terms.
+
+"Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law. If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it. (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.) You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders
+of that material) supplement the terms of this License with terms:
+
+-   a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+-   b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+-   c) Prohibiting misrepresentation of the origin of that material,
+    or requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+-   d) Limiting the use for publicity purposes of names of licensors
+    or authors of the material; or
+-   e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+-   f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions
+    of it) with contractual assumptions of liability to the recipient,
+    for any liability that these contractual assumptions directly
+    impose on those licensors and authors.
+
+All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10. If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term. If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions; the
+above requirements apply either way.
+
+#### 8. Termination.
+
+You may not propagate or modify a covered work except as expressly
+provided under this License. Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+However, if you cease all violation of this License, then your license
+from a particular copyright holder is reinstated (a) provisionally,
+unless and until the copyright holder explicitly and finally
+terminates your license, and (b) permanently, if the copyright holder
+fails to notify you of the violation by some reasonable means prior to
+60 days after the cessation.
+
+Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License. If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+#### 9. Acceptance Not Required for Having Copies.
+
+You are not required to accept this License in order to receive or run
+a copy of the Program. Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance. However,
+nothing other than this License grants you permission to propagate or
+modify any covered work. These actions infringe copyright if you do
+not accept this License. Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+#### 10. Automatic Licensing of Downstream Recipients.
+
+Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License. You are not responsible
+for enforcing compliance by third parties with this License.
+
+An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations. If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License. For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+#### 11. Patents.
+
+A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based. The
+work thus licensed is called the contributor's "contributor version".
+
+A contributor's "essential patent claims" are all patent claims owned
+or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version. For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement). To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients. "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+A patent license is "discriminatory" if it does not include within the
+scope of its coverage, prohibits the exercise of, or is conditioned on
+the non-exercise of one or more of the rights that are specifically
+granted under this License. You may not convey a covered work if you
+are a party to an arrangement with a third party that is in the
+business of distributing software, under which you make payment to the
+third party based on the extent of your activity of conveying the
+work, and under which the third party grants, to any of the parties
+who would receive the covered work from you, a discriminatory patent
+license (a) in connection with copies of the covered work conveyed by
+you (or copies made from those copies), or (b) primarily for and in
+connection with specific products or compilations that contain the
+covered work, unless you entered into that arrangement, or that patent
+license was granted, prior to 28 March 2007.
+
+Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+#### 12. No Surrender of Others' Freedom.
+
+If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License. If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under
+this License and any other pertinent obligations, then as a
+consequence you may not convey it at all. For example, if you agree to
+terms that obligate you to collect a royalty for further conveying
+from those to whom you convey the Program, the only way you could
+satisfy both those terms and this License would be to refrain entirely
+from conveying the Program.
+
+#### 13. Use with the GNU Affero General Public License.
+
+Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work. The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+#### 14. Revised Versions of this License.
+
+The Free Software Foundation may publish revised and/or new versions
+of the GNU General Public License from time to time. Such new versions
+will be similar in spirit to the present version, but may differ in
+detail to address new problems or concerns.
+
+Each version is given a distinguishing version number. If the Program
+specifies that a certain numbered version of the GNU General Public
+License "or any later version" applies to it, you have the option of
+following the terms and conditions either of that numbered version or
+of any later version published by the Free Software Foundation. If the
+Program does not specify a version number of the GNU General Public
+License, you may choose any version ever published by the Free
+Software Foundation.
+
+If the Program specifies that a proxy can decide which future versions
+of the GNU General Public License can be used, that proxy's public
+statement of acceptance of a version permanently authorizes you to
+choose that version for the Program.
+
+Later license versions may give you additional or different
+permissions. However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+#### 15. Disclaimer of Warranty.
+
+THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
+WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
+PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE
+DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
+CORRECTION.
+
+#### 16. Limitation of Liability.
+
+IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
+CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
+ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
+NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
+LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
+TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
+PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+
+#### 17. Interpretation of Sections 15 and 16.
+
+If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+END OF TERMS AND CONDITIONS
+
+### How to Apply These Terms to Your New Programs
+
+If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these
+terms.
+
+To do so, attach the following notices to the program. It is safest to
+attach them to the start of each source file to most effectively state
+the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+        <one line to give the program's name and a brief idea of what it does.>
+        Copyright (C) <year>  <name of author>
+
+        This program is free software: you can redistribute it and/or modify
+        it under the terms of the GNU General Public License as published by
+        the Free Software Foundation, either version 3 of the License, or
+        (at your option) any later version.
+
+        This program is distributed in the hope that it will be useful,
+        but WITHOUT ANY WARRANTY; without even the implied warranty of
+        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+        GNU General Public License for more details.
+
+        You should have received a copy of the GNU General Public License
+        along with this program.  If not, see <https://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper
+mail.
+
+If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+        <program>  Copyright (C) <year>  <name of author>
+        This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+        This is free software, and you are welcome to redistribute it
+        under certain conditions; type `show c' for details.
+
+The hypothetical commands \`show w' and \`show c' should show the
+appropriate parts of the General Public License. Of course, your
+program's commands might be different; for a GUI interface, you would
+use an "about box".
+
+You should also get your employer (if you work as a programmer) or
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary. For more information on this, and how to apply and follow
+the GNU GPL, see <https://www.gnu.org/licenses/>.
+
+The GNU General Public License does not permit incorporating your
+program into proprietary programs. If your program is a subroutine
+library, you may consider it more useful to permit linking proprietary
+applications with the library. If this is what you want to do, use the
+GNU Lesser General Public License instead of this License. But first,
+please read <https://www.gnu.org/licenses/why-not-lgpl.html>.

=== modified file 'drs/dr1010.py'
--- drs/dr1010.py	2019-07-03 13:49:08 +0000
+++ drs/dr1010.py	2019-12-13 13:33:17 +0000
@@ -78,6 +78,7 @@
             drm["where"] = [
             ("drm_cono", "=", self.opts["conum"]),
             ("drm_chain", "=", 0)]
+        drm["where"].append(("drm_stat", "<>", "X"))
         dlm = {
             "stype": "R",
             "tables": ("drsdel",),
@@ -269,6 +270,8 @@
                 else:
                     return "New Account Creation is Not Allowed"
             self.new = True
+        elif self.old[self.sql.drsmst_col.index("drm_stat")] == "X":
+            return "Invalid Account, Redundant"
         else:
             self.new = False
             self.df.loadEntry("T", pag, p+1, data=self.old[3])
@@ -402,18 +405,18 @@
             where=[("drt_cono", "=", self.opts["conum"]), ("drt_chain", "=",
             self.chain), ("drt_acno", "=", self.acno)], limit=1)
         if trs[0]:
-            return "Transactions Exist, Not Deleted"
+            return "%s Transactions Exist, Not Deleted" % trs[0]
         iv1 = self.sql.getRec(tables="slsiv1", cols=["count(*)"],
             where=[("si1_cono", "=", self.opts["conum"]), ("si1_chain", "=",
             self.chain), ("si1_acno", "=", self.acno)], limit=1)
         if iv1[0]:
-            return "Sales Document Exists, Not Deleted"
+            return "%s Sales Document Exists, Not Deleted" % iv1[0]
         key = "%03i%s" % (self.chain, self.acno)
         nte = self.sql.getRec(tables="ctlnot", cols=["count(*)"],
             where=[("not_cono", "=", self.opts["conum"]), ("not_sys", "=",
             "DRS"), ("not_key", "=", key)], limit=1)
         if nte[0]:
-            return "Notes Exist, Not Deleted"
+            return "%s Notes Exist, Not Deleted" % nte[0]
         dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
         self.sql.delRec("drsmst", where=[("drm_cono", "=", self.opts["conum"]),
             ("drm_chain", "=", self.chain), ("drm_acno", "=", self.acno)])
@@ -446,6 +449,7 @@
             if x in (8, 10):
                 continue
             data.append(self.df.t_work[2][0][x])
+        data.append("N")
         if self.new:
             self.sql.insRec("drsmst", data=data)
         elif data != self.old:

=== modified file 'drs/dr1020.py'
--- drs/dr1020.py	2019-01-13 16:38:59 +0000
+++ drs/dr1020.py	2019-12-13 09:04:22 +0000
@@ -98,7 +98,9 @@
             "cols": (
                 ("drm_acno", "", 0, "Acc-Num"),
                 ("drm_name", "", 0, "Name", "Y")),
-            "where": [("drm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")],
             "whera": (("C", "drm_chain", 1, 0),)}
         glm_sel = {
             "stype": "R",
@@ -311,11 +313,13 @@
         self.chn = w
 
     def doAcc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.opts["conum"]), ("drm_chain", "=",
             self.chn), ("drm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.acc = w
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
 

=== modified file 'drs/dr2010.py'
--- drs/dr2010.py	2019-07-03 13:49:08 +0000
+++ drs/dr2010.py	2019-12-13 09:07:56 +0000
@@ -134,6 +134,7 @@
             drm["where"] = [
             ("drm_cono", "=", self.opts["conum"]),
             ("drm_chain", "=", 0)]
+        drm["where"].append(("drm_stat", "<>", "X"))
         coy = {
             "stype": "R",
             "tables": ("ctlmst",),
@@ -272,11 +273,13 @@
         self.chain = w
 
     def doDrsAcc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.opts["conum"]), ("drm_chain", "=",
             self.chain), ("drm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.dracno = w
         self.name = acc[0]
         self.df.loadEntry("C", pag, p+1, data=self.name)

=== modified file 'drs/dr2020.py'
--- drs/dr2020.py	2019-07-03 13:49:08 +0000
+++ drs/dr2020.py	2019-12-13 09:10:06 +0000
@@ -123,6 +123,7 @@
             drm["where"] = [
             ("drm_cono", "=", self.opts["conum"]),
             ("drm_chain", "=", 0)]
+        drm["where"].append(("drm_stat", "<>", "X"))
         coy = {
             "stype": "R",
             "tables": ("ctlmst",),
@@ -298,11 +299,13 @@
         self.chain = w
 
     def doDrsAcc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.allcoy), ("drm_chain", "=",
             self.chain), ("drm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.dracno = w
         self.name = acc[0]
         self.df.loadEntry("C", pag, p+1, data=self.name)

=== modified file 'drs/dr2030.py'
--- drs/dr2030.py	2019-01-13 16:38:59 +0000
+++ drs/dr2030.py	2019-12-13 09:20:04 +0000
@@ -174,6 +174,15 @@
                     "<=", self.bh.curdt), ("dct_end", ">=", self.bh.curdt)])
                 col = self.sql.drsrct_col
                 for dct in rec:
+                    self.chain = dct[col.index("dct_chain")]
+                    self.acno = dct[col.index("dct_acno")]
+                    # Check for Redundancy
+                    chk = self.sql.getRec(tables="drsmst", cols=["drm_stat"],
+                        where=[("drm_cono", "=", self.opts["conum"]),
+                        ("drm_chain", "=", self.chain), ("drm_acno", "=",
+                        self.acno)], limit=1)
+                    if chk[0] == "X":
+                        continue
                     # Check for Valid Period
                     charge = False
                     start = dct[col.index("dct_start")]
@@ -191,8 +200,6 @@
                     if not charge:
                         continue
                     # Create Transactions
-                    self.chain = dct[col.index("dct_chain")]
-                    self.acno = dct[col.index("dct_acno")]
                     nxt += 1
                     self.ref = "RC%03i%04i" % (num, nxt)
                     self.detail = textFormat(dct[col.index("dct_detail")], 73)

=== modified file 'drs/dr3020.py'
--- drs/dr3020.py	2019-08-20 08:41:08 +0000
+++ drs/dr3020.py	2019-12-16 12:23:43 +0000
@@ -41,8 +41,8 @@
                 self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "drsmst", "drstrn"],
-            prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "drsmst", "drstrn",
+            "slsiv1"], prog=__name__)
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
@@ -50,6 +50,7 @@
         if not drsctl:
             return
         self.fromad = drsctl["ctd_emadd"]
+        self.slsctl = gc.getCtl("slsctl", self.opts["conum"])
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -191,6 +192,8 @@
 
     def doEnd(self):
         self.df.closeProcess()
+        if self.slsctl and self.totsonly == "N":
+            self.doCancel()
         jon = "left outer join drsmst on drt_cono=drm_cono and "\
             "drt_chain=drm_chain and drt_acno=drm_acno"
         col = ["drt_chain", "drt_acno", "drt_trdt", "drt_type", "drt_ref1",
@@ -210,6 +213,46 @@
             self.t_work = [self.df.t_work[0][0]]
         self.closeProcess()
 
+    def doCancel(self):
+        if self.btyp and self.btyp not in (1, 4):
+            return
+        if self.batch and self.batch[0] != "S":
+            return
+        slss = self.sql.getRec(tables="slsiv1", where=[("si1_cono",
+            "=", self.opts["conum"]), ("si1_rtn", "in", ("I", "C")),
+            ("si1_invno", "=", "cancel")], order="si1_rtn, si1_docno")
+        if not slss:
+            return
+        if slss:
+            for rec in slss:
+                rtn = rec[self.sql.slsiv1_col.index("si1_rtn")]
+                if rtn == "I":
+                    rtyp = 1
+                else:
+                    rtyp = 4
+                docno = rec[self.sql.slsiv1_col.index("si1_docno")]
+                ref1 = CCD(docno, "Na", 9).work
+                chain = rec[self.sql.slsiv1_col.index("si1_chain")]
+                acno = rec[self.sql.slsiv1_col.index("si1_acno")]
+                date = rec[self.sql.slsiv1_col.index("si1_date")]
+                docno = rec[self.sql.slsiv1_col.index("si1_docno")]
+                capnm = rec[self.sql.slsiv1_col.index("si1_capnm")]
+                capdt = rec[self.sql.slsiv1_col.index("si1_capdt")]
+                whr = [
+                    ("drt_cono", "=", self.opts["conum"]),
+                    ("drt_chain", "=", chain),
+                    ("drt_acno", "=", acno),
+                    ("drt_type", "=", rtyp),
+                    ("drt_ref1", "=", ref1)]
+                chk = self.sql.getRec(tables="drstrn", where=whr, limit=1)
+                if chk:
+                    continue
+                dat = [self.opts["conum"], chain, acno, rtyp, ref1]
+                dat.append("S%s" % (date / 100))
+                dat.extend([date, "", 0, 0, date / 100, "Cancelled", "", "",
+                    capnm, capdt, 0])
+                self.sql.insRec("drstrn", data=dat)
+
     def exportReport(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
         expnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
@@ -281,11 +324,11 @@
             if batch.work != self.batch:
                 self.batchTotal()
                 self.batch = batch.work
-                if self.totsonly != "Y":
+                if self.totsonly == "N":
                     self.typeHeading()
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading()
-            if self.totsonly != "Y":
+            if self.totsonly == "N":
                 self.fpdf.drawText("%s %s %s %s %s %s %s %s %s %s" %
                     (chain.disp, acno.disp, name.disp, ref1.disp, trdt.disp,
                     debit.disp, credit.disp, taxamt.disp, taxind.disp,
@@ -375,7 +418,7 @@
             self.pglin += 4
 
     def typeHeading(self):
-        if self.totsonly != "Y":
+        if self.totsonly == "N":
             batch = self.batch
         else:
             batch = "Various"

=== modified file 'drs/dr3060.py'
--- drs/dr3060.py	2019-01-13 16:38:59 +0000
+++ drs/dr3060.py	2019-12-13 09:37:41 +0000
@@ -75,9 +75,10 @@
             "data": dab,
             "typs": (("NA", 3), ("UI", 8)),
             "size": (400, 400)}
-        r1s = (("Number","N"),("Name","M"))
-        r2s = (("Yes","Y"),("No","N"))
-        r3s = (("Manager","M"),("Accounts","A"),("Sales","S"))
+        r1s = (("Number", "N"), ("Name", "M"))
+        r2s = (("Yes", "Y"), ("No", "N"))
+        r3s = (("Manager", "M"), ("Accounts", "A"), ("Sales", "S"))
+        r4s = (("Yes", "Y"), ("No", "N"), ("Only", "O"))
         fld = (
             (("T",0,0,0),"INA",3,"Activity","Account Activity",
                 "","N",self.doAct,act,None,None),
@@ -90,7 +91,9 @@
             (("T",0,3,0),("IRB",r2s),0,"Full Address","",
                 "N","Y",self.doAddress,None,None,None),
             (("T",0,4,0),("IRB",r3s),0,"Contact Details","",
-                "M","Y",self.doContact,None,None,None))
+                "M","Y",self.doContact,None,None,None),
+            (("T",0,5,0),("IRB",r4s),0,"Include Redundant","",
+                "N","Y",self.doRedu,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
@@ -127,6 +130,9 @@
     def doContact(self, frt, pag, r, c, p, i, w):
         self.condet = w
 
+    def doRedu(self, frt, pag, r, c, p, i, w):
+        self.redu = w
+
     def doEnd(self):
         self.df.closeProcess()
         whr = [("drm_cono", "=", self.opts["conum"])]
@@ -134,6 +140,10 @@
             whr.append(("drm_bus_activity", "=", self.act))
         if self.typ:
             whr.append(("drm_bus_type", "=", self.typ))
+        if self.redu == "N":
+            whr.append(("drm_stat", "<>", "X"))
+        elif self.redu == "O":
+            whr.append(("drm_stat", "=", "X"))
         if self.sort == "N":
             odr = "drm_chain, drm_acno"
         else:

=== modified file 'drs/dr3080.py'
--- drs/dr3080.py	2019-04-07 13:32:42 +0000
+++ drs/dr3080.py	2019-12-17 06:25:35 +0000
@@ -127,11 +127,13 @@
                 "N","Y",self.doMinus,None,None,None],
             [["T",0,11,0],("IRB",r1s),0,"Include Stopped Accounts","",
                 "N","Y",self.doStops,None,None, None],
-            [["T",0,12,0],("IRB",r1s),0,"Include Allocated Transactions","",
+            [["T",0,12,0],("IRB",r1s),0,"Include Redundant Accounts","",
+                "N","Y",self.doRedu,None,None, None],
+            [["T",0,13,0],("IRB",r1s),0,"Include Allocated Transactions","",
                 "N","Y",self.doAlloc,None,None,None],
-            [["T",0,13,0],"ID1",10,"Statement Date","",
+            [["T",0,14,0],"ID1",10,"Statement Date","",
                 self.sysdtw,"Y",self.doDat,None,None,("efld",)],
-            [["T",0,14,0],"IUI",3,"Message Number","",
+            [["T",0,15,0],"IUI",3,"Message Number","",
                 "","Y",self.doMessno,mss,None,("efld",)]]
         if self.chains != "Y":
             del fld[6]
@@ -225,6 +227,9 @@
 
     def doStops(self, frt, pag, r, c, p, i, w):
         self.stops = w
+
+    def doRedu(self, frt, pag, r, c, p, i, w):
+        self.redu = w
         if self.sttyp == "O":
             self.alloc = "Y"
             self.df.loadEntry(frt, pag, p+1, data=self.alloc)
@@ -250,20 +255,21 @@
     def doEnd(self):
         self.df.closeProcess()
         self.emadd = self.df.repeml[2]
+        if not self.echn:
+            self.echn = 999
+        if not self.eacc:
+            self.eacc = "zzzzzzz"
+        whr = [("drm_cono", "=", self.opts["conum"]), ("drm_chain", ">=",
+            self.schn), ("drm_acno", ">=", self.sacc), ("drm_chain", "<=",
+            self.echn), ("drm_acno", "<=", self.eacc)]
+        if self.stops == "N":
+            whr.append(("drm_stop", "<>", "Y"))
+        if self.redu == "N":
+            whr.append(("drm_stat", "<>", "X"))
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "drsmst",
-                ("drm_chain", "drm_acno", "drm_name"), where=[("drm_cono",
-                "=", self.opts["conum"])])
+                ("drm_chain", "drm_acno", "drm_name"), where=whr)
         else:
-            if self.echn == 0:
-                self.echn = 999
-            if not self.eacc:
-                self.eacc = "zzzzzzz"
-            whr = [("drm_cono", "=", self.opts["conum"]), ("drm_chain", ">=",
-                self.schn), ("drm_acno", ">=", self.sacc), ("drm_chain", "<=",
-                self.echn), ("drm_acno", "<=", self.eacc)]
-            if self.stops == "N":
-                whr.append(("drm_stop", "<>", "Y"))
             if self.sort == "N":
                 odr = "drm_chain, drm_acno"
             elif self.sort == "M":

=== modified file 'drs/dr3090.py'
--- drs/dr3090.py	2019-01-13 16:38:59 +0000
+++ drs/dr3090.py	2019-12-13 09:44:07 +0000
@@ -98,7 +98,9 @@
         self.df.closeProcess()
         self.prnt = False
         tab = ["drsmst"]
-        whr = [("drm_cono", "=", self.opts["conum"])]
+        whr = [
+            ("drm_cono", "=", self.opts["conum"]),
+            ("drm_stat", "<>", "X")]
         if self.sort == "N":
             odr = "drm_chain, drm_acno"
         elif self.sort == "M":

=== modified file 'drs/dr3110.py'
--- drs/dr3110.py	2019-12-07 11:09:33 +0000
+++ drs/dr3110.py	2019-12-17 06:26:49 +0000
@@ -106,6 +106,7 @@
 
     def doEnd(self):
         self.df.closeProcess()
+        whr = [("drm_cono", "=", self.opts["conum"])]
         if self.rep == "Y":
             odr = "drm_rep, drm_chain, drm_acno"
         elif self.act == "Y":
@@ -116,7 +117,7 @@
             odr = "drm_chain, drm_acno"
         acs = self.sql.getRec(tables="drsmst", cols=["drm_chain", "drm_acno",
             "drm_name", "drm_rep", "drm_bus_activity", "drm_bus_type"],
-            where=[("drm_cono", "=", self.opts["conum"])], order=odr)
+            where=whr, order=odr)
         if not acs:
             showError(self.opts["mf"].body, "Selection Error",
                 "No Accounts Selected")

=== modified file 'drs/dr3120.py'
--- drs/dr3120.py	2019-01-13 16:38:59 +0000
+++ drs/dr3120.py	2019-12-13 09:51:26 +0000
@@ -88,8 +88,8 @@
         self.col = ["drm_chain", "drm_acno", "drm_name", "drm_rfterms",
             "drm_int_per"]
         recs = self.sql.getRec(tables="drsmst", cols=self.col,
-            where=[("drm_cono", "=", self.opts["conum"])],
-            order="drm_chain, drm_acno")
+            where=[("drm_cono", "=", self.opts["conum"]), ("drm_stat",
+            "<>", "X")], order="drm_chain, drm_acno")
         if not recs:
             showError(self.opts["mf"].body, "Error", "No Records Selected")
         else:

=== modified file 'drs/dr4010.py'
--- drs/dr4010.py	2019-07-03 13:49:08 +0000
+++ drs/dr4010.py	2019-12-17 05:32:59 +0000
@@ -143,6 +143,7 @@
             (("T",2,8,0),"OUI",3,"Statement Message"),
             (("T",2,8,0),"ONA",40,""),
             (("T",2,9,0),"OUA",1,"Credit Rating"),
+            (("T",2,10,0),"OUA",1,"Status"),
             (("T",3,0,0),"Od1",10,"Date Last Sale"),
             (("T",3,1,0),"Od1",10,"Date Last Paid"),
             (("T",3,2,0),"OSD",12.2,"Total Balance"),
@@ -202,8 +203,8 @@
 
     def doAcno(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="drsmst", where=[("drm_cono", "=",
-            self.opts["conum"]), ("drm_chain", "=", self.chain), ("drm_acno",
-            "=", w)], limit=1)
+            self.opts["conum"]), ("drm_chain", "=", self.chain),
+            ("drm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
         self.acno = w

=== modified file 'drs/dr6010.py'
--- drs/dr6010.py	2019-01-13 16:38:59 +0000
+++ drs/dr6010.py	2019-12-17 05:33:26 +0000
@@ -44,7 +44,9 @@
             ("drstrn", "drt_cono", "drt_chain", "drt_acno"),
             ("drsage", "dra_cono", "dra_chain", "dra_acno"),
             ("genrcc", "grc_cono", "grc_achn", "grc_adrs"),
+            ("posmst", "psm_cono", "psm_chain", "psm_acno"),
             ("slsiv1", "si1_cono", "si1_chain", "si1_acno"),
+            ("strmf1", "st1_cono", "st1_chn_excl", "st1_acc_excl"),
             ("strtrn", "stt_cono", "stt_chain", "stt_acno", "stt_styp"))
         tabs = ["drschn"]
         for tab in self.tables:

=== modified file 'drs/dr6020.py'
--- drs/dr6020.py	2019-08-20 08:41:08 +0000
+++ drs/dr6020.py	2019-12-13 09:59:03 +0000
@@ -78,7 +78,9 @@
                 ("drm_acno", "", 0, "Acc-Num"),
                 ("drm_name", "", 0, "Name", "Y"),
                 ("drm_add1", "", 0, "Address Line 1"))
-            drm["where"] = [("drm_cono", "=", self.opts["conum"])]
+            drm["where"] = [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")]
             drm["whera"] = [["T", "drm_chain", 0]]
         else:
             drm["cols"] = (
@@ -87,7 +89,8 @@
                 ("drm_add1", "", 0, "Address Line 1"))
             drm["where"] = [
                 ("drm_cono", "=", self.opts["conum"]),
-                ("drm_chain", "=", 0)]
+                ("drm_chain", "=", 0),
+                ("drm_stat", "<>", "X")]
         fld = [
             [["T",0,0,0],"ID2",7,"Period","Current Financial Period",
                 self.curdt,"Y",self.doCurdt,None,None,("efld",)],
@@ -124,11 +127,13 @@
         self.chain = w
 
     def doAccno(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.opts["conum"]), ("drm_chain", "=",
             self.chain), ("drm_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
+        if acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.acno = w
         self.key = None
         self.df.loadEntry("T", pag, p+1, data=acc[0])

=== added file 'drs/dr6030.py'
--- drs/dr6030.py	1970-01-01 00:00:00 +0000
+++ drs/dr6030.py	2019-12-15 14:29:01 +0000
@@ -0,0 +1,226 @@
+"""
+SYNOPSIS
+    Debtors Ledger Change Status to Redundant for all Accounts having had No
+    Movement for a Period of Time and with a Zero Balance.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2019 Paul Malherbe.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program. If not, see <https://www.gnu.org/licenses/>.
+"""
+
+import time
+from TartanClasses import GetCtl, ProgressBar, Sql, TartanDialog
+from tartanFunctions import showError
+
+class dr6030:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.dataHeader()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["drsmst", "drstrn", "chglog"],
+            prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.chains = drsctl["ctd_chain"]
+        t = time.localtime()
+        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        self.curdt = int(self.sysdtw / 100)
+        return True
+
+    def dataHeader(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Debtors Ledger Redundant Accounts (%s)" % __name__)
+        drc = {
+            "stype": "R",
+            "tables": ("drschn",),
+            "cols": (
+                ("chm_chain", "", 0, "Num"),
+                ("chm_name", "", 0, "Name", "Y")),
+            "where": [("chm_cono", "=", self.opts["conum"])]}
+        self.drm = {
+            "stype": "R",
+            "tables": ("drsmst",),
+            "cols": (
+                ("drm_acno", "", 0, "Acc-Num"),
+                ("drm_name", "", 0, "Name", "Y")),
+            "where": [],
+            "whera": [["T", "drm_chain", 0, 0]],
+            "index": 0}
+        if self.chains == "Y":
+            self.drm["whera"] = [["T", "drm_chain", 0]]
+        else:
+            self.drm["where"].append(("drm_chain", "=", 0))
+        fld = [
+            (("T",0,0,0),"IUI",3,"Chain Store","",
+                "","N",self.doChain,drc,None,("efld",)),
+            (("T",0,1,0),"INA",7,"Acc-Num","Account Number",
+                "","N",self.doAcno,self.drm,None,("notblank",)),
+            (("T",0,2,0),"ONA",30,"Name")]
+        but = (
+            ("Generate",None,self.doGenerate,1,None,(("T",0,1),("T",0,2)),
+                "Mark zero items, which have been inactive, as redundant"),
+            ("Create",None,self.doCreate,1,None,(("T",0,1),("T",0,2)),
+                "Mark a zero item as redundant"),
+            ("Restore",None,self.doRestore,1,None,(("T",0,1),("T",0,2)),
+                "Mark a redundant item as normal"),
+            ("Exit",None,self.exitPage,1,None,(("T",0,1),("T",0,2))))
+        tnd = ((self.endPage, "y"),)
+        txt = (self.exitPage,)
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            butt=but, tend=tnd, txit=txt, focus=False)
+        self.df.setWidget(self.df.B0, state="normal")
+        self.df.setWidget(self.df.B1, state="normal")
+        self.df.setWidget(self.df.B2, state="normal")
+        self.df.setWidget(self.df.B3, state="normal")
+
+    def doGenerate(self):
+        tit = "Generate Redundant Accounts"
+        fld = (
+            (("T",0,0,0),"IUI",2,"Months Inactive","",
+                24,"Y",self.doMonths,None,None,("efld",)),)
+        state = self.df.disableButtonsTags()
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        self.mt = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doMthEnd, "y"),), txit=(self.doMthExit,))
+        self.mt.mstFrame.wait_window()
+        self.df.setWidget(self.df.mstFrame, state="show")
+        self.df.enableButtonsTags(state=state)
+
+    def doMonths(self, frt, pag, r, c, p, i, w):
+        months = w
+        yr = int(self.curdt / 100)
+        mt = self.curdt % 100
+        for mth in range(months):
+            mt -= 1
+            if not mt:
+                mt = 12
+                yr -= 1
+        self.startp = (yr * 100) + mt
+
+    def doMthEnd(self):
+        self.mt.closeProcess()
+        whr = [
+            ("drm_cono", "=", self.opts["conum"]),
+            ("drm_stat", "=", "N")]
+        msts = self.sql.getRec(tables="drsmst", cols=["drm_chain",
+            "drm_acno", "drm_opened"], where=whr, order="drm_chain, drm_acno")
+        chgs = []
+        for mst in msts:
+            whr = [
+                ("drt_cono", "=", self.opts["conum"]),
+                ("drt_chain", "=", mst[0]),
+                ("drt_acno", "=", mst[1])]
+            rec = self.sql.getRec(tables="drstrn", cols=["max(drt_curdt)",
+                "sum(drt_tramt)"], where=whr, limit=1)
+            if rec[0] and rec[0] < self.startp and not rec[1]:
+                chgs.append(mst[:2])
+            elif not rec[0] and mst[2] / 100 < self.startp:
+                chgs.append(mst[:2])
+        if not chgs:
+            showError(self.opts["mf"].body, "Processing Error",
+                "No New Redundant Records")
+        else:
+            self.cnt = 0
+            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
+            p = ProgressBar(self.opts["mf"].body, mxs=len(chgs),
+                typ="Redundant Accounts")
+            for num, rec in enumerate(chgs):
+                p.displayProgress(num)
+                self.sql.updRec("drsmst", cols=["drm_stat"], data=["X"],
+                    where=[("drm_cono", "=", self.opts["conum"]),
+                    ("drm_chain", "=", rec[0]), ("drm_acno", "=", rec[1])])
+                key = "%03i%03i%-7s" % (self.opts["conum"], rec[0], rec[1])
+                self.sql.insRec("chglog", data=["drsmst", "U", key, "drm_stat",
+                dte, self.opts["capnm"], "N", "X", 0])
+            p.closeProgress()
+            mess = """%s Accounts Will be Marked as Redundant.
+
+Would you like to COMMIT these Changes?""" % len(chgs)
+            self.opts["mf"].dbm.commitDbase(ask=True, mess=mess, default="no")
+
+    def doMthExit(self):
+        self.mt.closeProcess()
+
+    def doCreate(self):
+        self.flag = "C"
+        self.drm["where"] = [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doRestore(self):
+        self.flag = "R"
+        self.drm["where"] = [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "=", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doChain(self, frt, pag, r, c, p, i, w):
+        if w:
+            acc = self.sql.getRec(tables="drschn", where=[("chm_cono", "=",
+                self.opts["conum"]), ("chm_chain", "=", w)], limit=1)
+            if not acc:
+                return "Invalid Chain Store"
+        self.chain = w
+
+    def doAcno(self, frt, pag, r, c, p, i, w):
+        if self.flag == "C":
+            typ = "<>"
+        else:
+            typ = "="
+        chk = self.sql.getRec(tables="drsmst", where=[("drm_cono",
+            "=", self.opts["conum"]), ("drm_chain", "=", self.chain),
+            ("drm_acno", "=", w), ("drm_stat", typ, "X")], limit=1)
+        if not chk:
+            return "Invalid Code"
+        if self.flag == "C":
+            bal = self.sql.getRec(tables="drstrn", cols=["sum(drt_tramt)"],
+                where=[("drt_cono", "=", self.opts["conum"]),
+                ("drt_chain", "=", self.chain), ("drt_acno", "=", w)],
+                limit=1)
+            if bal[0]:
+                return "Balance Exists"
+        self.acno = w
+        self.df.loadEntry(frt, pag, p+1, data=chk[4])
+
+    def endPage(self):
+        if self.flag == "C":
+            typ = "X"
+        else:
+            typ = "N"
+        self.sql.updRec("drsmst", cols=["drm_stat"], data=[typ],
+            where=[("drm_cono", "=", self.opts["conum"]),
+            ("drm_chain", "=", self.chain), ("drm_acno", "=", self.acno)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.clearFrame("T", 0)
+        self.flag = ""
+
+    def exitPage(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== renamed file 'drs/dr6030.py' => 'drs/dr6040.py'
--- drs/dr6030.py	2019-01-13 16:38:59 +0000
+++ drs/dr6040.py	2019-12-15 08:36:52 +0000
@@ -27,7 +27,7 @@
 import time
 from TartanClasses import ASD, Balances, GetCtl, ProgressBar, Sql, TartanDialog
 
-class dr6030:
+class dr6040:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
@@ -53,7 +53,7 @@
         fld = (
             (("T",0,0,0),"ID2",7,"Current Period","",
                 self.curdt,"Y",self.doCurdt,None,None,("efld",)),
-            (("T",0,1,0),("IRB",r1s),0,"Ignore Zeros Balances","",
+            (("T",0,1,0),("IRB",r1s),0,"Ignore Zero Balances","",
                 "Y","Y",self.doIgnore,None,None,None))
         tnd = ((self.doProcess,"y"), )
         txt = (self.doExit, )
@@ -69,7 +69,8 @@
     def doProcess(self):
         self.df.closeProcess()
         recs = self.sql.getRec(tables="drsmst", where=[("drm_cono", "=",
-            self.opts["conum"])], order="drm_chain, drm_name")
+            self.opts["conum"]), ("drm_stat", "<>", "X")],
+            order="drm_chain, drm_name")
         if recs:
             col = self.sql.drsmst_col
             p = ProgressBar(self.opts["mf"].body, typ="Calculating Ratings",

=== modified file 'gen/gl1060.py'
--- gen/gl1060.py	2019-07-03 13:49:08 +0000
+++ gen/gl1060.py	2019-12-13 12:09:14 +0000
@@ -131,6 +131,7 @@
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name", "Y"),
                 ("crm_add1", "", 0, "Address Line 1")),
+            "where": [("crm_stat", "<>", "X")],
             "whera": [["T", "crm_cono", 7]]}
         self.drm = {
             "stype": "R",
@@ -139,6 +140,7 @@
                 ("drm_acno", "", 0, "Acc-Num"),
                 ("drm_name", "", 0, "Name", "Y"),
                 ("drm_add1", "", 0, "Address Line 1")),
+            "where": [("drm_stat", "<>", "X")],
             "whera": [
                 ["T", "drm_cono", 7],
                 ["T", "drm_chain", 11]]}
@@ -455,8 +457,10 @@
             self.adrs = w
             name = self.getDrsName()
         if not name:
-            return "Invalid %s Account Number" % self.crsdrs.capitalize()
-        self.df.loadEntry(frt, pag, p+1, data=name)
+            return "Invalid Account Number %s" % self.crsdrs.capitalize()
+        if name[1] == "X":
+            return "Invalid Account %s, Redundant" % self.crsdrs.capitalize()
+        self.df.loadEntry(frt, pag, p+1, data=name[0])
 
     def doCrsDrsAge(self, frt, pag, r, c, p, i, w):
         self.aage = w
@@ -513,11 +517,11 @@
             return acc[0]
 
     def getCrsName(self):
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "ctm_stat"],
             where=[("crm_cono", "=", self.acoy), ("crm_acno", "=", self.acrs)],
             limit=1)
         if acc:
-            return acc[0]
+            return acc
 
     def getChainName(self):
         acc = self.sql.getRec(tables="drschn", cols=["chm_name"],
@@ -527,11 +531,11 @@
             return acc[0]
 
     def getDrsName(self):
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.acoy), ("drm_chain", "=", self.achn),
             ("drm_acno", "=", self.adrs)], limit=1)
         if acc:
-            return acc[0]
+            return acc
 
     def doCancel(self, widget=None):
         self.opts["mf"].dbm.rollbackDbase()

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2019-08-23 09:04:54 +0000
+++ gen/gl2030.py	2019-12-13 12:10:49 +0000
@@ -350,6 +350,7 @@
                 "cols": (
                     ("crm_acno", "", 0, "Acc-Num"),
                     ("crm_name", "", 0, "Name", "Y")),
+                "where": [("crm_stat", "<>", "X")],
                 "whera": [("C", "crm_cono", 0, 2)]}
         if "DR" in self.tagp:
             chn = {
@@ -366,6 +367,7 @@
                     ("drm_acno", "", 0, "Acc-Num"),
                     ("drm_name", "", 0, "Name", "Y"),
                     ("drm_add1", "", 0, "Address Line 1")),
+                "where": [("drm_stat", "<>", "X")],
                 "whera": [
                     ("C", "drm_cono", 0, 2),
                     ("C", "drm_chain", 0, self.tagp["DR"])]}
@@ -2071,7 +2073,7 @@
 
     def doCrsAcc(self, frt, pag, r, c, p, i, w):
         self.othacno = w
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
             where=[("crm_cono", "=", self.allcoy), ("crm_acno", "=",
             self.othacno)], limit=1)
         if not acc:
@@ -2085,6 +2087,8 @@
                 self.othacno)], limit=1)
             if not acc:
                 return "rf"
+        elif acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.allref = self.trnref
 
@@ -2110,7 +2114,7 @@
 
     def doDrsAcc(self, frt, pag, r, c, p, i, w):
         self.othacno = w
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.allcoy), ("drm_chain", "=",
             self.chain), ("drm_acno", "=", self.othacno)], limit=1)
         if not acc:
@@ -2124,6 +2128,8 @@
                 self.chain), ("drm_acno", "=", self.othacno)], limit=1)
             if not acc:
                 return "rf"
+        elif acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.allref = self.trnref
 

=== modified file 'gen/gl2040.py'
--- gen/gl2040.py	2019-07-03 13:49:08 +0000
+++ gen/gl2040.py	2019-12-13 12:12:30 +0000
@@ -263,6 +263,7 @@
                 "cols": (
                     ("crm_acno", "", 0, "Acc-Num"),
                     ("crm_name", "", 0, "Name", "Y")),
+                "where": [("crm_stat", "<>", "X")],
                 "whera": [("C", "crm_cono", 2, 1)]}
         if "DR" in self.tagp:
             chn = {
@@ -279,6 +280,7 @@
                     ("drm_acno", "", 0, "Acc-Num"),
                     ("drm_name", "", 0, "Name", "Y"),
                     ("drm_add1", "", 0, "Address Line 1")),
+                "where": [("drm_stat", "<>", "X")],
                 "whera": [
                     ("C", "drm_cono", 2, 1),
                     ("C", "drm_chain", 0, self.tagp["DR"])]}
@@ -1275,7 +1277,7 @@
 
     def doCrsAcc(self, frt, pag, r, c, p, i, w):
         self.othacno = w
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
             where=[("crm_cono", "=", self.allcoy), ("crm_acno", "=",
             self.othacno)], limit=1)
         if not acc:
@@ -1289,6 +1291,8 @@
                 self.othacno)], limit=1)
             if not acc:
                 return "rf"
+        elif acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.allref = self.trnref
 
@@ -1311,7 +1315,7 @@
 
     def doDrsAcc(self, frt, pag, r, c, p, i, w):
         self.othacno = w
-        acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
+        acc = self.sql.getRec(tables="drsmst", cols=["drm_name", "drm_stat"],
             where=[("drm_cono", "=", self.allcoy), ("drm_chain", "=",
             self.chain), ("drm_acno", "=", self.othacno)], limit=1)
         if not acc:
@@ -1325,6 +1329,8 @@
                 self.chain), ("drm_acno", "=", self.othacno)], limit=1)
             if not acc:
                 return "rf"
+        elif acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.allref = self.trnref
 

=== renamed file 'ibt/ib2010.py' => 'ibt/ib2010_rne.py'
--- ibt/ib2010.py	2019-08-20 08:41:08 +0000
+++ ibt/ib2010_rne.py	2019-12-17 05:46:19 +0000
@@ -120,7 +120,8 @@
                 ("crm_acno",  "", 0, "Acc-Num"),
                 ("crm_name",  "", 0, "Name", "Y")],
             "where": [
-                ("crm_cono", "=", self.ccoy)],
+                ("crm_cono", "=", self.ccoy),
+                ("crm_stat", "<>", "X")],
             "order": "crm_acno",
             "autoc": False}
         cod = {
@@ -193,11 +194,13 @@
 
     def doSupp(self, frt, pag, r, c, p, i, w):
         if w:
-            acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
-                where=[("crm_cono", "=", self.ccoy), ("crm_acno", "=", w)],
-                limit=1)
+            acc = self.sql.getRec(tables="crsmst", cols=["crm_name",
+                "crm_stat"], where=[("crm_cono", "=", self.ccoy),
+                ("crm_acno", "=", w)], limit=1)
             if not acc:
                 return "Invalid Supplier Code"
+            if acc[1] == "X":
+                return "Invalid Suppliers, Redundant"
             self.df.loadEntry(frt, pag, p+1, data=acc[0])
         else:
             self.df.loadEntry(frt, pag, p+1, data="")
@@ -207,11 +210,13 @@
             self.dsup2 = w
 
     def doTrpt(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="crsmst", cols=["crm_name"],
+        acc = self.sql.getRec(tables="crsmst", cols=["crm_name", "crm_stat"],
             where=[("crm_cono", "=", self.ccoy), ("crm_acno", "=", w)],
             limit=1)
         if not acc:
             return "Invalid Transporter Code"
+        if acc[1] == "X":
+            return "Invalid Transporter, Redundant"
         self.dtrpt = w
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
 

=== renamed file 'ibt/ib2020.py' => 'ibt/ib2020_rne.py'
--- ibt/ib2020.py	2019-01-13 16:38:59 +0000
+++ ibt/ib2020_rne.py	2019-12-17 05:48:46 +0000
@@ -74,7 +74,8 @@
                 ("rtf_cono", "=", self.ccoy),
                 ("rtf_depno", "=", self.opts["conum"]),
                 ("crm_cono=rtf_cono",),
-                ("crm_acno=rtf_acno",)],
+                ("crm_acno=rtf_acno",),
+                ("crm_stat", "<>", "X")],
             "whera": [("T", "rtf_pjno", 0, 0)],
             "group": "rtf_acno, crm_name",
             "order": "rtf_acno",
@@ -171,13 +172,15 @@
             self.ityp = 4
 
     def doCAcc(self, frt, pag, r, c, p, i, w):
-        col = ["crm_name"]
+        col = ["crm_name", "crm_stat"]
         whr = [
             ("crm_cono", "=", self.ccoy),
             ("crm_acno", "=", w)]
         acc = self.sql.getRec(tables="crsmst", cols=col, where=whr, limit=1)
         if not acc:
             return "Invalid Account Number"
+        if not acc[1] == "X":
+            return "Invalid Account, Redundant"
         self.cacc = w
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         col = ["ibm_supp", "ibm_sup2", "ibm_tran"]

=== renamed file 'ibt/ib3010.py' => 'ibt/ib3010_rne.py'
=== renamed file 'ibt/ib3020.py' => 'ibt/ib3020_rne.py'
=== renamed file 'ibt/ib3030.py' => 'ibt/ib3030_rne.py'
=== renamed file 'ibt/ib3040.py' => 'ibt/ib3040_rne.py'
=== renamed file 'ibt/ibc110.py' => 'ibt/ibc110_rne.py'
=== modified file 'mem/ml1010.py'
--- mem/ml1010.py	2019-07-03 13:49:08 +0000
+++ mem/ml1010.py	2019-12-29 09:00:00 +0000
@@ -62,6 +62,13 @@
         memctl = mc.getCtl("memctl", self.opts["conum"])
         if not memctl:
             return
+        memcat = self.sql.getRec(tables="memctc", cols=["count(*)"],
+            where=[("mcc_cono", "=", self.opts["conum"]),
+            ("mcc_type", "=", "B")], limit=1)
+        if not memcat[0]:
+            showError(self.opts["mf"].body, "Missing Category",
+                "There Are No Membership Category Records.")
+            return
         self.ldays = memctl["mcm_ldays"]
         self.lme = memctl["mcm_lme"]
         self.logo = memctl["mcm_logo"]
@@ -857,6 +864,20 @@
             return "Invalid Identity Number 2"
         if w and not luhnFunc(w):
             return "Invalid Identity Number 3"
+        whr = [("mlm_cono", "=", self.opts["conum"])]
+        if not self.new:
+            whr.append(("mlm_memno", "<>", self.memno))
+        whr.append(("mlm_idnum", "=", w))
+        chk = self.sql.getRec(tables="memmst", where=whr, limit=1)
+        if chk:
+            showError(self.opts["mf"].body, "ID Number",
+                """A Member with this ID Number already Exists:
+
+Number:  %s
+Surname: %s
+Names:   %s
+""" % (chk[1], chk[4], chk[5]))
+            return "rf"
         self.idnum = w
 
     def doOccCode(self, frt, pag, r, c, p, i, w):
@@ -1297,11 +1318,11 @@
                     else:
                         newtab = None
                         showWarning(self.opts["mf"].body, "Bowls Tab",
-                            "The Bowls Tab for this Member Does Not Exist.")
+                            "A Bowls Tab for this Member Does Not Exist.")
                 elif not tab[2]:
                     newtab = None
                     showWarning(self.opts["mf"].body, "Bowls Tab",
-                        "The Bowls Tab for this Member Does Not Exist.")
+                        "A Bowls Tab for this Member Does Not Exist.")
                 else:
                     newtab = False
                 if newtab is not None:

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2019-12-07 11:09:33 +0000
+++ mst/ms0000.py	2019-12-31 08:37:37 +0000
@@ -43,18 +43,18 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1].rstrip()))
 else:
-    VERSION = (5, 8)
+    VERSION = (5, 9)
     os.environ["TARVER"] = "%s.%s" % VERSION
 if __name__ == "__main__":
     # Run Tartan
     try:
         opts, args = getopt.getopt(
             sys.argv[1:],
-            "ab:c:de:f:hilnop:q:R:r:t:u:vxy:z", [
+            "ab:c:de:f:hilnop:q:R:r:t:u:vxz", [
                 "altered", "bpwd=", "conum=", "debug", "exclude=", "finper=",
                 "help", "image", "loader", "nocheck", "output", "program=",
-                "query=", "rcfdir=", "rcfile=", "script=", "tcode=", "user=",
-                "version", "xdisplay", "yndfinal=", "zerobar"])
+                "query=", "rcfdir=", "rcfile=", "tcode=", "user=", "version",
+                "xdisplay", "zerobar"])
     except:
         opts, args = [("-h", "")], []
     import msc000

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2019-12-07 11:09:33 +0000
+++ mst/msc000.py	2019-12-20 11:11:58 +0000
@@ -786,7 +786,11 @@
                 os._exit(0)
             except:
                 if self.xdisplay:
-                    showException(self.mf.window, self.rcdic["wrkdir"],
+                    for wgt in self.mf.window.winfo_children():
+                        if wgt not in (
+                                self.mf.head, self.mf.body, self.mf.status):
+                            wgt.destroy()
+                    showException(self.mf.body, self.rcdic["wrkdir"],
                         "Function %s Error" % prg, dbm=self.db)
                 else:
                     showException(None, self.rcdic["wrkdir"],
@@ -1104,9 +1108,10 @@
         except:
             if self.xdisplay:
                 for wgt in self.mf.window.winfo_children():
-                    if wgt not in (self.mf.head, self.mf.body, self.mf.status):
+                    if wgt not in (
+                            self.mf.head, self.mf.body, self.mf.status):
                         wgt.destroy()
-                showException(self.mf.window, self.rcdic["wrkdir"],
+                showException(self.mf.body, self.rcdic["wrkdir"],
                     "Mod: %s or Arg: %s Error" % (prg, popt), dbm=self.db)
             else:
                 showException(None, self.rcdic["wrkdir"],
@@ -1689,18 +1694,16 @@
                 else:
                     dft = "Keep"
             if TRASH:
-                but = [("Trash", "T")]
+                but = [("Trash", "T", "Send files to Recycle Bin")]
                 if not dft:
                     dft = "Trash"
             else:
                 but = []
                 if not dft:
                     dft = "Delete"
-            but.extend([("Delete", "D"), ("Keep", "K")])
-            but = (
-                ("Trash", "T", "Send files to Recycle Bin"),
-                ("Delete", "D"),
-                ("Keep", "K", "Keep the files in the Work Directory"))
+            but.extend([
+                ("Delete", "D", "Permanently Delete the files"),
+                ("Keep", "K", "Keep the files in the Work Directory")])
             ask = askChoice(self.mf.body, "Temporary Files",
                 "What do you wish to do with the Temporary Report Files "\
                 "in the wrk Directory?", butt=but, default=dft)

=== modified file 'pos/ps2010.py'
--- pos/ps2010.py	2019-07-03 13:49:08 +0000
+++ pos/ps2010.py	2019-12-27 14:40:12 +0000
@@ -390,6 +390,7 @@
         self.glist = []
         self.itms = {}
         count = 0
+        lst = []
         grps = copyList(self.grps)
         for grp in grps:
             items = self.sql.getRec(
@@ -437,6 +438,10 @@
             showError(self.opts["mf"].window, "Error",
                 "No Valid Group Records.")
             return
+        if not self.itms:
+            showError(self.opts["mf"].window, "Error",
+                "No Valid Product Records.")
+            return
         t = time.localtime()
         self.trdt = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.curdt = int(self.trdt / 100)
@@ -829,7 +834,8 @@
                 ("drm_name", "", 0, "Name", "Y"),
                 ("drm_add1", "", 0, "Address Line 1")),
             "where": [
-                ("drm_cono", "=", self.opts["conum"])]}
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")]}
         fld = (
             (("T",0,0,0),"INA",7,"Account Number","",
                 "","Y",self.doAcno,drm,None,None),
@@ -854,7 +860,7 @@
     def doAcno(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="drsmst", where=[("drm_cono",
             "=", self.opts["conum"]), ("drm_chain", "=", self.chain),
-            ("drm_acno", "=", w)], limit=1)
+            ("drm_acno", "=", w), ("drm_stat", "<>", "X")], limit=1)
         if not acc:
             return "Invalid Account"
         self.acno = w

=== modified file 'pos/psc110.py'
--- pos/psc110.py	2019-04-07 13:32:42 +0000
+++ pos/psc110.py	2019-12-27 14:29:06 +0000
@@ -51,10 +51,10 @@
     def doGetHosts(self):
         hosts = []
         if sys.platform == "win32":
-            out = os.popen('net view').readlines()
+            out = os.popen("net view").readlines()
             for line in out:
                 if line.strip().startswith("\\"):
-                    hh = line[2:line.find(' ')].strip().lower()
+                    hh = line[2:line.find(" ")].strip()
                     try:
                         hosts.append([hh, socket.gethostbyname(hh), ""])
                     except:
@@ -62,7 +62,7 @@
         else:
             hh = socket.gethostname()
             hosts.append([hh, socket.gethostbyname(hh), ""])
-            out = os.popen('ip neigh').readlines()
+            out = os.popen("ip neigh").readlines()
             for line in out:
                 ip = line.strip().split()[0]
                 try:

=== modified file 'sls/si2010.py'
--- sls/si2010.py	2019-07-03 13:49:08 +0000
+++ sls/si2010.py	2019-12-15 09:44:14 +0000
@@ -180,7 +180,9 @@
                 ("drm_acno", "", 0, "Acc-Num"),
                 ("drm_name", "", 0, "Name","Y"),
                 ("drm_add1", "", 0, "Address Line 1")],
-            "where": [("drm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")],
             "screen": self.opts["mf"].body,
             "index": 1}
         self.grps = {
@@ -450,15 +452,8 @@
     def doActEnd(self):
         if self.acttyp == "C":
             self.sql.updRec("slsiv1", cols=["si1_invno"], data=["cancel"],
-                where=[("si1_cono", "=", self.opts["conum"]), ("si1_rtn", "=",
-                self.typs), ("si1_docno", "=", self.docno)])
-            self.sql.delRec("slsiv2", where=[("si2_cono", "=",
-                self.opts["conum"]), ("si2_rtn", "=", self.typs), ("si2_docno",
-                "=", self.docno)])
-            self.sql.delRec("slsiv3", where=[("si3_cono", "=",
-                self.opts["conum"]), ("si3_rtn", "=", self.typs), ("si3_docno",
-                "=", self.docno)])
-            # Commit Deletetion
+                where=[("si1_cono", "=", self.opts["conum"]), ("si1_rtn",
+                "=", self.typs), ("si1_docno", "=", self.docno)])
             self.opts["mf"].dbm.commitDbase()
         self.doActClose()
 
@@ -516,10 +511,6 @@
             return err
         self.df.loadEntry(frt, pag, p+1, data=self.name)
         self.df.loadEntry(frt, pag, p+2, data=self.repno)
-        #if self.chns == "Y":
-        #    self.df.topf[0][6][5] = self.repno
-        #else:
-        #    self.df.topf[0][4][5] = self.repno
 
     def doReadLoadDrs(self):
         self.drsmst = self.sql.getRec(tables="drsmst", where=[("drm_cono", "=",
@@ -529,6 +520,8 @@
             return "Invalid Account"
         if self.drsmst[self.sql.drsmst_col.index("drm_stop")] == "Y":
             return "Account Stopped"
+        if self.drsmst[self.sql.drsmst_col.index("drm_stat")] == "X":
+            return "Account Redundant"
         ref = int(self.drsmst[self.sql.drsmst_col.index("drm_rfterms")] / 30)
         rej = int(self.drsmst[self.sql.drsmst_col.index("drm_rjterms")] / 30)
         bal = Balances(self.opts["mf"], "DRS", self.opts["conum"], self.curdt,

=== modified file 'sls/si3010.py'
--- sls/si3010.py	2019-01-13 16:38:59 +0000
+++ sls/si3010.py	2019-12-15 09:07:58 +0000
@@ -140,7 +140,8 @@
             ("si1_rtn", "=", self.otype),
             ("si1_docno", "between", self.ord1, self.ord2),
             ("si1_invno", "=", ""))
-        recs = self.sql.getRec(tables="slsiv1", where=whr)
+        odr = "si1_docno"
+        recs = self.sql.getRec(tables="slsiv1", where=whr, order=odr)
         if not recs:
             showError(self.opts["mf"].body, "Selection Error",
                 "No Orders Selected")

=== added file 'sls/si6020.py'
--- sls/si6020.py	1970-01-01 00:00:00 +0000
+++ sls/si6020.py	2019-12-17 04:49:15 +0000
@@ -0,0 +1,104 @@
+"""
+SYNOPSIS
+    Sales Document Deletions.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2019 Paul Malherbe.
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program. If not, see <https://www.gnu.org/licenses/>.
+"""
+
+import time
+from TartanClasses import GetCtl, Sql, TartanDialog
+
+class si6020:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["slsiv1", "slsiv2", "slsiv3"],
+            prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        t = time.localtime()
+        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        self.curdt = int(self.sysdtw / 100)
+        return True
+
+    def mainProcess(self):
+        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Outstanding Sales Document Cancellations (%s)" % __name__)
+        r1s = (("All", "A"), ("Orders", "O"), ("Works", "W"), ("Quotes", "Q"))
+        fld = (
+            (("T",0,0,0),("IRB",r1s),0,"Documents","",
+                "A","Y",self.doType,None,None,None),
+            (("T",0,1,0),"IUI",2,"Months Outstanding","",
+                24,"Y",self.doMonths,None,None,None))
+        tnd = ((self.doEnd,"y"), )
+        txt = (self.doExit, )
+        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+            tend=tnd, txit=txt)
+
+    def doType(self, frt, pag, r, c, p, i, w):
+        self.dtyp = w
+
+    def doMonths(self, frt, pag, r, c, p, i, w):
+        months = w
+        yr = int(self.curdt / 100)
+        mt = self.curdt % 100
+        for mth in range(months):
+            mt -= 1
+            if not mt:
+                mt = 12
+                yr -= 1
+        self.startd = (yr * 10000) + mt * 100 + 1
+
+    def doEnd(self):
+        self.df.closeProcess()
+        col = ["si1_invno"]
+        dat = ["cancel"]
+        whr = [("si1_cono", "=", self.opts["conum"])]
+        if self.dtyp == "A":
+            whr.append(("si1_rtn", "in", ("O", "Q", "W")))
+        else:
+            whr.append(("si1_rtn", "=", self.dtyp))
+        whr.append(("si1_date", "<", self.startd))
+        whr.append(("si1_invno", "=", ""))
+        recs = self.sql.getRec(tables="slsiv1", cols=["count(*)"], where=whr,
+            limit=1)
+        if recs[0]:
+            self.sql.updRec("slsiv1", cols=col, data=dat, where=whr)
+            mess = """%s Documents Will be Cancelled.
+
+Would you like to COMMIT these Cancellations?""" % recs[0]
+            self.opts["mf"].dbm.commitDbase(ask=True, mess=mess, default="no")
+        self.opts["mf"].closeLoop()
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2019-12-07 11:09:33 +0000
+++ std/TartanClasses.py	2019-12-30 16:35:12 +0000
@@ -190,7 +190,7 @@
         "choice": os.path.join(imgdir, "question.png"),
         "contacts": os.path.join(imgdir, "users.png"),
         "continue": os.path.join(imgdir, "yes.png"),
-        "create": os.path.join(imgdir, "process.png"),
+        "create": os.path.join(imgdir, "convert.png"),
         "crop/print": os.path.join(imgdir, "print.png"),
         "crsmaint": os.path.join(imgdir, "edit.png"),
         "crsquery": os.path.join(imgdir, "question.png"),
@@ -1182,7 +1182,7 @@
             self.window = MkWindow(icon=self.opts["icon"], modal=True,
                 remov=True).newwin
             ww = int(self.window.winfo_screenwidth())
-            wh = int(self.window.winfo_screenheight())
+            wh = int(self.window.winfo_screenheight() * .9)
             self.window.maxsize(width=ww, height=wh)
             # Style and fonts and colours
             style = ttk.Style()
@@ -3005,14 +3005,13 @@
             if ndat and len(ndat) > 500:
                 # Limit write to a maximum of 500 fields at a time
                 # This particularly applies to sqlite
-                if pbar:
-                    if type(pbar) in (list, tuple):
-                        if pbar[0] == "t":
-                            pbar[1].update()
-                        else:
-                            pbar[1].displayProgress(onum)
+                if type(pbar) in (list, tuple):
+                    if pbar[0] == "t":
+                        pbar[1].update()
                     else:
-                        pbar.displayProgress(onum)
+                        pbar[1].displayProgress(onum)
+                elif pbar:
+                    pbar.displayProgress(onum)
                 if self.dbm.mrecs:
                     self.sqlRec(("Insert into %s (%s) values %s" %
                         (table, nfld, tfmt), ndat))
@@ -3020,14 +3019,13 @@
                 ndat = []
         if ndat:
             # Multiple record inserts remainder
-            if pbar:
-                if type(pbar) in (list, tuple):
-                    if pbar[0] == "t":
-                        pbar[1].update()
-                    else:
-                        pbar[1].displayProgress(onum)
+            if type(pbar) in (list, tuple):
+                if pbar[0] == "t":
+                    pbar[1].update()
                 else:
-                    pbar.displayProgress(onum)
+                    pbar[1].displayProgress(onum)
+            elif pbar:
+                pbar.displayProgress(onum)
             if self.dbm.mrecs:
                 self.sqlRec(("Insert into %s (%s) values %s" %
                     (table, nfld, tfmt), ndat))
@@ -7995,8 +7993,8 @@
             self.frame.grab_set()
         else:
             trans, modal, resiz, decor = None, True, True, True
-            win = MkWindow(trans=trans, title=self.title, modal=modal,
-                resiz=resiz, decor=decor, frame=True)
+            win = MkWindow(tk=True, trans=trans, title=self.title,
+                modal=modal, resiz=resiz, decor=decor, frame=True)
             self.window = win.newwin
             self.frame = win.newfrm
         bbox = MyButtonBox(self.frame)
@@ -17968,7 +17966,7 @@
         elif os.path.exists(os.path.join(docdir, "gnugpl.txt")):
             fle = "gnugpl.txt"
         else:
-            fle = "tarlic.rst"
+            fle = "gnugpl.md"
         docfle = os.path.join(getPrgPath(), "doc", fle)
         if os.path.isfile(docfle):
             dfle = open(docfle, "r")

=== modified file 'std/rneimp.py'
--- std/rneimp.py	2019-08-23 09:04:54 +0000
+++ std/rneimp.py	2019-12-17 06:51:35 +0000
@@ -44,6 +44,7 @@
 import cr4010
 import cr6010
 import cr6020
+import cr6030
 import crc110
 import dr1010
 import dr2010
@@ -62,6 +63,7 @@
 import dr4010
 import dr6010
 import dr6020
+import dr6030
 import drc110
 import drc310
 import drc320
@@ -159,6 +161,7 @@
 import si3080
 import si3090
 import si6010
+import si6020
 import st1010
 import stc110
 import stc210

=== modified file 'std/rnemod.py'
--- std/rnemod.py	2019-08-23 09:04:54 +0000
+++ std/rnemod.py	2019-12-17 06:51:35 +0000
@@ -1,2 +1,2 @@
 # List of Tartan Modules Packaged for a Distribution
-modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'ar6020', 'ar6030', 'arc110', 'arc210', 'arc310', 'arc320', 'cr1010', 'cr2010', 'cr2020', 'cr2030', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr3120', 'cr3130', 'cr3140', 'cr3150', 'cr3160', 'cr3170', 'cr3180', 'cr3190', 'cr3200', 'cr4010', 'cr6010', 'cr6020', 'crc110', 'dr1010', 'dr2010', 'dr2020', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'drc110', 'drc310', 'drc320', 'drc410', 'drc420', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl3100', 'gl3110', 'gl3120', 'gl3130', 'gl3140', 'gl3150', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'glc310', 'glc410', 'glc510', 'ib2010', 'ib2020', 'ib3010', 'ib3020', 'ib3030', 'ib3040', 'ibc110', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy030', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3080', 'si3090', 'si6010', 'st1010', 'stc110', 'stc210', 'stc310', 'tb1020', 'tb1030', 'fc1010', 'rp1010', 'ss1010', 'td1010', 'tdc110', 'tp1010']
\ No newline at end of file
+modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'ar6020', 'ar6030', 'arc110', 'arc210', 'arc310', 'arc320', 'cr1010', 'cr2010', 'cr2020', 'cr2030', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr3120', 'cr3130', 'cr3140', 'cr3150', 'cr3160', 'cr3170', 'cr3180', 'cr3190', 'cr3200', 'cr4010', 'cr6010', 'cr6020', 'cr6030', 'crc110', 'dr1010', 'dr2010', 'dr2020', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'dr6030', 'drc110', 'drc310', 'drc320', 'drc410', 'drc420', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl3100', 'gl3110', 'gl3120', 'gl3130', 'gl3140', 'gl3150', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'glc310', 'glc410', 'glc510', 'ib2010', 'ib2020', 'ib3010', 'ib3020', 'ib3030', 'ib3040', 'ibc110', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy030', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3080', 'si3090', 'si6010', 'si6020', 'st1010', 'stc110', 'stc210', 'stc310', 'tb1020', 'tb1030', 'fc1010', 'rp1010', 'ss1010', 'td1010', 'tdc110', 'tp1010']
\ No newline at end of file

=== modified file 'std/tarimp.py'
--- std/tarimp.py	2019-08-23 09:04:54 +0000
+++ std/tarimp.py	2019-12-16 13:21:17 +0000
@@ -75,6 +75,7 @@
 import cr4010
 import cr6010
 import cr6020
+import cr6030
 import crc110
 import dr1010
 import dr1020
@@ -96,6 +97,7 @@
 import dr6010
 import dr6020
 import dr6030
+import dr6040
 import drc110
 import drc210
 import drc220
@@ -232,6 +234,7 @@
 import si3080
 import si3090
 import si6010
+import si6020
 import sic110
 import st1010
 import st1020

=== modified file 'std/tarmod.py'
--- std/tarmod.py	2019-08-23 09:04:54 +0000
+++ std/tarmod.py	2019-12-15 08:58:09 +0000
@@ -1,2 +1,2 @@
 # List of Tartan Modules Packaged for a Distribution
-modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'arc110', 'arc210', 'arc310', 'arc320', 'bk1010', 'bk1020', 'bk2010', 'bk3010', 'bk3020', 'bk3030', 'bk3040', 'bk3050', 'bk3060', 'bk3070', 'bk3080', 'bk3090', 'bkc110', 'bkc210', 'bkc310', 'bkc410', 'bkc510', 'bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'cr1010', 'cr2010', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr4010', 'cr6010', 'cr6020', 'crc110', 'dr1010', 'dr1020', 'dr2010', 'dr2020', 'dr2030', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'dr6030', 'drc110', 'drc210', 'drc220', 'drc310', 'drc320', 'drc410', 'drc420', 'drc510', 'drc520', 'drc610', 'drc710', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ml1010', 'ml2010', 'ml2020', 'ml3010', 'ml3020', 'ml3030', 'ml3040', 'ml3050', 'ml3060', 'ml3070', 'ml3080', 'ml3090', 'ml3100', 'ml3110', 'ml3120', 'ml6010', 'ml6020', 'ml6030', 'mlc110', 'mlc210', 'mlc310', 'mlc410', 'mlm010', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy020', 'ps2010', 'ps2020', 'ps2030', 'psc110', 'rc1010', 'rc1020', 'rc1030', 'rc2010', 'rc3010', 'rc3020', 'rc3030', 'rc3040', 'rc3050', 'rc3060', 'rc3070', 'rc3080', 'rc3090', 'rc4010', 'rc4020', 'rcc110', 'rcc210', 'rcc220', 'rcc310', 'rcm010', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3070', 'si3080', 'si3090', 'si6010', 'sic110', 'st1010', 'st1020', 'st2010', 'st2020', 'st2030', 'st2040', 'st3010', 'st3020', 'st3030', 'st3040', 'st3050', 'st3060', 'st3070', 'st3080', 'st3090', 'st3100', 'st3110', 'st3120', 'st4010', 'st5010', 'st5020', 'st5030', 'st5040', 'st6010', 'st6020', 'st6030', 'st6040', 'stc110', 'stc210', 'stc220', 'stc310', 'stc320', 'stc410', 'stc420', 'tb1010', 'tb1020', 'tb1030', 'tb1040', 'tb3010', 'bm1010', 'fc1010', 'rp1010', 'rp1020', 'td1010', 'tdc110', 'tp1010', 'sl1010', 'sl2010', 'sl2020', 'sl2030', 'sl3010', 'sl3020', 'sl3030', 'sl3040', 'sl4010', 'wg1010', 'wg2010', 'wg2020', 'wg2030', 'wg3010', 'wg3020', 'wg3030', 'wg3040', 'wg3050', 'wg3060', 'wg3070', 'wg4010', 'wgc110', 'wgc210', 'wgc220', 'wgc310', 'wgc320', 'wgc410', 'wgc420', 'wgc610']
\ No newline at end of file
+modlst = ['ar1010', 'ar2010', 'ar2020', 'ar2030', 'ar3010', 'ar3020', 'ar3030', 'ar3040', 'ar3050', 'ar4010', 'ar6010', 'arc110', 'arc210', 'arc310', 'arc320', 'bk1010', 'bk1020', 'bk2010', 'bk3010', 'bk3020', 'bk3030', 'bk3040', 'bk3050', 'bk3060', 'bk3070', 'bk3080', 'bk3090', 'bkc110', 'bkc210', 'bkc310', 'bkc410', 'bkc510', 'bc1010', 'bc1020', 'bc1030', 'bc1040', 'bc2010', 'bc2020', 'bc2030', 'bc2040', 'bc2050', 'bc2060', 'bc2070', 'bc3010', 'bc3020', 'bc3030', 'bc3040', 'bc3050', 'bc3060', 'bc3070', 'bc3080', 'bc3090', 'bc3100', 'bc3110', 'bc6010', 'bc6020', 'bc6030', 'bcc110', 'bcc210', 'cr1010', 'cr2010', 'cr3010', 'cr3020', 'cr3030', 'cr3040', 'cr3050', 'cr3060', 'cr3070', 'cr3080', 'cr3090', 'cr3100', 'cr3110', 'cr4010', 'cr6010', 'cr6020', 'crc110', 'dr1010', 'dr1020', 'dr2010', 'dr2020', 'dr2030', 'dr3010', 'dr3020', 'dr3030', 'dr3040', 'dr3050', 'dr3060', 'dr3080', 'dr3090', 'dr3100', 'dr3110', 'dr3120', 'dr4010', 'dr6010', 'dr6020', 'dr6030', 'drc110', 'drc210', 'drc220', 'drc310', 'drc320', 'drc410', 'drc420', 'drc510', 'drc520', 'drc610', 'drc710', 'gl1010', 'gl1020', 'gl1030', 'gl1040', 'gl1050', 'gl1060', 'gl2010', 'gl2020', 'gl2030', 'gl2040', 'gl2050', 'gl3010', 'gl3020', 'gl3030', 'gl3040', 'gl3050', 'gl3060', 'gl3070', 'gl3080', 'gl3090', 'gl4010', 'gl4020', 'gl6010', 'gl6020', 'gl6030', 'gl6040', 'gl6050', 'gl6060', 'gl6070', 'glc110', 'glc210', 'ln1010', 'ln2010', 'ln2020', 'ln2030', 'ln3010', 'ln3020', 'ln3030', 'ln3040', 'ln3050', 'ln4010', 'ln6010', 'lnc110', 'ml1010', 'ml2010', 'ml2020', 'ml3010', 'ml3020', 'ml3030', 'ml3040', 'ml3050', 'ml3060', 'ml3070', 'ml3080', 'ml3090', 'ml3100', 'ml3110', 'ml3120', 'ml6010', 'ml6020', 'ml6030', 'mlc110', 'mlc210', 'mlc310', 'mlc410', 'mlm010', 'ms0000', 'ms1010', 'ms1020', 'ms1030', 'ms1040', 'ms3010', 'ms3020', 'ms3030', 'msc000', 'msc110', 'msy010', 'msy020', 'ps2010', 'ps2020', 'ps2030', 'psc110', 'rc1010', 'rc1020', 'rc1030', 'rc2010', 'rc3010', 'rc3020', 'rc3030', 'rc3040', 'rc3050', 'rc3060', 'rc3070', 'rc3080', 'rc3090', 'rc4010', 'rc4020', 'rcc110', 'rcc210', 'rcc220', 'rcc310', 'rcm010', 'rt1010', 'rt2010', 'rt3010', 'rt3020', 'rt3030', 'rt3040', 'rt3050', 'rt4010', 'rt6010', 'rtc110', 'rtc210', 'rtm010', 'si2010', 'si3010', 'si3020', 'si3030', 'si3040', 'si3050', 'si3060', 'si3070', 'si3080', 'si3090', 'si6010', 'sic110', 'st1010', 'st1020', 'st2010', 'st2020', 'st2030', 'st2040', 'st3010', 'st3020', 'st3030', 'st3040', 'st3050', 'st3060', 'st3070', 'st3080', 'st3090', 'st3100', 'st3110', 'st3120', 'st4010', 'st5010', 'st5020', 'st5030', 'st5040', 'st6010', 'st6020', 'st6030', 'st6040', 'stc110', 'stc210', 'stc220', 'stc310', 'stc320', 'stc410', 'stc420', 'tb1010', 'tb1020', 'tb1030', 'tb1040', 'tb3010', 'bm1010', 'fc1010', 'rp1010', 'rp1020', 'td1010', 'tdc110', 'tp1010', 'sl1010', 'sl2010', 'sl2020', 'sl2030', 'sl3010', 'sl3020', 'sl3030', 'sl3040', 'sl4010', 'wg1010', 'wg2010', 'wg2020', 'wg2030', 'wg3010', 'wg3020', 'wg3030', 'wg3040', 'wg3050', 'wg3060', 'wg3070', 'wg4010', 'wgc110', 'wgc210', 'wgc220', 'wgc310', 'wgc320', 'wgc410', 'wgc420', 'wgc610', 'cr6030', 'dr6040', 'si6020']

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2019-12-07 11:09:33 +0000
+++ std/tartanFunctions.py	2019-12-19 08:18:04 +0000
@@ -391,9 +391,11 @@
         try:
             if scrn.winfo_toplevel().state() == "withdrawn":
                 scrn.winfo_toplevel().deiconify()
-            ScrollText(scrn=scrn, title=title, mess=mess, select=False)
+            ScrollText(scrn=scrn, title=title, mess=mess)
         except:
             pass
+    else:
+        print(mess)
 
 def makeArray(col, row, dth, typ="I"):
     """
@@ -2283,11 +2285,10 @@
         mkp = st2[0]
     return mkp
 
-def runModule(name, **popt):
-    mod = __import__(name, globals(), locals(), [], 0)
-    com = name.split(".")[-1]
-    mod = getattr(mod, com)
-    mod(**popt)
+def runModule(mod, **popt):
+    com = __import__(mod, globals(), locals(), [], 0)
+    exe = getattr(com, mod)
+    exe(**popt)
 
 def getFileName(path, wrkdir=None, check=False):
     import os, sys

=== modified file 'std/tartanWork.py'
--- std/tartanWork.py	2019-12-07 11:09:33 +0000
+++ std/tartanWork.py	2019-12-16 21:16:13 +0000
@@ -1546,7 +1546,8 @@
             [24, 'crm_bname', 'NA', 20.0, 'Bank Name', 'Bank-Name'],
             [25, 'crm_bibt', 'UI', 8.0, 'Bank Branch', 'Bank-IBT'],
             [26, 'crm_bacc', 'NA', 16.0, 'Bank Account', 'Bank-Account-Num'],
-            [27, 'crm_glac', 'UI', 7.0, 'G/L Account Number', 'GL-Acno']],
+            [27, 'crm_glac', 'UI', 7.0, 'G/L Account Number', 'GL-Acno'],
+            [28, 'crm_stat', 'UA', 1.0, 'Account Status', 'S']],
         "idx": [
             ['Creditors Masterfile', 1, 'U', 'crm_cono', 'crm_acno']]},
     "crstrn": {
@@ -1934,7 +1935,7 @@
             [17, 'drm_registered', 'd1', 10.0, 'Date Registered',
                 'Date-Regst'],
             [18, 'drm_vatno', 'NA', 10.0, 'VAT Number', 'VAT-Number'],
-            [19, 'drm_delivery', 'NA', 7.0, 'Delivery Address', 'Del-Add'],
+            [19, 'drm_delivery', 'Na', 7.0, 'Delivery Address', 'Del-Add'],
             [20, 'drm_rep', 'Na', 3.0, 'Rep Code', 'Rep'],
             [21, 'drm_bus_activity', 'UA', 3.0, 'Business Activity', 'BsA'],
             [22, 'drm_bus_type', 'UA', 3.0, 'Business Type', 'BsT'],
@@ -1947,7 +1948,8 @@
             [29, 'drm_stop', 'UA', 1.0, 'Stop Indicator', 'S'],
             [30, 'drm_invmes', 'UI', 3.0, 'Invoice Message', 'IMs'],
             [31, 'drm_stames', 'UI', 3.0, 'Statement Message', 'SMs'],
-            [32, 'drm_rating', 'UA', 1.0, 'Credit Rating', 'Rated']],
+            [32, 'drm_rating', 'UA', 1.0, 'Credit Rating', 'R'],
+            [33, 'drm_stat', 'UA', 1.0, 'Account Status', 'S']],
         "idx": [
             ['Debtors Masterfile', 1, 'U', 'drm_cono', 'drm_chain',
                 'drm_acno']]},
@@ -3909,8 +3911,8 @@
         ["PYYN","gl_fm","gl1040",3,"Detail Records"],
         ["PYNN","gl_fm","gl1050",3,"Stream Records"],
         ["PYNN","gl_fm","gl1060",3,"Bank Import Control"],
-        ["PYNN","gl_dc","gl2010",2,"Opening Balances",0],
-        ["PYYN","gl_dc","gl2020",2,"Budgets",0],
+        ["PYNN","gl_dc","gl2010",2,"Opening Balances"],
+        ["PYYN","gl_dc","gl2020",2,"Budgets"],
         ["PYYY","gl_dc","gl2030",2,"Sales",1],
         ["PYYY","gl_dc","gl2030",2,"Payments",2],
         ["PYYY","gl_dc","gl2030",2,"Petty Cash",3],
@@ -3965,6 +3967,7 @@
         ["PYNN","cr_rp","cr3110",1,"Purchases History"],
         ["PYNN","cr_tb","cr6010",5,"Change Account Numbers"],
         ["PYNN","cr_tb","cr6020",3,"Transaction Reallocations"],
+        ["PYNY","cr_tb","cr6030",5,"Account Redundancy"],
         ["PYNY","mm_cr","cr4010",0,"Interrogation"]],
 
     # Debtor"s Ledger Routines
@@ -4006,7 +4009,8 @@
         ["PYNN","dr_rp","dr3120",1,"Interest Chargeable"],
         ["PYNN","dr_tb","dr6010",5,"Change Account Numbers"],
         ["PYNN","dr_tb","dr6020",3,"Transaction Reallocations"],
-        ["PYNN","dr_tb","dr6030",3,"Populate Credit Ratings"],
+        ["PYNY","dr_tb","dr6030",5,"Account Redundancy"],
+        ["PYNN","dr_tb","dr6040",3,"Populate Credit Ratings"],
         ["PYNY","mm_dr","dr4010",0,"Interrogation"]],
 
     # Stores Ledger Routines
@@ -4023,14 +4027,14 @@
         ["PYNN","st_fm","stc410",3,"Locations"],
         ["PYNY","st_fm","st1010",3,"Masterfile Records"],
         ["PYNN","st_fm","st1020",3,"Selling Prices"],
-        ["PYYY","st_dc","st2010",2,"Purchase Orders",0],
-        ["PYYY","st_dc","st2020",2,"Goods Received Notes",0],
-        ["PYYY","st_dc","st2030",2,"Goods Issued Notes",0],
-        ["PYYY","st_dc","st2040",2,"Location Transfers",0],
+        ["PYYY","st_dc","st2010",2,"Purchase Orders"],
+        ["PYYY","st_dc","st2020",2,"Goods Received Notes"],
+        ["PYYY","st_dc","st2030",2,"Goods Issued Notes"],
+        ["PYYY","st_dc","st2040",2,"Location Transfers"],
         ["PYYN","st_st","st5010",1,"Stock Take Report"],
-        ["PYNN","st_st","st5020",2,"Stock Take Returns",0],
+        ["PYNN","st_st","st5020",2,"Stock Take Returns"],
         ["PYYN","st_st","st5030",2,"Stock Take Variance Report"],
-        ["PYYY","st_st","st5040",2,"Stock Take Merge",0],
+        ["PYYY","st_st","st5040",2,"Stock Take Merge"],
         ["PYNN","st_rp","stc220",1,"Units Of Issue Listing"],
         ["PYNN","st_rp","stc320",1,"Product Groups Listing"],
         ["PYNN","st_rp","stc420",1,"Locations Listing"],
@@ -4047,9 +4051,9 @@
         ["PYNN","st_rp","st3110",1,"Item Labels"],
         ["PYNN","st_rp","st3120",1,"Stock to Order"],
         ["PYNN","st_tb","st6010",5,"Change Product Codes"],
-        ["PYYY","st_tb","st6020",5,"Revalue Stock Records",0],
-        ["PYYY","st_tb","st6030",5,"Delete Purchase Orders",0],
-        ["PYNY","st_tb","st6040",5,"Stock Redundancy",0],
+        ["PYYY","st_tb","st6020",5,"Revalue Stock Records"],
+        ["PYNY","st_tb","st6030",5,"Stock Redundancy"],
+        ["PYYY","st_tb","st6040",5,"Cancel Purchase Orders"],
         ["PYYY","mm_st","st4010",0,"Interrogation"]],
 
     # Sales Invoicing Routines
@@ -4057,8 +4061,8 @@
         ["CM","mm_si","si_rp","Reporting"],
         ["CM","mm_si","si_tb","Toolbox"]],
     "simod": [
-        ["PYYY","mm_si","si2010",2,"Sales Documents",0,"si_rp"],
-        ["PYNY","mm_si","sic110",5,"Control Record",0,"si_rp"],
+        ["PYYY","mm_si","si2010",2,"Sales Documents",None,"si_rp"],
+        ["PYNY","mm_si","sic110",5,"Control Record",None,"si_rp"],
         ["PYNN","si_rp","si3010",1,"Oustanding Documents"],
         ["PYYN","si_rp","si3020",1,"Sales By Product"],
         ["PYYN","si_rp","si3030",1,"Period Sales By Product"],
@@ -4068,13 +4072,14 @@
         ["PYNN","si_rp","si3070",1,"Salesman's Sales History"],
         ["PYNN","si_rp","si3080",1,"Reprint Sales Documents"],
         ["PYYN","si_rp","si3090",1,"Cancelled Sales Documents"],
-        ["PYNN","si_tb","si6010",5,"Change Customer Order Number"]],
+        ["PYNN","si_tb","si6010",5,"Change Customer Order Number"],
+        ["PYNN","si_tb","si6020",5,"Cancel Outstanding Documents"]],
 
     # Point of Sale Routines
     "psmen": [],
     "psmod": [
         ["PYNY","mm_ps","psc110",5,"Terminal Records"],
-        ["PYLY","mm_ps","ps2010",2,"Data Capture",0],
+        ["PYLY","mm_ps","ps2010",2,"Data Capture"],
         ["PYLY","mm_ps","ps2020",1,"Cash Declaration"],
         ["PYYN","mm_ps","ps2030",5,"Cash Reconciliation"]],
 
@@ -4093,7 +4098,7 @@
         ["PYYY","ar_dc","ar2020",2,"Payments",1],
         ["PYYY","ar_dc","ar2020",2,"Receipts",2],
         ["PYYY","ar_dc","ar2020",2,"Journals",3],
-        ["PYYY","ar_dc","ar2030",2,"Depreciation",0],
+        ["PYYY","ar_dc","ar2030",2,"Depreciation"],
         ["PYNN","ar_rp","arc320",1,"Groups Listing"],
         ["PYNN","ar_rp","ar3010",1,"Batch Error Listing"],
         ["PYYN","ar_rp","ar3020",1,"Transaction Audit Trail"],
@@ -4140,8 +4145,8 @@
         ["PYYY","ln_dc","ln2010",2,"Receipts",2],
         ["PYYY","ln_dc","ln2010",2,"Journals",3],
         ["PYYY","ln_dc","ln2010",2,"Interest Adjustments",4],
-        ["PYYY","ln_dc","ln2020",2,"Raise Interest",0],
-        ["PYYY","ln_dc","ln2030",2,"Rate Change",0],
+        ["PYYY","ln_dc","ln2020",2,"Raise Interest"],
+        ["PYYY","ln_dc","ln2030",2,"Rate Change"],
         ["PYNN","ln_rp","ln3010",1,"Batch Error Listing"],
         ["PYYN","ln_rp","ln3020",1,"Transaction Audit Trail"],
         ["PYNN","ln_rp","ln3030",1,"Balances Listing"],
@@ -4230,8 +4235,8 @@
         ["PNNN","rc_rp","rcc220",1,"Statement Messages"],
         ["PYNY","rc_qy","rc4010",0,"Owners Interrogation"],
         ["PYNY","rc_qy","rc4020",0,"Tenants Interrogation"],
-        ["PYNY","mm_rc","rc2010",2,"Data Capture",0],
-        ["PYNY","mm_rc","rcm010",4,"Month End Routine",0]],
+        ["PYNY","mm_rc","rc2010",2,"Data Capture"],
+        ["PYNY","mm_rc","rcm010",4,"Month End Routine"]],
 
     # Salaries & Wages Routines
     "wgmen": [
@@ -4267,9 +4272,9 @@
         ["CM","mm_sl","sl_rp","Reporting"]],
     "slmod": [
         ["PYNY","sl_fm","sl1010",3,"Loans Masterfile"],
-        ["PYYY","sl_dc","sl2010",2,"New Loans",0],
-        ["PYYY","sl_dc","sl2020",2,"Movements",0],
-        ["PYYY","sl_dc","sl2030",2,"Raise Interest",0],
+        ["PYYY","sl_dc","sl2010",2,"New Loans"],
+        ["PYYY","sl_dc","sl2020",2,"Movements"],
+        ["PYYY","sl_dc","sl2030",2,"Raise Interest"],
         ["PYNN","sl_rp","sl3010",1,"Batch Error Listing"],
         ["PYNN","sl_rp","sl3020",1,"Transaction Audit Trail"],
         ["PYNN","sl_rp","sl3030",1,"Master Listing"],

=== modified file 'std/tartanWork_rne.py'
--- std/tartanWork_rne.py	2019-04-30 09:07:25 +0000
+++ std/tartanWork_rne.py	2019-12-17 05:04:47 +0000
@@ -488,7 +488,8 @@
             [24, "crm_bname", "NA", 20.0, "Bank Name", "Bank-Name"],
             [25, "crm_bibt", "UI", 8.0, "Bank Branch", "Bank-IBT"],
             [26, "crm_bacc", "NA", 16.0, "Bank Account", "Bank-Account-Num"],
-            [27, "crm_glac", "UI", 7.0, "G/L Account Number", "GL-Acno"]],
+            [27, "crm_glac", "UI", 7.0, "G/L Account Number", "GL-Acno"],
+            [28, 'crm_stat', 'UA', 1.0, 'Account Status', 'S']],
         "idx": [
             ["Creditors Masterfile", 1, "U", "crm_cono", "crm_acno"]]},
     "crspay": {
@@ -962,7 +963,8 @@
             [29, "drm_stop", "UA", 1.0, "Stop Indicator", "S"],
             [30, "drm_invmes", "UI", 3.0, "Invoice Message", "IMs"],
             [31, "drm_stames", "UI", 3.0, "Statement Message", "SMs"],
-            [32, "drm_rating", "UA", 1.0, "Credit Rating", "Rated"]],
+            [32, "drm_rating", "UA", 1.0, "Credit Rating", "Rated"],
+            [33, 'drm_stat', 'UA', 1.0, 'Account Status', 'S']],
         "idx": [
             ["Debtors Masterfile",  1,  "U",  "drm_cono",  "drm_chain",
                 "drm_acno"]]},
@@ -2187,6 +2189,7 @@
         ["PYNN","cr_rp","cr3200",1,"Payments by Branch"],
         ["PYNN","cr_tb","cr6010",4,"Change Account Numbers"],
         ["PYNN","cr_tb","cr6020",5,"Transaction Reallocations"],
+        ["PYNY","cr_tb","cr6030",5,"Account Redundancy"],
         ["PYNY","mm_cr","cr4010",0,"Interrogation"]],
 
 # Asset's Register
@@ -2304,6 +2307,7 @@
         ["PYNN","dr_rp","dr3120",1,"Interest Chargeable"],
         ["PYNN","dr_tb","dr6010",4,"Change Account Numbers"],
         ["PYNN","dr_tb","dr6020",5,"Transaction Reallocations"],
+        ["PYNY","dr_tb","dr6030",5,"Account Redundancy"],
         ["PYNY","mm_dr","dr4010",0,"Interrogation"]],
 
 # Stores's Ledger Routines

=== modified file 'str/st1010.py'
--- str/st1010.py	2019-07-03 13:49:08 +0000
+++ str/st1010.py	2019-12-13 10:13:44 +0000
@@ -111,12 +111,15 @@
                 ("drm_name", "", 0, "Name", "Y"),
                 ("drm_add1", "", 0, "Address Line 1"))}
         if self.chains == "Y":
-            drm["where"] = [("drm_cono", "=", self.opts["conum"])]
+            drm["where"] = [
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")]
             drm["whera"] = [["T", "drm_chain", 10]]
         else:
             drm["where"] = [
-            ("drm_cono", "=", self.opts["conum"]),
-            ("drm_chain", "=", 0)]
+                ("drm_cono", "=", self.opts["conum"]),
+                ("drm_chain", "=", 0),
+                ("drm_stat", "<>", "X")]
         vtm = {
             "stype": "R",
             "tables": ("ctlvmf",),
@@ -425,7 +428,8 @@
         if dat:
             acc = self.sql.getRec(tables="drsmst", cols=["drm_name"],
                 where=[("drm_cono", "=", self.opts["conum"]), ("drm_chain",
-                "=", self.chain), ("drm_acno", "=", dat)], limit=1)
+                "=", self.chain), ("drm_acno", "=", dat), ("drm_stat", "<>",
+                "X")], limit=1)
             return acc
 
     def getGenDes(self, dat):

=== modified file 'str/st2010.py'
--- str/st2010.py	2019-07-03 13:49:08 +0000
+++ str/st2010.py	2019-12-13 12:19:39 +0000
@@ -160,7 +160,9 @@
             "cols": [
                 ("crm_acno", "", 0, "Acc-Num"),
                 ("crm_name", "", 0, "Name","Y")],
-            "where": [("crm_cono", "=", self.opts["conum"])],
+            "where": [
+                ("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")],
             "index": 0}
         odr = {
             "stype": "R",
@@ -338,6 +340,8 @@
             "=", self.opts["conum"]), ("crm_acno", "=", w)], limit=1)
         if not self.crsmst:
             return "Invalid Account"
+        if self.crsmst[self.sql.crsmst_col.index("crm_stat")] == "X":
+            return "Invalid Account, Redundant"
         self.acno = w
         self.name = self.crsmst[self.sql.crsmst_col.index("crm_name")]
         self.df.loadEntry(frt, pag, p+1, data=self.name)

=== modified file 'str/st6030.py'
--- str/st6030.py	2019-01-23 09:10:12 +0000
+++ str/st6030.py	2019-12-16 16:23:25 +0000
@@ -1,6 +1,7 @@
 """
 SYNOPSIS
-    Purchase Order Deletions.
+    Stores Ledger Change Type to Redundant for all Items having had No
+    Movement for a Period of Time and with a Zero Quantity.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -25,124 +26,196 @@
 """
 
 import time
-from TartanClasses import GetCtl, Sql, TartanDialog
+from TartanClasses import GetCtl, ProgressBar, Sql, TartanDialog
+from tartanFunctions import showError
 
 class st6030:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            self.mainProcess()
+            self.dataHeader()
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["crsmst", "strloc", "strpom",
-            "strpot"], prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["strmf1", "strtrn", "chglog"],
+            prog=__name__)
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
         strctl = gc.getCtl("strctl", self.opts["conum"])
         if not strctl:
             return
-        self.locs = strctl["cts_locs"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        self.curdt = int(self.sysdtw / 100)
         return True
 
-    def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Purchase Order Deletions (%s)" % __name__)
-        loc = {
-            "stype": "R",
-            "tables": ("strloc",),
-            "cols": (
-                ("srl_loc", "", 0, "L"),
-                ("srl_desc", "", 0, "Description", "Y")),
-            "where": [("srl_cono", "=", self.opts["conum"])]}
-        orm = {
-            "stype": "R",
-            "tables": ("strpom",),
-            "cols": (
-                ("pom_ordno", "", 0, "OrderNo"),
-                ("pom_acno", "", 0, "Crs-Num"),
-                ("pom_date", "", 0, "Order-Date")),
-            "where": [
-                ("pom_cono", "=", self.opts["conum"]),
-                ("pom_delno", "=", "")],
-            "whera": [("T", "pom_loc", 0)],
-            "order": "pom_ordno"}
-        if self.locs == "N":
-            self.locw = "1"
-            fld = [
-                (("T",0,0,0),"OUA",1,"Location")]
-        else:
-            fld = [
-                (("T",0,0,0),"IUA",1,"Location","",
-                    "1","Y",self.doLoc,loc,None,None)]
-        fld.extend([
-            (("T",0,1,0),"Id1",10,"Orders Older Than","",
-                "","Y",self.doOld,orm,None,None),
-            (("T",0,2,0),"IUI",9,"From Order Number","",
-                "","Y",self.doOrd,orm,None,None),
-            (("T",0,3,0),"IUI",9,"To   Order Number","",
-                "","Y",self.doOrd,orm,None,None)])
-        tnd = ((self.doEnd,"y"), )
-        txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt)
-        if self.locs == "N":
-            self.df.loadEntry("T", 0, 0, data=self.locw)
-
-    def doLoc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="strloc", cols=["srl_desc"],
-            where=[("srl_cono", "=", self.opts["conum"]),
-            ("srl_loc", "=", w)], limit=1)
-        if not acc:
-            return "Invalid Location"
-        self.locw = w
-
-    def doOld(self, frt, pag, r, c, p, i, w):
-        self.oldr = w
-        if self.oldr:
-            self.df.loadEntry(frt, pag, p+1, data="")
-            self.df.loadEntry(frt, pag, p+2, data="")
-            return "nd"
-
-    def doOrd(self, frt, pag, r, c, p, i, w):
-        if p == 2 and w < self.ord1:
-            return "Invalid, Last Order < First Order"
-        acc = self.sql.getRec(tables="strpom", where=[("pom_cono", "=",
-            self.opts["conum"]), ("pom_ordno", "=", w), ("pom_loc", "=",
-            self.locw), ("pom_delno", "=", "")], limit=1)
-        if not acc:
-            return "Invalid Order Number"
-        if p == 1:
-            self.ord1 = w
-        else:
-            self.ord2 = w
-
-    def doEnd(self):
-        self.df.closeProcess()
-        if self.oldr:
-            whr = [
-                ("pom_cono", "=", self.opts["conum"]),
-                ("pom_loc", "=", self.locw),
-                ("pom_date", "<", self.oldr),
-                ("pom_delno", "<>", "cancel"),
-                ("pom_deldt", "=", 0)]
-        else:
-            whr = [
-                ("pom_cono", "=", self.opts["conum"]),
-                ("pom_loc", "=", self.locw),
-                ("pom_ordno", ">=", self.ord1),
-                ("pom_ordno", "<=", self.ord2),
-                ("pom_delno", "<>", "cancel"),
-                ("pom_deldt", "=", 0)]
-        self.sql.updRec("strpom", cols=["pom_delno"], data=["cancel"],
-            where=whr)
-        self.opts["mf"].dbm.commitDbase(ask=True)
-        self.opts["mf"].closeLoop()
-
-    def doExit(self):
+    def dataHeader(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Stores Ledger Redundant Items (%s)" % __name__)
+        grp = {
+            "stype": "R",
+            "tables": ("strgrp",),
+            "cols": (
+                ("gpm_group", "", 0, "Grp"),
+                ("gpm_desc", "", 0, "Description", "Y")),
+            "where": [("gpm_cono", "=", self.opts["conum"])]}
+        self.stm = {
+            "stype": "R",
+            "tables": ("strmf1",),
+            "cols": (
+                ("st1_code", "", 0, "Product Code"),
+                ("st1_desc", "", 0, "Description", "Y")),
+            "where": [],
+            "whera": [["T", "st1_group", 0, 0]],
+            "index": 0}
+        fld = [
+            (("T",0,0,0),"INA",3,"Group","Product Group",
+                "","Y",self.doGroup,grp,None,("notblank",)),
+            (("T",0,1,0),"INA",20,"Code","Product Code",
+                "","N",self.doCode,self.stm,None,("notblank",)),
+            (("T",0,2,0),"ONA",30,"Description")]
+        but = (
+            ("Generate",None,self.doGenerate,1,None,(("T",0,1),("T",0,2)),
+                "Mark zero items, which have been inactive, as redundant"),
+            ("Create",None,self.doCreate,1,None,(("T",0,1),("T",0,2)),
+                "Mark a zero item as redundant"),
+            ("Restore",None,self.doRestore,1,None,(("T",0,1),("T",0,2)),
+                "Mark a redundant item as normal"),
+            ("Exit",None,self.exitPage,1,None,(("T",0,1),("T",0,2))))
+        tnd = ((self.endPage, "y"),)
+        txt = (self.exitPage,)
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            butt=but, tend=tnd, txit=txt, focus=False)
+        self.df.setWidget(self.df.B0, state="normal")
+        self.df.setWidget(self.df.B1, state="normal")
+        self.df.setWidget(self.df.B2, state="normal")
+        self.df.setWidget(self.df.B3, state="normal")
+
+    def doGenerate(self):
+        tit = "Generate Redundant Items"
+        fld = (
+            (("T",0,0,0),"IUI",3,"Months Inactive","",
+                24,"Y",self.doMonths,None,None,("efld",)),)
+        state = self.df.disableButtonsTags()
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        self.mt = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doMthEnd, "y"),), txit=(self.doMthExit,))
+        self.mt.mstFrame.wait_window()
+        self.df.setWidget(self.df.mstFrame, state="show")
+        self.df.enableButtonsTags(state=state)
+
+    def doMonths(self, frt, pag, r, c, p, i, w):
+        months = w
+        yr = int(self.curdt / 100)
+        mt = self.curdt % 100
+        for mth in range(months):
+            mt -= 1
+            if not mt:
+                mt = 12
+                yr -= 1
+        self.startp = (yr * 100) + mt
+
+    def doMthEnd(self):
+        self.mt.closeProcess()
+        whr = [
+            ("st1_cono", "=", self.opts["conum"]),
+            ("st1_type", "=", "N"),
+            ("stt_cono=st1_cono",),
+            ("stt_group=st1_group",),
+            ("stt_code=st1_code",)]
+        accs = self.sql.getRec(tables=["strmf1", "strtrn"], cols=["st1_group",
+            "st1_code", "max(stt_curdt)", "sum(stt_qty)", "sum(stt_cost)"],
+            where=whr, order="st1_group, st1_code")
+        chgs = []
+        for acc in accs:
+            if acc[2] < self.startp and not acc[3] and not acc[4]:
+                chgs.append(acc[:2])
+        if not chgs:
+            showError(self.opts["mf"].body, "Processing Error",
+                "No Redundant Records")
+        else:
+            self.cnt = 0
+            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
+            p = ProgressBar(self.opts["mf"].body, mxs=len(chgs),
+                typ="Redundant Items")
+            for num, rec in enumerate(chgs):
+                p.displayProgress(num)
+                self.sql.updRec("strmf1", cols=["st1_type"], data=["X"],
+                    where=[("st1_cono", "=", self.opts["conum"]),
+                    ("st1_group", "=", rec[0]), ("st1_code", "=", rec[1])])
+                key = "%03i%-3s%-20s" % (self.opts["conum"], rec[0], rec[1])
+                self.sql.insRec("chglog", data=["strmf1", "U", key, "st1_type",
+                dte, self.opts["capnm"], "N", "X", 0])
+            p.closeProgress()
+            mess = """%s Items Will be Marked as Redundant.
+
+Would you like to COMMIT these Changes?""" % len(chgs)
+            self.opts["mf"].dbm.commitDbase(ask=True, mess=mess)
+
+    def doMthExit(self):
+        self.mt.closeProcess()
+
+    def doCreate(self):
+        self.flag = "C"
+        self.stm["where"] = [
+                ("st1_cono", "=", self.opts["conum"]),
+                ("st1_type", "<>", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doRestore(self):
+        self.flag = "R"
+        self.stm["where"] = [
+                ("st1_cono", "=", self.opts["conum"]),
+                ("st1_type", "=", "X")]
+        self.df.focusField("T", 0, 1)
+
+    def doGroup(self, frt, pag, r, c, p, i, w):
+        if self.flag == "C":
+            chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
+                "=", self.opts["conum"]), ("st1_group", "=", w),
+                ("st1_type", "<>", "X")], limit=1)
+        else:
+            chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
+                "=", self.opts["conum"]), ("st1_group", "=", w),
+                ("st1_type", "=", "X")], limit=1)
+        if not chk:
+            return "Invalid Group"
+        self.grp = w
+
+    def doCode(self, frt, pag, r, c, p, i, w):
+        if self.flag == "C":
+            typ = "<>"
+        else:
+            typ = "="
+        chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
+            "=", self.opts["conum"]), ("st1_group", "=", self.grp),
+            ("st1_code", "=", w), ("st1_type", typ, "X")], limit=1)
+        if not chk:
+            return "Invalid Code"
+        if self.flag == "C":
+            qty = self.sql.getRec(tables="strtrn", cols=["sum(stt_qty)"],
+                where=[("stt_cono", "=", self.opts["conum"]),
+                ("stt_group", "=", self.grp), ("stt_code", "=", w)],
+                limit=1)
+            if qty[0]:
+                return "Balance Exists"
+        self.cod = w
+        self.df.loadEntry(frt, pag, p+1, data=chk[4])
+
+    def endPage(self):
+        if self.flag == "C":
+            typ = "X"
+        else:
+            typ = "N"
+        self.sql.updRec("strmf1", cols=["st1_type"], data=[typ],
+            where=[("st1_cono", "=", self.opts["conum"]),
+            ("st1_group", "=", self.grp), ("st1_code", "=", self.cod)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.clearFrame("T", 0)
+        self.flag = ""
+
+    def exitPage(self):
         self.df.closeProcess()
         self.opts["mf"].closeLoop()
 

=== modified file 'str/st6040.py'
--- str/st6040.py	2019-12-07 11:09:33 +0000
+++ str/st6040.py	2019-12-16 16:23:31 +0000
@@ -1,7 +1,6 @@
 """
 SYNOPSIS
-    Stores Ledger Change Type to Redundant for all Items having had No
-    Movement for a Period of Time and with a Zero Quantity.
+    Purchase Order Cancellations.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -26,196 +25,124 @@
 """
 
 import time
-from TartanClasses import GetCtl, ProgressBar, Sql, TartanDialog
-from tartanFunctions import showError
+from TartanClasses import GetCtl, Sql, TartanDialog
 
 class st6040:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            self.dataHeader()
+            self.mainProcess()
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["strmf1", "strtrn", "chglog"],
-            prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["crsmst", "strloc", "strpom",
+            "strpot"], prog=__name__)
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
         strctl = gc.getCtl("strctl", self.opts["conum"])
         if not strctl:
             return
+        self.locs = strctl["cts_locs"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = int(self.sysdtw / 100)
         return True
 
-    def dataHeader(self):
-        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Stores Ledger Redundant Items (%s)" % __name__)
-        grp = {
-            "stype": "R",
-            "tables": ("strgrp",),
-            "cols": (
-                ("gpm_group", "", 0, "Grp"),
-                ("gpm_desc", "", 0, "Description", "Y")),
-            "where": [("gpm_cono", "=", self.opts["conum"])]}
-        self.stm = {
-            "stype": "R",
-            "tables": ("strmf1",),
-            "cols": (
-                ("st1_code", "", 0, "Product Code"),
-                ("st1_desc", "", 0, "Description", "Y")),
-            "where": [],
-            "whera": [["T", "st1_group", 0, 0]],
-            "index": 0}
-        fld = [
-            (("T",0,0,0),"INA",3,"Group","Product Group",
-                "","Y",self.doGroup,grp,None,("notblank",)),
-            (("T",0,1,0),"INA",20,"Code","Product Code",
-                "","N",self.doCode,self.stm,None,("notblank",)),
-            (("T",0,2,0),"ONA",30,"Description")]
-        but = (
-            ("Generate",None,self.doGenerate,1,None,(("T",0,1),("T",0,2)),
-                "Mark zero items, which have been inactive, as redundant"),
-            ("Create",None,self.doCreate,1,None,(("T",0,1),("T",0,2)),
-                "Mark a zero item as redundant"),
-            ("Restore",None,self.doRestore,1,None,(("T",0,1),("T",0,2)),
-                "Mark a redundant item as normal"),
-            ("Exit",None,self.exitPage,1,None,(("T",0,1),("T",0,2))))
-        tnd = ((self.endPage, "y"),)
-        txt = (self.exitPage,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
-            butt=but, tend=tnd, txit=txt, focus=False)
-        self.df.setWidget(self.df.B0, state="normal")
-        self.df.setWidget(self.df.B1, state="normal")
-        self.df.setWidget(self.df.B2, state="normal")
-        self.df.setWidget(self.df.B3, state="normal")
-
-    def doGenerate(self):
-        tit = "Generate Redundant Items"
-        fld = (
-            (("T",0,0,0),"IUI",3,"Months","Inactive Months",
-                24,"Y",self.doMonths,None,None,("efld",)),)
-        state = self.df.disableButtonsTags()
-        self.df.setWidget(self.df.mstFrame, state="hide")
-        self.mt = TartanDialog(self.opts["mf"], title=tit, tops=True,
-            eflds=fld, tend=((self.doMthEnd, "y"),), txit=(self.doMthExit,))
-        self.mt.mstFrame.wait_window()
-        self.df.setWidget(self.df.mstFrame, state="show")
-        self.df.enableButtonsTags(state=state)
-
-    def doMonths(self, frt, pag, r, c, p, i, w):
-        months = w
-        yr = int(self.curdt / 100)
-        mt = self.curdt % 100
-        for mth in range(months):
-            mt -= 1
-            if not mt:
-                mt = 12
-                yr -= 1
-        self.startp = (yr * 100) + mt
-
-    def doMthEnd(self):
-        self.mt.closeProcess()
-        whr = [
-            ("st1_cono", "=", self.opts["conum"]),
-            ("st1_type", "=", "N"),
-            ("stt_cono=st1_cono",),
-            ("stt_group=st1_group",),
-            ("stt_code=st1_code",)]
-        accs = self.sql.getRec(tables=["strmf1", "strtrn"], cols=["st1_group",
-            "st1_code", "max(stt_curdt)", "sum(stt_qty)", "sum(stt_cost)"],
-            where=whr, order="st1_group, st1_code")
-        chgs = []
-        for acc in accs:
-            if acc[2] < self.startp and not acc[3] and not acc[4]:
-                chgs.append(acc[:2])
-        if not chgs:
-            showError(self.opts["mf"].body, "Processing Error",
-                "No Redundant Records")
-        else:
-            self.cnt = 0
-            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
-            p = ProgressBar(self.opts["mf"].body, mxs=len(chgs),
-                typ="Redundant Items")
-            for num, rec in enumerate(chgs):
-                p.displayProgress(num)
-                self.sql.updRec("strmf1", cols=["st1_type"], data=["X"],
-                    where=[("st1_cono", "=", self.opts["conum"]),
-                    ("st1_group", "=", rec[0]), ("st1_code", "=", rec[1])])
-                key = "%03i%-3s%-20s" % (self.opts["conum"], rec[0], rec[1])
-                self.sql.insRec("chglog", data=["strmf1", "U", key, "st1_type",
-                dte, self.opts["capnm"], "N", "X", 0])
-            p.closeProgress()
-            mess = """%s Items Will be Marked as Redundant.
-
-Would you like to COMMIT these Changes?""" % len(chgs)
-            self.opts["mf"].dbm.commitDbase(ask=True, mess=mess)
-
-    def doMthExit(self):
-        self.mt.closeProcess()
-
-    def doCreate(self):
-        self.flag = "C"
-        self.stm["where"] = [
-                ("st1_cono", "=", self.opts["conum"]),
-                ("st1_type", "<>", "X")]
-        self.df.focusField("T", 0, 1)
-
-    def doRestore(self):
-        self.flag = "R"
-        self.stm["where"] = [
-                ("st1_cono", "=", self.opts["conum"]),
-                ("st1_type", "=", "X")]
-        self.df.focusField("T", 0, 1)
-
-    def doGroup(self, frt, pag, r, c, p, i, w):
-        if self.flag == "C":
-            chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
-                "=", self.opts["conum"]), ("st1_group", "=", w),
-                ("st1_type", "<>", "X")], limit=1)
-        else:
-            chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
-                "=", self.opts["conum"]), ("st1_group", "=", w),
-                ("st1_type", "=", "X")], limit=1)
-        if not chk:
-            return "Invalid Group"
-        self.grp = w
-
-    def doCode(self, frt, pag, r, c, p, i, w):
-        if self.flag == "C":
-            typ = "<>"
-        else:
-            typ = "="
-        chk = self.sql.getRec(tables="strmf1", where=[("st1_cono",
-            "=", self.opts["conum"]), ("st1_group", "=", self.grp),
-            ("st1_code", "=", w), ("st1_type", typ, "X")], limit=1)
-        if not chk:
-            return "Invalid Code"
-        if self.flag == "C":
-            qty = self.sql.getRec(tables="strtrn", cols=["sum(stt_qty)"],
-                where=[("stt_cono", "=", self.opts["conum"]),
-                ("stt_group", "=", self.grp), ("stt_code", "=", w)],
-                limit=1)
-            if qty[0]:
-                return "Balance Exists"
-        self.cod = w
-        self.df.loadEntry(frt, pag, p+1, data=chk[4])
-
-    def endPage(self):
-        if self.flag == "C":
-            typ = "X"
-        else:
-            typ = "N"
-        self.sql.updRec("strmf1", cols=["st1_type"], data=[typ],
-            where=[("st1_cono", "=", self.opts["conum"]),
-            ("st1_group", "=", self.grp), ("st1_code", "=", self.cod)])
-        self.opts["mf"].dbm.commitDbase()
-        self.df.clearFrame("T", 0)
-        self.flag = ""
-
-    def exitPage(self):
+    def mainProcess(self):
+        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Purchase Order Cancellations (%s)" % __name__)
+        loc = {
+            "stype": "R",
+            "tables": ("strloc",),
+            "cols": (
+                ("srl_loc", "", 0, "L"),
+                ("srl_desc", "", 0, "Description", "Y")),
+            "where": [("srl_cono", "=", self.opts["conum"])]}
+        orm = {
+            "stype": "R",
+            "tables": ("strpom",),
+            "cols": (
+                ("pom_ordno", "", 0, "OrderNo"),
+                ("pom_acno", "", 0, "Crs-Num"),
+                ("pom_date", "", 0, "Order-Date")),
+            "where": [
+                ("pom_cono", "=", self.opts["conum"]),
+                ("pom_delno", "=", "")],
+            "whera": [("T", "pom_loc", 0)],
+            "order": "pom_ordno"}
+        if self.locs == "N":
+            self.locw = "1"
+            fld = [
+                (("T",0,0,0),"OUA",1,"Location")]
+        else:
+            fld = [
+                (("T",0,0,0),"IUA",1,"Location","",
+                    "1","Y",self.doLoc,loc,None,None)]
+        fld.extend([
+            (("T",0,1,0),"Id1",10,"Orders Older Than","",
+                "","Y",self.doOld,orm,None,None),
+            (("T",0,2,0),"IUI",9,"From Order Number","",
+                "","Y",self.doOrd,orm,None,None),
+            (("T",0,3,0),"IUI",9,"To   Order Number","",
+                "","Y",self.doOrd,orm,None,None)])
+        tnd = ((self.doEnd,"y"), )
+        txt = (self.doExit, )
+        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+            tend=tnd, txit=txt)
+        if self.locs == "N":
+            self.df.loadEntry("T", 0, 0, data=self.locw)
+
+    def doLoc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="strloc", cols=["srl_desc"],
+            where=[("srl_cono", "=", self.opts["conum"]),
+            ("srl_loc", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Location"
+        self.locw = w
+
+    def doOld(self, frt, pag, r, c, p, i, w):
+        self.oldr = w
+        if self.oldr:
+            self.df.loadEntry(frt, pag, p+1, data="")
+            self.df.loadEntry(frt, pag, p+2, data="")
+            return "nd"
+
+    def doOrd(self, frt, pag, r, c, p, i, w):
+        if p == 3 and w < self.ord1:
+            return "Invalid, Last Order less than First Order"
+        acc = self.sql.getRec(tables="strpom", where=[("pom_cono", "=",
+            self.opts["conum"]), ("pom_ordno", "=", w), ("pom_loc", "=",
+            self.locw), ("pom_delno", "=", "")], limit=1)
+        if not acc:
+            return "Invalid Order Number"
+        if p == 2:
+            self.ord1 = w
+        else:
+            self.ord2 = w
+
+    def doEnd(self):
+        self.df.closeProcess()
+        if self.oldr:
+            whr = [
+                ("pom_cono", "=", self.opts["conum"]),
+                ("pom_loc", "=", self.locw),
+                ("pom_date", "<", self.oldr),
+                ("pom_delno", "<>", "cancel"),
+                ("pom_deldt", "=", 0)]
+        else:
+            whr = [
+                ("pom_cono", "=", self.opts["conum"]),
+                ("pom_loc", "=", self.locw),
+                ("pom_ordno", ">=", self.ord1),
+                ("pom_ordno", "<=", self.ord2),
+                ("pom_delno", "<>", "cancel"),
+                ("pom_deldt", "=", 0)]
+        self.sql.updRec("strpom", cols=["pom_delno"], data=["cancel"],
+            where=whr)
+        self.opts["mf"].dbm.commitDbase(ask=True)
+        self.opts["mf"].closeLoop()
+
+    def doExit(self):
         self.df.closeProcess()
         self.opts["mf"].closeLoop()
 

=== modified file 'tab/tb1020.py'
--- tab/tb1020.py	2019-08-20 08:41:08 +0000
+++ tab/tb1020.py	2019-12-19 12:14:16 +0000
@@ -526,6 +526,8 @@
                     elif self.table == "crsmst" and csf[2] in ("crm_mgr_email",
                             "crm_acc_email", "crm_ord_email"):
                         new = old[olddic["crm_email"][0]]
+                    elif self.table == "crsmst" and csf[2] == "crm_stat":
+                        new = "N"
                     elif self.table == "crsrmf" and csf[2] == "rmf_dbase":
                         new = "F"
                     elif self.table == "crstrn" and csf[2] == "crt_capnm":
@@ -560,6 +562,8 @@
                         new = "Unknown"
                     elif self.table == "drsmst" and csf[2] == "drm_plev":
                         new = old[olddic["drm_prices"][0]]
+                    elif self.table == "drsmst" and csf[2] == "drm_stat":
+                        new = "N"
                     elif self.table == "drstrn" and csf[2] == "drt_capnm":
                         new = "Unknown"
                     elif self.table == "genstr" and csf[2] == "gls_var":
@@ -929,6 +933,7 @@
 
 if __name__ == "__main__":
     import getopt
+
     opts, args = getopt.getopt(sys.argv[1:], "bcd:fhp:r:t:u:v:")
     parg = {
         "mf": None,
@@ -975,7 +980,7 @@
             parg["usr"] = v
         elif o == "-v":
             parg["ver"] = v
-    if "ver" not in parg:
+    if not parg["ver"]:
         print("Invalid -v version_number")
     else:
         tb1020(**parg)

=== modified file 'tab/tb1030.py'
--- tab/tb1030.py	2019-12-07 11:09:33 +0000
+++ tab/tb1030.py	2019-12-18 08:33:25 +0000
@@ -368,10 +368,6 @@
                 ok = askQuestion(self.opts["mf"].body, "Error",
                     "%s\n\nDelete transaction (y/n)?" % err)
             if ok == "yes":
-                print system
-                print sqv
-                print sqg
-                print sqd
                 sql.delRec("ctlvtf", where=sqv)
                 if system == "G" or glint == "Y":
                     sql.delRec("gentrn", where=sqg)

=== modified file 'uty/bm1010.py'
--- uty/bm1010.py	2019-07-03 13:49:08 +0000
+++ uty/bm1010.py	2019-12-13 12:16:02 +0000
@@ -130,12 +130,14 @@
             self.bks = [0]
         if "CR" in mod:
             self.crs = self.sql.getRec(tables="crsmst", cols=["count(*)"],
-                where=[("crm_cono", "=", self.opts["conum"])], limit=1)
+                where=[("crm_cono", "=", self.opts["conum"]),
+                ("crm_stat", "<>", "X")], limit=1)
         else:
             self.crs = [0]
         if "DR" in mod:
             self.drs = self.sql.getRec(tables="drsmst", cols=["count(*)"],
-                where=[("drm_cono", "=", self.opts["conum"])], limit=1)
+                where=[("drm_cono", "=", self.opts["conum"]),
+                ("drm_stat", "<>", "X")], limit=1)
         else:
             self.drs = [0]
         if "ML" in mod:
@@ -323,8 +325,9 @@
             if self.ulist == "D":
                 daa = self.sql.getRec(tables="drsmst",
                     cols=["drm_bus_activity", "count(*)"],
-                    where=[("drm_cono", "=", self.opts["conum"])],
-                    group="drm_bus_activity", order="drm_bus_activity")
+                    where=[("drm_cono", "=", self.opts["conum"]),
+                    ("drm_stat", "<>", "X")], group="drm_bus_activity",
+                    order="drm_bus_activity")
                 act = {
                     "stype": "C",
                     "titl": "Valid Activities",
@@ -333,8 +336,9 @@
                     "typs": (("NA", 3), ("UI", 8)),
                     "size": (400, 400)}
                 dab = self.sql.getRec(tables="drsmst", cols=["drm_bus_type",
-                    "count(*)"], where=[("drm_cono", "=", self.opts["conum"])],
-                    group="drm_bus_type", order="drm_bus_type")
+                    "count(*)"], where=[("drm_cono", "=", self.opts["conum"]),
+                    ("drm_stat", "<>", "X")], group="drm_bus_type",
+                    order="drm_bus_type")
                 typ = {
                     "stype": "C",
                     "titl": "Valid Types",
@@ -978,6 +982,7 @@
             else:
                 whr.append(("crm_ord_email", "<>", ""))
                 col = ["crm_ord", "crm_ord_email"]
+            whr.append(("crm_stat", "<>", "X"))
             odr = col[0]
             sel = col[0]
             recs = self.doGetRecs(tab, col, whr, odr, sel)
@@ -1002,6 +1007,7 @@
                 whr.append(("drm_bus_type", "=", self.flttyp))
             if self.fltstp == "N":
                 whr.append(("drm_stop", "=", "N"))
+            whr.append(("drm_stat", "<>", "X"))
             odr = col[0]
             sel = col[0]
             recs = self.doGetRecs(tab, col, whr, odr, sel)

=== modified file 'uty/pkgprg.py'
--- uty/pkgprg.py	2019-12-07 11:09:33 +0000
+++ uty/pkgprg.py	2019-12-17 05:07:02 +0000
@@ -100,7 +100,7 @@
     exclude = [
         "tb1010", "tb1040", "tb3010", "ms1020", "ms1030", "ms1040", "ms3010",
         "ms3020", "msy010", "msy020", "msy030", "fc1010", "pm1010", "pw1010",
-        "rp1020", "ss1010", "tp1010"]
+        "rp1020", "tp1010"]
 elif system == "c":
     system = "cshana"
     chgfle = "tarchg"
@@ -131,10 +131,11 @@
         "cr3070", "cr3080", "cr3120", "cr3130", "cr3140", "cr3150", "cr3160",
         "cr3170", "cr3180", "cr3190", "cr3200", "cr4010", "cr6010", "cr6020",
         "gl3030", "gl3100", "gl3110", "gl3120", "gl3130", "gl3140", "gl3150",
-        "glc310", "glc410", "glc510", "ln2020", "ms1010", "msy030",
+        "glc310", "glc410", "glc510", "ib2010", "ib2020", "ib3010", "ib3020",
+        "ib3030", "ib3040", "ibc110", "ln2020", "ms1010", "msy030", "ss1010",
         "tartanWork"]]
     exclude = [
-        "dr1020", "dr2030", "dr6030", "drc210", "drc220", "drc510", "drc520",
+        "dr1020", "dr2030", "dr6040", "drc210", "drc220", "drc510", "drc520",
         "drc610", "drc620", "drc710", "drc810", "msy020", "si3010", "si3070",
         "sic110", "st1020", "st2010", "st2020", "st2030", "st2040", "st3010",
         "st3020", "st3030", "st3040", "st3050", "st3060", "st3070", "st3080",
@@ -157,7 +158,7 @@
         "ass", "bkm", "bwl", "crs", "drs", "gen", "lon", "mem", "pos", "rca",
         "rtl", "sls", "str", "uty", "wag"])
     custom = [""]
-    exclude = ["msy030", "pm1010", "pw1010", "ss1010"]
+    exclude = ["msy030", "pm1010", "pw1010"]
 else:
     sys.exit()
 csys = system.capitalize()
@@ -576,6 +577,7 @@
             "frikkie@lando.co.za",
             "galloway@awe.co.za",
             "jane@acsconsulting.co.za",
+            "joannej@buildinn-el.co.za",
             "karen@spargs.co.za",
             "keith@barrowdale.co.za",
             "lawrence@hawcweb.co.za",

=== renamed file 'uty/ss1010.py' => 'uty/ss1010_rne.py'
=== modified file 'uty/td1010.py'
--- uty/td1010.py	2019-07-03 13:49:08 +0000
+++ uty/td1010.py	2019-12-13 13:16:25 +0000
@@ -385,7 +385,7 @@
             commit = True
             sql = Sql(self.opts["mf"].dbm, tables="crsmst", prog=__name__)
             col = sql.crsmst_col
-            recs = sql.getRec(tables="crsmst")
+            recs = sql.getRec(tables="crsmst", where=[("drm_stat", "<>", "X")])
             for rec in recs:
                 nam = "%s" % rec[col.index("crm_name")]
                 data = [
@@ -450,7 +450,7 @@
             commit = True
             sql = Sql(self.opts["mf"].dbm, tables="drsmst", prog=__name__)
             col = sql.drsmst_col
-            recs = sql.getRec(tables="drsmst")
+            recs = sql.getRec(tables="drsmst", where=[("drm_stat", "<>", "X")])
             for rec in recs:
                 nam = "%s" % rec[col.index("drm_name")]
                 data = [

