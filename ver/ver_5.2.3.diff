=== added directory 'bks'
=== added file 'bks/bs1010.py'
--- bks/bs1010.py	1970-01-01 00:00:00 +0000
+++ bks/bs1010.py	2016-06-14 08:23:39 +0000
@@ -0,0 +1,280 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    Books Masterfile Maintenance.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2016 Paul Malherbe.
+"""
+
+import time
+from TartanClasses import GetCtl
+from TartanClasses import Sql, TartanDialog
+from tartanFunctions import askQuestion, getNextCode
+
+class bs1010:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        gc = GetCtl(self.opts["mf"])
+        ctlsys = gc.getCtl("ctlsys")
+        if not ctlsys:
+            return
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        if not ctlmst:
+            return
+        tabs = ["bksmst", "bksown", "bksaut", "chglog"]
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
+        if self.sql.error:
+            return
+        return True
+
+    def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "General Ledger File Maintenance (%s)" % __name__)
+        bmf = {
+            "stype": "R",
+            "tables": ("bksmst", "bksown"),
+            "cols": (
+                ("bmf_stat", "", 0, "S"),
+                ("bmf_code", "", 0, "Code"),
+                ("bmf_titl", "", 0, "Title", "Y"),
+                ("bmf_ownr", "", 0, "Ownr"),
+                ("bof_fnam", "", 0, "Name"),
+                ("bmf_mnth", "", 0, "Mth-Rec")),
+            "where": [("bof_code=bmf_ownr",)],
+            "order": "bmf_stat, bmf_titl",
+            "index": 1}
+        amf = {
+            "stype": "R",
+            "tables": ("bksaut",),
+            "cols": (
+                ("baf_code", "", 0, "Code"),
+                ("baf_snam", "", 0, "Surname", "Y"),
+                ("baf_fnam", "", 0, "Names")),
+            "order": "baf_code"}
+        omf = {
+            "stype": "R",
+            "tables": ("bksown",),
+            "cols": (
+                ("bof_code", "", 0, "Code"),
+                ("bof_snam", "", 0, "Surname", "Y"),
+                ("bof_fnam", "", 0, "Names")),
+            "order": "bof_code"}
+        r1s = (("Current","C"), ("Removed","X"))
+        fld = (
+            (("T",0,0,0),"IUI",4,"Code","",
+                "","Y",self.doCode,bmf,None,("efld",)),
+            (("T",0,1,0),"ITX",30,"Title","",
+                "","N",self.doTitle,None,None,("notblank",)),
+            (("T",0,2,0),"IUI",4,"Author","",
+                "","N",self.doAuthor,amf,None,("efld",)),
+            (("T",0,2,0),"ONA",30,""),
+            (("T",0,3,0),"IUI",4,"Owner","",
+                "","N",self.doOwner,omf,None,("efld",)),
+            (("T",0,3,0),"ONA",30,""),
+            (("T",0,4,0),"ID2",7,"Month","",
+                "","N",self.doMonth,None,None,("efld",)),
+            (("T",0,5,0),("IRB",r1s),0,"Status","",
+                "C","N",self.doStatus,None,None,None))
+        but = (
+            ("Accept",None,self.doAccept,0,("T",0,2),(("T",0,0),("T",0,1))),
+            ("Exit",None,self.doExit,0,("T",0,1),None))
+        tnd = ((self.doEnd,"y"), )
+        txt = (self.doExit, )
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, butt=but,
+            tend=tnd, txit=txt)
+
+    def doCode(self, frt, pag, r, c, p, i, w):
+        self.bcode = w
+        if not self.bcode:
+            ok = askQuestion(self.opts["mf"].body, "New Book",
+                "Is This a New Book?", default="no")
+            if ok == "no":
+                return "Invalid Code"
+            self.newbk = True
+            self.bcode = getNextCode(self.sql, "bksmst", "bmf_code", start=1,
+                last=9999)
+            self.df.loadEntry(frt, pag, p, data=self.bcode)
+        else:
+            self.old = self.sql.getRec(tables="bksmst", where=[("bmf_code",
+                "=", self.bcode)], limit=1)
+            if not self.old:
+                return "Invalid Code"
+            col = 0
+            self.newbk = False
+            for num, dat in enumerate(self.old):
+                self.df.loadEntry(frt, pag, col, data=dat)
+                if num == 2:
+                    col += 1
+                    self.df.loadEntry(frt, pag, col, data=self.getAuthor(dat))
+                elif num == 3:
+                    col += 1
+                    self.df.loadEntry(frt, pag, col, data=self.getOwner(dat))
+                col += 1
+
+    def doDelete(self):
+        self.sql.delRec("bksmst", where=[("bmf_code", "=", self.bcode)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.focusField("T", 0, 1)
+
+    def doTitle(self, frt, pag, r, c, p, i, w):
+        self.title = w
+
+    def doAuthor(self, frt, pag, r, c, p, i, w):
+        self.acode = w
+        if not self.acode:
+            ok = askQuestion(self.opts["mf"].body, "New Author",
+                "Is This a New Author?", default="no")
+            if ok == "no":
+                return "Invalid Code"
+            self.doNewAuthor()
+            if not self.aend:
+                return "rf"
+            self.df.loadEntry(frt, pag, p, data=self.acode)
+        acc = self.sql.getRec(tables="bksaut", where=[("baf_code", "=",
+            self.acode)], limit=1)
+        if not acc:
+            return "Invalid Code"
+        self.df.loadEntry(frt, pag, p+1, data=self.getAuthor(self.acode))
+
+    def doNewAuthor(self):
+        state = self.df.disableButtonsTags()
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        tit = ("Author's Details",)
+        fld = (
+            (("T",0,0,0),"ITX",30,"Surname","",
+                "","Y",None,None,None,("notblank",)),
+            (("T",0,1,0),"ITX",30,"Names","",
+                "","Y",None,None,None,("efld",)))
+        self.aa = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doAutEnd,"y"),), txit=(self.doAutExit,))
+        self.opts["mf"].startLoop()
+        self.df.setWidget(self.df.mstFrame, state="show")
+        self.df.enableButtonsTags(state=state)
+
+    def doAutEnd(self):
+        self.aend = True
+        self.acode = getNextCode(self.sql, "bksaut", "baf_code", start=1,
+            last=9999)
+        data = [self.acode, self.aa.t_work[0][0][0], self.aa.t_work[0][0][1]]
+        self.sql.insRec("bksaut", data=data)
+        self.aa.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def doAutExit(self):
+        self.aend = False
+        self.aa.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def getAuthor(self, code):
+        acc = self.sql.getRec(tables="bksaut", where=[("baf_code", "=", code)],
+            limit=1)
+        if acc:
+            return "%s, %s" % (acc[1], acc[2])
+        else:
+            return ""
+
+    def doOwner(self, frt, pag, r, c, p, i, w):
+        self.ocode = w
+        if not self.ocode:
+            ok = askQuestion(self.opts["mf"].body, "New Member",
+                "Is This a New Member?", default="no")
+            if ok == "no":
+                return "Invalid Code"
+            self.doNewOwner()
+            if not self.oend:
+                return "rf"
+            self.df.loadEntry(frt, pag, p, data=self.ocode)
+        acc = self.sql.getRec(tables="bksown", where=[("bof_code",
+            "=", self.ocode)], limit=1)
+        if not acc:
+            return "Invalid Code"
+        self.df.loadEntry(frt, pag, p+1, data=self.getOwner(self.ocode))
+
+    def doNewOwner(self):
+        state = self.df.disableButtonsTags()
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        tit = ("Owner's Details",)
+        fld = (
+            (("T",0,0,0),"ITX",30,"Surname","",
+                "","Y",None,None,None,("notblank",)),
+            (("T",0,1,0),"ITX",30,"Names","",
+                "","Y",None,None,None,("efld",)))
+        self.oo = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doOwnEnd,"y"),), txit=(self.doOwnExit,))
+        self.opts["mf"].startLoop()
+        self.df.setWidget(self.df.mstFrame, state="show")
+        self.df.enableButtonsTags(state=state)
+
+    def doOwnEnd(self):
+        self.oend = True
+        self.ocode = getNextCode(self.sql, "bksown", "bof_code", start=1,
+            last=9999)
+        data = [self.acode, self.oo.t_work[0][0][0], self.oo.t_work[0][0][1],
+            "", "", "", "", "", "", "", ""]
+        self.sql.insRec("bksown", data=data)
+        self.oo.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def doOwnExit(self):
+        self.oend = False
+        self.oo.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def getOwner(self, code):
+        acc = self.sql.getRec(tables="bksown", where=[("bof_code", "=", code)],
+            limit=1)
+        if acc:
+            return "%s, %s" % (acc[1], acc[2])
+        else:
+            return ""
+
+    def doMonth(self, frt, pag, r, c, p, i, w):
+        self.month = w
+
+    def doStatus(self, frt, pag, r, c, p, i, w):
+        self.status = w
+
+    def doEnd(self):
+        data = [self.bcode,
+            self.df.t_work[0][0][1], self.df.t_work[0][0][2],
+            self.df.t_work[0][0][4], self.df.t_work[0][0][6],
+            self.df.t_work[0][0][7]]
+        if self.newbk:
+            self.sql.insRec("bksmst", data=data)
+        elif data != self.old:
+            self.sql.updRec("bksmst", data=data, where=[("bmf_code",
+                "=", self.bcode)])
+            dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
+            for num, dat in enumerate(self.old):
+                if dat != data[num]:
+                    self.sql.insRec("chglog", data=["bksmst", "U",
+                        "%03i%04i" % (self.opts["conum"], self.bcode),
+                        self.sql.bksmst[num], dte, self.opts["capnm"],
+                        str(dat), str(data[num]), 0])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.focusField("T", 0, 1)
+
+    def doAccept(self, widget=None):
+        frt, pag, col, mes = self.df.doCheckFields()
+        if mes:
+            self.df.focusField(frt, pag, (col+1), err=mes)
+        else:
+            self.df.doEndFrame("T", 0, cnf="N")
+
+    def doExit(self, widget=None):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== added file 'bks/bs3010.py'
--- bks/bs3010.py	1970-01-01 00:00:00 +0000
+++ bks/bs3010.py	2016-06-21 13:07:15 +0000
@@ -0,0 +1,221 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    Book Library List.
+
+    This file is part of Tartan Financial Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2016 Paul Malherbe.
+"""
+
+import os, requests, time, urllib2
+from TartanClasses import CCD, GetCtl, MyFpdf, SplashScreen, Sql, TartanDialog
+from tartanFunctions import doPrinter, getModName, getSingleRecords, copyList
+from tartanFunctions import mthendDate
+
+class bs3010:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["bksmst", "bksaut", "bksown"],
+            prog=__name__)
+        if self.sql.error:
+            return
+        t = time.localtime()
+        self.curdt = time.strftime("%Y-%m", t)
+        self.image = os.path.join(self.opts["mf"].rcdic["prgdir"], "img",
+            "books.png")
+        return True
+
+    def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Listing of Books")
+        r1s = (("All","A"), ("Current","C"), ("Removed","R"))
+        r2s = (("Title","T"), ("Date","D"),("Author","A"),("Owner","O"))
+        fld = (
+            (("T",0,0,0),"ID2",7,"Last Meeting","",
+                "","N",self.doLast,None,None,("efld",)),
+            (("T",0,1,0),("IRB",r1s),0,"Status","",
+                "A","N",self.doStatus,None,None,None),
+            (("T",0,2,0),("IRB",r2s),0,"Order","",
+                "T","N",self.doOrder,None,None,None))
+        tnd = ((self.doEnd,"y"),)
+        txt = (self.doExit,)
+        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
+            eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("B","Y"))
+
+    def doLast(self, frt, pag, r, c, p, i, w):
+        self.last = w
+        self.new = False
+
+    def doStatus(self, frt, pag, r, c, p, i, w):
+        self.status = w
+
+    def doOrder(self, frt, pag, r, c, p, i, w):
+        self.order = w
+
+    def doEnd(self):
+        self.df.closeProcess()
+        if self.df.repeml[1] == "Y":
+            if not self.df.repeml[2]:
+                owns = self.sql.getRec(tables="bksown", cols=["bof_mail"],
+                    where=[("bof_mail", "<>", ""), ("bof_stat", "=", "C")])
+                adds = None
+                for own in owns:
+                    if not adds:
+                        adds = own[0]
+                    else:
+                        adds = "%s,%s" % (adds, own[0])
+                self.df.repeml[2] = adds
+            if not self.df.repeml[3]:
+                self.df.repeml[3] = """Dear Member
+
+Attached please find the latest list of books.
+
+All books which came onto the list at the last meeting are highlighted and, if available, a precis will be printed at the end.
+
+Thanks and Regards.
+"""
+        tab = ["bksmst", "bksaut", "bksown"]
+        col = ["bmf_stat", "bmf_titl", "bmf_code", "baf_snam", "baf_fnam",
+            "bmf_mnth", "bof_fnam", "bof_snam"]
+        odr = ""
+        if self.status == "C":
+            whr = [("bmf_stat", "=", "C")]
+        elif self.status == "R":
+            whr = [("bmf_stat", "=", "X")]
+        else:
+            whr = []
+            odr = "bmf_stat"
+        whr.extend([
+            ("baf_code=bmf_auth",),
+            ("bof_code=bmf_ownr",)])
+        if self.order == "T":
+            if odr:
+                odr = "%s, bmf_titl" % odr
+            else:
+                odr = "bmf_titl"
+        if self.order == "D":
+            if odr:
+                odr = "%s, bmf_mnth, bmf_titl" % odr
+            else:
+                odr = "bmf_mnth, bmf_titl"
+        if self.order == "A":
+            if odr:
+                odr = "%s, bmf_auth, bmf_titl" % odr
+            else:
+                odr = "bmf_auth, bmf_titl"
+        if self.order == "O":
+            if odr:
+                odr = "%s, bmf_ownr, bmf_titl" % odr
+            else:
+                odr = "bmf_ownr, bmf_titl"
+        recs = self.sql.getRec(tables=tab, cols=col, where=whr, order=odr)
+        self.fpdf = MyFpdf(name="bc2010", head=90, auto=True, foot=True)
+        self.fpdf.header = self.pageHeading
+        self.stat = recs[0][0]
+        self.fpdf.add_page()
+        new = []
+        for rec in recs:
+            stat = CCD(rec[0], "UA", 1).disp
+            if not stat == self.stat:
+                self.stat = stat
+                self.fpdf.add_page()
+            titl = CCD(rec[1], "NA", 30).disp
+            code = CCD(rec[2], "UI", 4).disp
+            auth = CCD("%s, %s" % (rec[3], rec[4]), "NA", 30).disp
+            mnth = CCD(rec[5], "D2", 7).disp
+            ownr = CCD("%s %s" % (rec[6], rec[7][0]), "NA", 12).disp
+            if rec[5] < self.last:
+                fill = 0
+            else:
+                new.append([auth, titl])
+                fill = 1
+            self.fpdf.drawText("%1s %30s %4s %30s %7s %10s" % (stat, titl,
+                code, auth, mnth, ownr), h=5, fill=fill)
+        if new:
+            sp = SplashScreen(self.opts["mf"].body,
+                "Preparing precis of New Books ... Please Wait")
+            try:
+                urllib2.urlopen("http://tartan.co.za",timeout=1)
+                self.new = True
+                self.fpdf.add_page()
+                for book in new:
+                    desc = self.getDesc(book)
+                    if desc:
+                        desc = desc.replace("\n", "").encode(
+                            "latin-1", "ignore")
+                        self.fpdf.drawText("Title: %s" % book[1].strip(),
+                            font="B")
+                        self.fpdf.drawText("Author: %s" % book[0].strip(),
+                            font="B")
+                        self.fpdf.drawText("Details:", font="B")
+                        self.fpdf.drawText(desc, font="I", ctyp="M")
+                        self.fpdf.drawText()
+            except:
+                pass
+            sp.closeSplash()
+        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
+            self.opts["conum"], ext="pdf")
+        self.fpdf.output(pdfnam, "F")
+        head = "Book List as at %s" % (self.curdt)
+        doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
+            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
+        self.opts["mf"].closeLoop()
+
+    def pageHeading(self, new=False):
+        self.fpdf.setFont("Arial", "B", 15)
+        x = self.fpdf.get_x()
+        if os.path.isfile(self.image):
+            self.fpdf.image(self.image, 11, 10, 15, 20)
+            self.fpdf.image(self.image, 185, 10, 15, 20)
+            self.fpdf.cell(20)
+        self.fpdf.set_x(x)
+        self.fpdf.cell(0, 10, self.opts["conam"],"TLR",1,"C")
+        if self.new:
+            txt = "Details of New Books"
+        elif self.stat == "C":
+            txt = "Current Books as at %s" % self.curdt
+        else:
+            txt = "Removed Books as at %s" % self.curdt
+        self.fpdf.cell(0, 10, txt, "LRB", 1, "C")
+        self.fpdf.ln(8)
+        self.fpdf.setFont(style="B")
+        if not self.new:
+            self.fpdf.cell(0, 5, "%-1s %-30s %-4s %-30s %-7s %-12s" % ("S",
+                "Title", "Code", "Author", "Mth-Rec", "Owner"), "B")
+        self.fpdf.ln(5)
+
+    def getDesc(self, book):
+        auth = book[0].strip().lower()
+        titl = book[1].strip().lower()
+        if titl[:4] == "the ":
+            titl = titl[4:]
+        get = requests.get("https://www.googleapis.com/books/v1/volumes?q="\
+            "'%s'+inauthor:'%s'" % (titl, auth))
+        if get.status_code == 200 and get.json()["totalItems"]:
+            ok = False
+            for item in get.json()["items"]:
+                titb = item["volumeInfo"]["title"].lower().\
+                    replace("the ","").replace(", the", "")
+                if titb.count(titl):
+                    if "description" in item["volumeInfo"].keys():
+                        ok = True
+                        break
+            if ok:
+                return item["volumeInfo"]["description"]
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== added file 'bks/bsc110.py'
--- bks/bsc110.py	1970-01-01 00:00:00 +0000
+++ bks/bsc110.py	2016-06-21 13:04:55 +0000
@@ -0,0 +1,112 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    Book Club Member's Maintenance.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2016 Paul Malherbe.
+"""
+
+from TartanClasses import TartanDialog, Sql
+from tartanFunctions import getNextCode
+
+class bsc110:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["bksown"], prog=__name__)
+        if self.sql.error:
+            return
+        return True
+
+    def mainProcess(self):
+        tit = ("Member's Maintenance",)
+        clb = {
+            "stype": "R",
+            "tables": ("bksown",),
+            "cols": (
+                ("bof_code", "", 0, "Cod"),
+                ("bof_snam", "", 0, "Surname", "Y"),
+                ("bof_fnam", "", 0, "Names")),
+            "order": "bof_snam"}
+        r1s = (("Current","C"), ("Resigned","R"))
+        fld = (
+            (("T",0,0,0),"I@bof_code",0,"","",
+                "","Y",self.doCode,clb,None,("efld",)),
+            (("T",0,1,0),"I@bof_snam",0,"","",
+                "","N",self.doSnam,None,None,("notblank",)),
+            (("T",0,2,0),"I@bof_fnam",0,"","",
+                "","N",self.doFnam,None,None,("efld",)),
+            (("T",0,3,0),"I@bof_add1",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,4,0),"I@bof_add2",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,5,0),"I@bof_add3",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,6,0),"I@bof_pcod",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,7,0),"I@bof_home",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,8,0),"I@bof_work",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,9,0),"I@bof_cell",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,10,0),"I@bof_mail",0,"","",
+                "","N",None,None,None,("efld",)),
+            (("T",0,11,0),("IRB",r1s),0,"Membersip Status","",
+                "C","N",None,None,None,None))
+        tnd = ((self.doEnd,"y"),)
+        txt = (self.doExit,)
+        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
+            eflds=fld, tend=tnd, txit=txt)
+
+    def doCode(self, frt, pag, r, c, p, i, w):
+        if not w:
+            self.owner = getNextCode(self.sql, "bksown", "bof_code", last=999)
+            self.df.loadEntry(frt, pag, p, data=self.owner)
+        else:
+            self.owner = w
+        chk = self.sql.getRec(tables="bksown", where=[("bof_code", "=",
+            self.owner)], limit=1)
+        if not chk:
+            self.newown = True
+        else:
+            self.newown = False
+            for num, fld in enumerate(chk):
+                self.df.loadEntry(frt, pag, num, data=fld)
+
+    def doSnam(self, frt, pag, r, c, p, i, w):
+        self.snam = w
+
+    def doFnam(self, frt, pag, r, c, p, i, w):
+        if self.newown:
+            chk = self.sql.getRec(tables="bksown", where=[("bof_snam",
+                "=", self.snam), ("bof_fnam", "=", w)], limit=1)
+            if chk:
+                return "A Member with this Name Already Exists"
+
+    def doEnd(self, widget=None):
+        data = self.df.t_work[0][0]
+        if self.newown:
+            self.sql.insRec("bksown", data=data)
+        else:
+            self.sql.updRec("bksown", data=data, where=[("bof_code", "=",
+                self.owner)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.focusField("T", 0, 1)
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== added file 'bks/bsc210.py'
--- bks/bsc210.py	1970-01-01 00:00:00 +0000
+++ bks/bsc210.py	2016-05-29 03:57:18 +0000
@@ -0,0 +1,93 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    Book Club Author's Maintenance.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2016 Paul Malherbe.
+"""
+
+from TartanClasses import TartanDialog, Sql
+from tartanFunctions import getNextCode
+
+class bsc210:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["bksaut"], prog=__name__)
+        if self.sql.error:
+            return
+        return True
+
+    def mainProcess(self):
+        tit = ("Author's Maintenance",)
+        clb = {
+            "stype": "R",
+            "tables": ("bksaut",),
+            "cols": (
+                ("baf_code", "", 0, "Cod"),
+                ("baf_snam", "", 0, "Surname", "Y"),
+                ("baf_fnam", "", 0, "Names")),
+            "order": "baf_snam"}
+        fld = (
+            (("T",0,0,0),"I@baf_code",0,"","",
+                "","Y",self.doCode,clb,None,("efld",)),
+            (("T",0,1,0),"I@baf_snam",0,"","",
+                "","N",self.doSnam,None,None,("notblank",)),
+            (("T",0,2,0),"I@baf_fnam",0,"","",
+                "","N",self.doFnam,None,None,("efld",)))
+        tnd = ((self.doEnd,"y"),)
+        txt = (self.doExit,)
+        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
+            eflds=fld, tend=tnd, txit=txt)
+
+    def doCode(self, frt, pag, r, c, p, i, w):
+        if not w:
+            self.author = getNextCode(self.sql, "bksaut", "baf_code", last=999)
+            self.df.loadEntry(frt, pag, p, data=self.author)
+        else:
+            self.author = w
+        chk = self.sql.getRec(tables="bksaut", where=[("baf_code", "=",
+            self.author)], limit=1)
+        if not chk:
+            self.newaut = True
+        else:
+            self.newaut = False
+            for num, fld in enumerate(chk):
+                self.df.loadEntry(frt, pag, num, data=fld)
+
+    def doSnam(self, frt, pag, r, c, p, i, w):
+        self.snam = w
+
+    def doFnam(self, frt, pag, r, c, p, i, w):
+        if self.newaut:
+            chk = self.sql.getRec(tables="bksaut", where=[("baf_snam",
+                "=", self.snam), ("baf_fnam", "=", w)], limit=1)
+            if chk:
+                return "An Author with this Name Already Exists"
+
+    def doEnd(self, widget=None):
+        data = self.df.t_work[0][0]
+        if self.newaut:
+            self.sql.insRec("bksaut", data=data)
+        else:
+            self.sql.updRec("bksaut", data=data, where=[("baf_code", "=",
+                self.author)])
+        self.opts["mf"].dbm.commitDbase()
+        self.df.focusField("T", 0, 1)
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2016-02-27 13:18:41 +0000
+++ bwl/bc2010.py	2016-06-11 14:18:27 +0000
@@ -17,18 +17,18 @@
     -----
     pairs of teams = number of tabs / 6
     if remainder is 1 = replace 1 pair with a 4/3
-        "           2 = if rep42:
+    if remainder is 2 = if rep42:
                             replace 1 pair with a 2/2 and add a 2/2
                         else:
                             replace 1 pair with a 4/4
-        "           3 = if pairs = 1:
+    if remainder is 3 = if pairs = 1:
                             replace 1 pair with a 4/3 and add a 1/1
                         elif rep42:
                             replace 2 pairs with a 4/3 and 2/2 and add a 2/2
                         else:
                             replace 2 pairs with a 4/3 and 4/4
-        "           4 = 2/2
-        "           5 = replace 1 pair with a 4/3 and add a 2/2
+    if remainder is 4 = 2/2
+    if remainder is 5 = replace 1 pair with a 4/3 and add a 2/2
 
     Fours
     ------
@@ -40,26 +40,26 @@
                             replace 2 pairs with a 4/3 and 3/3 and add a 2/2
                         else:
                             replace 3 pairs with a 4/3 and 3 x 3/3
-                    2:
+    if remainder is 2:
                         if no pairs:
                             1/1
                         if pairs = 1:
                             replace 1 pair with a 3/3 and add a 2/2
                         else:
                             replace 2 pairs with 2 x 3/3 and add a 3/3
-                    3:
+    if remainder is 3:
                         if pairs = 1:
                             replace 1 pair with a 4/3 and add a 2/2
                         else:
                             replace 2 pairs with a 4/3 and a 3/3 and add a 3/3
-                    4:
+    if remainder is 4:
                         if no pairs:
                             2/2
                         else:
                             replace 1 pair with 2 x 3/3
-                    5 = replace 1 pair with a 4/3 and add a 3/3
-                    6 = 3/3
-                    7 = 4/3
+    if remainder is 5 = replace 1 pair with a 4/3 and add a 3/3
+    if remainder is 6 = 3/3
+    if remainder is 7 = 4/3
 
     Selection Criteria
     ------------------
@@ -126,15 +126,6 @@
         else:
             self.stime = "M"
         self.alltabs = {}
-        self.lasttab = self.nstart - 1
-        self.position = ["Skip", "Third", "Second", "Lead"]
-        self.arranged = {}
-        self.edit = False
-        self.drawn = False
-        self.saved = False
-        self.viewer = False
-        self.reprint = False
-        self.printed = False
         random.seed()
         return True
 
@@ -244,6 +235,16 @@
     def doDate(self, frt, pag, r, c, p, i, w):
         self.date = w
         self.dated = CCD(w, "D1", 10).disp
+        self.alltabs = {}
+        self.arranged = {}
+        self.edit = False
+        self.drawn = False
+        self.saved = False
+        self.viewer = False
+        self.reprint = False
+        self.printed = False
+        self.lasttab = self.nstart - 1
+        self.position = ["Skip", "Third", "Second", "Lead"]
 
     def doTime(self, frt, pag, r, c, p, i, w):
         self.time = w
@@ -288,8 +289,8 @@
             self.df.loadEntry(frt, pag, p + 1, data=self.mixed)
             self.rating = chk[self.sql.bwldrm_col.index("bdm_rating")]
             self.df.loadEntry(frt, pag, p + 2, data=self.rating)
-            self.dbase = chk[self.sql.bwldrm_col.index("bdm_dbase")]
-            self.df.loadEntry(frt, pag, p + 3, data=self.dbase)
+            self.nbase = chk[self.sql.bwldrm_col.index("bdm_dbase")]
+            self.df.loadEntry(frt, pag, p + 3, data=self.nbase)
             self.tsize = chk[self.sql.bwldrm_col.index("bdm_tsize")]
             self.mrate = chk[self.sql.bwldrm_col.index("bdm_mrate")]
             self.df.loadEntry(frt, pag, p + 4, data=self.mrate)
@@ -361,7 +362,13 @@
             return "sk1"
 
     def doDrawBase(self, frt, pag, r, c, p, i, w):
-        self.dbase = w
+        if not w == self.dbase:
+            ok = askQuestion(self.opts["mf"].body, "Override Default",
+                "Are You Sure the  Default Base (%s) Must be Overridden?" %
+                self.dbase, default="no")
+            if ok == "no":
+                return "rf"
+        self.nbase = w
 
     def doRate(self, frt, pag, r, c, p, i, w):
         if p == 5:
@@ -524,7 +531,10 @@
     def doTab(self, frt, pag, r, c, p, i, w):
         self.modify = False
         self.visitor = False
-        if not w:
+        if w == 999999:
+            self.doLoadTabs()
+            return "rf"
+        elif not w:
             yn = askQuestion(self.opts["mf"].body, "Missing Tab",
                 "Is This a Visitor?", default="no")
             if yn == "yes":
@@ -537,18 +547,35 @@
                 return "rf"
         elif not self.doLoadTab(w, frt):
             return "Invalid Tab Number"
-        elif self.dbase in ("C", "P") and not self.df.t_work[1][0][p + 4]:
+        elif self.nbase in ("C", "P") and not self.df.t_work[1][0][p + 4]:
             self.df.loadEntry(frt, pag, p + 4, data="1")
             return "sk3"
-        elif self.dbase in ("C", "R") and not self.df.t_work[1][0][p + 5]:
+        elif self.nbase in ("C", "R") and not self.df.t_work[1][0][p + 5]:
             self.df.loadEntry(frt, pag, p + 5, data=1)
-            if self.dbase == "C":
+            if self.nbase == "C":
                 return "sk3"
             else:
                 return "sk4"
         else:
             return "sk5"
 
+    def doLoadTabs(self):
+        self.alltabs = {}
+        while len(self.alltabs) < 60:
+            tab = random.randrange(1, 200)
+            if not tab in self.alltabs:
+                if self.doLoadTab(tab, "T", err=False):
+                    self.df.loadEntry("T", 1, 6, data="Y")
+                    if not self.df.t_work[1][0][4]:
+                        self.df.t_work[1][0][4] = 0
+                    else:
+                        self.df.t_work[1][0][4] = int(self.df.t_work[1][0][4])
+                    self.alltabs[tab] = self.df.t_work[1][0][1:]
+        self.drawn = False
+        self.printed = False
+        self.df.loadEntry("T", 0, 7, data=len(self.alltabs))
+        self.df.clearFrame("T", 1)
+
     def doSurname(self, frt, pag, r, c, p, i, w):
         self.sname = w
 
@@ -564,12 +591,12 @@
             return "sk3"
 
     def doGender(self, frt, pag, r, c, p, i, w):
-        if self.dbase == "R":
+        if self.nbase == "R":
             self.df.loadEntry(frt, pag, p + 1, data="")
             return "sk1"
 
     def doPosition(self, frt, pag, r, c, p, i, w):
-        if self.dbase == "P":
+        if self.nbase == "P":
             self.df.loadEntry(frt, pag, p + 1, data="")
             return "sk1"
 
@@ -603,11 +630,13 @@
         else:
             self.df.focusField("T", 1, 1)
 
-    def doLoadTab(self, tab, form="T"):
+    def doLoadTab(self, tab, form="T", err=True):
         c = self.sql.bwltab_col
         acc = self.sql.getRec(tables="bwltab", where=[("btb_cono", "=",
             self.opts["conum"]), ("btb_tab", "=", tab)], limit=1)
         if not acc:
+            if not err:
+                return
             if tab >= self.nstart:
                 showError(self.opts["mf"].body, "Visitor's Tab",
                     "This Tab Number is Reserved for Visitors")
@@ -747,19 +776,27 @@
             if yn == "no":
                 return
         tit = ("Draw Parameters",)
-        r1s = (("Three", "3"), ("Four", "4"))
-        r2s = (("Yes", "Y"), ("No", "N"))
-        fld = (
-            (("T",0,0,0),("IRB",r1s),0,"Team Size","",
+        r1s = (("Random", "R"), ("Strength", "S"))
+        r2s = (("Three", "3"), ("Four", "4"))
+        r3s = (("Yes", "Y"), ("No", "N"))
+        if self.nbase == "P":
+            self.svs = False
+            fld = [(("T",0,0,0),("ORB",r1s),0,"Type","",
+                "R","N",None,None,None,None)]
+        else:
+            fld = [(("T",0,0,0),("IRB",r1s),0,"Type","",
+                "R","N",self.doType,None,None,None)]
+        fld.extend([
+            (("T",0,1,0),("IRB",r2s),0,"Team Size","",
                 "3","N",self.doSize,None,None,None),
-            (("T",0,1,0),("IRB",r2s),0,"Prefer Pairs","",
+            (("T",0,2,0),("IRB",r3s),0,"Prefer Pairs","",
                 self.rep42,"N",self.doRep42,None,None,None,None,
                 "Whether to Replace teams of Fours with Pairs."),
-            (("T",0,2,0),"IUA",40,"Greens","Greens (A,B,C)",
+            (("T",0,3,0),"IUA",40,"Greens","Greens (A,B,C)",
                 "","N",self.doGreens,None,None,("notblank",),None,
                 "Available Greens in the format A,B or A,B345 showing "\
                 "Green Code and Rinks. If the Rinks are Not Entered they "\
-                "will Default to 6."))
+                "will Default to 6.")])
         but = (("Cancel",None,self.doCancel,1,None,None,None,1),)
         state = self.df.disableButtonsTags()
         self.df.setWidget(self.df.mstFrame, state="hide")
@@ -775,6 +812,12 @@
         self.gr.closeProcess()
         self.opts["mf"].closeLoop()
 
+    def doType(self, frt, pag, r, c, p, i, w):
+        if w == "R":
+            self.svs = False
+        else:
+            self.svs = True
+
     def doSize(self, frt, pag, r, c, p, i, w):
         self.tsize = int(w)
         if self.mixed == "N":
@@ -794,7 +837,7 @@
         else:
             self.needed = self.getNeeded(self.men)
             self.needed += self.getNeeded(self.wom)
-        self.gr.topf[0][2][4] = "Greens (%s Rinks Needed)" % self.needed
+        self.gr.topf[0][3][4] = "Greens (%s Rinks Needed)" % self.needed
         return "sk1"
 
     def doRep42(self, frt, pag, r, c, p, i, w):
@@ -804,7 +847,7 @@
         else:
             self.needed = self.getNeeded(self.men)
             self.needed += self.getNeeded(self.wom)
-        self.gr.topf[0][2][4] = "Greens (%s Rinks Needed)" % self.needed
+        self.gr.topf[0][3][4] = "Greens (%s Rinks Needed)" % self.needed
 
     def getNeeded(self, num):
         qty = 0
@@ -866,7 +909,6 @@
         self.ndict = copy.deepcopy(self.alltabs)
         # Arranged
         tabcnt = 0
-        self.count = 0
         if self.arranged:
             self.adraw2 = []
             for rink in self.arranged:
@@ -921,18 +963,21 @@
                 self.doPositions(grp)
                 self.doHistory(self.weeks * -7)
                 if self.mixed == "Y":
+                    self.count = 0
                     text = "Selecting the Best Mixed Combination"
                 elif not num:
+                    self.count = 0
                     text = "Selecting the Best Men's Combination"
                 else:
+                    self.count = 0
                     text = "Selecting the Best Lady's Combination"
                 text = text + """
 
 Combination Number %10s"""
                 splash = SplashScreen(self.opts["mf"].body, text)
                 splash.label.configure(text=text % "")
-                # Do 10000 iterations and then look for the best one
-                for retry in xrange(10000):
+                # Do 5000 iterations and then look for the best one
+                for retry in xrange(5000):
                     tot = self.doDrawRest(splash, text)
                     scl = 0
                     bcl = 0
@@ -1000,133 +1045,142 @@
         self.opts["mf"].closeLoop()
 
     def doPositions(self, grp):
-            self.skip1 = []
-            self.third1 = []
-            self.second1 = []
-            self.lead1 = []
-            for tab in grp:
-                if self.dbase == "R":
-                    tab[4] = 0
-                if self.dbase == "R" or tab[4] == 4:
-                    self.skip1.append(tab)
-                elif tab[4] == 3:
-                    self.third1.append(tab)
-                elif tab[4] == 2:
-                    self.second1.append(tab)
-                else:
-                    self.lead1.append(tab)
-            # Calculate the number of players, by position, required
-            # Treating 2nds as 3rds in trips
-            teams = len(grp) / (self.tsize * 2)  # full teams
-            odds = []                            # others
-            rem = len(grp) % (self.tsize * 2)    # players short
-            if rem:
-                if self.tsize == 3:
-                    if rem == 1:
-                        teams -= 1
-                        odds = ["4/3"]
-                    elif rem == 2:
-                        if teams < 1:
-                            odds = ["1/1"]
-                        else:
-                            teams -= 1
-                            if self.rep42 == "Y":
-                                odds = ["2/2", "2/2"]
-                            else:
-                                odds = ["4/4"]
-                    elif rem == 3:
-                        if teams > 1:
-                            teams -= 2
-                            if self.rep42 == "Y":
-                                odds = ["4/3", "2/2", "2/2"]
-                            else:
-                                odds = ["4/3", "4/4"]
-                        else:
-                            teams -= 1
-                            odds = ["4/3", "1/1"]
-                    elif rem == 4:
-                        if teams < 2 or self.rep42 == "Y":
-                            odds = ["2/2"]
-                        else:
-                            teams -= 2
-                            odds = ["4/4", "4/4"]
-                    elif rem == 5:
-                        if teams < 3 or self.rep42 == "Y":
-                            teams -= 1
-                            odds = ["4/3", "2/2"]
-                        else:
-                            teams -= 3
-                            odds = ["4/4", "4/4", "4/3"]
-                elif self.tsize == 4:
-                    if rem == 1:
-                        if teams == 1:
-                            teams -= 1
-                            odds = ["4/3", "1/1"]
-                        elif teams == 2:
-                            teams -= 2
-                            odds = ["4/3", "3/3", "2/2"]
-                        else:
-                            teams -= 3
-                            odds = ["4/3", "3/3", "3/3", "3/3"]
-                    elif rem == 2:
-                        if teams < 1:
-                            odds = ["1/1"]
-                        elif teams == 1:
-                            teams -= 1
-                            odds = ["3/3", "2/2"]
-                        else:
-                            teams -= 2
-                            odds = ["3/3", "3/3", "3/3"]
-                    elif rem == 3:
-                        if teams == 1:
-                            teams -= 1
-                            odds = ["4/3", "2/2"]
-                        else:
-                            teams -= 2
-                            odds = ["4/3", "3/3", "3/3"]
-                    elif rem == 4:
-                        if teams < 1:
-                            odds = ["2/2"]
-                        else:
-                            teams -= 1
-                            odds = ["3/3", "3/3"]
-                    elif rem == 5:
-                        teams -= 1
-                        odds = ["4/3", "3/3"]
-                    elif rem == 6:
-                        odds = ["3/3"]
-                    elif rem == 7:
-                        odds = ["4/3"]
-            self.skips = (teams + len(odds)) * 2
-            if self.tsize == 4:
-                self.thirds = teams * 2
-                for o in odds:
-                    if o in ("4/3", "3/3"):
-                        self.thirds += 2
-                self.seconds = teams * 2
-                for o in odds:
-                    if o == "4/3":
-                        self.seconds += 1
-                self.leads = teams * 2
-                for o in odds:
-                    if not o in ("1/1",):
-                        self.leads += 2
-            elif self.tsize == 3:
-                self.thirds = teams * 2
-                for o in odds:
-                    if o in ("4/4", "4/3"):
-                        self.thirds += 2
-                self.seconds = 0
-                for o in odds:
-                    if o == "4/4":
-                        self.seconds += 2
-                    elif o == "4/3":
-                        self.seconds += 1
-                self.leads = teams * 2
-                for o in odds:
-                    if not o in ("1/1",):
-                        self.leads += 2
-            # Sort players by position by rating
+        # Calculate the number of players, by position, required
+        # Treating 2nds as 3rds in trips
+        teams = len(grp) / (self.tsize * 2)  # full teams
+        odds = []                            # others
+        rem = len(grp) % (self.tsize * 2)    # players short
+        if rem:
+            if self.tsize == 3:
+                if rem == 1:
+                    teams -= 1
+                    odds = ["4/3"]
+                elif rem == 2:
+                    if teams < 1:
+                        odds = ["1/1"]
+                    else:
+                        teams -= 1
+                        if self.rep42 == "Y":
+                            odds = ["2/2", "2/2"]
+                        else:
+                            odds = ["4/4"]
+                elif rem == 3:
+                    if teams > 1:
+                        teams -= 2
+                        if self.rep42 == "Y":
+                            odds = ["4/3", "2/2", "2/2"]
+                        else:
+                            odds = ["4/3", "4/4"]
+                    else:
+                        teams -= 1
+                        odds = ["4/3", "1/1"]
+                elif rem == 4:
+                    if teams < 2 or self.rep42 == "Y":
+                        odds = ["2/2"]
+                    else:
+                        teams -= 2
+                        odds = ["4/4", "4/4"]
+                elif rem == 5:
+                    if teams < 3 or self.rep42 == "Y":
+                        teams -= 1
+                        odds = ["4/3", "2/2"]
+                    else:
+                        teams -= 3
+                        odds = ["4/4", "4/4", "4/3"]
+            elif self.tsize == 4:
+                if rem == 1:
+                    if teams == 1:
+                        teams -= 1
+                        odds = ["4/3", "1/1"]
+                    elif teams == 2:
+                        teams -= 2
+                        odds = ["4/3", "3/3", "2/2"]
+                    else:
+                        teams -= 3
+                        odds = ["4/3", "3/3", "3/3", "3/3"]
+                elif rem == 2:
+                    if teams < 1:
+                        odds = ["1/1"]
+                    elif teams == 1:
+                        teams -= 1
+                        odds = ["3/3", "2/2"]
+                    else:
+                        teams -= 2
+                        odds = ["3/3", "3/3", "3/3"]
+                elif rem == 3:
+                    if teams == 1:
+                        teams -= 1
+                        odds = ["4/3", "2/2"]
+                    else:
+                        teams -= 2
+                        odds = ["4/3", "3/3", "3/3"]
+                elif rem == 4:
+                    if teams < 1:
+                        odds = ["2/2"]
+                    else:
+                        teams -= 1
+                        odds = ["3/3", "3/3"]
+                elif rem == 5:
+                    teams -= 1
+                    odds = ["4/3", "3/3"]
+                elif rem == 6:
+                    odds = ["3/3"]
+                elif rem == 7:
+                    odds = ["4/3"]
+        self.skips = (teams + len(odds)) * 2
+        if self.tsize == 4:
+            self.thirds = teams * 2
+            for o in odds:
+                if o in ("4/3", "3/3"):
+                    self.thirds += 2
+            self.seconds = teams * 2
+            for o in odds:
+                if o == "4/3":
+                    self.seconds += 1
+            self.leads = teams * 2
+            for o in odds:
+                if not o in ("1/1",):
+                    self.leads += 2
+        elif self.tsize == 3:
+            self.thirds = teams * 2
+            for o in odds:
+                if o in ("4/4", "4/3"):
+                    self.thirds += 2
+            self.seconds = 0
+            for o in odds:
+                if o == "4/4":
+                    self.seconds += 2
+                elif o == "4/3":
+                    self.seconds += 1
+            self.leads = teams * 2
+            for o in odds:
+                if not o in ("1/1",):
+                    self.leads += 2
+        # Group players by position
+        self.skip1 = []
+        self.third1 = []
+        self.second1 = []
+        self.lead1 = []
+        for tab in grp:
+            if self.nbase == "R":
+                tab[4] = 0
+                self.skip1.append(tab)
+            elif tab[4] == 4:
+                self.skip1.append(tab)
+            elif tab[4] == 3:
+                self.third1.append(tab)
+            elif tab[4] == 2:
+                self.second1.append(tab)
+            else:
+                self.lead1.append(tab)
+        if self.nbase == "P":
+            # Shuffle players
+            random.shuffle(self.skip1)
+            random.shuffle(self.third1)
+            random.shuffle(self.second1)
+            random.shuffle(self.lead1)
+        else:
+            # Sort players by rating
             if self.order == "A":
                 rev = False
             else:
@@ -1135,66 +1189,27 @@
             self.third1 = sorted(self.third1, key=itemgetter(5), reverse=rev)
             self.second1 = sorted(self.second1, key=itemgetter(5), reverse=rev)
             self.lead1 = sorted(self.lead1, key=itemgetter(5), reverse=rev)
-            # Skips
-            while self.third1 and len(self.skip1) < self.skips:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.third1), 1)
-                    self.skip1.append(self.third1.pop(idx))
-                else:
-                    self.skip1.append(self.third1.pop())
-            while self.second1 and len(self.skip1) < self.skips:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.second1), 1)
-                    self.skip1.append(self.second1.pop(idx))
-                else:
-                    self.skip1.append(self.second1.pop())
-            while self.lead1 and len(self.skip1) < self.skips:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.lead1), 1)
-                    self.skip1.append(self.lead1.pop(idx))
-                else:
-                    self.skip1.append(self.lead1.pop())
-            while len(self.skip1) > self.skips:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.skip1), 1)
-                    self.third1.append(self.skip1.pop(idx))
-                else:
-                    self.third1.append(self.skip1.pop(0))
-            self.third1 = sorted(self.third1, key=itemgetter(5), reverse=rev)
-            self.third1 = sorted(self.third1, key=itemgetter(4))
-            # Thirds
-            while self.second1 and len(self.third1) < self.thirds:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.second1), 1)
-                    self.third1.append(self.second1.pop(idx))
-                else:
-                    self.third1.append(self.second1.pop())
-            while self.lead1 and len(self.third1) < self.thirds:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.lead1), 1)
-                    self.third1.append(self.lead1.pop(idx))
-                else:
-                    self.third1.append(self.lead1.pop())
-            while len(self.third1) > self.thirds:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.third1), 1)
-                    self.second1.append(self.third1.pop(idx))
-                else:
-                    self.second1.append(self.third1.pop(0))
-            self.second1 = sorted(self.second1,key=itemgetter(5), reverse=rev)
-            self.second1 = sorted(self.second1,key=itemgetter(4))
-            while len(self.second1) < self.seconds:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.lead1), 1)
-                    self.second1.append(self.lead1.pop(idx))
-                else:
-                    self.second1.append(self.lead1.pop())
-            while len(self.second1) > self.seconds:
-                if self.dbase == "P":
-                    idx = random.randrange(0, len(self.second1), 1)
-                    self.lead1.append(self.second1.pop(idx))
-                else:
-                    self.lead1.append(self.second1.pop(0))
+        # Skips
+        while self.third1 and len(self.skip1) < self.skips:
+            self.skip1.append(self.third1.pop())
+        while self.second1 and len(self.skip1) < self.skips:
+            self.skip1.append(self.second1.pop())
+        while self.lead1 and len(self.skip1) < self.skips:
+            self.skip1.append(self.lead1.pop())
+        while len(self.skip1) > self.skips:
+            self.third1.append(self.skip1.pop(0))
+        # Thirds
+        while self.second1 and len(self.third1) < self.thirds:
+            self.third1.append(self.second1.pop())
+        while self.lead1 and len(self.third1) < self.thirds:
+            self.third1.append(self.lead1.pop())
+        while len(self.third1) > self.thirds:
+            self.second1.append(self.third1.pop(0))
+        # Seconds
+        while len(self.second1) < self.seconds:
+            self.second1.append(self.lead1.pop())
+        while len(self.second1) > self.seconds:
+            self.lead1.append(self.second1.pop(0))
 
     def doHistory(self, days):
         ldate = projectDate(self.date, days)
@@ -1227,14 +1242,14 @@
                 self.hist[tab][1].append(opp[0])
 
     def doDrawRest(self, splash, text):
+        # Splash
         self.count += 1
         splash.label.configure(text=text % self.count)
         splash.refreshSplash()
-        total = 0
-        draws = []
-        self.adraw2 = []
+        # Rinks
         rinks2 = copyList(self.rinks1)
         random.shuffle(rinks2)
+        # Shuffle players
         self.skip2 = copy.deepcopy(self.skip1)
         random.shuffle(self.skip2)
         self.third2 = copy.deepcopy(self.third1)
@@ -1243,20 +1258,59 @@
         random.shuffle(self.second2)
         self.lead2 = copy.deepcopy(self.lead1)
         random.shuffle(self.lead2)
-        for s in xrange(self.skips):
-            draws.append([self.doGetPlayer()])
-        for s in xrange(self.thirds):
-            draws[s].append(self.doGetPlayer())
-        for s in xrange(self.seconds):
-            draws[s].append(self.doGetPlayer())
-        for s in xrange(self.leads):
-            draws[s].append(self.doGetPlayer())
+        # Draw teams
+        draws = []
+        if self.svs:
+            # Strength v Strength
+            # Sort players for strength v strength
+            if self.order == "A":
+                rev = True
+            else:
+                rev = False
+            self.skip2 = sorted(self.skip2, key=itemgetter(5),
+                    reverse=rev)
+            self.third2 = sorted(self.third2, key=itemgetter(5),
+                    reverse=rev)
+            self.second2 = sorted(self.second2, key=itemgetter(5),
+                    reverse=rev)
+            self.lead2 = sorted(self.lead2, key=itemgetter(5),
+                    reverse=rev)
+            # Get players
+            for s in xrange(self.skips):
+                draws.append([self.doGetSPlayer(False)])
+            for s in xrange(self.thirds):
+                draws[s].append(self.doGetSPlayer(True))
+            for s in xrange(self.seconds):
+                draws[s].append(self.doGetSPlayer(False))
+            for s in xrange(self.leads):
+                if self.tsize == 3:
+                    draws[s].append(self.doGetSPlayer(False))
+                else:
+                    draws[s].append(self.doGetSPlayer(True))
+        else:
+            # Random Draw
+            # Get players
+            for s in xrange(self.skips):
+                draws.append([self.doGetRPlayer()])
+            for s in xrange(self.thirds):
+                draws[s].append(self.doGetRPlayer())
+            for s in xrange(self.seconds):
+                draws[s].append(self.doGetRPlayer())
+            for s in xrange(self.leads):
+                draws[s].append(self.doGetRPlayer())
+        # insert number of players per team
         for n, d in enumerate(draws):
             draws[n].insert(0, len(d))
             tot = 0
+            div = 0
             for x in d[1:]:
-                tot += x[5]
-            draws[n].insert(1, tot)
+                if x[5]:
+                    div += 1
+                    tot += x[5]
+            draws[n].insert(1, round(tot / float(div), 2))
+        # Pair teams and allocate rinks
+        total = 0
+        self.adraw2 = []
         if self.order == "A":
             rev = False
         else:
@@ -1265,10 +1319,6 @@
         draws = sorted(draws, key=itemgetter(0))
         for x in xrange(0, len(draws), 2):
             g = rinks2.pop(0)
-            #if len(draws[x]) > len(draws[x + 1]):
-            #    draws[x + 1][1] += draws[x + 1][-1][5]
-            #elif len(draws[x]) < len(draws[x + 1]):
-            #    draws[x][1] += draws[x][-1][5]
             self.loadData(g, draws[x])
             tot = draws[x][1]
             self.loadData(g, draws[x + 1])
@@ -1279,15 +1329,37 @@
                 total = tot
         return total
 
-    def doGetPlayer(self):
+    def doGetRPlayer(self):
         if self.skip2:
             return self.skip2.pop()
         elif self.third2:
             return self.third2.pop()
         elif self.second2:
             return self.second2.pop()
+        else:
+            return self.lead2.pop()
+
+    def doGetSPlayer(self, nxt):
+        if self.skip2:
+            if not nxt or len(self.skip2) == 1:
+                return self.skip2.pop(0)
+            else:
+                return self.skip2.pop(1)
+        elif self.third2:
+            if not nxt or len(self.third2) == 1:
+                return self.third2.pop(0)
+            else:
+                return self.third2.pop(1)
+        elif self.second2:
+            if not nxt or len(self.second2) == 1:
+                return self.second2.pop(0)
+            else:
+                return self.second2.pop(1)
         elif self.lead2:
-            return self.lead2.pop()
+            if not nxt or len(self.lead2) == 1:
+                return self.lead2.pop(0)
+            else:
+                return self.lead2.pop(1)
 
     def loadData(self, g, d):
         if d[2][2]:
@@ -1318,7 +1390,7 @@
             ("bdt_date", "=", self.date), ("bdt_time", "=", self.time)])
         # Insert bwldrm
         self.sql.insRec("bwldrm", data=[self.opts["conum"], self.date,
-            self.time, self.mixed, self.rating, self.dbase, self.tsize,
+            self.time, self.mixed, self.rating, self.nbase, self.tsize,
             self.ratem.work, self.ratev.work])
         # Insert bwldrt
         for x in xrange(0, len(self.adraw1), 2):
@@ -1493,7 +1565,7 @@
     def doShowDraw(self, title, draw, select=False):
         cols = (
             ("rink", "RK", 2, "UA", "N"),
-            ("rate", "RTE", 3, "UI", "N"),
+            ("rate", "AVG", 5.2, "UD", "N"),
             ("skip", "Skip", 24, "UA", "N"),
             ("third", "Third", 24, "UA", "N"),
             ("second", "Second", 24, "UA", "N"),

=== modified file 'bwl/bc3010.py'
--- bwl/bc3010.py	2016-02-27 13:18:41 +0000
+++ bwl/bc3010.py	2016-06-09 14:49:04 +0000
@@ -37,26 +37,35 @@
             "Tabs Draw Reprint (%s)" % __name__)
         dte = {
             "stype": "R",
-            "tables": ("bwldrt",),
+            "tables": ("bwldrm",),
             "cols": (
-                ("bdt_date", "", 0, "Date","Y"),
-                ("bdt_time", "", 0, "T")),
-            "group": "bdt_date, bdt_time",
-            "order": "bdt_date, bdt_time desc"}
+                ("bdm_date", "", 0, ""),
+                ("bdm_time", "", 0, ""),
+                ("bdm_mixed", "", 0, ""),
+                ("bdm_rating", "", 0, ""),
+                ("bdm_dbase", "", 0, ""),
+                ("bdm_tsize", "", 0, "")),
+            "where": [("bdm_cono", "=", self.opts["conum"])],
+            "order": "bdm_date, bdm_time desc"}
+
         r1s = (("Morning", "M"), ("Afternoon", "A"))
         r2s = (("Yes", "Y"), ("No", "N"))
+        r3s = (("Position", "P"), ("Rating", "R"), ("Combination", "C"))
         fld = (
             (("T",0,0,0),"ID1",10,"Date","",
                 self.sysdt,"Y",self.doDate,dte,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Time","",
                 "A","N",self.doTime,None,None,None),
-            (("T",0,2,0),("IRB",r2s),0,"Cash Takings Sheet","",
-                "Y","Y",self.doTakings,None,None,None),
-            (("T",0,3,0),("IRB",r2s),0,"Tabs Draw Listing","",
+            (("T",0,2,0),("ORB",r2s),0,"Mixed Gender"),
+            (("T",0,3,0),("ORB",r2s),0,"Mixed Rating"),
+            (("T",0,4,0),("ORB",r3s),0,"Draw By"),
+            (("T",0,5,0),("IRB",r2s),0,"Cash Takings Sheet","",
+                "N","Y",self.doTakings,None,None,None),
+            (("T",0,6,0),("IRB",r2s),0,"Tabs Draw Listing","",
                 "N","Y",self.doListing,None,None,None),
-            (("T",0,4,0),("IRB",r2s),0,"Tabs Draw Board","",
-                "N","Y",self.doBoard,None,None,None),
-            (("T",0,5,0),("IRB",r2s),0,"Include Empty Rinks","",
+            (("T",0,7,0),("IRB",r2s),0,"Tabs Draw Board","",
+                "Y","Y",self.doBoard,None,None,None),
+            (("T",0,8,0),("IRB",r2s),0,"Include Empty Rinks","",
                 "N","Y",self.doEmpty,None,None,None))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
@@ -73,11 +82,15 @@
             self.timed = "Afternoon"
         else:
             self.timed = "Morning"
-        chk = self.sql.getRec(tables="bwldrm", where=[("bdm_cono", "=",
-            self.opts["conum"]), ("bdm_date", "=", self.date), ("bdm_time",
-            "=", self.time)], limit=1)
+        chk = self.sql.getRec(tables="bwldrm", cols=["bdm_mixed",
+            "bdm_rating", "bdm_dbase"], where=[("bdm_cono", "=",
+            self.opts["conum"]), ("bdm_date", "=", self.date),
+            ("bdm_time", "=", self.time)], limit=1)
         if not chk:
             return "A Draw for this Date and Time Does Not Exist"
+        self.df.loadEntry(frt, pag, p+1, data=chk[0])
+        self.df.loadEntry(frt, pag, p+2, data=chk[1])
+        self.df.loadEntry(frt, pag, p+3, data=chk[2])
 
     def doTakings(self, frt, pag, r, c, p, i, w):
         self.takings = w

=== modified file 'bwl/bc3020.py'
--- bwl/bc3020.py	2016-05-21 12:42:32 +0000
+++ bwl/bc3020.py	2016-06-07 13:48:41 +0000
@@ -109,7 +109,7 @@
             self.tab = r[c.index("bdt_tab")]
             if not self.tab in self.dic:
                 self.dic[self.tab] = []
-            nam = r[c.index("bdt_name")]
+            nam = self.getName(self.tab)
             pos = (0 - (r[c.index("bdt_pos")] - 4))
             side[pos] = ["", nam]
             dte = CCD(r[c.index("bdt_date")], "D1", 10).disp
@@ -132,33 +132,32 @@
                 side[2][0], side[2][1], side[3][0], side[3][1]])
             dat.append(d)
             l = self.tab
-        self.fpdf = MyFpdf(auto=True, foot=True)
+        self.fpdf = MyFpdf(name="bc2010", head=120, auto=True, foot=True)
         self.fpdf.header = self.pageHeading
         self.fpdf.add_page()
-        self.fpdf.set_font("Courier","",9)
         cwth = self.fpdf.get_string_width("X")
         for d in dat:
             if not d:
                 self.fpdf.drawText(txt="", w=0, h=5, border=0, ln=1)
             else:
-                self.fpdf.cell(w=cwth*17, h=5, txt=d[0], border=0, ln=0)
+                self.fpdf.cell(w=cwth*21, h=5, txt=d[0], border=0, ln=0)
                 self.fpdf.cell(w=cwth*11, h=5, txt=d[1], border=0, ln=0)
                 if d[2]:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[3], border=1, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3], border=1, ln=0)
                 else:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[3], border=0, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3], border=0, ln=0)
                 if d[4]:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[5], border=1, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5], border=1, ln=0)
                 else:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[5], border=0, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5], border=0, ln=0)
                 if d[6]:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[7], border=1, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[7], border=1, ln=0)
                 else:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[7], border=0, ln=0)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[7], border=0, ln=0)
                 if d[8]:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[9], border=1, ln=1)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[9], border=1, ln=1)
                 else:
-                    self.fpdf.cell(w=cwth*17, h=5, txt=d[9], border=0, ln=1)
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[9], border=0, ln=1)
         if self.whole == "Y":
             # Print top attendees
             self.heading = "summary"
@@ -185,7 +184,7 @@
                         self.cnt = self.cnt[25:]
                 left = left + (25 - len(left)) * [["", ""]]
                 right = right + (25 - len(right)) * [["", ""]]
-                self.fpdf.set_font("Arial", "B", 15)
+                self.fpdf.set_font("Arial", "", 15)
                 cwth = self.fpdf.get_string_width("X")
                 for x in xrange(25):
                     if left[x][1]:
@@ -220,13 +219,14 @@
                 nam = "%s, %s" % (rec[0], rec[1][0])
             else:
                 nam = rec[0]
+            nam = nam.replace("VAN DER", "V D")
             if tab in self.dic[self.tab]:
                 self.clash = True
             self.dic[self.tab].append(tab)
         return nam
 
     def pageHeading(self):
-        self.fpdf.set_font("Arial","B",15)
+        self.fpdf.setFont("Arial", "B", 15)
         if os.path.isfile(self.image):
             self.fpdf.image(self.image, 10, 10, 15, 11)
             self.fpdf.cell(20)
@@ -237,8 +237,8 @@
             self.fpdf.cell(0, 10, "Tabs-In for the period %s to %s" % \
                 (self.start.disp, self.end.disp), "LRB", 1, "C")
             self.fpdf.ln(8)
-            self.fpdf.set_font("Courier","B",9)
-            self.fpdf.cell(0, 5, "%-16s %-10s %-16s %-16s %-16s %-16s" % \
+            self.fpdf.setFont(style="B")
+            self.fpdf.cell(0, 5, "%-20s %-10s %-20s %-20s %-20s %-20s" % \
                 ("Member", "   Date", "Skip", "Third", "Second", "Lead"), "B")
             self.fpdf.ln(5)
         else:

=== modified file 'bwl/bcc110.py'
--- bwl/bcc110.py	2016-02-27 13:18:41 +0000
+++ bwl/bcc110.py	2016-06-15 18:58:28 +0000
@@ -139,7 +139,7 @@
 
     def doNStart(self, frt, pag, r, c, p, i, w):
         if w < self.mstart or w < self.fstart or w > 890000:
-            return "Invalid Number, Must be Greater than Male and Female"
+            return "Invalid Number, Less than Male or Female or > 890000"
         if self.mstart == self.fstart:
             r = w - self.mstart
             m = 400

=== modified file 'crs/cr4010_rne.py'
--- crs/cr4010_rne.py	2016-05-21 12:42:32 +0000
+++ crs/cr4010_rne.py	2016-06-06 08:18:14 +0000
@@ -64,7 +64,8 @@
             ("Balances",self.doTagSelect,("T",0,2),("T",0,1)),
             ("History",self.doTagSelect,("T",0,2),("T",0,1)),
             ("Trans",self.doTrans1,("T",0,2),("T",0,1)))
-        r1s = (("No","N"),("Yes","Y"))
+        r1s = (("Diminishing", "D"), ("Flat", "F"))
+        r2s = (("No","N"),("Yes","Y"))
         fld = (
             (("T",0,0,0),"INA",7,"Acc-Num","Account Number",
                 "","N",self.doAccNum,crm,None,None),
@@ -94,19 +95,21 @@
             (("T",2,8,0),"OUI",8,"Bank Branch"),
             (("T",2,9,0),"OUA",16,"Bank Account"),
             (("T",2,10,0),"OUI",7,"G/L Account"),
-            (("T",3,0,0),"OUD",5.2,"Advertising Discount"),
-            (("T",3,1,0),"OUD",5.2,"Incentive Discount"),
-            (("T",3,2,0),"OUD",5.2,"Incentive From"),
-            (("T",3,3,0),"OUD",5.2,"Incentive To"),
-            (("T",3,4,0),"OUA",1,"Rebate Period"),
-            (("T",3,5,0),"OUD",5.2,"Rebate Rate"),
-            (("T",3,6,0),"ONA",30,"Targeted"),
-            (("T",3,7,0),"OUA",1,"Advert Period"),
-            (("T",3,8,0),"OUD",5.2,"Advert Rate"),
-            (("T",3,9,0),"OUD",9.2,"ADHOC Amount"),
-            (("T",3,10,0),"OUD",5.2,"SWELL Rate"),
-            (("T",3,11,0),"Od2",7,"Period Start"),
-            (("T",3,12,0),"Od2",7,"Period End"),
+            (("T",3,0,0),("ORB",r1s),0,"Discount Base"),
+            (("T",3,1,0),"OUD",5.2,"Advertising Discount"),
+            (("T",3,2,0),"OUD",5.2,"Incentive Discount"),
+            (("T",3,3,0),"OUD",5.2,"Incentive From"),
+            (("T",3,4,0),"OUD",5.2,"Incentive To"),
+            (("T",3,5,0),"OUA",1,"Rebate Period"),
+            (("T",3,6,0),"OUD",5.2,"Rebate Rate"),
+            (("T",3,7,0),"ONA",30,"Targeted"),
+            (("T",3,8,0),"OUA",1,"Advert Period"),
+            (("T",3,9,0),"OUD",5.2,"Advert Rate"),
+            (("T",3,10,0),"OUD",9.2,"ADHOC Amount"),
+            (("T",3,11,0),"OUD",5.2,"SWELL Rate"),
+            (("T",3,12,0),"Od2",7,"Period Start"),
+            (("T",3,13,0),"Od2",7,"Period End"),
+            (("T",3,14,0),"ONA",10,"EFT Reference"),
             (("T",4,0,0),"Od1",10,"Date Last Purchased"),
             (("T",4,1,0),"Od1",10,"Date Last Paid"),
             (("T",4,2,0),"OSD",13.2,"Total Balance"),
@@ -118,7 +121,7 @@
             (("C",5,0,0),"OSD",13.2,"Purchases","","","N",
                 None,None,None,None,("Months",13)),
             (("C",5,0,1),"OSD",13.2,"Payments"),
-            (("T",6,0,0),("IRB",r1s),0,"History", "",
+            (("T",6,0,0),("IRB",r2s),0,"History", "",
                 "N","N",self.doHistory,None,None,None),
             (("T",6,1,0),"IUI",4,"Year", "",
                 0,"N",self.doYear,None,None,None))

=== added file 'csv/bksaut_fld.csv'
--- csv/bksaut_fld.csv	1970-01-01 00:00:00 +0000
+++ csv/bksaut_fld.csv	2016-05-28 14:01:47 +0000
@@ -0,0 +1,3 @@
+0,"baf_code","UI","4.0","Author's Code","Auth"
+1,"baf_snam","TX","20.0","Author's Surname","Surname"
+2,"baf_fnam","TX","20.0","Author's Names","Names"

=== added file 'csv/bksaut_idx.csv'
--- csv/bksaut_idx.csv	1970-01-01 00:00:00 +0000
+++ csv/bksaut_idx.csv	2016-05-28 14:01:49 +0000
@@ -0,0 +1,1 @@
+"Book Authors",1,"U","baf_code","baf_snam","baf_fnam"

=== added file 'csv/bksmst_fld.csv'
--- csv/bksmst_fld.csv	1970-01-01 00:00:00 +0000
+++ csv/bksmst_fld.csv	2016-05-29 04:17:21 +0000
@@ -0,0 +1,6 @@
+0,"bmf_code","UI","4.0","Book's Code","Code"
+1,"bmf_titl","TX","30.0","Book's Title","Title"
+2,"bmf_auth","UI","4.0","Author's Code","Auth"
+3,"bmf_ownr","UI","4.0","Owner's Code","Ownr"
+4,"bmf_mnth","D2","7.0","Month Received","Mth-Rec"
+5,"bmf_stat","UA","1.0","Status","S"

=== added file 'csv/bksmst_idx.csv'
--- csv/bksmst_idx.csv	1970-01-01 00:00:00 +0000
+++ csv/bksmst_idx.csv	2016-05-29 04:17:23 +0000
@@ -0,0 +1,1 @@
+"Books Masterfile",1,"U","bmf_code"

=== added file 'csv/bksown_fld.csv'
--- csv/bksown_fld.csv	1970-01-01 00:00:00 +0000
+++ csv/bksown_fld.csv	2016-06-21 12:58:48 +0000
@@ -0,0 +1,12 @@
+0,"bof_code","UI","4.0","Code Number","Code"
+1,"bof_snam","TX","20.0","Surname","Surname"
+2,"bof_fnam","TX","20.0","Names","Names"
+3,"bof_add1","TX","20.0","Address Line 1","Address-Line-1"
+4,"bof_add2","TX","20.0","Address Line 2","Address-Line-2"
+5,"bof_add3","TX","20.0","Address Line 3","Address-Line-3"
+6,"bof_pcod","TX","4.0","Postal Code","Code"
+7,"bof_home","TX","20.0","Home Number","Home-Number"
+8,"bof_work","TX","20.0","Work Number","Work-Number"
+9,"bof_cell","TX","20.0","Cell Number","Cell-Number"
+10,"bof_mail","TX","50.0","Email Address","Email-Address"
+11,"bof_stat","UA","1.0","Membership Status","S"

=== added file 'csv/bksown_idx.csv'
--- csv/bksown_idx.csv	1970-01-01 00:00:00 +0000
+++ csv/bksown_idx.csv	2016-05-28 14:02:06 +0000
@@ -0,0 +1,1 @@
+"Book Owners",1,"U","bof_code","bof_snam","bof_fnam"

=== added file 'csv/bkssys.py'
--- csv/bkssys.py	1970-01-01 00:00:00 +0000
+++ csv/bkssys.py	2016-06-07 07:26:12 +0000
@@ -0,0 +1,11 @@
+tables = [
+    # Books
+    "bksmst", "bksaut", "bksown",
+    # Controls
+    "ctllog", "ctlmst", "ctlnot", "ctlpwm", "ctlpwr", "ctlpwu", "ctlsys",
+    # Reports
+    "rptcol", "rptexc", "rptjon", "rptmst", "rptord", "rpttab", "rptvar",
+    # Telephone
+    "telcon", "telgrp", "telmst",
+    # Other
+    "chglog", "emllog", "frelat", "verupd"]

=== modified file 'csv/frelat.dat'
--- csv/frelat.dat	2016-02-27 13:18:41 +0000
+++ csv/frelat.dat	2016-05-28 14:16:42 +0000
@@ -12,6 +12,8 @@
 bkmrtr|brr_cono|ctlmst|ctm_cono
 bkmtrn|bkt_cono|ctlmst|ctm_cono
 bkmunm|bum_cono|ctlmst|ctm_cono
+bksmst|bmf_auth|bksaut|baf_code
+bksmst|bmf_ownr|bksown|bof_code
 bwlcmp|bcm_cono|ctlmst|ctm_cono
 bwlctl|ctb_cono|ctlmst|ctm_cono
 bwldrm|bdm_cono|ctlmst|ctm_cono

=== removed file 'doc/Bowls.rst'
--- doc/Bowls.rst	2016-02-27 13:18:41 +0000
+++ doc/Bowls.rst	1970-01-01 00:00:00 +0000
@@ -1,1068 +0,0 @@
-==============================
- Tartan Systems - User Manual
-==============================
-
-:Version:   5.0.15
-:Author:    Paul Malherbe
-:Contact:   paul@tartan.co.za
-:Home:      http://www.tartan.co.za
-:Copyright: Paul Malherbe (C) 2004-2016.
-:Licence:   Free use of this software and all it's modules is granted under the terms of the Licence.
-
-:Note: This document is not intended as an accounting manual. It is primarily a manual for people with some accounting expertise to learn how to use Tartan as an accounting tool.
-
-.. contents:: **Table of Contents**
-
-.. raw:: pdf
-
-   PageBreak
-
-About
------
-Tartan Systems started out in 1981 as a suite of programs I wrote in COBOL and until 1994 ran on various platforms including CPM, RSX11M, MSDOS, AT&T UNIX and SCO.
-
-In 1994 I discovered LINUX and when iBCS2 became available I modified the systems to run under LINUX and continue doing so until today.
-
-In 2003 I started looking around for another programming language in which I could rewrite the systems to   run under LINUX as well as Windows without having to recompile etc. Also I was getting irritated with having to compile using SCO.
-
-Eventually I decided on the following:
-
-+ Python_ as the programming language
-+ Tkinter_ for the graphical user interface
-+ Reportlab_ to generate reports
-+ Pychart_ to generate charts and graphs
-+ PostgreSQL_, MySQL_, Firebird_ and Pysqlite_ as supported relational databases
-
-In 2005, version 3, I changed the graphical user interface to PyGtk, a python wrapper for the Gtk library.
-
-In 2011, version 4, I dropped support for windows 9x and also replaced reportlab with pyfpdf.
-
-In 2015, version 5, I replaced PyGtk with Tkinter and ttk.
-
-.. _Python: http://www.python.org
-.. _Tkinter: http://www.python.org/topics/tkinter
-.. _Reportlab: http://www.reportlab.org
-.. _Pychart: http://www.hpl.hp.com/personal/Yasushi_Saito/pychart
-.. _PostgreSQL: http://www.postgresql.org
-.. _MySQL: http://dev.mysql.com
-.. _Firebird: http://www.firebirdsql.org
-.. _Pysqlite: http://code.google.com/p/pysqlite
-
-Installation Procedure
-----------------------
-Linux and Source
-~~~~~~~~~~~~~~~~
-Ensure that the following dependencies are installed on your system:
-
-+ python >= 2.7.5 and < 3.0.0
-+ pillow >= 2.3.0
-+ fpdf >= 1.7.0
-
-Windows also requires the following:
-
-+ pywin32 >= build 217
-
-Additionally, the following dependencies should also be installed using pip:
-
-+ odfpy >= 0.9.6
-+ markdown >= 2.0
-+ Python-Chart >= 1.39
-+ xlrd >= 0.7.1
-+ xlwt >= 0.7.1
-
-And, depending on your database needs, one of:
-
-+ pysqlite >= 2.6.3
-
-or
-
-+ postgresql >= 8.4.0
-+ psycopg2 >= 2.0.4
-
-or
-
-+ mysql >= 5.0.1
-+ MySql-python >= 1.2.0
-
-Then download the following file from ftp://ftp.tartan.co.za
-
-+ Tartan_5.x.x.tar.gz
-
-Extract Tartan_5.x.x.tar.gz into a directory of your choice as follows:
-
-+ cd your.directory && tar -xvzf Tartan_5.x.x.tar.gz
-
-Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
-
-Windows Binary
-~~~~~~~~~~~~~~
-Download the following files from ftp://ftp.tartan.co.za or if you are in possession of a CD this is not necessary.
-
-+ Tartan_full_5.x.x.exe
-
-Install Tartan_full_5.x.x.exe by browsing to it and double clicking and then accept the defaults, except, also agree to creating an icon on your desktop.
-
-Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
-
-Startup Procedure
------------------
-Linux and Source
-~~~~~~~~~~~~~~~~
-Start Tartan by entering the following command:
-
-    `python -OO program_path/ms0000.py [options]`
-
-To find out what the available command line options are, use the -h option.
-
-Windows Binary
-~~~~~~~~~~~~~~
-.. NOTE::
-
-  Users must first perform the following steps:
-
-    1) Right click on the Tartan shortcut icon.
-    2) Select `Properties` on the menu. A dialogue box will appear on the screen.
-    3) Click the `Advanced` button under the Shortcut tab in the dialogue box.
-    4) Check the `Run as administrator` box.
-    5) Click the `OK` button (or press Enter on your keyboard if the button is highlighted by default).
-    6) Finish by clicking `Apply` and then `OK`. Your preferences have been saved. Next time you open the shortcut to the application you performed the task for your computer will no longer require administrative permission.
-
-Start Tartan by clicking on the shortcut icon on the desktop or by navigating to the `C:\\Tartan\\prg` directory and double clicking on the `ms0000[.exe]` file.
-
-Both
-~~~~
-The first time you run Tartan you will automatically be taken to `Preferences`_ where you will have to enter various parameters relating to your installation. After saving the preferences and restarting Tartan you will be prompted to create the database. Once the database has been created you will have to create the System record as per `System Record Maintenance`_ as well as a Company record as per `Company Records Maintenance`_.
-
-Status Line
------------
-Please note that when using Tartan your available options will be highlighted on the status line at the bottom left hand side of the screen. Please read this carefully before asking for assistance.
-
-Common Keyboard Functions
--------------------------
-Throughout the various modules comprising **Tartan Systems** the following keys are used to perform certain functions. These options will always be highlighted in the `Status Line`_ at the bottom of the screen. The most common ones are:
-
-+ **Enter**  - Accept keyboard input.
-+ **Esc**    - Exit a module or go to a previous entry field.
-+ **F1**     - Record Selection used with most data input routines.
-+ **F5**     - Record Deletion used with record maintenance routines.
-+ **F9**     - Input Termination used with multi-line text input.
-
-In addition to the above keys all underlined characters on notebook tags and buttons can be used, in conjunction with the <Alt> key, as shortcuts e.g <Alt-s> to open the System menu.
-
-Common Routines
----------------
-There are various common routines. Rather than continually describing them they will be described once here only.
-
-User Validation
-~~~~~~~~~~~~~~~
-If no users have been created using the `User's Maintenance`_ routine on the `System`_ menu and no password has been allocated to the **admin** user, the system will automatically log in using **admin** as the user name. In all other cases a user must log in by entering a valid name and password. If no password exists for the **admin** user a password should be created as soon as possible using the `Change Password`_ routine on the System_ menu.
-
-Company Selection
-~~~~~~~~~~~~~~~~~
-For every routine which is company specific and where you have more than 1 company, you will be required to select the relevant company. In some cases you will also have to enter a financial period. Please note that you will not always be prompted for the financial period as this only applies to routines which require it. Also note that for both selections there is a `F1 Record Selection` option as per `Common Keyboard Functions`_.
-
-Batch Details
-~~~~~~~~~~~~~
-Most data capture routines require you to enter batch details. The reason for a batch is ease of balancing and the resolution of errors made during data capture. After you exit a data capture routine a totals summary will be displayed. If there is a discrepancy between the expected and entered values all the various systems have a routine to print the batch details thus enabling you to determine where the error is and therefore to correct it.
-
-+ **Batch Number** - Any 7 character unique alphanumeric code.
-+ **Capture Date (CCYYMMDD)** - The date that this batch was first created.
-+ **Current Period (CCYYMM)** - The financial period of this batch.
-+ **Number of Entries** - The total number of entries comprising this batch, if known, else 0.
-+ **Value of Entries** - The total value of entries comprising this batch, if known, else 0.
-+ **Batched By** - The initials of the person who pre-listed the batch.
-+ **Captured By** - The initials of the person who created the batch.
-+ **Multiple Date Allocations** - Whether or not the postings are to be allocated according to the transaction date and not the current period.
-+ **Bank Control** - For all batches in general ledger and other systems integrated with the general ledger, that affect the bank accounts, enter the bank control code.
-
-Ageing Transactions
-~~~~~~~~~~~~~~~~~~~
-While capturing transactions for various systems you will be required to allocate the amount to existing outstanding transactions for ageing purposes.
-
-There are four different methods of ageing a transaction:
-
-+ **Normal** - This will display a list of all outstanding transactions on the account and you will be able to allocate at random until the full amount has been allocated.
-
-    + Select a transaction to allocate against by either clicking on the required line or moving the cursor to the required line and hitting the `Enter` key.
-    + Enter the allocation amount.
-    + Accept the allocation amount by either clicking on the `Apply` button or by hitting the `Enter` key.
-    + The amount will be allocated and the `Balance` will show the unallocated portion.
-    + Continue these steps until the full amount has been allocated. In the event of a balance remaining which cannot be allocated, hitting the `Esc` key or clicking on the `Exit` button will exit the routine leaving the balance as unallocated.
-
-+ **History** - This is identical to `Normal` above but the available transactions will include previously fully allocated ones thus enabling you to reallocate transactions.
-+ **Oldest** - This will automatically allocate the amount against outstanding transactions, starting from the oldest transaction, until either the amount has been fully allocated or there are no more outstanding transactions in which case the balance will remain as unallocated.
-+ **Current** - This will leave the full transaction as unallocated.
-
-Printer Selection
-~~~~~~~~~~~~~~~~~
-Whenever a report is being produced you will have the opportunity of deciding on the output method i.e. viewing, printing, exporting and, in some cases, whether or not to email it.  Please note that the option to email the report will only be available if there is a valid `SMTP Server` in the `System Record Maintenance`_ record.
-
-* **Output** - Select the required output option.
-* **Printer Name** - If you selected `Print`, enter the printer name.
-* **E-Mail Report** - If available, select whether or not to email the report.
-* **E-Mail Address** - If available, enter the email address, if more than one, comma separate them.
-
-Error Messages
---------------
-Should an error message occur and there is a file named *errors.txt* in the `Work Path` as created in `Preferences`_. Please email the file to errors@tartan.co.za after which you may delete it.
-
-Menus and Sub Menus
--------------------
-Please note that depending on the system modules selected when creating the company records, as detailed in `Company Records Maintenance`_, and the security level of the user, some of the menus detailed below might not appear.
-
-System
-~~~~~~
-Please note that depending on the security level of the user some of these routines might not be available.
-
-Change User
-...........
-Use this routine to change the current user. Selecting it will log the current user out and the new user can then log in as per `User Validation`_.
-
-Change Password
-...............
-Select this routine to change the logged in user's password. The user can change the password by first entering the old password followed by the new password twice, for confirmation.
-
-User's Maintenance
-..................
-Use this routine to create or amend user's records, permissions etc.
-
-+ **User Name** - You must enter the user's login name. In the case of existing users the screen will be populated with existing data.
-+ **Full Name** - The full name of the user.
-+ **User Password** - It is not necessary to enter passwords as users must change their own using `Change Password`_, after logging in.
-+ **Copy Existing User** - Use this to copy all permissions of an existing user.
-+ **Valid Companies** - The valid company's field is for limiting a user's access to specific companies and is a comma separated list of company numbers e.g. 1,2,3,4.
-+ **Security Level** - The Security levels are as follows:
-
-    + **0** - Enquiries Only
-    + **1** - 0 plus Reporting
-    + **2** - 1 plus Data Capture
-    + **3** - 2 plus File Maintenance
-    + **4** - 3 plus Month End Routines
-    + **5** - 4 plus Control Routines
-    + **6** - 5 plus Financial Year End Routine
-    + **9** - Supervisor level, Everything
-
-+ The following fields are used to control which companies, systems and modules are available, only by password, to this user:
-
-    + **Coy** - A company number or zero for all companies
-    + **SS** - The system code
-    + **Prog** - A program module or blank for all modules of a system
-    + **Password** - The password. If the password is left blank it is the same as denying the selection i.e. The user will not be able to select the module(s).
-    + **Check Password** - If the password is not blank then enter the password again for verification
-
-**Examples**
-
-.. csv-table::
-  :header: "Coy", "SS", "Prog", "Password", "Meaning"
-  :widths: 5, 5, 6, 10, 50
-
-  "0", "gl", "    ", "    ", "All general ledger modules for all companies would be denied."
-  "0", "gl", "2032", "    ", "General ledger payments data capture for all companies would be denied."
-  "0", "gl", "    ", "abcd", "All general ledger modules for all companies would require the password `abcd`."
-  "0", "gl", "2032", "abcd", "General ledger payments data capture for all companies would require the password `abcd`."
-
-Upgrade System
-..............
-Select this routine to check if there are upgrades to Tartan and if so to install them.
-
-* **Update Type** - Select whether to check the Tartan ftp site or a local LAN location. If Local is selected you will be able to browse for a location which will default to whatever is set in the *Upgrade Path* directory as set during the `Preferences`_ routine.
-
-* If there is an update and you want to upgrade, click on the `Update` button.
-
-Update File Formats
-...................
-If you have performed an upgrade of Tartan you will have to perform this routine as well. This routine will automatically update all table formats in the database. If you have more than one database (rcfile), you must perform this routine for each database.
-
-Copy Tables
-...........
-Use this routine to copy tables from one profile/database to another one.
-
-* **RC File From** - Enter the full path of the rcfile of the database to copy from.
-* **Whole Database** - Yes or No, If No is selected a list of tables will be displayed after confirmation. Tick all tables to be copied and then the Accept button.
-
-Backup Database
-...............
-Select this routine to create a backup of the current database. These backups will reside in the *Backup Path* directory as created using the `Preferences`_ routine. Each backup will further reside in a sub directory named after the name of the database and a further sub directory named `arch`.
-
-Restore Database
-................
-Select this routine to restore a previous backup.
-
-+ **Type** - Select a Full or Partial restore.
-+ **Archive** - Select the relevant archive to restore from.
-+ **All Companies** - `Yes` or `Include/Exclude` some companies.
-+ **Companies** - Comma separated list of companies to include or exclude.
-+ **All Systems** - `Yes` or `Include/Exclude` some systems.
-+ **Systems** - Comma separated list of systems to include or exclude.
-
-Please note that unless you really know what you are doing it is very dangerous to restore individual systems as your data could become unbalanced because of integration and table relationships.
-
-If you are doing a full restore and the database already exists you will be asked whether to drop it first. Unless you are sure of what you are doing select No.
-
-Preferences
-...........
-Use this routine to configure Tartan, however, depending on your security level, some of the options might not be available to you.
-
-+ **Configuration File** - This is the full path of your configuration file. Every user can have his or her own file. This file, by default, is placed in the user's home directory or, in Windows, the root directory of the Tartan installation e.g. `C:\\Tartan`. If you want to change this default, you must set an environment variable as **TARTANRC=path-to-rcfile** or use the command line option **-r path-to-rcfile**.
-
-+ **Database**
-
-    + **Database Engine** - This is the database being used and must be one of PostgreSQL, SQLite, MySQL or Firebird. The recommended one for single user installations is SQLite and PostgreSQL for multi-user installations.
-    + **Database Name** - This can be any single word name defaulting to **tartan**.
-    + **Host Name** - This is the host name of the Server. This is not used with SQLite.
-    + **Files Directory** - This is only used for SQLite and Firebird database engines and is the directory where the database will be created.
-    + **Port Number** - This is the port number the database uses. Leaving this blank will enable the database default port.
-    + **Administrator** - This is the name used to connect to the database. This is not used with SQLite.
-    + **Password** - This is the password of the user. This is not necessary with SQLite.
-
-+ **General**
-
-    + **Program Path** - This is the path where the programs reside.
-    + **Backup Path** - This is the path where backups of the database will be stored.
-    + **Work Path** - This is the path of the work directory. All temporary files will be created in this directory.
-    + **Upgrade Path** - This is the path where any upgrades will be stored.
-    + **PDF Viewer** - This is the full path of the program used to display pdf files.  The default for LINUX is **xpdf** and Windows is **SumatraPDF**. Other recommended programs for windows are **Foxit Reader** and **AcroRd32** version 4.05.
-    + **Print Command** - This is the full path of the print program used to print postscript files. The LINUX default is **lpr** and Windows is **SumatraPDF**. Other recommended programs for windows are **Foxit Reader** and **AcroRd32** version 4.05.
-    + **PS Converter** - This is the full path of the program needed to convert pdf files to postscript. The LINUX default is **pdftops** and the Windows one is **blank**.  If this field is left blank, no conversion will take place and the print routine will have to be able to print pdf files directly e.g. where one of `SumatraPDF`, `Foxit Reader` or `Acrobat Reader` has been selected as the printer.
-    + **CSV Reader** - This is the full path of the program used to read csv and xls file formats.
-    + **Screen Geometry** - This defaults to the suggested geometry for your screen. Entering a zero will achieve the same result.
-    + **Screen Placement** - Where the Tartan Window must be placed on the monitor i.e. Left, Centre or Right.
-    + **Show Tartan Image** - Whether to display the Tartan image on the Main Menu screen.
-    + **Enforce Confirm** - Whether confirmation is required on the completion of data entry.
-    + **Auto-completion** - Whether auto-completion will be available. This means that as you enter data, and if there are available options, these will appear in a box below the entry field for selection.
-    + **Tool-tips** - Whether tool-tips will display as you hover your cursor over certain entry fields.
-    + **Error Alarm** - Whether or not to sound an audible alarm with errors. This can be No, Yes or Multimedia. Use Multimedia if you do not have an internal speaker.
-
-+ **Dialog**
-
-    + **Menu Font**
-        + **Name** - This is the font family to be used for all menu items.
-        + **Size** - This is font size to be used for all menu items.
-    + **Default Font**
-        + **Name** - This is the font family to be used in all other cases.
-        + **Size** - This is font size to be used in all other cases.
-    + **Theme** - The theme to be used. The default theme is `clam`.
-    + **Colour Scheme** - The colour scheme to be used. The default scheme is `Red`.
-    + **Normal**
-        + **FG** - The normal label and button foreground colour.
-        + **BG** - The normal label and button background colour.
-    + **Focus**
-        + **FG** - The focused button foreground colour.
-        + **BG** - The focused button background colour.
-    + **Disable**
-        + **FG** - The disabled button foreground colour.
-        + **BG** - The disabled button background colour.
-    + **Booking Query**
-        + **FG** - The booking manager calendar query foreground colour.
-        + **BG** - The booking manager calendar query background colour.
-    + **Booking Confirmed**
-        + **FG** - The booking manager calendar confirm foreground colour.
-        + **BG** - The booking manager calendar confirm background colour.
-    + **Booking Settled**
-        + **FG** - The booking manager calendar settle foreground colour.
-        + **BG** - The booking manager calendar settle background colour.
-
-If this is a new installation you will be prompted to Create the Database after which you will need to create a `System Record` and at least one `Company Record`.
-
-Quit
-....
-Select this to exit Tartan.
-
-Control
-~~~~~~~
-System Record Maintenance
-.........................
-This routine is used to create or amend a system control record by entering the following:
-
-    + **Years to Keep History** - Enter the number of years that historical data must be retained. Enter a 0 for infinity.
-    + **Enforce Passwords** - Select Yes or No.
-    + **Minimum Characters** - If you elected to enforce passwords enter the minimum number of characters that the passwords must consist of.
-    + **Maximum Life (Days)** - If you elected to enforce passwords enter the maximum number of days that the passwords will be valid for.
-    + **Backup History (Days)** - Enter the maximum number of days that backups will be retained. Enter 0 for infinity.
-    + **SMTP Server** - If you have email then enter your SMTP server's address e.g. smtp.mweb.co.za or smtp.saix.net or smtp.vodacom.co.za
-    + **SMTP Security** - Select the appropriate security method.
-    + **SMTP Authentication** - Select the appropriate authentication method.
-    + **SMTP Port Number** - Select the appropriate smtp port number.
-    + **SMTP Username** - If your smtp server requires a username enter it here.
-    + **SMTP Password** - If your smtp server requires a password enter it here.
-    + **SMS Service** - Select Yes or No. In order to use the SMS facility. You will first have to register with www.smsportal.co.za in order to get a username and password.
-    + **SMS Username** - Enter the user name for the service.
-    + **SMS Password** - Enter the password for the service.
-    + **G/L Departments** - Whether to allow departmental financial reporting.
-    + **Number of Digits** - The number of digits the department code uses in the account numbers i.e. if you enter 3 then the first 3 digits of the 7 digit account number will be reserved for the department code.
-
-Company Records Maintenance
-...........................
-This routine is used to create or amend company records, at least one company, number 1, must be created.
-
-While most of the fields are self explanatory the following are of note:
-
-+ **E-Mail Address** - Your default email address.
-+ **V.A.T. Default** - Any alphanumeric character. If the code, except **N** which is used for no V.A.T., has not previously been created you will be prompted to create one as in `V.A.T. Records Maintenance`_.
-+ **Systems** - You must tick all the systems that you would like to enable otherwise they will not appear on your menu.
-+ **Logo** - You can select an image file to be used as the letterhead for invoices, statements and remittance advices. this file should be a jpg file.
-
-After creating a **new** company record you will be prompted for the initial financial period's starting and ending dates e.g. 20060301 and 20070228.
-
-Department Records Maintenance
-..............................
-Use this routine to create department records if departments were enabled in the Systems Record.
-
-+ **Department** - The department code.
-+ **Name** - The name of the department.
-
-Module Passwords Maintenance
-............................
-Use this routine to set passwords to override certain security limitations e.g. locked general ledger account, inhibit the sale of items at prices under cost or inhibit sales to a debtor exceeding their credit limit.
-
-+ **Company** - Enter the company number or 0 for all companies.
-+ **System** - The relevant system code. F1 will show all system codes.
-+ **Code** - The relevant restrictions code. F1 will show existing overrides and the `All Codes` button will show all available restrictions.
-+ **Password** - The password required to override this restriction.
-
-Module Passwords Listing
-........................
-Use this routine to produce a report of the modules and passwords created using `Module Passwords Maintenance`_.
-
-V.A.T. Records Maintenance
-..........................
-Use this routine to create, amend or delete value added tax records.
-
-+ **V,A.T. Code** - A single character V.A.T. code.
-+ **Description** - A description of the code.
-+ **Category** - The category of the code as follows:
-
-    + **C** for Capital Items
-    + **N** for Non Vattable Items
-    + **S** for Standard V.A.T. Codes
-    + **X** for X Rated Items
-    + **Z** for Zero Rated Items
-
-+ **Date** - The starting date of the current rate.
-+ **Rate** - The current rate.
-
-V.A.T. Statement
-................
-Use this routine to produce a value added tax statement for a specific period.
-
-Enter all relevant details according to the prompts. The following fields need more explanation:
-
-+ **Starting Period** - Enter the starting period or 0 to take all unflagged transactions into account.
-+ **Flag Items as Paid** - This option is only available if the `Starting Period` is 0. If you select `Yes` then all transactions will be flagged as paid with the date in the next field. To reprint a previous report select `Reprint` with the date to be reprinted in the `Payment Date` field.
-
-Email Log Report
-................
-Use this routine to print a report of emails sent by the system.
-
-Financial Year End Routine
-..........................
-Use this routine to end a financial period. This will create opening balances in the next financial period and if you elect to Finalise the period it will disable any further postings to the applicable period and any previous periods.
-
-Change Year End Date
-....................
-Use this routine to change the financial year end date from a specific period.
-
-.. raw:: pdf
-
-    PageBreak
-
-Bowls Clubs
-~~~~~~~~~~~
-File Maintenance
-................
-Control Record (BC)
-+++++++++++++++++++
-Use this routine to create the bowls control record.
-
-+ **M/L Integration** - Select whether or not the bowls system is integrated with the Member's system.
-+ **Same Numbers** - If integrated with the member's system is the tab number the same as the member number.
-+ **Male Start Seq** - The number range for male bowler's tab numbers.
-+ **Female Start Seq** - The number range for female bowler's tab numbers.
-+ **Non-member Start Seq** - The number range for non-member's player codes. This number must be greater than the male and female numbers.
-+ **Draw Base** - By pre-allocated Position, Rating or a Combination of both.
-+ **Rating Order** - Whether the rating system is ascending or descending, like golf handicaps.
-+ **Replace Fours** - When doing a trips tabs-in draw use pairs instead of fours for eight players.
-+ **Weeks Between Draws** - The minimum number of weeks that team members should not be in the same team again. They could however be drawn to play against them.
-+ **Rate - Member** - The member's rate.
-+ **Rate - Visitor** - The visitor's rate.
-+ **Greens** - The available green codes e.g. AB
-
-Club's Records
-++++++++++++++
-Use this routine to add, amend and delete clubs.
-
-+ **Club Code** - The applicable club's code. A zero code will automatically select the next available code.
-+ **Club Name** - The name of the club.
-
-Tabs Maintenance
-++++++++++++++++
-Use this routine to create, delete or amend tab records.
-
-+ **Tab Number** - The number of the tab or zero for the next available number depending on the gender of the member.
-+ **Membership Number** - If the Member system is integrated enter the member's membership number and the details will be obtained from there.
-+ **Surname** - The person's surname.
-+ **Names** - The person's names.
-+ **Gender** - The person's gender.
-+ **Address Line 1** - The person's address line 1.
-+ **Address Line 2** - The person's address line 2.
-+ **Address Line 3** - The person's address line 3.
-+ **Postal Code** - The person's postal code.
-+ **Home Number** - The person's home phone number.
-+ **Work Number** - The person's work phone number.
-+ **Cell Number** - The person's mobile phone number.
-+ **Email Address** - The person's email address.
-+ **Position - Primary** - The position the person should normally play.
-+ **Rating - Primary** - The person's rating as graded by the selectors.
-+ **Position - Mixed** - The position the person should play in mixed bowls.
-+ **Rating - Mixed** - The person's rating in mixed bowls.
-+ **Association Number** - The person's number with the bowling association.
-
-In addition there are the following buttons.
-
-+ **Import** - Use this button to import, only tab ratings for existing tabs or all tab details for existing and new members, from an excel (xls) or comma separated (csv) file.
-+ **Print** - Use this button to print a listing of member's details.
-
-League Formats
-++++++++++++++
-Use this routine to create league format records e.g. Flag or Muter.
-
-+ **Format Code** - The applicable format code. A zero code will automatically select the next available code.
-+ **Description** - The description of the format.
-+ **Assessment Forms** - Allow printing of assessment forms.
-+ **Number of Forms** - Print assessment form per team or individual.
-+ **Assess Self** - Whether the player must assess himself.
-+ **Rating Out Of** - What the maximum assessment rating could be.
-+ **Sets Format** - Whether sets are to be played.
-+ **Logo** - The logo image file of the sponsor, if applicable.
-
-Side's Maintenance
-++++++++++++++++++
-Use this routine to create or amend side records. These are sides as entered in the league e.g. `WPCC A` or `WPCC B`.
-
-+ **Format Code** - The applicable league format code as created using `League Formats`_.
-+ **Side Code** - The applicable side code. A zero code will automatically select the next available code.
-+ **Description** - The description of the side e.g. `WPCC A`
-+ **League** - Select whether this side is playing in the `Main` or `Friendly` league.
-+ **Division** - The division that the side is playing in e.g. `PR`, `1A` etc.
-+ **Number of Teams** - The number of teams in the side.
-+ **Active Flag** - Whether or not this side is still active. If a team gets relegated or promoted it must be made inactive and a new side must be created. An inactive side can be made active again in the future if it once again becomes applicable.
-
-Player's Maintenance
-++++++++++++++++++++
-Use this routine to create, delete or amend competition player's records. Most of the fields are self explanatory with the exception of:
-
-+ **Code** - The player's number or zero for the next available number.
-+ **Tab Number** - The tab number if the player is a member of the club.
-+ **Club Code** - The player's club code or zero for the next available number in which case you must enter the name of the club.
-
-Competition Types
-+++++++++++++++++
-Use this routine to create competition type records as follows:
-
-+ **Type Code** - zero for the next number else an existing number. To see existing types press the F1 key.
-+ **Description** - The competition description.
-+ **Competition Format** - The type of competition i.e. Tournament, Knockout or Round Robin.
-+ **Team Size** - The number of players in a team.
-+ **Number of Games** - The total number of games comprising the competition.
-+ **Number of Ends per Game** - The number of ends to be completed in a game.
-+ **Groups by Position** - Whether or not the teams must be split into different groups. If grouping is not going to occur continue with `Skins` below.
-+ **Group After Game** - Select the game after which the grouping is to take place.
-+ **Adjust Scores** - Whether or not the scores are to be adjusted.
-+ **Expunge Games** - Which games, if any, must be expunged i.e. cleared. The games must be comma separated e.g. 1,2
-+ **Retain Percentage** - What percentage of the shots of the games, not expunged, must be retained when split into groups.
-+ **Number of Drawn Games** - The number of games which are randomly drawn. Enter 99 for a Round Robin.
-+ **Strict S v S** - Whether the competition is strictly strength versus strength i.e. teams could play each other again before the last game.
-+ **Skins** - Whether or not to have skins.
-+ **Number of Ends per Skin** - If skins were selected then enter the number of games per skin.
-+ **Points Only** - Only points are to be captured i.e. no shots.
-+ **Points per End** - Number of points per end won.
-+ **Points per Skin** - If skins were selected then enter the number of points allocated per skin.
-+ **Points per Game** - Number of points for the game.
-+ **Bonus Points** - Whether to allocated a bonus point.
-+ **Win by More Than** - If bonus points are allocated enter the number of points which the winning margin must be more than.
-+ **Lose by Less Than** - If bonus points are allocated enter the number of points which the losing margin must be less than.
-
-Tabs Draw
-.........
-New Draw
-++++++++
-Use this routine to make a New Draw.
-
-+ **Date** - The date of the draw.
-+ **Time** - The time of the draw.
-+ **Mixed Gender** - Whether or not the draw is mixed.
-+ **Mixed Rating** - Whether or not to use the alternative ratings.
-+ **Draw By** - If available select whether to base the draw on Positions, Ratings or a Combination of both.
-+ **Rates - Member** - The price charges per member.
-+ **Rates - Visitor** - The price charges per visitor.
-
-Once the above fields have been entered capture all tabs as follows:
-
-+ **Tab Number** - The player's tab number. Enter zero for a visitor. A number will be allocated to the visitor which can then be written on his tab e.g. 901.
-+ **Surname** - The player's surname. Only for visitors.
-+ **Names** - The player's names. Only for visitors.
-+ **Gender** - The player's gender. Only for visitors.
-+ **Position** - The player's position. Only for visitors.
-+ **Rating** - The player's rating. Only for visitors.
-+ **Paid** - Whether or not the player has paid.
-
-The following *Buttons* are available:
-
-+ **Arranged** - Use this button to enter arranged matches.
-+ **Entered** - Use this button to display all entered players.
-+ **Modify** - Use this button to change the player's position/ratings.
-+ **Draw** - Use this button to make the draw once all tabs have been entered. You will have to enter the following:
-
-    + **Team Size** - The preferred number of players per team.
-    + **Replace Fours** - Whether or not to replace fours with pairs. This only applies when the team size is three.
-    + **Greens** - The greens to be used. This is in the format A,B or A,B234 showing green code and rinks. If the rinks are not entered they will default to 6. If there are more rinks available than needed, end rinks will be removed.
-+ **Print** - Use this button to print a draw.
-
-    + **Cash Takings Sheet** - Print a cash takings sheet.
-    + **Tabs Draw Listing** - Print a tabs draw list in tab number.
-    + **Tabs Draw Board** - Print an emulation of a tabs draw board.
-    + **Include Empty Rinks** - Whether to include or exclude empty rinks when printing a tabs draw board.
-+ **Edit Draw** - Use this button to manually change a draw.
-+ **Exit** - Use this button to exit the program. If the draw has not yet been done you will be prompted to confirm exiting.
-
-Reprint Draw
-++++++++++++
-Use this routine to reprint a previous draw.
-
-+ **Date** - The date of the draw.
-+ **Time** - The time of the draw.
-
-League Selections
-.................
-Capture Selections
-++++++++++++++++++
-Use this routine to capture team selections as follows:
-
-+ **Format Code** - The applicable league format code as created using `League Formats`_.
-+ **Type** - Select the type of match, Fixture or Practice.
-+ **Match Date** - YYYYMMDD.
-+ **Side Code** - The applicable side code. If no sides have as yet been entered enter a zero and create a side code as follows:
-    + **Side Description** - The description on the side.
-    + **League (M/F)** - Main or Friendly league.
-    + **Side Division** - The division of the side. PR for the premier side and 1A, 1B, 2A etc
-    + **Number of Teams** - The number of teams in the side.
-+ **Opposition Code** - The applicable opposition side code. If the opponent's record has not yet been captured enter a zero and create the opposition's side code as follows:
-    + **Club Code** - Enter an existing club code or zero for a new club.
-    + **Club Name** - Enter the club's name if it is a new club.
-    + **Side Name** - Enter the opposition side's name e.g. WPCC A or WPCC B
-+ **Venue (H/A/Name)** - Enter where the match is being played, at (H)ome, (A)way or another location.
-+ **Meeting Time** - Enter the time the side must meet on the day of the match.
-+ **At (H/A/Name)** - Enter where the side must meet, at (H)ome, (A)way or another location.
-+ **Captain Code** - The tab code of the captain.
-+ **Enter the teams as follows**:
-    + **Skp** - The tab code of the skip.
-    + **Plr** - The tab code of the next team member.
-+ When all sides have been entered press the `Esc` key twice to exit. You will then be asked whether or not you would like to View or Print the Selections. If Yes continue as follows:
-    + **Output** - Select the type of output.
-    + **E-Mail Report** - Select whether to email the forms.
-    + **E-Mail Address** - The email address(es), comma separated, to email the forms to.
-
-Assessment Forms
-++++++++++++++++
-Use this routine to print assessment forms as follows:
-
-+ **Format Code** - The applicable league format code.
-+ **Type** - Select the type of match, Fixture or Practice.
-+ **Match Date** - Enter the match date to print.
-
-Declaration Forms
-+++++++++++++++++
-Use this routine to print declaration forms as follows:
-
-+ **Format Code** - The applicable league format code.
-+ **Match Date** - Enter the match date to print.
-
-Capture Assessments
-+++++++++++++++++++
-Use this routine to capture completed assessment forms as follows:
-
-+ **Format Code** - The applicable league format code.
-+ **Type** - Select the type of match, Fixture or Practice.
-+ **Match Date** -  Enter the match date to capture.
-+ **Number of Forms** - The number of forms per team.
-+ For each completed form enter the following.
-    * **Skp** - The skip's tab code.
-    * **Plr** - If capturing 4 forms per team enter the player's tab code.
-    * **SF** - The number of shots the team scored.
-    * **SA** - The number of shots the opposition scored.
-    * **4** - The skip's rating.
-    * **3** - The third's rating.
-    * **2** - The second's rating.
-    * **1** - The lead's rating.
-    * **Remarks** - Any remarks.
-
-Match Assessment Report
-+++++++++++++++++++++++
-Use this routine to print a match assessment reports as follows:
-
-+ **Format Code** - The applicable league format code.
-+ **Type** - Select the type of match, Fixture or Practice.
-+ **Match Date** - Enter the match date to print.
-
-Assessment Summary
-++++++++++++++++++
-Use this routine to print an assessment summary as follows:
-
-+ **Format Code** - The applicable league format code.
-+ **Type** - Select the type of match, Fixture or Practice.
-+ **First Round Date** - Enter the date that the first round of the season was played.
-
-Club Competitions
-.................
-Capture Entries
-+++++++++++++++
-Use this routine to capture entries in a competition as follows:
-
-+ **Competition Code** - The relevant competition number or zero for the next available number.
-+ **Competition Name** - The name of the competition.
-+ **Date** - The starting date of the competition.
-+ **Type** - The competition type as created in `Competition Types`_.
-
-Enter the Skip's Codes
-
-+ **Skp** - The skip's code as created in `Player's Maintenance`_ or you can enter a zero to enter a new player as per `Player's Maintenance`_.
-+ **Ptr** - The partner's code, in the case of pairs, as created in `Player's Maintenance`_ or you can enter a zero to enter a new player as per `Player's Maintenance`_.
-+ **P** - Whether or not the skip has paid, Y or N.
-
-Print Match Cards
-+++++++++++++++++
-Use this routine to create a draw and to print match cards as follows:
-
-+ **Competition Code** - The relevant competition code.
-+ **Game Number** - The relevant game number.
-+ **Game Date** - The date of the game.
-+ **Number of Groups** - The number of groups, if applicable, to split the players into.
-+ **Greens** - The greens to be used, comma separated e.g. A,B,C
-+ **Group per Green** - Whether to allocate greens to groups. This only applies to the final game.
-+ **Print Cards** - Whether or not to print score cards.
-+ **All Cards** - If cards were selected to be printed, whether to print all cards or only a select few.
-+ **Template Name** - The template to use for the cards.
-+ **Output** - Whether to view the reports or simply print them.
-+ **Printer Name** - The printer to use for printing.
-
-Print Cards Summary
-+++++++++++++++++++
-Use this routine to print a summary of all draws to date.
-
-Change Match Cards
-++++++++++++++++++
-Use this routine to change individual match cards. After changing the cards you must reprint them as per `Print Match Cards`_. Please note that to only reprint certain cards you must select `All Cards No`.
-
-+ **Competition Code** - The relevant competition code.
-+ **Game Number** - The relevant game number.
-+ **Greens** - The available greens comma separated e.g. A,B,C
-    + **SKC** - The skip's code.
-    + **OPP** - The opposition's code.
-    + **GR** - The rink number e.g. A1
-
-Capture Results
-+++++++++++++++
-Use this routine to capture completed matches as follows:
-
-+ **Competition Code** - The relevant competition code.
-+ **Game Number** - The relevant game number.
-+ **Ends Completed** - The number of ends completed. Enter a zero to abandon a game.
-    + **SKC** - The skip's code.
-    + **SF** - Shots scored by the skip's side.
-    + **Pnts** - Points scored by the skip's side.
-    + **OPP** - The opposition's code.
-    + **SA** - Shots scored by the opposing side.
-    + **Pnts** - Points scored by the opposing side.
-
-Print Game Results
-++++++++++++++++++
-Use this routine to print game results as follows:
-
-+ **Competition Code** - The relevant competition code.
-+ **Game Number** - The relevant game number.
-
-Print Match Results
-+++++++++++++++++++
-Use this routine to print the match results as follows:
-
-+ **Competition Code** - The relevant competition code.
-+ **Last Game** - The last game to take into account.
-+ **Session Prizes by Group** - Whether session prizes are to be awarded by group or overall.
-
-Prizes by Group or the Match if not Grouped
-
-+ **Number Prizes** - The number of prizes being awarded.
-+ **EFT Forms** - Whether to print EFT Forms in which case you will be required to enter the total value of each prize.
-
-Contact Request Forms
-+++++++++++++++++++++
-Use this routine to print forms with player's missing contact details.
-
-Toolbox
-.......
-Change Tab Numbers
-++++++++++++++++++
-Use this routine to change Tab numbers.
-
-+ **Old Tab** - The old tab number
-+ **New Tab** - The new tab number
-
-The **Generate** button is used to automatically renumber tabs in surname and names sequence.
-
-Change Player's Codes
-+++++++++++++++++++++
-Use this routine to change player's codes.
-
-+ **Old Code** - The old code
-+ **New Code** - The new code
-
-The **Generate** button is used to automatically generate new codes in surname and names order.
-
-Clear League History
-++++++++++++++++++++
-Use this routine to erase all previous selection data as well as selectively erasing player and opponent details. Please ensure that you have a **backup** before selecting this routine as there is no going back.
-
-+ **Clear Players** - Select whether or not to also erase all player's details.
-+ **Clear Opponents** - Select whether or not to also erase all opponent's details.
-
-.. raw:: pdf
-
-    PageBreak
-
-Utilities
-~~~~~~~~~
-Bulk Mail Utility
-.................
-Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Control Record` using `System Record Maintenance`_.
-
-+ **Delivery Type** - The available delivery types will depend on what is entered in the `System Control Record` and can be either E-Mail, SMS or both.
-+ **List to Use** - The available lists will depend on the systems being used and can contain Bookings, Bowls, Creditors, Debtors, Members and Directory (Telephone). In addition to the lists, CSV or XLS files can also be used, as long as they contain a name and an email address and or a cell number. Please note that Creditors and Debtors do not have SMS capabilities.
-    + **Bookings** - This list accesses the tartan booking's contacts.
-        + **Individuals** - Allow selection of individual recipients.
-    + **Bowls** - This list accesses the tartan bowl's tabs.
-        + **Category** - Allow selection by category.
-        + **Gender** - Allow selection by gender.
-        + **Individuals** - Allow selection of individual recipients.
-    + **Creditors** - This list accesses the tartan creditor's masterfile.
-        + **Email To** - Select the recipient.
-        + **Individuals** - Allow selection of individual recipients.
-    + **Debtors** - This list accesses the tartan debtor's masterfile.
-        + **Email To** - Select the recipient.
-        + **Activity** - Allow selection by business activity.
-        + **Type** - Allow selection by business type.
-        + **Individuals** - Allow selection of individual recipients.
-    + **Members** - This list accesses the tartan member's masterfile.
-        + **Category** - Allow selection by membership category.
-        + **Gender** - Allow selection by gender.
-        + **Personalise** - Allow penalisation of the recipient.
-        + **Name Detail** - Select whether to use the names or initials.
-        + **Individuals** - Allow selection of individual recipients.
-    + **Directory** - This list accesses the tartan telephone directory.
-        + **Group Selection** - Allow selection by group.
-        + **Include Contacts** - Include the recipient's contacts.
-        + **Individuals** - Allow selection of individual recipients.
-    + **CSV and XLS File** - This is a csv or xls file containing a name, email address and/or a mobile number.
-        + **File Name** - The full path of the file to use.
-        + **Ignore Invalid Lines** - Select whether to ignore invalid lines.
-        + **Mobile/Email Column** - Enter the column of the mobile number or email address.
-        + **Personalise** - Allow penalisation of the recipient.
-        + **Title** - Select whether or not to use titles.
-        + **Title Column** - Enter the column of the title.
-        + **Surname Column** - Enter the column of the surname.
-        + **Names Column** - Enter the column of the names.
-        + **Name Detail** - Select whether to use the names or initials.
-+ **Skip Delivery Errors** - Select whether or not to skip invalid email addresses.
-+ **Subject** - The subject of the email.
-+ **In-line Attachment** - Any in-line image to be included in the email.
-+ **Separate Attachment** - Any attachment to be attached to the email.
-+ **Message** - Any text message. In order to get the recipients name in the message use one of the following methods:
-    + **{{name}}** - Use this method if the recipient has separate surname and names fields.
-    + **{{surname}}** - Use this method if the recipient has a single name field where the surname and names are comma separated e.g. Malherbe, Paul.
-
-.. raw:: pdf
-
-    PageBreak
-
-Report Generator
-................
-Use this routine to generate ad hoc SQL reports. It is not necessary to know the SQL language but it is beneficial.
-
-+ **Name** - A name for the report.
-+ **Description** - A description of the report.
-+ **Heading-1** - The first heading of the report.
-+ **Heading-2** - A second heading, if applicable.
-
-+ The following screens are now available:
-
-+ **Tables** - These are the tables to be used to generate the report. At least one table must be selected.
-    + **Table Sequence** - A sequential number of the line to enter or edit.
-        + **Tables** - The table name. F1 will give a list of available tables.
-+ **Joins** - These are further tables to be joined to the ones selected in `Tables`.
-    + **T** - The type of join. F1 gives a list of available types.
-    + **Tables** - The table which must be joined.
-    + **Join Columns** - The columns to be used for the join.
-+ **Columns** - These are the table columns to show in the report. If no columns are selected, all columns will be used.
-    + **Column Sequence** - A sequential number of the line to enter or edit.
-        + **T** - The type of column.
-            + **C** - An actual column in the table.
-                + **Label** - The column name. You will be shown a list of columns to select from.
-            + **E** - An expression e.g. Sum, Avg, Count etc.
-                + **Label** - You will have to type a name for the expression. You will then be offered a selection of expression types and depending on your choice a further selection of options.
-                + **Expression** - The generated expression will now be displayed and you can either accept or edit it.
-        + **Heading** - The column heading.
-        + **TP** - The type of column. F1 will show all available types.
-        + **Size** - The width of the column in characters.
-        + **G** - Whether or not to group the report on this column.
-        + **S** - Whether or not to print sub totals for this column.
-        + **Narration** - If sub totals was selected, enter the narration of the sub total.
-        + **P** - If sub totals was selected, select whether or not to start a new page after each sub total.
-        + **G** - If the column type is numeric, select whether or not to print a grand total for the column.
-        + **D** - Whether or not to actually display the column in the report or simply to use it for totals etc.
-+ **Variables**
-+ **Exceptions**
-+ **Order**
-
-.. raw:: pdf
-
-    PageBreak
-
-Template Manager
-................
-Use this routine to create, edit or delete templates.
-
-+ **Name** - The name of the template.
-+ **Title** - The title of the template.
-+ **TT** - The template type as follows:
-    + **I** - Sales Document
-    + **O** - Purchase Order
-    + **P** - Payslip
-    + **R** - Remittance Advice
-    + **S** - Statement
-+ **Sys** - The relevant system code relating to the type.
-+ **ST** - This only applies to statements and is the type of statement as follows:
-    + **N** - Normal
-    + **O** - Other
-+ **Size** - The page size i.e. A4, A5 or A6
-+ **Orient** - The page orientation i.e. Portrait or Landscape.
-+ **Sequence**
-    + **Line Number** - The line number to edit or 0 for the next available number.
-    + **Line Type** - The line type as follows:
-        + **C Merge Code** - Use this code for lines that will be populated with data.
-        + **I Image** - Use this code to display an image.
-        + **L Line** - Use this code to draw a line.
-        + **R Rectangle** - Use this code to draw a rectangle.
-        + **T Text** - Use this code to print some fixed text.
-    + **Placement** - Where to place this line.
-+ **Rectangle**
-    + **X1 Co-Ordinate** - The left hand position of the rectangle in mm.
-    + **X2 Co-Ordinate** - The right hand position of the rectangle in mm.
-    + **Y1 Co-Ordinate** - The top position of the rectangle in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the rectangle in mm.
-    + **Line Thickness** - The thickness of the line.
-+ **Image**
-    + **X1 Co-Ordinate** - The left hand position of the image in mm.
-    + **X2 Co-Ordinate** - The right hand position of the image in mm.
-    + **Y1 Co-Ordinate** - The top position of the image in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the image in mm.
-    + **File name** - The full path of the file name of the image.
-    + **Merge Code** - The merge code containing the path to the image e.g. ctlmst ctm_logo.
-+ **Line**
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The line colour.
-    + **Bold** - Whether to display the line in bold format.
-    + **X1 Co-Ordinate** - The left hand position of the line in mm.
-    + **Chrs** - The number of characters the line should extend.
-    + **X2** - The right hand position of the line in mm.
-    + **Y1 Co-Ordinate** - The top position of the line in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the line in mm.
-    + **Line Thickness** - The thickness of the line.
-+ **Text**
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the text in bold format.
-    + **Italic** - Whether to display the text in italic format.
-    + **Underline** - Whether to underline the text.
-    + **Alignment** - How to align the text.
-    + **Border** - Whether to draw borders around the text, TLRB.
-    + **Fill Background** - Whether to fill the background of the text.
-    + **X1 Co-Ordinate** - The left hand position of the text in mm.
-    + **Chrs** - The number of characters the text should extend.
-    + **X2** - The right hand position of the text in mm.
-    + **Y1 Co-Ordinate** - The top position of the text in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the text in mm.
-    + **Text Detail** - The text.
-+ **Code**
-    + **Text Type** - The text type. Heading, Label of a Column or No text.
-    + **Text Detail** - The text.
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the text in bold format.
-    + **Italic** - Whether to display the text in italic format.
-    + **Underline** - Whether to underline the text.
-    + **Alignment** - How to align the text.
-    + **Border** - Whether to draw borders around the text, TLRB.
-    + **Fill Background** - Whether to fill the background of the text.
-    + **X1 Co-Ordinate** - The left hand position of the text in mm.
-    + **Chrs** - The number of characters the text should extend.
-    + **X2** - The right hand position of the text in mm.
-    + **Y1 Co-Ordinate** - The top position of the text in mm.
-    + **Y2** - The bottom position of the text in mm.
-    + **Merge Code** - The code to use to import data.
-    + **Font Name** - The name of the font to use for the imported data.
-    + **Size** - The font size to use for the imported data.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the imported data in bold format.
-    + **Italic** - Whether to display the imported data in italic format.
-    + **Underline** - Whether to underline the imported data.
-    + **Alignment** - How to align the imported data.
-    + **Border** - Whether to draw borders around the imported data, TLRB.
-    + **Fill Background** - Whether to fill the background of the imported data.
-    + **X1 Co-Ordinate** - The left hand position of the imported data in mm.
-    + **Chrs** - The number of characters the imported data should extend.
-    + **X2** - The right hand position of the imported data in mm.
-    + **Y1 Co-Ordinate** - The top position of the imported data in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the imported data in mm.
-    + **Number of Lines** - The number of lines the imported data can contain e.g. a name and address could be 5 lines.
-    + **Repeats** - The number of time to repeat the imported data e.g. the number of lines in the body of a statement could be 30.
-
-.. raw:: pdf
-
-    PageBreak
-
-Telephone Directory
-...................
-Use this routine to manage a telephone directory.
-
-All the fields are self explanatory with the exception of the following:
-
-+ **Contact Group** - This is a 3 letter group code. If the code does not exist you will have to also enter the group description. This code is used in the bulk mailing module.
-
-+ **Buttons**
-    + **Back** - Select this button to display the previous directory entry.
-    + **Forward** - Select this button to display the next directory entry.
-    + **Import** - Select this button to import all contacts from other sources e.g. Creditors, Debtors, Members, Bookings etc.
-    + **Notes** - Select this button to maintain notes relating to this entry.
-    + **Print** - Select this button to print all entries or the current entry.
-    + **Apply** - Select this button to apply current addition or change.
-    + **Contacts** - Select this button to maintain contacts of the current entry.
-    + **Cancel** - Select this button to cancel any current additions or changes.
-    + **Quit** - Select this button to quit the application.
-Help
-~~~~
-About Tartan
-............
-This routine will display the copyright details, version and contact information for Tartan Systems.
-
-+ **Licence** - The Tartan licence details.
-+ **Changes** - The Tartan changes since version 4 to date.
-
-Reference Manual
-................
-This routine will display this manual, if available, or the on-line one using your default browser.
-
-Quick Start Manual
-..................
-This routine will display the quick start manual, if available, or the on-line one using your default browser.

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2016-05-21 12:42:32 +0000
+++ doc/Downloads.rst	2016-06-22 08:50:22 +0000
@@ -11,23 +11,23 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.2.2 and was released on the 21st May, 2016.
+The latest version of Tartan is 5.2.3 and was released on the 22nd June, 2016.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.2.2.tar.gz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.2.3.tar.gz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tar.gz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tar.gz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tar.gz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.2.2.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.2.3.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.2.2.tar.gz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.2.2.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.2.2.tar.gz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.2.2.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.2.3.tar.gz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.2.3.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.2.3.tar.gz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.2.3.exe
 
 |linux| Linux
 =============

=== modified file 'doc/GL.rst'
--- doc/GL.rst	2015-10-25 09:33:02 +0000
+++ doc/GL.rst	2016-05-23 05:55:56 +0000
@@ -287,27 +287,27 @@
     + **V** - The applicable V.A.T. code to apply to this allocation.
     + **VAT-Amount** - The V.A.T. amount, which can be overridden.
     + **Details** - The description of the allocation.
-+ **ASS** - This only applies if the `Acc-Num` is one of the asset control accounts.
++ **ASS** - This only applies if the `Acc-Num` is one of the asset control accounts and assets have been integrated.
     + **Grp** - The asset's group code.
     + **Cod-Num** - The asset's code.
     + **M** - The transaction type i.e. New purchase, improvement, write off, depreciation or sale of asset.
     + **Amount** - The amount of the allocation.
     + **Details** - The description of the allocation.
-+ **BKM** - This only applies if the `Acc-Num` is the booking control account.
++ **BKM** - This only applies if the `Acc-Num` is the booking control account and bookings have been integrated.
     + **Bkm-Num** - The booking number.
     + **Amount** - The amount of the allocation.
-+ **CRS** - This only applies if the `Acc-Num` is the creditor's control account and the transaction type is payments or receipts.
++ **CRS** - This only applies if the `Acc-Num` is the creditor's control account and the transaction type is payments or receipts and creditors have been integrated.
     + **Acc-Num** - The creditor's account number.
     + **Ref-No2** - A further reference number if applicable.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this account.
-+ **DRS** - This only applies if the `Acc-Num` is the debtor's control account and the transaction type is payments or receipts.
++ **DRS** - This only applies if the `Acc-Num` is the debtor's control account and the transaction type is payments or receipts and debtors have been integrated.
     + **Chn** - The chain store code, if chain stores apply.
     + **Acc-Num** - The debtor's account number.
     + **Ref-No2** - A further reference number if applicable.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this account.
-+ **LON** - This only applies if the `Acc-Num` is the staff loans control account.
++ **LON** - This only applies if the `Acc-Num` is the staff loans control account and loans have been integrated.
     + **Acc-Num** - The account number.
     + **Ln** - The loan number.
     + **Description** - The description of the loan, new loans only.
@@ -315,11 +315,11 @@
     + **Rate-%** - The new interest rate to apply to the loan.
     + **Mth** - The interest rate to apply to the loan.
     + **Repayment** - The new amount to be repaid monthly.
-+ **MEM** = This only applies if the `Acc-Num` is the members control account.
++ **MEM** = This only applies if the `Acc-Num` is the members control account and members have been integrated.
     + **Mem-Num** - The member's number.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this member.
-+ **SLN** - This only applies if the `Acc-Num` is the staff loans control account.
++ **SLN** - This only applies if the `Acc-Num` is the staff loans control account and salaries have been integrated.
     + **EmpNo** - The employee number.
     + **Ln** - The loan number.
     + **Amount** - The amount of the loan.
@@ -343,8 +343,50 @@
 + **V** - The applicable V.A.T. code to apply to this journal.
 + **VAT-Amt** - The V.A.T. amount, which can be overridden.
 + **Details** - The description of the journal.
++ **ASS** - This only applies if the `Acc-Num` is one of the asset control accounts and assets have been integrated.
+    + **Grp** - The asset's group code.
+    + **Cod-Num** - The asset's code.
+    + **M** - The transaction type i.e. New purchase, improvement, write off, depreciation or sale of asset.
+    + **Amount** - The amount of the allocation.
+    + **Details** - The description of the allocation.
++ **BKM** - This only applies if the `Acc-Num` is the booking control account and bookings have been integrated.
+    + **Bkm-Num** - The booking number.
+    + **Amount** - The amount of the allocation.
++ **CRS** - This only applies if the `Acc-Num` is the creditor's control account and the transaction type is payments or receipts and creditors have been integrated.
+    + **Acc-Num** - The creditor's account number.
+    + **Ref-No2** - A further reference number if applicable.
+    + **Discount** - A discount amount.
+    + **Amount** - The amount to be allocated to this account.
++ **DRS** - This only applies if the `Acc-Num` is the debtor's control account and the transaction type is payments or receipts and debtors have been integrated.
+    + **Chn** - The chain store code, if chain stores apply.
+    + **Acc-Num** - The debtor's account number.
+    + **Ref-No2** - A further reference number if applicable.
+    + **Discount** - A discount amount.
+    + **Amount** - The amount to be allocated to this account.
++ **LON** - This only applies if the `Acc-Num` is the staff loans control account and loans have been integrated.
+    + **Acc-Num** - The account number.
+    + **Ln** - The loan number.
+    + **Description** - The description of the loan, new loans only.
+    + **Amount** - The amount of the loan.
+    + **Rate-%** - The new interest rate to apply to the loan.
+    + **Mth** - The interest rate to apply to the loan.
+    + **Repayment** - The new amount to be repaid monthly.
++ **MEM** = This only applies if the `Acc-Num` is the members control account and members have been integrated.
+    + **Mem-Num** - The member's number.
+    + **Discount** - A discount amount.
+    + **Amount** - The amount to be allocated to this member.
++ **SLN** - This only applies if the `Acc-Num` is the staff loans control account and salaries have been integrated.
+    + **EmpNo** - The employee number.
+    + **Ln** - The loan number.
+    + **Amount** - The amount of the loan.
+    + **Cde** - The new deduction code to use to repay the loan.
+    + **Intr-%** - The new interest rate to apply to the loan.
+    + **Ded-Amt** - The new amount to be deducted from earnings to repay the loan.
 
-The *List All* button will show you all the postings captured, including those which have scrolled off the screen, for checking purposes.
+*Import File* button is used to import manual journal entries from a csv or excel file.
+*View Entries* button will show you all the postings captured, including those which have scrolled off the screen, for checking purposes.
+*End Batch* button will end the batch if debits equal the credits.
+*Abort Batch* button will abort the current entries for the batch.
 
 Please note that you will not be able to exit this routine until the debits equal the credits. Credits are entered as minus amounts.
 

=== modified file 'doc/MB.rst'
--- doc/MB.rst	2016-05-21 12:42:32 +0000
+++ doc/MB.rst	2016-06-22 08:50:22 +0000
@@ -2,7 +2,7 @@
  TARTAN SYSTEMS - Bowling Clubs
 ================================
 
-:Version:   5.2.2
+:Version:   5.2.3
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/MD.rst'
--- doc/MD.rst	2016-05-21 12:42:32 +0000
+++ doc/MD.rst	2016-06-22 08:50:22 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.2.2
+:Version:   5.2.3
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -238,6 +238,8 @@
     + **4** - 3 plus Month End Routines
     + **5** - 4 plus Control Routines
     + **6** - 5 plus Financial Year End Routine
+    + **7** - 6 plus User and Module Password Maintenance
+    + **8** - 7 plus Update File Formats
     + **9** - Supervisor level, Everything
 
 + The following fields are used to control which companies, systems and modules are available, only by password, to this user:

=== modified file 'doc/QS.rst'
--- doc/QS.rst	2016-02-27 13:18:41 +0000
+++ doc/QS.rst	2016-06-20 16:59:43 +0000
@@ -27,69 +27,6 @@
 
 The General Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
 
-Creditor's Ledger
-.................
-If you are going to use the `Creditor's Ledger` you must perform the following procedures in order:
-
-+ Create a control record for the company using `Control Record`.
-+ If you elected to integrate with the General Ledger you must create the `crs_ctl` and `dis_rec` control accounts as per above.
-+ Create Creditor's accounts using `Masterfile Records`.
-+ Capture the account's opening balances using `Journals` in `Data Capture`.
-+ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
-
-Please remember that if you are integrating the Creditors and General Ledger systems, the control account must balance with the age analysis.
-
-The Creditor's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Please also note that within the Creditor's system all balances are stored as positive even though they are stored as credits in the General Ledger.  Therefore to increase a supplier's balance you would capture a Journal Credit and to decrease a supplier's balance you would capture a Journal Debit.
-
-Debtor's Ledger
-...............
-If you are going to use the `Debtor's Ledger` you must perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ If you elected to integrate with the General Ledger you must create the `drs_ctl` and `dis_all` controls as per above.
-+ If you are going to make use of chain stores, i.e. the facility to have separate accounts for branches within a chain with a consolidated statement. You would have to create the necessary chain store records using `Chain Stores`.
-+ If you are going to group your accounts by business activity, create the necessary records using `Business Activities`.
-+ If you are going to group your accounts by business types, create the necessary records using `Business Types`.
-+ If you are going to group your accounts by area, create the necessary records using `Areas`.
-+ If you are going to group your accounts by salesman, create the necessary records using `Salesmen`.
-+ Create Debtor's accounts using `Masterfile Records`.
-+ Capture the account's opening balances using `Journals` in `Data Capture`.
-+ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
-
-Please remember that if you are integrating the Debtors and General Ledger systems, the control account must balance with the age analysis.
-
-The Debtor's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Store's Ledger
-..............
-If you are going to use the `Store's Ledger` you must perform the following procedures in order:
-
-+ Create a control record for the company using `Control Record`.
-+ If you elected to integrate with the General Ledger you must create the `stk_soh` and `stk_susp` controls as per above.
-+ Create units of issue records using `Units of Issue`.
-+ Create product groups using `Product Groups`.
-+ Create stock records for the company by selecting `Masterfile Records`.
-+ Enter the current stock on hand for the company by selecting `Stock Take Returns`.
-+ Print a variance report using `Stock Take Variance Report` and ensure that all the quantities have been entered correctly. Correct any errors by redoing the previous step for the incorrect ones only.
-+ Update the stock items using `Stock Take Merge`.
-+ Print a stock on hand report using `Stock on Hand`.
-
-Please remember that if you are integrating the Stores and General Ledger systems, the control account must balance with the stock on hand report.
-
-The Store's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Sales Invoicing
-...............
-If you are going to use `Sales Invoicing` you must perform the following procedures in order:
-
-+ Setup the Debtor's System as in 8) above ensuring that you create at least one salesman's record.
-+ Setup the Store's System as in 9) above.
-+ Create a control record using `Control Record`.
-
-The Sales's Invoicing system is at this stage fully functional and you can capture invoices, credit notes, sales orders and quotations.
-
 Asset's Ledger
 ..............
 If you are going to use the `Asset's Register` you must at least perform the following procedures in order:
@@ -144,6 +81,41 @@
     * After the games have been played enter the results by selecting `Capture Results` from the menu.
     * Print the game and match results by selecting the applicable routines from the menu.
 
+Creditor's Ledger
+.................
+If you are going to use the `Creditor's Ledger` you must perform the following procedures in order:
+
++ Create a control record for the company using `Control Record`.
++ If you elected to integrate with the General Ledger you must create the `crs_ctl` and `dis_rec` control accounts as per above.
++ Create Creditor's accounts using `Masterfile Records`.
++ Capture the account's opening balances using `Journals` in `Data Capture`.
++ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
+
+Please remember that if you are integrating the Creditors and General Ledger systems, the control account must balance with the age analysis.
+
+The Creditor's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
+
+Please also note that within the Creditor's system all balances are stored as positive even though they are stored as credits in the General Ledger.  Therefore to increase a supplier's balance you would capture a Journal Credit and to decrease a supplier's balance you would capture a Journal Debit.
+
+Debtor's Ledger
+...............
+If you are going to use the `Debtor's Ledger` you must perform the following procedures in order:
+
++ Create a control record using `Control Record`.
++ If you elected to integrate with the General Ledger you must create the `drs_ctl` and `dis_all` controls as per above.
++ If you are going to make use of chain stores, i.e. the facility to have separate accounts for branches within a chain with a consolidated statement. You would have to create the necessary chain store records using `Chain Stores`.
++ If you are going to group your accounts by business activity, create the necessary records using `Business Activities`.
++ If you are going to group your accounts by business types, create the necessary records using `Business Types`.
++ If you are going to group your accounts by area, create the necessary records using `Areas`.
++ If you are going to group your accounts by salesman, create the necessary records using `Salesmen`.
++ Create Debtor's accounts using `Masterfile Records`.
++ Capture the account's opening balances using `Journals` in `Data Capture`.
++ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
+
+Please remember that if you are integrating the Debtors and General Ledger systems, the control account must balance with the age analysis.
+
+The Debtor's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
+
 Member's Ledger
 ...............
 If you are going to use the `Member's Ledger` you must at least perform the following procedures in order:
@@ -176,6 +148,34 @@
 
 The Rental's Ledger (Standard) system is at this stage fully functional and you can capture payments, receipts and journal entries.
 
+Store's Ledger
+..............
+If you are going to use the `Store's Ledger` you must perform the following procedures in order:
+
++ Create a control record for the company using `Control Record`.
++ If you elected to integrate with the General Ledger you must create the `stk_soh` and `stk_susp` controls as per above.
++ Create units of issue records using `Units of Issue`.
++ Create product groups using `Product Groups`.
++ Create stock records for the company by selecting `Masterfile Records`.
++ Enter the current stock on hand for the company by selecting `Stock Take Returns`.
++ Print a variance report using `Stock Take Variance Report` and ensure that all the quantities have been entered correctly. Correct any errors by redoing the previous step for the incorrect ones only.
++ Update the stock items using `Stock Take Merge`.
++ Print a stock on hand report using `Stock on Hand`.
+
+Please remember that if you are integrating the Stores and General Ledger systems, the control account must balance with the stock on hand report.
+
+The Store's Ledger system is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
+
+Sales Invoicing
+...............
+If you are going to use `Sales Invoicing` you must perform the following procedures in order:
+
++ Setup the Debtor's System as in 8) above ensuring that you create at least one salesman's record.
++ Setup the Store's System as in 9) above.
++ Create a control record using `Control Record`.
+
+The Sales's Invoicing system is at this stage fully functional and you can capture invoices, credit notes, sales orders and quotations.
+
 Salaries and Wages
 ..................
 If you are going to use `Salaries and Wages` you must at least perform the following procedures in order:

=== removed file 'doc/QuickStart.rst'
--- doc/QuickStart.rst	2015-10-25 09:33:02 +0000
+++ doc/QuickStart.rst	1970-01-01 00:00:00 +0000
@@ -1,205 +0,0 @@
-==============================
- Tartan Systems - Quick Start
-==============================
-
-Once Tartan Systems has been installed, the following procedures have to be performed before any meaningful work can be done. These procedures obviously depend on which modules are going to be used but this will be explained as we progress.
-
-+ Start Tartan by either clicking on the icon on the desktop or from the command line as follows:
-
-    + **Linux** - `program_path/ms0000.py [options]`
-    + **Windows** - `program_path\\ms0000.exe [options]`
-
-  To find out what the available command line options are, use the -h option.
-
-+ Login using **admin** as the user name and a password if prompted.
-
-+ The first time Tartan is started you will be taken to `Preferences` where you will have to set up your preferences regarding database, paths, utilities and various other choices. You will then have to enter the system record using `System Record Maintenance` as well as a company record using `Company Records Maintenance`. For most SOHO installations there will only be one company, however there is provision for up to 999 integrated companies.
-
-General Ledger
-..............
-If you are going to use the `General Ledger` you must perform the following procedures in order:
-
-+ Create, Populate or Import the chart of accounts using `Masterfile Records`.
-+ Create control accounts using `Control Accounts` if not populated.
-+ Capture the account's opening balances using `Opening Balances`.
-+ Print a trial balance using `Trial Balance` and ensure that your accounts balance. If not, recapture the incorrect ones.
-+ Capture the account's budgets using `Budgets` if required.
-
-The General Ledger is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Creditor's Ledger
-.................
-If you are going to use the `Creditor's Ledger` you must perform the following procedures in order:
-
-+ Create a control record for the company using `Control Record`.
-+ Create Creditor's accounts using `Masterfile Records`.
-+ Capture the account's opening balances using `Journals` in `Data Capture`.
-+ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
-
-Please remember that if you are integrating the Creditors and General Ledger systems, the control account must balance with the age analysis.
-
-The Creditor's Ledger is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Please also note that within the Creditor's system all balances are stored as positive even though they are stored as credits in the General Ledger.  Therefore to increase a supplier's balance you would capture a Journal Credit and to decrease a supplier's balance you would capture a Journal Debit.
-
-Debtor's Ledger
-...............
-If you are going to use the `Debtor's Ledger` you must perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ If you are going to make use of chain stores, i.e. the facility to have separate accounts for branches within a chain with a consolidated statement. You would have to create the necessary chain store records using `Chain Stores`.
-+ If you are going to group your accounts by business activity, create the necessary records using `Business Activities`.
-+ If you are going to group your accounts by business types, create the necessary records using `Business Types`.
-+ If you are going to group your accounts by area, create the necessary records using `Areas`.
-+ If you are going to group your accounts by salesman, create the necessary records using `Salesmen`.
-+ Create Debtor's accounts using `Masterfile Records`.
-+ Capture the account's opening balances using `Journals` in `Data Capture`.
-+ Print an aged analysis using `Age Analysis` and ensure that your totals balance. If not, recapture the incorrect ones.
-
-Please remember that if you are integrating the Debtors and General Ledger systems, the control account must balance with the age analysis.
-
-The Debtor's Ledger is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Store's Ledger
-..............
-If you are going to use the `Store's Ledger` you must perform the following procedures in order:
-
-+ Create a control record for the company using `Control Record`.
-+ Create units of issue records using `Units of Issue`.
-+ Create product groups using `Product Groups`.
-+ Create stock records for the company by selecting `Masterfile Records`.
-+ Enter the current stock on hand for the company by selecting `Stock Take Returns`.
-+ Print a variance report using `Stock Take Variance Report` and ensure that all the quantities have been entered correctly. Correct any errors by redoing the previous step for the incorrect ones only.
-+ Update the stock items using `Stock Take Merge`.
-+ Print a stock on hand report using `Stock on Hand`.
-
-Please remember that if you are integrating the Stores and General Ledger systems, the control account must balance with the stock on hand report.
-
-The Store's Ledger is at this stage fully functional and you can capture postings, produce basic reports and do interrogations etc.
-
-Sales Invoicing
-...............
-If you are going to use `Sales Invoicing` you must perform the following procedures in order:
-
-+ Setup the Debtor's System as detailed above ensuring that you create at least one salesman's record.
-+ Setup the Store's System as detailed above.
-+ Create a control record using `Control Record`.
-
-The Sales's Invoicing system is at this stage fully functional and you can capture invoices, credit notes, sales orders and quotations.
-
-Asset's Ledger
-..............
-If you are going to use the `Asset's Register` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ Create depreciation codes using `Depreciation Codes`.
-+ Create group records using `Group Records`.
-+ Create masterfile records and take on opening balances for existing assets using `Opening Balances`.
-
-The Asset's Register is at this stage fully functional and you can capture payments, receipts and journal entries. Please note that new assets are captured via the data capture routines i.e. Payments and/or Journal Entries.
-
-Bookings Manager
-................
-If you are going to use the `Booking's Manager` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ Create unit records using `Unit Records`.
-+ Create rate records using `Rate Records`.
-+ Create booking letters using `Booking Letters`.
-
-The Booking's Manager is at this stage fully functional and you can capture bookings and booking's movements.
-
-Bowling Clubs
-.............
-If you are going to use `Bowling Clubs` you must first of all ensure that the `System and Company` records have been created.
-
-+ Create a systems record, by selecting `System Record Maintenance` from the Control menu.
-+ Create a company/club record, by selecting `Company Records Maintenance` from the Control menu.
-+ **Tabs Draw**
-    * Create a Control record by selecting `Control Record` from the File Maintenance menu.
-    * Create Tab records by selecting `TABS Maintenance` from the File Maintenance menu.
-    * Do a draw by selecting `New Draw` from the menu.
-    * Reprint a draw by selecting `Reprint Draw` from the menu.
-+ **League Selections**
-    * Create a league format record by selecting `League Formats` from the File Maintenance menu.
-    * Create Tab records by selecting `TABS Maintenance` from the File Maintenance menu.
-    * Create side records by selecting `Side's Maintenance` from the File Maintenance menu.
-    * Enter team selections by selecting `Capture Selections` from the menu.
-    * To print `Assessment Forms` select Assessment Forms from the menu.
-    * To print flag `Declaration Forms` select Declaration Forms from the menu.
-    * To capture the completed `Assessment Forms` select `Capture Assessments` from the menu.
-    * To print the `Match Assessment Report` select Match Assessment Report from the menu.
-    * To print the `Assessment Summary` select `Assessment Summary` from the menu.
-    * To clear historical selections select `Clear League History` from the toolbox menu.
-+ **Club Competitions**
-    * Create a Competition Type record by selecting `Competition Types` from the File Maintenance menu.
-    * Create player's records by selecting `Player's Maintenance` from the File Maintenance menu.
-    * Capture Competition Entries by selecting `Capture Entries` from the menu.
-    * Print Match Cards and Match Report by selecting `Print Match Cards` from the menu.
-    * Print Match Cards Summary by selecting `Print Cards Summary` from the menu. This report is a running summary of all draws.
-    * To change Match Cards select `Change Match Cards` from the menu. After changing the cards you must reprint them as per above. Please note that to only reprint certain cards you must select `All Cards No`.
-    * After the games have been played enter the results by selecting `Capture Results` from the menu.
-    * Print the game and match results by selecting the applicable routines from the menu.
-
-Loan's Ledger
-.............
-If you are going to use the `Loan's Ledger` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-
-The Loan's Ledger is at this stage fully functional and you can add members, edit member details, capture postings, produce basic reports and do interrogations etc.
-
-Member's Ledger
-...............
-If you are going to use the `Member's Ledger` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ If you elected to integrate with the General Ledger you must create the `mem_ctl` and `mem_pen` controls as per above.
-+ Create category records using `Category Records`.
-+ Create contact records using `Contact Records`.
-
-The Member's Ledger is at this stage fully functional and you can add members, edit member details, capture postings, produce basic reports and do interrogations etc.
-
-Rental's Ledger - Standard
-..........................
-If you are going to use the `Rental's Ledger (Standard)` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ Create premises records using `Premises Records`.
-+ Create masterfile records using `Masterfile Records`.
-
-The Rental's Ledger (Standard) is at this stage fully functional and you can capture payments, receipts and journal entries.
-
-Rental's Ledger - Extended
-..........................
-If you are going to use the `Rental's Ledger (Extended)` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ Create owners records using `Owners Records`.
-+ Create premises records using `Premises Records`.
-+ Create tenants records using `Tenants Records`.
-
-The Rental's Ledger (Standard) is at this stage fully functional and you can capture payments, receipts and journal entries.
-
-Salaries and Wages
-..................
-If you are going to use `Salaries and Wages` you must at least perform the following procedures in order:
-
-+ Create a control record using `Control Record`.
-+ If you elected to integrate with the General Ledger you must create the `wag_ctl`, `wag_slc` and `wag_sli` controls as per above.
-+ Create at least one branch record using `Branch Records`.
-+ Create at least one department record using `Department Records`.
-+ Create all necessary earnings and deduction records using `Earning and Deduction Codes`.
-+ Create employee records using `Employee Masterfile`.
-
-The Salaries and Wages system is at this stage fully functional and you can capture clock cards and produce payslips etc.
-
-Staff Loans
-...........
-If you are going to use `Staff Loans` you must first of all set up `Salaries and Wages` as detailed above and then, at least, perform the following procedures in order:
-
-+ Ensure that there is a deduction record, in the salaries system, for loan repayments.
-+ Ensure that all employees with loans have the deduction record included in their masterfile records as a deduction, without values.
-+ Capture existing loans using `New Loans`. If Salaries are integrated with the general ledger un-integrate salaries to capture loans balances. Once all opening balances have been captured re-integrate salaries.
-
-The Staff Loans system is at this stage functional.

=== modified file 'doc/SC.rst'
--- doc/SC.rst	2016-05-21 12:42:32 +0000
+++ doc/SC.rst	2016-05-21 12:53:32 +0000
@@ -63,7 +63,7 @@
 ------
 Update File Formats
 ...................
-Everytime you perfor an upgrade of Tartan you will have to run this routine as well. This routine will automatically update all table formats in the database.
+Every time you perform an upgrade of Tartan you will have to run this routine as well. This routine will automatically update all table formats in the database.
 
 Backup Database
 ...............
@@ -212,8 +212,8 @@
 + **Output** - Select whether to view or print the draw.
 + **Printer Name** - The printer to use for printing.
 
-Competiton Draw
-+++++++++++++++
+Competition Draw
+++++++++++++++++
 Once all the entries have been captured you can perform the draw for the competition as follow:
 
 + **Competition Code** - The relevant competition code.

=== added file 'doc/UB.rst'
--- doc/UB.rst	1970-01-01 00:00:00 +0000
+++ doc/UB.rst	2016-05-10 05:23:41 +0000
@@ -0,0 +1,216 @@
+Utilities
+---------
+Telephone Directory
+...................
+Use this routine to manage a telephone directory.
+
+All the fields are self explanatory with the exception of the following:
+
++ **Directory Groups** - These are 3 letter group codes. If the code does not exist you will have to also enter the group description. This code can also be used in the bulk mailing module.
+
++ **Directory Entries** - These are the individual directory entries. All the fields are self explanatory with the exception of the 'Contact Groups' which is a comma separated list of directory groups.
+
++ **Buttons**
+    + **Back** - Select this button to display the previous directory entry.
+    + **Forward** - Select this button to display the next directory entry.
+    + **Import** - Select this button to import all contacts from other sources e.g. Creditors, Debtors, Members, Bookings etc.
+    + **Notes** - Select this button to maintain notes relating to this entry.
+    + **Print** - Select this button to print all entries or the current entry.
+    + **Apply** - Select this button to apply current addition or change.
+    + **Contacts** - Select this button to maintain contacts of the current entry.
+    + **Cancel** - Select this button to cancel any current additions or changes.
+    + **Quit** - Select this button to quit the application.
+
+Bulk Mail Utility
+.................
+Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Record`_.
+
++ **Delivery Type** - The available delivery types will depend on what is entered in the `System Control Record` and can be either E-Mail, SMS or both.
++ **List to Use** - The available lists will depend on the systems being used and can contain Bowls and Directory (Telephone). In addition to the lists, CSV or XLS files can also be used, as long as they contain a name and an email address and or a cell number. Please note that Creditors and Debtors do not have SMS capabilities.
+    + **Bowls** - This list accesses the tartan bowl's tabs.
+        + **Category** - Allow selection by category.
+        + **Gender** - Allow selection by gender.
+        + **Individuals** - Allow selection of individual recipients.
+    + **Directory** - This list accesses the tartan telephone directory.
+        + **Group Selection** - Allow selection by group.
+        + **Include Contacts** - Include the recipient's contacts.
+        + **Individuals** - Allow selection of individual recipients.
+    + **CSV and XLS File** - This is a csv or xls file containing a name, email address and/or a mobile number.
+        + **File Name** - The full path of the file to use.
+        + **Ignore Invalid Lines** - Select whether to ignore invalid lines.
+        + **Mobile/Email Column** - Enter the column of the mobile number or email address.
+        + **Personalise** - Allow penalisation of the recipient.
+        + **Title** - Select whether or not to use titles.
+        + **Title Column** - Enter the column of the title.
+        + **Surname Column** - Enter the column of the surname.
+        + **Names Column** - Enter the column of the names.
+        + **Name Detail** - Select whether to use the names or initials.
++ **Skip Delivery Errors** - Select whether or not to skip invalid email addresses.
++ **Subject** - The subject of the email.
++ **In-line Attachment** - Any in-line image to be included in the email.
++ **Separate Attachment** - Any attachment to be attached to the email.
++ **Message** - Any text message. In order to get the recipients name in the message use one of the following methods:
+    + **{{name}}** - Use this method if the recipient has separate surname and names fields.
+    + **{{surname}}** - Use this method if the recipient has a single name field where the surname and names are comma separated e.g. Malherbe, Paul.
+
+.. raw:: pdf
+
+    PageBreak
+
+Report Generator
+................
+Use this routine to generate ad hoc SQL reports. It is not necessary to know the SQL language but it is beneficial.
+
++ **Name** - A name for the report.
++ **Description** - A description of the report.
++ **Heading-1** - The first heading of the report.
++ **Heading-2** - A second heading, if applicable.
+
++ The following screens are now available:
+
++ **Tables** - These are the tables to be used to generate the report. At least one table must be selected.
+    + **Table Sequence** - A sequential number of the line to enter or edit.
+        + **Tables** - The table name. F1 will give a list of available tables.
++ **Joins** - These are further tables to be joined to the ones selected in `Tables`.
+    + **T** - The type of join. F1 gives a list of available types.
+    + **Tables** - The table which must be joined.
+    + **Join Columns** - The columns to be used for the join.
++ **Columns** - These are the table columns to show in the report. If no columns are selected, all columns will be used.
+    + **Column Sequence** - A sequential number of the line to enter or edit.
+        + **T** - The type of column.
+            + **C** - An actual column in the table.
+                + **Label** - The column name. You will be shown a list of columns to select from.
+            + **E** - An expression e.g. Sum, Avg, Count etc.
+                + **Label** - You will have to type a name for the expression. You will then be offered a selection of expression types and depending on your choice a further selection of options.
+                + **Expression** - The generated expression will now be displayed and you can either accept or edit it.
+        + **Heading** - The column heading.
+        + **TP** - The type of column. F1 will show all available types.
+        + **Size** - The width of the column in characters.
+        + **G** - Whether or not to group the report on this column.
+        + **S** - Whether or not to print sub totals for this column.
+        + **Narration** - If sub totals was selected, enter the narration of the sub total.
+        + **P** - If sub totals was selected, select whether or not to start a new page after each sub total.
+        + **G** - If the column type is numeric, select whether or not to print a grand total for the column.
+        + **D** - Whether or not to actually display the column in the report or simply to use it for totals etc.
++ **Variables**
++ **Exceptions**
++ **Order**
+
+.. raw:: pdf
+
+    PageBreak
+
+Template Manager
+................
+Use this routine to create, edit or delete templates.
+
++ **Name** - The name of the template.
++ **Title** - The title of the template.
++ **TT** - The template type as follows:
+    + **I** - Sales Document
+    + **O** - Purchase Order
+    + **P** - Payslip
+    + **R** - Remittance Advice
+    + **S** - Statement
++ **Sys** - The relevant system code relating to the type.
++ **ST** - This only applies to statements and is the type of statement as follows:
+    + **N** - Normal
+    + **O** - Other
++ **Size** - The page size i.e. A4, A5 or A6
++ **Orient** - The page orientation i.e. Portrait or Landscape.
++ **Sequence**
+    + **Line Number** - The line number to edit or 0 for the next available number.
+    + **Line Type** - The line type as follows:
+        + **C Merge Code** - Use this code for lines that will be populated with data.
+        + **I Image** - Use this code to display an image.
+        + **L Line** - Use this code to draw a line.
+        + **R Rectangle** - Use this code to draw a rectangle.
+        + **T Text** - Use this code to print some fixed text.
+    + **Placement** - Where to place this line.
++ **Rectangle**
+    + **X1 Co-Ordinate** - The left hand position of the rectangle in mm.
+    + **X2 Co-Ordinate** - The right hand position of the rectangle in mm.
+    + **Y1 Co-Ordinate** - The top position of the rectangle in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the rectangle in mm.
+    + **Line Thickness** - The thickness of the line.
++ **Image**
+    + **X1 Co-Ordinate** - The left hand position of the image in mm.
+    + **X2 Co-Ordinate** - The right hand position of the image in mm.
+    + **Y1 Co-Ordinate** - The top position of the image in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the image in mm.
+    + **File name** - The full path of the file name of the image.
+    + **Merge Code** - The merge code containing the path to the image e.g. ctlmst ctm_logo.
++ **Line**
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The line colour.
+    + **Bold** - Whether to display the line in bold format.
+    + **X1 Co-Ordinate** - The left hand position of the line in mm.
+    + **Chrs** - The number of characters the line should extend.
+    + **X2** - The right hand position of the line in mm.
+    + **Y1 Co-Ordinate** - The top position of the line in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the line in mm.
+    + **Line Thickness** - The thickness of the line.
++ **Text**
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the text in bold format.
+    + **Italic** - Whether to display the text in italic format.
+    + **Underline** - Whether to underline the text.
+    + **Alignment** - How to align the text.
+    + **Border** - Whether to draw borders around the text, TLRB.
+    + **Fill Background** - Whether to fill the background of the text.
+    + **X1 Co-Ordinate** - The left hand position of the text in mm.
+    + **Chrs** - The number of characters the text should extend.
+    + **X2** - The right hand position of the text in mm.
+    + **Y1 Co-Ordinate** - The top position of the text in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the text in mm.
+    + **Text Detail** - The text.
++ **Code**
+    + **Text Type** - The text type. Heading, Label of a Column or No text.
+    + **Text Detail** - The text.
+    + **Font Name** - The name of the font to use.
+    + **Size** - The font size to use.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the text in bold format.
+    + **Italic** - Whether to display the text in italic format.
+    + **Underline** - Whether to underline the text.
+    + **Alignment** - How to align the text.
+    + **Border** - Whether to draw borders around the text, TLRB.
+    + **Fill Background** - Whether to fill the background of the text.
+    + **X1 Co-Ordinate** - The left hand position of the text in mm.
+    + **Chrs** - The number of characters the text should extend.
+    + **X2** - The right hand position of the text in mm.
+    + **Y1 Co-Ordinate** - The top position of the text in mm.
+    + **Y2** - The bottom position of the text in mm.
+    + **Merge Code** - The code to use to import data.
+    + **Font Name** - The name of the font to use for the imported data.
+    + **Size** - The font size to use for the imported data.
+    + **Colour** - The text colour.
+    + **Bold** - Whether to display the imported data in bold format.
+    + **Italic** - Whether to display the imported data in italic format.
+    + **Underline** - Whether to underline the imported data.
+    + **Alignment** - How to align the imported data.
+    + **Border** - Whether to draw borders around the imported data, TLRB.
+    + **Fill Background** - Whether to fill the background of the imported data.
+    + **X1 Co-Ordinate** - The left hand position of the imported data in mm.
+    + **Chrs** - The number of characters the imported data should extend.
+    + **X2** - The right hand position of the imported data in mm.
+    + **Y1 Co-Ordinate** - The top position of the imported data in mm.
+    + **Y2 Co-Ordinate** - The bottom position of the imported data in mm.
+    + **Number of Lines** - The number of lines the imported data can contain e.g. a name and address could be 5 lines.
+    + **Repeats** - The number of time to repeat the imported data e.g. the number of lines in the body of a statement could be 30.
+
+Help
+----
+About Tartan
+............
+This routine will display the copyright details, version and contact information for Tartan Systems.
+
++ **Licence** - The Tartan licence details.
++ **Changes** - The Tartan changes since version 4 to date.
+
+Manual
+......
+This routine will display this manual, if available, or the on-line one using your default browser.

=== modified file 'drs/dr2020.py'
--- drs/dr2020.py	2016-02-27 13:18:41 +0000
+++ drs/dr2020.py	2016-05-26 07:44:15 +0000
@@ -143,7 +143,7 @@
                 "r","N",self.doTrnDat,None,None,("efld",)),
             (("C",1,0,2),"ISD",13.2,"Amount","Transaction Amount",
                 "","N",self.doTrnAmt,None,None,("notzero",)),
-            (("C",1,0,4),"INA",(30),"Details","Deposit Details",
+            (("C",1,0,3),"INA",(30),"Details","Deposit Details",
                 "","N",self.doTrnDet,None,None,None),
             (("T",2,0,0),"OSD",13.2,"Unallocated Balance"),
             [("C",2,0,0),"OUI",3,"Coy","Company Number",

=== modified file 'drs/dr4010.py'
--- drs/dr4010.py	2016-05-21 12:42:32 +0000
+++ drs/dr4010.py	2016-06-08 15:55:52 +0000
@@ -82,7 +82,8 @@
             ("Basic-_B", self.doTagSelect, ("T",0,0), ("T",0,1)),
             ("Balances", self.doTagSelect, ("T",0,0), ("T",0,1)),
             ("History", self.doTagSelect, ("T",0,0), ("T",0,1)),
-            ("Trans", self.doTrans1, ("T",0,0), ("T",0,1)))
+            ("Trans", self.doTrans1, ("T",0,0), ("T",0,1)),
+            ("Other", self.doOthers, ("T",0,0), ("T",0,1)))
         r1s = (("No","N"),("Yes","Y"))
         fld = [
             [("T",0,0,0),"IUI",3,"Chain Store","",
@@ -403,6 +404,53 @@
             return sls[1]
         return ref2
 
+    def doOthers(self, widget=None):
+        col = self.sql.slsiv1_col
+        whr = [
+            ("si1_cono", "=", self.opts["conum"]),
+            ("si1_rtn", "in", ("Q", "O", "W")),
+            ("si1_chain", "=", self.chain),
+            ("si1_acno", "=", self.acno),
+            ("si1_invno", "=", "")]
+        recs = self.sql.getRec(tables="slsiv1", where=whr, order="si1_date")
+        if recs:
+            data = []
+            for dat in recs:
+                data.append([
+                    dat[col.index("si1_date")],
+                    dat[col.index("si1_rtn")],
+                    dat[col.index("si1_docno")],
+                    dat[col.index("si1_cus_ord")],
+                    dat[col.index("si1_jobno")],
+                    dat[col.index("si1_contact")]])
+            tit = "Quotes and Orders for Account: %s - %s" % \
+                (self.acno, self.name)
+            col = (
+                ("si1_date", "   Date", 10, "D1", "N"),
+                ("si1_rtn", "T", 1, "UA", "N"),
+                ("si1_docno", "Doc-Numbr", 9, "UI", "N"),
+                ("si1_cus_ord", "Cust-Ord-Num", 14, "Na"),
+                ("si1_jobno", "Job-Num", 7, "Na"),
+                ("si1_contact", "Contact", 30, "NA"))
+            state = self.df.disableButtonsTags()
+            while True:
+                rec = SelectChoice(self.df.nb.Page6, tit, col, data)
+                # Attempt to display the document
+                if rec.selection:
+                    self.df.setWidget(self.df.mstFrame, state="hide")
+                    typ = rec.selection[2]
+                    try:
+                        doc = int(rec.selection[3])
+                        PrintInvoice(self.opts["mf"], self.opts["conum"],
+                            self.opts["conam"], typ, doc, repprt=["N", "V",
+                            "view"], copy="y")
+                    except:
+                        pass
+                    self.df.setWidget(self.df.mstFrame, state="show")
+                else:
+                    break
+            self.df.enableButtonsTags(state=state)
+
     def doNotes(self, widget=None):
         state = self.df.disableButtonsTags()
         self.df.setWidget(self.df.mstFrame, state="hide")

=== modified file 'gen/gl2040.py'
--- gen/gl2040.py	2016-05-21 12:42:32 +0000
+++ gen/gl2040.py	2016-06-22 08:28:05 +0000
@@ -1397,7 +1397,12 @@
                 self.df.advanceLine(self.tagp["ML"])
 
     def endOther(self):
-        self.df.clearFrame("C", self.mempag)
+        if self.others == "crs":
+            self.df.clearFrame("C", self.crspag)
+        elif self.others == "drs":
+            self.df.clearFrame("C", self.drspag)
+        else:
+            self.df.clearFrame("C", self.mempag)
         self.df.selPage("Transaction")
         self.df.advanceLine(1)
 

=== modified file 'ibt/ib3010.py'
--- ibt/ib3010.py	2016-05-21 12:42:32 +0000
+++ ibt/ib3010.py	2016-06-09 15:53:41 +0000
@@ -48,17 +48,26 @@
                 ("tpm_type", "=", "I"),
                 ("tpm_system", "=", "IBT")],
             "order": "tpm_tname"}
-        doc = {
-            "stype": "R",
-            "tables": ("ibtmst","ctlmst"),
+        bch = {
+            "stype": "R",
+            "tables": ("ibtmst", "ctlmst"),
+            "cols": [
+                ("ibm_branch", "",  0, "Coy"),
+                ("ctm_name",  "", 0, "Name")],
+            "where": [
+                ("ibm_cono", "=", self.opts["conum"]),
+                ("ctm_cono=ibm_branch",)],
+            "group": "ibm_branch",
+            "order": "ibm_branch"}
+        self.doc = {
+            "stype": "R",
+            "tables": ("ibtmst", "ctlmst"),
             "cols": [
                 ("ibm_docno", "",  0, "Doc-Num"),
                 ("ibm_branch",  "", 0, "Bch"),
                 ("ctm_name",  "", 0, "Name", "Y")],
-            "where": [
-                ("ibm_cono", "=", self.opts["conum"]),
-                ("ctm_cono=ibm_branch",)],
-            "screen": self.opts["mf"].body}
+            "where": [],
+            "order": "ibm_docno"}
         r1s = (("Invoices","I"),("Credit Notes", "C"))
         r2s = (("Range","R"),("Singles", "S"))
         fld = (
@@ -66,12 +75,14 @@
                 self.stpl,"Y",self.doTplNam,tpm,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Document Type","",
                 "I","N",self.doDocTyp,None,None,None),
-            (("T",0,2,0),("IRB",r2s),0,"Documents","",
+            (("T",0,2,0),"IUI",3,"Branch","",
+                "","N",self.doBranch,bch,None,("efld",)),
+            (("T",0,3,0),("IRB",r2s),0,"Documents","",
                 "S","N",self.doSelect,None,None,None),
-            (("T",0,3,0),"IUI",7,"From Number","From Document Number",
-                "","N",self.doDocno,doc,None,("notzero",)),
-            [("T",0,4,0),"IUI",7,"To   Number","To Document Number",
-                "","N",self.doDocno,doc,None,("notzero",)])
+            (("T",0,4,0),"IUI",7,"From Number","From Document Number",
+                "","N",self.doDocno,self.doc,None,("notzero",)),
+            [("T",0,5,0),"IUI",7,"To   Number","To Document Number",
+                "","N",self.doDocno,self.doc,None,("notzero",)])
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=((self.doEnd, "y"),), txit=(self.doExit,),
             view=("N","V"), mail=("B","Y"))
@@ -92,6 +103,13 @@
     def doDocTyp(self, frt, pag, r, c, p, i, w):
         self.dtyp = w
 
+    def doBranch(self, frt, pag, r, c, p, i, w):
+        self.branch = w
+        self.doc["where"] = [("ibm_cono", "=", self.opts["conum"])]
+        if self.branch:
+            self.doc["where"].append(("ibm_branch", "=", self.branch))
+        self.doc["where"].append(("ctm_cono=ibm_branch",))
+
     def doSelect(self, frt, pag, r, c, p, i, w):
         self.select = w
         if self.select == "S":
@@ -106,9 +124,9 @@
             self.opts["conum"]), ("ibm_docno", "=", w)])
         if not doc:
             return "Document Number Does Not Exist"
-        if p == 3:
+        if p == 4:
             self.frm = w
-            self.df.topf[pag][3][5] = self.frm
+            self.df.topf[pag][4][5] = self.frm
         elif w < self.frm:
             return "Document Number Before From Number"
         else:
@@ -125,12 +143,13 @@
                 if c in d:
                     dic[c] = d[c]
         if self.select == "S":
-            whr = [
-                ("ibm_cono", "=", self.opts["conum"]),
-                ("ctm_cono=ibm_branch",)]
+            whr = [("ibm_cono", "=", self.opts["conum"])]
+            if self.branch:
+                whr.append(("ibm_branch", "=", self.branch))
             if self.dtyp == "C":
                 col[1] = "ibm_cdte"
                 whr.append(("ibm_cdte", "<>", 0))
+            whr.append(("ctm_cono=ibm_branch",))
             recs = self.sql.getRec(tables=tab, cols=col, where=whr,
                 order="ibm_docno")
             recs = getSingleRecords(self.opts["mf"], tab, col, dic=dic,
@@ -144,6 +163,8 @@
                 ("ibm_cono", "=", self.opts["conum"]),
                 ("ibm_docno", ">=", self.frm),
                 ("ibm_docno", "<=", self.to)]
+            if self.branch:
+                whr.append(("ibm_branch", "=", self.branch))
             if self.dtyp == "C":
                 whr.append(("ibm_cdte", "<>", 0))
             doc = self.sql.getRec(tables="ibtmst", cols=["ibm_docno"],

=== added file 'img/books.png'
Binary files img/books.png	1970-01-01 00:00:00 +0000 and img/books.png	2016-06-12 11:06:48 +0000 differ
=== modified file 'lon/ln3030.py'
--- lon/ln3030.py	2016-02-27 13:18:41 +0000
+++ lon/ln3030.py	2016-05-25 15:01:58 +0000
@@ -16,7 +16,7 @@
 import time
 from TartanClasses import ASD, CCD, LoanInterest, MyFpdf, ProgressBar, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import getModName, doPrinter, showError
+from tartanFunctions import doPrinter, getModName, mthendDate, showError
 
 class ln3030:
     def __init__(self, **opts):
@@ -31,8 +31,7 @@
         if self.sql.error:
             return
         t = time.localtime()
-        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
+        self.curdt = ((t[0] * 10000) + (t[1] * 100) + t[2]) / 100
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
         return True
@@ -43,8 +42,8 @@
         r1s = (("Number","N"),("Name","M"))
         r2s = (("Yes","Y"),("No","N"))
         fld = (
-            (("T",0,0,0),"ID1",10,"Reporting Date","",
-                self.sysdtw,"Y",self.doDate,None,None,("efld",)),
+            (("T",0,0,0),"ID2",7,"Reporting Period","",
+                self.curdt,"Y",self.doDate,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),1,"Sort Order","",
                 "N","Y",self.doSort,None,None,None),
             (("T",0,2,0),("IRB",r2s),1,"Include Zero Balances","",
@@ -57,8 +56,9 @@
             tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
 
     def doDate(self, frt, pag, r, c, p, i, w):
-        self.date = w
-        self.curdt = w / 100
+        self.curdt = w
+        self.cdte = self.df.t_disp[pag][0][i]
+        self.date = mthendDate(w * 100)
 
     def doSort(self, frt, pag, r, c, p, i, w):
         self.sort = w
@@ -115,7 +115,8 @@
                 whr = [
                     ("lnt_cono", "=", self.opts["conum"]),
                     ("lnt_acno", "=", acc.work),
-                    ("lnt_loan", "=", lon.work)]
+                    ("lnt_loan", "=", lon.work),
+                    ("lnt_curdt", "<=", self.curdt)]
                 lbal = self.sql.getRec(tables="lontrn", cols=col, where=whr,
                     limit=1)
                 lbal = CCD(lbal[0], "SD", 13.2)
@@ -126,7 +127,7 @@
                 ltot = float(ASD(ltot) + ASD(lbal.work))
                 if self.pend == "Y":
                     LoanInterest("L", self.opts["mf"].dbm, dat, update="Y",
-                        tdate=self.date, batch="Pending", curdt=self.date / 100)
+                        tdate=self.date, batch="Pending", curdt=self.curdt)
                     nbal = self.sql.getRec(tables="lontrn", cols=col,
                         where=whr, limit=1)
                     nbal = CCD(nbal[0], "SD", 13.2)
@@ -165,11 +166,11 @@
         self.fpdf.drawText(self.head)
         self.fpdf.drawText()
         if self.pend == "Y":
-            txt = "%-29s %-10s %75s %5s" % ("Loans Balances Listing as at",
-                self.sysdtd, "Page", self.pgnum)
+            txt = "%-29s %-7s %78s %5s" % ("Loans Balances Listing as at",
+                self.cdte, "Page", self.pgnum)
         else:
-            txt = "%-29s %-10s %47s %5s" % ("Loans Balances Listing as at",
-                self.sysdtd, "Page", self.pgnum)
+            txt = "%-29s %-7s %50s %5s" % ("Loans Balances Listing as at",
+                self.cdte, "Page", self.pgnum)
         self.fpdf.drawText(txt=txt)
         self.fpdf.drawText()
         self.fpdf.drawText("%s %s  %s %s)" % \

=== modified file 'lon/ln3040.py'
--- lon/ln3040.py	2016-05-21 12:42:32 +0000
+++ lon/ln3040.py	2016-06-13 16:37:38 +0000
@@ -14,6 +14,7 @@
 """
 
 import time
+from operator import itemgetter
 from TartanClasses import ASD, CCD, DrawForm, GetCtl, LoanInterest, ProgressBar
 from TartanClasses import Sql, TartanDialog
 from tartanFunctions import copyList, doPrinter, getModName, getSingleRecords
@@ -205,10 +206,10 @@
             ("lnt_loan", "=", self.loan),
             ("lnt_curdt", "<=", self.eperw)]
         odr = "lnt_curdt, lnt_trdt, lnt_type, lnt_refno"
-        trns = self.sql.getRec(tables="lontrn", where=whr, order=odr)
-        if not trns:
-            return
         if self.itot == "Y":
+            w = whr[:]
+            w.append(("lnt_type", "<>", 4))
+            trns = self.sql.getRec(tables="lontrn", where=w, order=odr)
             if self.capb == "A":                        # Anniversary
                 fcap = [lm2[l2c.index("lm2_start")], 0]
                 if self.capf == "A":
@@ -233,39 +234,40 @@
                     fcap[1] = projectDate(fcap[1], 6, typ="months")
                 if fcap[1] <= self.date.work:
                     capdt.append(copyList(fcap))
-            dbal = 0
-            cbal = 0
-            trans = []
-            ddes = "Dr Int %s to %s"
-            cdes = "Cr Int %s to %s"
-            for trn in trns:
-                if trn[ltc.index("lnt_type")] == 4:
-                    iamt = trn[ltc.index("lnt_tramt")]
-                    if iamt < 0:
-                        cbal = float(ASD(cbal) + ASD(iamt))
+            for capd in capdt:
+                w = whr[:]
+                w.append(("lnt_type", "=", 4))
+                w.append(("lnt_trdt", "between", capd[0], capd[1]))
+                ints = self.sql.getRec(tables="lontrn", where=w, order=odr)
+                if not ints:
+                    continue
+                ddes = "Dr Int %s to %s"
+                cdes = "Cr Int %s to %s"
+                dbal = 0
+                cbal = 0
+                for trn in ints:
+                    amt = trn[ltc.index("lnt_tramt")]
+                    if amt < 0:
+                        cbal = float(ASD(cbal) + ASD(amt))
                     else:
-                        dbal = float(ASD(dbal) + ASD(iamt))
-                    for capd in capdt:
-                        if trn[ltc.index("lnt_trdt")] == capd[1]:
-                            if dbal:
-                                trn[ltc.index("lnt_tramt")] = dbal
-                                trn[ltc.index("lnt_desc")] = ddes % (
-                                    CCD(capd[0] / 100, "D2", 7).disp,
-                                    CCD(capd[1] / 100, "D2", 7).disp)
-                                trans.append(copyList(trn))
-                                dbal = 0
-                            if cbal:
-                                trn[ltc.index("lnt_tramt")] = cbal
-                                trn[ltc.index("lnt_desc")] = cdes % (
-                                    CCD(capd[0] / 100, "D2", 7).disp,
-                                    CCD(capd[1] / 100, "D2", 7).disp)
-                                trans.append(copyList(trn))
-                                cbal = 0
-                        else:
-                            continue
-                else:
-                    trans.append(trn)
-            trns = trans
+                        dbal = float(ASD(dbal) + ASD(amt))
+                if dbal:
+                    trn[ltc.index("lnt_tramt")] = dbal
+                    trn[ltc.index("lnt_desc")] = ddes % (
+                        CCD(capd[0] / 100, "D2", 7).disp,
+                        CCD(capd[1] / 100, "D2", 7).disp)
+                    trns.append(copyList(trn))
+                if cbal:
+                    trn[ltc.index("lnt_tramt")] = cbal
+                    trn[ltc.index("lnt_desc")] = cdes % (
+                        CCD(capd[0] / 100, "D2", 7).disp,
+                        CCD(capd[1] / 100, "D2", 7).disp)
+                    trns.append(copyList(trn))
+            trns = sorted(trns, key=itemgetter(5))
+        else:
+            trns = self.sql.getRec(tables="lontrn", where=whr, order=odr)
+        if not trns:
+            return
         self.bal = 0
         self.tots = 0
         if self.sperw:

=== added file 'men/bksmen.py'
--- men/bksmen.py	1970-01-01 00:00:00 +0000
+++ men/bksmen.py	2016-06-14 08:25:05 +0000
@@ -0,0 +1,53 @@
+"""
+Module Types
+------------
+F     = Function
+P123  = Program where:
+        1 = Company Number (Y/N)
+        2 = Period Selection (Y/N/L) (L = Last Period)
+        3 = Pass User Name to Module
+CY  = System Command requiring a terminal session
+CN  = System Command not requiring a terminal session
+S   = A standard callable python class
+U   = A Program without normal arguments only username.
+
+Security Levels
+---------------
+0 - Enquiries Only
+1 - + Reporting
+2 - + Data Capture
+3 - + File Maintenance
+4 - + Month and Year End Routines
+5 - + Control Routines
+6 - + Financial Year End Routine
+7 - + User and Module Pasword Maintenance
+8 - + Database tables update
+9 -   Everything
+"""
+
+# Systems
+systems = [
+    ["ms", "Control Routines"],
+    ["bs", "Book Club"],
+    ["rp", "Reporting Tools"]]
+
+# All Routines
+msmen = [
+    ["MM","mm_sy","System"],
+    ["MM","mm_bs","Book Club"],
+    ["MM","mm_uy","Utilities"]]
+msmod = [
+    ["F","mm_sy","tarUpd",8,"Update File Formats"],
+    ["F","mm_sy","tarBck",0,"Backup Database"],
+    ["F","mm_sy","tarRes",5,"Restore Database"],
+    ["F","mm_sy","tarCfg",0,"Preferences"],
+    ["F","mm_sy","sysEnd",0,"Quit"],
+    ["PNNY","mm_bs","msc110",7,"System Record"],
+    ["PNNY","mm_bs","ms1010",5,"Club Master Record"],
+    ["PYNY","mm_bs","bsc110",0,"Member Records"],
+    ["PYNY","mm_bs","bsc210",0,"Author Records"],
+    ["PYNY","mm_bs","bs1010",0,"Book Records"],
+    ["PYNY","mm_bs","bs3010",0,"Books Listing"],
+    ["PNNY","mm_uy","rp1010",2,"Report Generator"],
+    ["PYNN","mm_uy","bm1010",2,"Bulk Mail/SMS Utility"]]
+# End

=== modified file 'men/bwlmen.py'
--- men/bwlmen.py	2016-05-21 12:42:32 +0000
+++ men/bwlmen.py	2016-05-28 19:32:56 +0000
@@ -36,8 +36,6 @@
 msmen = [
     ["MM","mm_sy","System"],
     ["MM","mm_ms","Control"],
-    ["MM","mm_gl","General Ledger"],
-    ["MM","mm_ml","Member's Ledger"],
     ["MM","mm_bc","Bowling Clubs"],
     ["MM","mm_uy","Utilities"],
     ["MM","mm_hp","Help"]]

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2016-05-21 12:42:32 +0000
+++ mst/ms0000.py	2016-06-22 08:50:22 +0000
@@ -38,7 +38,7 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2]))
 else:
-    VERSION = (5, 2, 2)
+    VERSION = (5, 2, 3)
 if __name__ == "__main__":
     # Run Tartan
     try:

=== modified file 'mst/ms1010_oth.py'
--- mst/ms1010_oth.py	2016-02-27 13:18:41 +0000
+++ mst/ms1010_oth.py	2016-06-07 06:47:34 +0000
@@ -33,6 +33,8 @@
             group="ft_tabl")
         if ["bwltab"] in sys:
             self.system = "BC"
+        elif ["bksmst"] in sys:
+            self.system = "BS"
         else:
             self.system = "SC"
         self.old = self.sql.getRec(tables="ctlmst", where=[("ctm_cono", "=",

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2016-05-21 12:42:32 +0000
+++ mst/msc000.py	2016-06-20 11:06:11 +0000
@@ -326,9 +326,6 @@
         if not self.nocheck:
             # Open the database
             self.db.openDbase()
-            if not self.program or not self.program == "tarUpd":
-                # Check tartan version
-                self.doVersionCheck()
             # Check for ctlsys and ctlmst
             err = self.doCheckSys()
             # Check for ctlmst and if missing call ms1010 or scc110
@@ -348,6 +345,11 @@
             self.userReadCheck(user=self.user["name"], pwd=self.user["pwd"])
         if not self.user:
             self.doExit()
+        if not self.program or not self.program == "tarUpd":
+            # Check tartan version
+            self.db.openDbase()
+            self.doVersionCheck()
+            self.db.closeDbase()
         if self.query:
             if self.user["lvl"] == 9:
                 err = self.doSqlCmd()
@@ -528,7 +530,7 @@
                 nos = []
                 # All systems not in the company modules
                 for sss in self.sss:
-                    if sss not in ("bm", "ca", "ms", "rp", "td"):
+                    if sss not in ("bm", "bs", "ca", "ms", "rp", "td"):
                         nos.append(sss)
                 ctm = sql.getRec(tables="ctlmst", cols=["ctm_modules"])
                 for m in ctm:
@@ -1485,14 +1487,20 @@
             showError(scrn, "Version Error", """'Update File Formats'
 Not Yet Done for this Version of TARTAN.""")
         elif error == "newer":
-            ok = askQuestion(scrn, "Version Error", """Your Version of TARTAN (%s) Is Newer than the File Formats!
+            if self.lvl < 8:
+                showError(scrn, "Version Error", """Your Version of TARTAN (%s) Is Newer than the File Formats!
+
+Please ask your Administrator to Update the File Formats.""" % self.current[1])
+                self.doExit()
+            else:
+                ok = askQuestion(scrn, "Version Error", """Your Version of TARTAN (%s) Is Newer than the File Formats!
 
 Do You Want to Update Your File Formats Now?""" % self.current[1],
                 default="yes")
-            if ok == "yes":
-                self.tarUpd(True)
-            else:
-                self.doExit()
+                if ok == "yes":
+                    self.tarUpd(True)
+                else:
+                    self.doExit()
         elif error == "older":
             showError(scrn, "Version Error", """Your Version of TARTAN (%s) Is Older than the File Formats!
 

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2016-05-21 12:42:32 +0000
+++ std/TartanClasses.py	2016-06-21 12:01:48 +0000
@@ -1953,19 +1953,20 @@
                 exec "%s.configure(font=font)" % but
             self.menubar.update_idletasks()
         self.menubar.pack(anchor="nw", fill="x", expand="yes")
-        iwth = self.mf.geo[0]
-        ihgt = self.mf.bh - self.menubar.winfo_reqheight()
+        iwth = self.mf.body.winfo_reqwidth()
+        ihgt = self.mf.body.winfo_reqheight()
+        self.image = tk.Canvas(self.mf.body, width=iwth, height=ihgt)
         if self.img and os.path.isfile(self.img):
             pilimg = Image.open(self.img)
             pilimg = pilimg.resize((iwth, ihgt), 0)
             self.tkimg = ImageTk.PhotoImage(image=pilimg)
-            self.image = MyLabel(self.mf.body, color=(fg, bg))
-            self.image.config(image=self.tkimg, anchor="n")
-            self.image.pack(fill="both", expand="yes")
+            self.image = tk.Canvas(self.mf.body, width=iwth, height=ihgt)
+            self.image.create_image(0, 0, image=self.tkimg, anchor="nw")
         else:
-            self.image = MyFrame(self.mf.body, width=iwth, height=ihgt,
-                bg=self.mf.rcdic["nbg"])
-            self.image.pack(fill="both", expand="yes")
+            self.image.config(bg=self.mf.rcdic["nbg"])
+            self.image.create_text(iwth/2, (ihgt/2)-60, text="Tartan Systems",
+                font=("Helvetica", 60), fill="white")
+        self.image.pack(fill="both", expand="yes")
         self.mf.updateStatus("Select an Option from the Menu")
         if self.mf.window.state() == "withdrawn":
             self.mf.window.deiconify()
@@ -3378,8 +3379,8 @@
                 self.work = (yy * 10000) + (mm * 100) + dd
                 self.disp = "%04i-%02i-%02i" % (yy, mm, dd)
                 if len(self.disp) < self.size:
-                    self.disp = self.disp + (" " *
-                            (int(self.size/1) - len(self.disp)))
+                    self.disp = self.disp + (
+                        " " * (int(self.size/1) - len(self.disp)))
             except:
                 self.err = "Invalid Date (D1-3)"
 
@@ -7549,10 +7550,14 @@
         # reorder data
         data.sort(reverse=descending)
         for indx, item in enumerate(data):
+            if not indx:
+                start = item[1]
             self.tree.move(item[1], "", indx)
         # switch the heading so that it will sort in the opposite direction
         self.tree.heading(col,
             command=lambda col=col: self.doSort(col, not descending))
+        self.tree.selection_set(start)
+        self.tree.focus(start)
 
     def doFilter(self, event=None):
         for b in self.buttons:
@@ -7764,7 +7769,6 @@
         elif self.typ == "F" and not text:
             text = "Updating Files ... Please Wait"
         else:
-            text = self.typ
             self.typ = "P"
         self.quit = False
         if self.inn:
@@ -9404,23 +9408,21 @@
         fld = [
             (("T",0,0,0),"INa",7,"Batch Number","",
                 "","N",self.doBatNum,btm,None,("notblank",)),
-            (("T",0,1,0),"ID1",10,"Capture Date (CCYYMMDD)","",
-                self.sysdt,"N",self.doCapdt,None,None,("efld",)),
-            (("T",0,2,0),"ID2",7,"Current Period (CCYYMM)","",
+            (("T",0,1,0),"ID2",7,"Current Period (CCYYMM)","",
                 self.curdt,"N",self.doCurdt,None,None,("efld",)),
-            (("T",0,3,0),"ISI",6,"Number of Entries","",
+            (("T",0,2,0),"ISI",6,"Number of Entries","",
                 "","N",self.doQty,None,None,("efld",)),
-            (("T",0,4,0),"ISD",13.2,"Value of Entries","",
+            (("T",0,3,0),"ISD",13.2,"Value of Entries","",
                 "","N",self.doVal,None,None,("efld",)),
-            (("T",0,5,0),"INA",5,"Batched By","",
+            (("T",0,4,0),"INA",5,"Batched By","",
                 "","N",None,None,None,None),
-            (("T",0,6,0),"INA",5,"Captured By","",
+            (("T",0,5,0),"INA",5,"Captured By","",
                 "","N",self.doCapBy,None,None,None),
-            (("T",0,7,0),("IRB",r1s),0,"Multiple Date Allocations","",
+            (("T",0,6,0),("IRB",r1s),0,"Multiple Date Allocations","",
                 "N","N",self.doMulti,None,None,None)]
         if self.bankctl:
             fld.append(
-                (("T",0,8,0),"INA",10,"Bank Control","Bank Control Record",
+                (("T",0,7,0),"INA",10,"Bank Control","Bank Control Record",
                     "","N",self.doCtl,ctl,None,("efld",)))
         tnd = ((self.doHeadEnd, "y"), )
         txt = (self.doHeadExit, )
@@ -9453,17 +9455,14 @@
             end = self.sql.ctlbat_col.index("btm_ctl")
             if self.bankctl:
                 end += 1
-            for n, d in enumerate(self.bat[4:end]):
+            for n, d in enumerate(self.bat[5:end]):
                 self.b1.loadEntry(frt, pag, p+n+1, data=d)
             self.ckCtl(self.bat[self.sql.ctlbat_col.index("btm_ctl")])
-            return "sk2"
-
-    def doCapdt(self, frt, pag, r, c, p, i, w):
-        pass
+            return "sk1"
 
     def doCurdt(self, frt, pag, r, c, p, i, w):
         if w < self.s_per or w > self.e_per:
-            return "Invalid Period"
+            return "Invalid, Not In Financial Period"
         if self.rtn == 7:
             self.b1.loadEntry(frt, pag, p+1, data=0)
             self.b1.loadEntry(frt, pag, p+2, data=0)
@@ -9543,17 +9542,16 @@
                 self.acc = ctlctl[self.ctl]
 
     def doHeadEnd(self):
-        self.capdt = self.b1.t_work[0][0][1]
-        self.curdt = self.b1.t_work[0][0][2]
-        self.trno = self.b1.t_work[0][0][3]
-        self.trval = self.b1.t_work[0][0][4]
-        self.batby = self.b1.t_work[0][0][5]
-        self.indby = self.b1.t_work[0][0][6]
-        self.multi = self.b1.t_work[0][0][7]
+        self.curdt = self.b1.t_work[0][0][1]
+        self.trno = self.b1.t_work[0][0][2]
+        self.trval = self.b1.t_work[0][0][3]
+        self.batby = self.b1.t_work[0][0][4]
+        self.indby = self.b1.t_work[0][0][5]
+        self.multi = self.b1.t_work[0][0][6]
         self.getTotals()
         if self.new:
             self.sql.insRec("ctlbat", data=[self.conum, self.sys, self.rtn,
-                self.batno, self.capdt, self.curdt, self.trno, self.trval,
+                self.batno, self.sysdt, self.curdt, self.trno, self.trval,
                 self.batby, self.indby, self.multi, self.ctl, "N"])
         else:
             self.sql.updRec("ctlbat", cols=["btm_trno", "btm_trval"],
@@ -14488,6 +14486,7 @@
             [5, "= 4 plus Control Routines"],
             [6, "= 5 plus Financial Year End Routine"],
             [7, "= 6 plus User and Module Password Maintenance"],
+            [8, "= 7 plus Update File Formats"],
             [9, "= Supervisor level, Everything"]]
         slvl = {
             "stype": "C",
@@ -16242,6 +16241,7 @@
                     Text - Heading or
                     Integer - Number of characters or
                     List / Tuple - (Heading, ("Family", "Style", Size))
+    auto        - Automatic page breaks
     foot        - Turn footer on or off
     """
     def __init__(self, orientation="P", unit="mm", fmat="A4", font="courier", name="", head="", auto=False, foot=False):
@@ -16314,7 +16314,7 @@
                     sys.exit()
 
     def drawText(self, txt="", x=0, y=0, w=0, h=0, font=[], border=0, ln=1, align="", fill=0, ctyp="S"):
-        if not type(txt) == str:
+        if not type(txt) in (str, unicode):
             txt = str(txt)
         if x and y:
             self.set_xy(x, y)

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2016-05-21 12:42:32 +0000
+++ std/tartanFunctions.py	2016-05-31 07:40:22 +0000
@@ -714,14 +714,14 @@
 
     host, port, secu, auth, unam, upwd = server
     try:
-        if secu == 2:
+        if secu and int(secu) == 2:
             smtp = smtplib.SMTP_SSL(host, port, timeout=timeout)
         else:
             smtp = smtplib.SMTP(host, port, timeout=timeout)
         if check:
             smtp.quit()
             return True
-        if secu == 1:
+        if secu and int(secu) == 1:
             smtp.ehlo()
             smtp.starttls()
         if auth:

=== modified file 'uty/bm1010.py'
--- uty/bm1010.py	2016-05-21 12:42:32 +0000
+++ uty/bm1010.py	2016-06-20 20:25:54 +0000
@@ -42,6 +42,8 @@
         if self.setVariables():
             self.mainProcess()
             self.opts["mf"].startLoop()
+        else:
+            print "ERR"
 
     def setVariables(self):
         gc = GetCtl(self.opts["mf"])
@@ -80,6 +82,8 @@
             self.nstart = bwlctl["ctb_nstart"]
         if mod.count("BK"):
             tab.append("bkmcon")
+        if mod.count("BS"):
+            tab.append("bksown")
         if mod.count("CR"):
             tab.append("crsmst")
         if mod.count("DR"):
@@ -102,6 +106,11 @@
                 where=[("bkc_cono", "=", self.opts["conum"])], limit=1)
         else:
             self.bkm = [0]
+        if mod.count("BS"):
+            self.bks = self.sql.getRec(tables="bksown", cols=["count(*)"],
+                limit=1)
+        else:
+            self.bks = [0]
         if mod.count("CR"):
             self.crs = self.sql.getRec(tables="crsmst", cols=["count(*)"],
                 where=[("crm_cono", "=", self.opts["conum"])], limit=1)
@@ -153,6 +162,8 @@
         self.r2s = []
         if self.bkm[0]:
             self.r2s.append(("Bookings", "K"))
+        if self.bks[0]:
+            self.r2s.append(("Books", "S"))
         if self.tab[0] or self.scp[0]:
             self.r2s.append(("Bowls", "B"))
         if self.crs[0]:
@@ -214,10 +225,12 @@
             # Set default list
             if self.bkm[0]:
                 self.df.topf[0][1][5] = "K"
+            elif self.bks[0]:
+                self.df.topf[0][1][5] = "S"
+            elif self.mem[0]:
+                self.df.topf[0][1][5] = "M"
             elif self.tab[0]:
                 self.df.topf[0][1][5] = "B"
-            elif self.mem[0]:
-                self.df.topf[0][1][5] = "M"
             elif self.tel[0]:
                 self.df.topf[0][1][5] = "T"
             else:
@@ -291,8 +304,8 @@
                 idx = 1
             fld.append((("T",0,idx,0),("IRB",r2s),0,"Individuals","",
                 "Y","Y",self.doFltInd,None,None,None))
-        elif self.ulist == "K":
-            # Bookings
+        elif self.ulist in ("K", "S"):
+            # Bookings and Book Clubs
             r1s = (("Yes", "Y"),("No","N"))
             fld = (
                 (("T",0,0,0),("IRB",r1s),0,"Individuals","",
@@ -790,6 +803,16 @@
             accs = []
             for rec in recs:
                 accs.append((rec[3], "%s %s" % (rec[2].split()[0], rec[1])))
+        elif self.ulist == "S":
+            tab = ["bksown"]
+            col = ["bof_snam", "bof_fnam", "bof_cell"]
+            whr = [("bof_cell", "<>", "")]
+            odr = "bof_snam, bof_fnam"
+            sel = "bof_snam"
+            recs = self.doGetRecs(tab, col, whr, odr, sel)
+            accs = []
+            for rec in recs:
+                accs.append((rec[2], "%s %s" % (rec[1].split()[0], rec[0])))
         elif self.ulist == "T":
             tab = ["telmst"]
             col = ["tdm_name", "tdm_mobile", "tdm_group"]
@@ -990,6 +1013,23 @@
                     accs.append((rec[3], "%s %s %s" % (tit, nam, sur)))
                 else:
                     accs.append((rec[3], ""))
+        elif self.ulist == "S":
+            tab = ["bksown"]
+            col = ["bof_snam", "bof_fnam", "bof_mail"]
+            whr = [("bof_mail", "<>", "")]
+            odr = "bof_snam, bof_fnam"
+            sel = "bof_snam"
+            recs = self.doGetRecs(tab, col, whr, odr, sel)
+            accs = []
+            for rec in recs:
+                if self.personal == "Y":
+                    sur = rec[0]
+                    nam = rec[1].split()[0].title()
+                    if self.namdet == "I":
+                        nam = nam[0].upper()
+                    accs.append((rec[2], "%s %s" % (nam, sur)))
+                else:
+                    accs.append((rec[2], ""))
         elif self.ulist == "T":
             tab = ["telmst"]
             col = ["tdm_name", "tdm_email", "tdm_group"]
@@ -1040,7 +1080,7 @@
             while not ok:
                 sp = SplashScreen(self.opts["mf"].body, "E-Mailing the "\
                     "Message to %s\n\nPlease Wait........ (%s of %s)" %
-                    (mail[0], num+1, len(accs)))
+                    (mail[0], num + 1, len(accs)))
                 ok = sendMail(self.smtp, self.fadd, mail, self.subj,
                     mess=(mess, html), attach=self.attach, embed=self.embed)
                 sp.closeSplash()
@@ -1145,6 +1185,15 @@
                         dat[col.index("mlm_title")],
                         dat[col.index("mlm_surname")],
                         dat[col.index("mlm_names")], add])
+            elif self.ulist == "S":
+                for dat in data:
+                    snm = dat[col.index("bof_snam")]
+                    nms = dat[col.index("bof_fnam")]
+                    if self.dtyp == "S":
+                        con = dat[col.index("bof_cell")]
+                    else:
+                        con = dat[col.index("bof_mail")]
+                    nrec.append([snm, nms, con])
             elif self.ulist == "T":
                 for dat in data:
                     nam = dat[col.index("tdm_name")]

=== modified file 'uty/pkgprg.py'
--- uty/pkgprg.py	2016-05-21 12:42:32 +0000
+++ uty/pkgprg.py	2016-06-22 08:46:46 +0000
@@ -16,22 +16,20 @@
 
 print("Packaging...")
 bd = "/home/paul"
-if not os.path.exists(bd):
-    print "Invalid Base Directory (%s)" % bd
-    sys.exit()
 newver = None
+revision = None
 system = "t"
 verinc = False
 windows = False
 publish = False
 email = False
 py3 = False
-opts, args = getopt.getopt(sys.argv[1:], "b:eis:v:hwp3")
+opts, args = getopt.getopt(sys.argv[1:], "b:eir:s:v:hwp3")
 for o, v in opts:
     if o == "-h":
-        print "Usage: pkgprg [-h help] -[b base directory] [-i increment] "\
+        print "Usage: pkgprg [-h help] [-b base directory] [-i increment] "\
             "[-s system] [-v new version] [-w windows] [-p publish] "\
-            "[-e email] [-3 python3]"
+            "[-e email] [-3 python3] [-r last revision]"
         sys.exit()
     elif o == "-3":
         py3 = True
@@ -44,6 +42,8 @@
         system = "t"
     elif o == "-p":
         publish = True
+    elif o == "-r":
+        revision = v.lower()
     elif o == "-s":
         system = v.lower()
     elif o == "-v":
@@ -51,18 +51,23 @@
     elif o == "-w":
         windows = True
 
+if not os.path.exists(bd):
+    print "Invalid Base Directory (%s)" % bd
+    sys.exit()
+
 if verinc and not system == "t":
     print "Cannot Increment %s" % system
     sys.exit()
-if publish and system == "r":
-    print "Cannot Publish %s" % system
-    sys.exit()
 
 pypath = findFile(start=[bd], name="Tartan-5", ftyp="d")
 if not pypath:
     print "%s/Tartan-5 directory not found" % bd
     sys.exit()
 
+for d in ("TartanExe", "TartanOld", "TartanSve"):
+    if not os.path.exists(os.path.join(bd, d)):
+        os.makedirs(os.path.join(bd, d))
+
 exeCmd("rm -f `find %s -name '*.pyc'`" % pypath)
 exeCmd("rm -f `find %s -name '*.pyo'`" % pypath)
 exeCmd("rm -f `find %s -name '*.bak'`" % pypath)
@@ -70,8 +75,8 @@
 exeCmd("rm -f `find %s -name '[abcdefgh].py'`" % pypath)
 os.chdir(pypath)
 
-while system not in ("b", "c", "r", "s", "t"):
-    system = raw_input("System, (T)artan, (R)NE, (S)ections, (B)owls, (C)ash: ").lower()
+while system not in ("b", "c", "r", "s", "t", "k"):
+    system = raw_input("System, (T)artan, (R)NE, (S)ections, Boo(k)s, (B)owls, (C)ash: ").lower()
 
 dirs = ["tab", "mst"]
 if system == "t":
@@ -102,6 +107,19 @@
                "tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
                "ms3010", "ms3020", "msy010", "msy020", "msy030", "pm1010",
                "pw1010"]
+elif system == "k":
+    if publish or verinc:
+        exeCmd("mv %s/TartanExe/Bksclb_5.* %s/TartanOld/" % (bd, bd))
+    system = "bksclb"
+    sysmod = "bkssys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["bks", "uty"])
+    custom = ["oth", ["ms1010"]]
+    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
+               "ms3010", "ms3020", "msy010", "msy020", "msy030", "fc1010",
+               "pm1010", "pw1010", "tp1010"]
 elif system == "s":
     if publish or verinc:
         exeCmd("mv %s/TartanExe/Seccmp_5.* %s/TartanOld/" % (bd, bd))
@@ -226,8 +244,16 @@
             new.close()
             os.chmod("%s/mst/ms0000.py" % pypath, 0755)
             # Update Bazaar version control
-            exeCmd("/usr/bin/bzr status > ver/ver_%s.%s.%s.status" % tuple(ver))
-            exeCmd("/usr/bin/bzr diff > ver/ver_%s.%s.%s.diff" % tuple(ver))
+            if revision:
+                sta = "/usr/bin/bzr status -r %s" % revision
+                dif = "/usr/bin/bzr diff -r %s" % revision
+            else:
+                sta = "/usr/bin/bzr status"
+                dif = "/usr/bin/bzr diff"
+            sta += " > ver/ver_%s.%s.%s.status" % tuple(ver)
+            exeCmd(sta)
+            dif += " > ver/ver_%s.%s.%s.diff" % tuple(ver)
+            exeCmd(dif)
             if os.path.isfile("%s/changes.txt" % pypath):
                 exeCmd("mv %s/changes.txt ver/ver_%s.%s.%s.changes" %
                     (pypath, ver[0], ver[1], ver[2]))
@@ -370,18 +396,21 @@
 if system == "tartan":
     shutil.copy("%s/men/stdmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
     shutil.copy("%s/csv/stdsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
-elif system == "seccmp":
-    shutil.copy("%s/men/scpmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
-    shutil.copy("%s/csv/scpsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "bksclb":
+    shutil.copy("%s/men/bksmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/bkssys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
 elif system == "bwlclb":
     shutil.copy("%s/men/bwlmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
     shutil.copy("%s/csv/bwlsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "cshana":
+    shutil.copy("%s/men/cshmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/cshsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
 elif system == "rnehol":
     shutil.copy("%s/men/rnemen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
     shutil.copy("%s/csv/rnesys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
-elif system == "cshana":
-    shutil.copy("%s/men/cshmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
-    shutil.copy("%s/csv/cshsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "seccmp":
+    shutil.copy("%s/men/scpmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/scpsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
 os.chdir("%s/tmp" % pypath)
 # Generate zip file
 exeCmd("zip -rqm %s/TartanSve/%s *" % (bd, zipfle))
@@ -441,6 +470,8 @@
 man = system.capitalize()
 if system == "seccmp":
     fles = ["doc/SC.rst"]
+elif system == "bksclb":
+    fles = ["doc/MB.rst"]
 else:
     if system == "bwlclb":
         fles = ["doc/MB.rst", "doc/BC.rst", "doc/UB.rst"]
@@ -455,32 +486,32 @@
                 "doc/IB.rst",
                 "doc/LN.rst",
                 "doc/RT.rst",
-                "doc/SI.rst",
-                "doc/ST.rst"])
+                "doc/ST.rst",
+                "doc/SI.rst"])
         else:
             fles.extend([
                 "doc/GL.rst",
                 "doc/AR.rst",
+                "doc/BK.rst",
                 "doc/BC.rst",
-                "doc/BK.rst",
                 "doc/CR.rst",
                 "doc/DR.rst",
                 "doc/LN.rst",
                 "doc/ML.rst",
+                "doc/RT.rst",
                 "doc/RC.rst",
-                "doc/RT.rst",
+                "doc/ST.rst",
                 "doc/SI.rst",
-                "doc/ST.rst",
                 "doc/WG.rst",
                 "doc/SL.rst"])
         fles.extend(["doc/UD.rst", "doc/HD.rst"])
-    doc = open("doc/%s.rst" % man, "w")
-    for fle in fles:
-        if fle == fles[-1]:
-            addpage(doc, fle, True)
-        else:
-            addpage(doc, fle)
-    doc.close()
+doc = open("doc/%s.rst" % man, "w")
+for fle in fles:
+    if fle == fles[-1]:
+        addpage(doc, fle, True)
+    else:
+        addpage(doc, fle)
+doc.close()
 exeCmd("zip -qr %s/TartanSve/%s doc/tarlic.rst" % (bd, zipfle))
 exeCmd("rst2pdf doc/%s.rst -o doc/Manual.pdf -s doc/mystylesheet" % man)
 exeCmd("zip -qr %s/TartanSve/%s doc/Manual.pdf" % (bd, zipfle))
@@ -554,7 +585,7 @@
         # Python 3 windows executable
         exeCmd("wine3 wineconsole c:/PyInstall/maker.bat %s" % system)
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/%s-5.exe %s/TartanExe/%s_%s.%s.%s.exe" %
+        exeCmd("cp %s/TartanExe/%s-5.exe %s/TartanExe/%s_%s.%s.%s.exe" %
             (bd, system, bd, system.capitalize(), ver[0], ver[1], ver[2]))
         if system == "tartan":
             # Create CD
@@ -587,25 +618,28 @@
         print "Version Number is %s.%s.%s" % tuple(ver)
         print
         # FTP Server
-        exeCmd("ssh root@mailserver rm /srv/ftp/%s*" % system.capitalize())
-        exeCmd("rsync -artz %s/TartanExe/%s* root@mailserver:/srv/ftp/ --progress" % (bd, system.capitalize()))
-        exeCmd("ssh root@mailserver chmod a+rwx /srv/ftp/*")
-        exeCmd("ssh root@mailserver chown paul:users /srv/ftp/*")
-        exeCmd("ssh root@mailserver chmod a-w /srv/ftp")
+        exeCmd("ssh root@server rm /srv/ftp/%s*" % system.capitalize())
+        exeCmd("rsync -artz %s/TartanExe/%s* root@server:/srv/ftp/ --progress" % (bd, system.capitalize()))
+        exeCmd("ssh root@server chmod a+rwx /srv/ftp/*")
+        exeCmd("ssh root@server chown paul:users /srv/ftp/*")
+        exeCmd("ssh root@server chmod a-w /srv/ftp")
         # WWW Server
         if system == "tartan":
-            exeCmd("rsync -artz %s/Tartan-5/doc/Tartan.rst root@mailserver:/var/www/tartan.co.za/htdocs/Manual/Manual.rst --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/QS.rst root@mailserver:/var/www/tartan.co.za/htdocs/QuickStart/QuickStart.rst --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/Downloads.rst root@mailserver:/var/www/tartan.co.za/htdocs/Downloads/ --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/Changes.rst root@mailserver:/var/www/tartan.co.za/htdocs/Changes/ --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/Tartan.rst root@server:/var/www/tartan.co.za/htdocs/Manual/Manual.rst --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/QS.rst root@server:/var/www/tartan.co.za/htdocs/QuickStart/QuickStart.rst --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/Downloads.rst root@server:/var/www/tartan.co.za/htdocs/Downloads/ --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/Changes.rst root@server:/var/www/tartan.co.za/htdocs/Changes/ --progress" % bd)
+os.remove("%s/Tartan-5/doc/Manual.pdf" % bd)
 os.remove("%s/Tartan-5/doc/%s.rst" % (bd, man))
+if system == "tartan":
+    os.remove("%s/Tartan-5/doc/QuickStart.pdf" % bd)
 # Remove Duplicate File
 # os.remove("%s/TartanSve/%s-5.zip" % (bd, system))
 # Email Users
 if email:
     chgfle = "%s/ver/ver_%s.%s.%s.changes" % (pypath, ver[0], ver[1], ver[2])
     if os.path.isfile(chgfle):
-        serv = ["mailserver", 25, 0, 0, "", ""]
+        serv = ["server", 25, 0, 0, "", ""]
         mfrm = "paul@tartan.co.za"
         subj = "Tartan Update %s.%s.%s is Available" % tuple(ver)
         info = open(chgfle, "rb")
@@ -623,8 +657,8 @@
         self.addrs = [
             "admin@amadlelo.co.za",
             "admin@blueberry.co.za",
-            "brt@volmoed.co.za",
             "chris@resinsolutions.co.za",
+            "frikkie@lando.co.za",
             "galloway@awe.co.za",
             "johnv@wpcc.co.za",
             "keith@barrowdale.co.za",
@@ -639,12 +673,12 @@
             "no2pigstash@hotmail.com",
             "paul@tartan.co.za",
             "rob@itennis.co.za",
-            "rene@hazeldean.co.za",
             "rene@agfin.co.za",
             "ruthmiles52@gmail.com",
             "tyron@i-volt.net",
             "yolande@acsaccounting.co.za"]
             #"avanhasselt@jadeworld.com"
+            #"brt@volmoed.co.za",
             #"deonk@spargs.co.za",
             #"knorton@xsinet.co.za"
             #"mjredman@bigpond.net.au"

=== modified file 'uty/rp1010.py'
--- uty/rp1010.py	2016-05-21 12:42:32 +0000
+++ uty/rp1010.py	2016-05-28 19:25:16 +0000
@@ -46,9 +46,20 @@
                     "ftable", "verupd")))
                 whr.append(("ft_tabl", "not", "like", "ctl%s"))
                 whr.append(("ft_tabl", "not", "like", "%sctl"))
-                recs = {"ar": "ass", "ms": "ctl", "cr": "crs", "dr": "drs",
-                    "gl": "gen", "rt": "rtl", "si": "sls", "sl": "wag",
-                    "st": "str", "wg": "wag"}
+                recs = {
+                    "ar": "ass",
+                    "bk": "bkm",
+                    "cr": "crs",
+                    "dr": "drs",
+                    "gl": "gen",
+                    "ln": "lon",
+                    "ms": "ctl",
+                    "rc": "rca",
+                    "rt": "rtl",
+                    "si": "sls",
+                    "sl": "wag",
+                    "st": "str",
+                    "wg": "wag"}
                 for sys in syss:
                     whr.append(("ft_tabl", "not", "like", recs[sys[0]] + "%"))
         self.tables = self.sql.getRec(tables="ftable", cols=["ft_tabl",

