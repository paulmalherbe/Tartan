=== modified file '.bzrignore'
--- .bzrignore	2017-02-25 14:03:05 +0000
+++ .bzrignore	2017-06-23 08:47:08 +0000
@@ -18,6 +18,7 @@
 doc/bankserv.txt
 doc/bkmdoc.py
 doc/dkimspf.rst
+doc/lvm.txt
 doc/mynut.txt
 doc/nfs_setup.rst
 doc/nut_ups.odt
@@ -71,3 +72,7 @@
 doc/gnugpl.txt
 men/posmen.py
 img/ptrust.jpg
+bup
+fle
+tmp
+upg

=== modified file 'ass/ar1010.py'
--- ass/ar1010.py	2017-02-25 14:03:05 +0000
+++ ass/ar1010.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Masterfile Maintenance.

=== modified file 'ass/ar2010.py'
--- ass/ar2010.py	2017-02-25 14:03:05 +0000
+++ ass/ar2010.py	2017-06-28 12:23:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset Register Take on.
@@ -219,14 +217,14 @@
         self.sql.insRec("assmst", data=data)
         data = [self.opts["conum"], self.group, self.code, 3, "Take-On",
             "Take-On", self.purdat, 1, self.ccst, self.rcst, 0,
-            self.purdat / 100, "Original Cost", "", "", self.opts["capnm"],
-            self.sysdtw, 0]
+            int(self.purdat / 100), "Original Cost", "", "",
+            self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("asstrn", data=data)
         if self.cdep or self.rdep:
             data = [self.opts["conum"], self.group, self.code, 3, "Take-On",
                 "Take-On", self.todat, 4, self.cdep, self.rdep, 0,
-                self.todat / 100, "Accumulated Depreciation", "", "",
-                self.opts["capnm"], self.sysdtw, 0]
+                int(self.todat / 100), "Accumulated Depreciation",
+                "", "", self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("asstrn", data=data)
         if not self.imports:
             self.df.advanceLine(0)

=== modified file 'ass/ar2020.py'
--- ass/ar2020.py	2017-02-25 14:03:05 +0000
+++ ass/ar2020.py	2017-06-28 12:24:57 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset Register Data Capture Screen and Execution.
@@ -245,7 +243,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
         if self.new == "y":
@@ -362,7 +360,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         self.amt = self.coyamt
@@ -489,7 +487,7 @@
                 self.updateBatch(rev=True)
             self.df.clearFrame("C", 2)
             self.df.selPage("Transaction")
-            row = int((self.df.last[1][1] - 1) / self.df.colq[1])
+            row = int(int((self.df.last[1][1] - 1) / self.df.colq[1]))
             col = (row * self.df.colq[1]) + 1
             self.df.focusField("C", 1, col)
 
@@ -508,7 +506,7 @@
 
     def updateTables2(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         # General Ledger Transaction (Allocation)

=== modified file 'ass/ar2030.py'
--- ass/ar2030.py	2017-02-25 14:03:05 +0000
+++ ass/ar2030.py	2017-06-28 12:26:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset Register Raise Depreciation.
@@ -42,9 +40,9 @@
         self.rordp = assctl["cta_rordp"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.sysdtw / 100
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.curdt = int(self.sysdtw / 100)
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         tabs = ["assctl", "assgrp", "assmst", "assdep", "asstrn", "gentrn"]
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
@@ -148,7 +146,7 @@
             self.opts["mf"].closeLoop()
 
     def doIncrCurdt(self):
-        yr = self.lurdt / 100
+        yr = int(self.lurdt / 100)
         mt = self.lurdt % 100
         if mt == 12:
             yr += 1

=== modified file 'ass/ar3010.py'
--- ass/ar3010.py	2017-02-25 14:03:05 +0000
+++ ass/ar3010.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Batch Error Listing.
@@ -155,8 +153,7 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3020.py'
--- ass/ar3020.py	2017-02-25 14:03:05 +0000
+++ ass/ar3020.py	2017-06-28 12:26:50 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Transaction Audit Trail.
@@ -34,12 +32,13 @@
         assctl = gc.getCtl("assctl", self.opts["conum"])
         if not assctl:
             return
+        self.fromad = assctl["cta_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.totind = "N"
         return True
 
@@ -216,8 +215,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml, fromad=self.fromad)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3030.py'
--- ass/ar3030.py	2017-02-25 14:03:05 +0000
+++ ass/ar3030.py	2017-06-28 15:53:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Account Statements.
@@ -27,29 +25,29 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        # Check for Control record
+        self.sql = Sql(self.opts["mf"].dbm, ["assgrp", "assmst"],
+            prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         assctl = gc.getCtl("assctl", self.opts["conum"])
         if not assctl:
             return
         self.rordp = assctl["cta_rordp"]
-        self.sql = Sql(self.opts["mf"].dbm, ["assgrp", "assmst"],
-            prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = assctl["cta_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         return True
 
     def mainProcess(self):
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Asset Account Statements (%s)" % __name__)
-        eper = self.sysdtw / 100
+        eper = int(self.sysdtw / 100)
         if eper > self.eper:
             eper = self.eper
         asg = {
@@ -183,8 +181,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml, fromad=self.fromad)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3040.py'
--- ass/ar3040.py	2017-02-25 14:03:05 +0000
+++ ass/ar3040.py	2017-06-28 12:27:56 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Register.
@@ -26,22 +24,23 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["assgrp", "assmst", "asstrn"],
+            prog=__name__)
+        if self.sql.error:
+            return
         self.gc = GetCtl(self.opts["mf"])
         assctl = self.gc.getCtl("assctl", self.opts["conum"])
         if not assctl:
             return
         self.rordp = assctl["cta_rordp"]
+        self.fromad = assctl["cta_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
             t[1], t[2], t[3], t[4], __name__)
-        self.sql = Sql(self.opts["mf"].dbm, ["assgrp", "assmst", "asstrn"],
-            prog=__name__)
-        if self.sql.error:
-            return
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         self.head = ("%03u %-30s %s" % (self.opts["conum"],
             self.opts["conam"], "%s"))
         self.colsh = ["Code", "Description", "Purch-Date", "Cost-Price",
@@ -57,7 +56,7 @@
     def mainProcess(self):
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Asset Register Report (%s)" % __name__)
-        eper = self.sysdtw / 100
+        eper = int(self.sysdtw / 100)
         if eper > self.eper:
             eper = self.eper
         grp = {
@@ -243,8 +242,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml, fromad=self.fromad)
 
     def getValues(self, data):
         bals = Balances(self.opts["mf"], "ASS", self.opts["conum"], self.sper,

=== modified file 'ass/ar3050.py'
--- ass/ar3050.py	2017-02-25 14:03:05 +0000
+++ ass/ar3050.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Assets Register Notes Listing.
@@ -30,6 +28,7 @@
         assctl = gc.getCtl("assctl", self.opts["conum"])
         if not assctl:
             return
+        self.fromad = assctl["cta_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "ASS")
         if not self.notes.data:
@@ -74,6 +73,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'ass/ar4010.py'
--- ass/ar4010.py	2017-02-25 14:03:05 +0000
+++ ass/ar4010.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Register Interrogation.
@@ -42,8 +40,8 @@
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         return True
 
     def mainProcess(self):
@@ -151,7 +149,7 @@
                 self.df.loadEntry("C", 1, y, data=dep[x+y+2])
         else:
             p = 5
-            for y in range(7):
+            for y in xrange(7):
                 self.df.loadEntry("C", 1, y, data=dep[p])
                 p += 2
         self.loadBalances()
@@ -299,19 +297,19 @@
         if self.pr_opts == "B":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn[0]:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn[0]:
                 self.pageHeading()
@@ -319,7 +317,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'ass/ar6010.py'
--- ass/ar6010.py	2017-02-25 14:03:05 +0000
+++ ass/ar6010.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset's Register Key Change.
@@ -34,7 +32,7 @@
             ("asstrn", "ast_cono", "ast_group", "ast_code"))
         tabs = ["assgrp"]
         for tab in self.tables:
-            if not tabs.count(tab[0]):
+            if tab[0] not in tabs:
                 tabs.append(tab[0])
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:

=== modified file 'ass/ar6020_rne.py'
--- ass/ar6020_rne.py	2017-02-25 14:03:05 +0000
+++ ass/ar6020_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset Register Batch Deletion Utility.

=== modified file 'ass/ar6030_rne.py'
--- ass/ar6030_rne.py	2017-02-25 14:03:05 +0000
+++ ass/ar6030_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Asset Register Reinstate Sold Asset.

=== modified file 'ass/arc110.py'
--- ass/arc110.py	2017-02-25 14:03:05 +0000
+++ ass/arc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -42,7 +40,7 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "N", "N", 0]
+            self.acc = [self.opts["conum"], "N", "N", 0, ""]
         else:
             self.new = False
         if self.genleg:
@@ -79,7 +77,9 @@
             (("T",0,seq,0),("IRB",r1s),0,"Receiver Dep","",
                 self.acc[2],"N",None,None,None,None),
             (("T",0,seq + 1,0),"Id2",7,"Last Dep Period","",
-                self.acc[3],"N",None,None,None,None)])
+                self.acc[3],"N",None,None,None,None),
+            (("T",0,seq + 2,0),"ITX",50,"Email Address","",
+                self.acc[4],"N",None,None,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
@@ -130,7 +130,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 3:
                 if x in (1,):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)
@@ -149,12 +149,12 @@
                 data.append(d)
         if self.new:
             self.sql.insRec("assctl", data=data)
-        elif not data == self.acc:
+        elif data != self.acc:
             self.sql.updRec("assctl", data=data,
                 where=[("cta_cono", "=", self.opts["conum"])])
             dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
             for num, dat in enumerate(self.acc):
-                if not dat == data[num]:
+                if dat != data[num]:
                     self.sql.insRec("chglog", data=["assctl", "U",
                         "%03i" % self.opts["conum"], self.sql.assctl_col[num],
                         dte, self.opts["capnm"], str(dat), str(data[num]), 0])

=== modified file 'ass/arc210.py'
--- ass/arc210.py	2017-02-25 14:03:05 +0000
+++ ass/arc210.py	2017-06-28 12:32:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Depreciation Methods Maintenance.
@@ -93,7 +91,7 @@
                 x += 1
                 inc = 2
             for y in xrange(0, 14, inc):
-                self.df.loadEntry("C", 0, y/inc, data=acc[x+y+2])
+                self.df.loadEntry("C", 0, int(y / inc), data=acc[x+y+2])
 
     def doDepTyp(self, frt, pag, r, c, p, i, w):
         self.ctyp = w

=== modified file 'ass/arc310.py'
--- ass/arc310.py	2017-02-25 14:03:05 +0000
+++ ass/arc310.py	2017-06-28 12:32:23 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Groups File Maintenance.

=== modified file 'ass/arc320.py'
--- ass/arc320.py	2017-02-25 14:03:05 +0000
+++ ass/arc320.py	2017-06-28 12:32:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Asset Groups Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import RepPrt, TartanDialog
+from TartanClasses import GetCtl, RepPrt, TartanDialog
 
 class arc320:
     def __init__(self, **opts):
@@ -24,6 +22,11 @@
         self.opts["mf"].startLoop()
 
     def setVariables(self):
+        gc = GetCtl(self.opts["mf"])
+        assctl = gc.getCtl("assctl", self.opts["conum"])
+        if not assctl:
+            return
+        self.fromad = assctl["cta_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -51,7 +54,7 @@
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=col, order=odr, where=whr, conum=self.opts["conum"],
             conam=self.opts["conam"], repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            repeml=self.df.repeml, fromad=self.fromad)
         self.df.enableButtonsTags(state=state)
         self.closeProcess()
 

=== modified file 'bkm/bk1010.py'
--- bkm/bk1010.py	2017-02-25 14:03:05 +0000
+++ bkm/bk1010.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Accommodation Bookings Calendar.
@@ -48,6 +46,7 @@
         self.newb = False
         udics = {}
         self.start = projectDate(self.sysdtw, -7)
+        self.start = 20160101
         bkm = self.sql.getRec(tables="bkmmst", cols=["max(bkm_depart)"],
             where=[("bkm_cono", "=", self.opts["conum"]), ("bkm_state",
             "<>", "X")], limit=1)
@@ -104,7 +103,7 @@
                     if unit[0] == "A":
                         units.append(unit)
             for unit in units:
-                if not unit in udics:
+                if unit not in udics:
                     continue
                 for d in xrange(sday, eday):
                     if book[4] == "Q":
@@ -135,7 +134,7 @@
             d2 = time.strftime("%A", time.strptime(str(d1.work), "%Y%m%d"))
             txt = "%s\n%s" % ("{:^10}".format(d2), d1.disp)
             cols[0].append((txt, 10))
-        keys = udics.keys()
+        keys = list(udics.keys())
         keys.sort()
         data = []
         for row, key in enumerate(keys):
@@ -151,7 +150,7 @@
                 if d == lst:
                     spn += 1
                     continue
-                if not lst is None:
+                if lst is not None:
                     col.append((txt, tag, spn))
                     spn = 1
                 lst = d
@@ -162,11 +161,11 @@
                 else:
                     sta, num = d.split("|")
                     txt = "%s\n%s" % (num, sta)
-                    if txt.count("Query"):
+                    if sta == ("Query"):
                         tag = "query"
-                    elif txt.count("Confirm"):
+                    elif sta == ("Confirmed"):
                         tag = "confirm"
-                    elif txt.count("Settle"):
+                    elif sta == ("Settled"):
                         tag = "settle"
             if spn > 300:
                 col.append((txt, tag, 300))

=== modified file 'bkm/bk1020.py'
--- bkm/bk1020.py	2017-02-25 14:03:05 +0000
+++ bkm/bk1020.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Accommodation Bookings.
@@ -55,6 +53,7 @@
         self.bktpl = bkmctl["cbk_bkgtpl"]
         self.terms = bkmctl["cbk_terms"]
         self.ivtpl = bkmctl["cbk_invtpl"]
+        self.fromad = bkmctl["cbk_emadd"]
         if self.glint == "Y":
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
@@ -81,9 +80,11 @@
         if self.glint == "Y":
             tabs.extend(["genmst", "gentrn"])
         self.sql = Sql(self.opts["mf"].dbm, tables=tabs, prog=__name__)
+        if self.sql.error:
+            return
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.batno = "B%s" % self.curdt
         self.number = 0
         return True
@@ -318,11 +319,11 @@
         return "nd"
 
     def doType(self, frt, pag, r, c, p, i, w):
-        if not self.state == "Q" and not w == self.btype:
+        if self.state != "Q" and w != self.btype:
             self.df.loadEntry(frt, pag, p, data=self.btype)
             return "Invalid Type"
         if not self.newmst:
-            if not w == self.btype:
+            if w != self.btype:
                 ok = askQuestion(self.opts["mf"].window, "Change Type",
                     "Do You Want to Change the Type of the Booking?",
                     default="no")
@@ -390,7 +391,7 @@
                 else:
                     self.aunits[unt] = {"desc": des, "qty": qty, "rms": {}}
                     if typ == "A":
-                        for r in range(1, rms + 1):
+                        for r in xrange(1, rms + 1):
                             self.aunits[unt]["rms"][r] = True
             bks = self.sql.getRec(tables=["bkmmst", "bkmrtt"],
                 cols=[
@@ -410,7 +411,7 @@
             self.used = []
             for bk in bks:
                 cod = "%s-%s" % (bk[2], bk[3])
-                if not cod in self.aunits:
+                if cod not in self.aunits:
                     continue
                 u = False
                 if self.btype == "A":
@@ -432,7 +433,7 @@
                             del self.aunits[cod]
                         if whole and bk[2] == "A":
                             whole = False
-                    elif not self.aunits[cod]["qty"] == 999:
+                    elif self.aunits[cod]["qty"] != 999:
                         del self.aunits[cod]
             if whole:
                 self.aunits["A-ALL"] = {"desc": whole[0], "qty": whole[1],
@@ -615,7 +616,7 @@
         self.cg = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, butt=but, tend=((self.doChgEnd,"n"),),
             txit=(self.doChgExit,))
-        for x in range(10):
+        for x in xrange(10):
             self.cg.loadEntry("T", 0, x, data=self.change[x])
             if x == 0:
                 self.ctyp, self.ccod = self.change[x].split("-")
@@ -720,10 +721,10 @@
             if (num >= 0) and (num < 20):
                 mess = (w1[num])
             elif (num > 19) and (num < 100):
-                mess = (w2[num/10]) + " " + (w1[num % 10])
+                mess = (w2[int(num / 10)]) + " " + (w1[num % 10])
             elif (num > 99) and (num < 1000):
-                mess = (w1[num/100]) + " Hundred and " + \
-                    (w2[(num-100)/10]) + " " + (w1[num % 10])
+                mess = (w1[int(num / 100)]) + " Hundred and " + \
+                    (w2[int((num - 100) / 10)]) + " " + (w1[num % 10])
             return mess
 
         data = []
@@ -740,7 +741,7 @@
         return rs
 
     def doUUnit(self, frt, pag, r, c, p, i, w):
-        if not "-" in w:
+        if "-" not in w:
             return "Invalid Unit Code Combination"
         tp, cd = w.split("-")
         rec = self.sql.getRec(tables="bkmunm", cols=["bum_desc", "bum_maxg",
@@ -748,7 +749,7 @@
             ("bum_btyp", "=", tp), ("bum_code", "=", cd)], limit=1)
         if not rec:
             return "Invalid Unit Code"
-        if not w in self.aunits:
+        if w not in self.aunits:
             return "Unit Not Available"
         self.ucod = w
         self.udes = rec[0]
@@ -770,13 +771,13 @@
         return "sk1"
 
     def doURme(self, frt, pag, r, c, p, i, w):
-        if not self.aunits[self.ucod]["rms"] == 999:
+        if self.aunits[self.ucod]["rms"] != 999:
             if not w:
                 for room in self.aunits[self.ucod]["rms"]:
                     if not self.aunits[self.ucod]["rms"][room]:
                         return "Unit Partly Booked"
             else:
-                if not w in self.aunits[self.ucod]["rms"]:
+                if w not in self.aunits[self.ucod]["rms"]:
                     return "Invalid Room"
                 if not self.aunits[self.ucod]["rms"][w]:
                     return "Room Already Booked"
@@ -913,7 +914,7 @@
         self.opts["mf"].closeLoop()
 
     def doCheckUnits(self):
-        if not self.btype == "A":
+        if self.btype != "A":
             return
         cols = self.sql.bkmrtt_col
         recs = self.sql.getRec(tables="bkmrtt", where=[("brt_cono", "=",
@@ -1287,7 +1288,7 @@
 
     def doTDate(self, frt, pag, r, c, p, i, w):
         self.tdte = w
-        self.tcur = w / 100
+        self.tcur = int(w / 100)
         self.tref = self.getRef()
         self.tr.loadEntry(frt, pag, p + 1, data=self.tref)
 
@@ -1400,12 +1401,12 @@
             vrte = getVatRate(self.sql, self.opts["conum"], vatind, self.tdte)
             vatamt = round(tramt * vrte / (100 + vrte), 2)
             excamt = float(ASD(tramt) - ASD(vatamt))
-        elif not self.ttype == 4:
+        elif self.ttype != 4:
             tramt = self.tamount
             vatind = self.tvcod
             vatamt = self.tvamt
             excamt = float(ASD(tramt) - ASD(vatamt))
-        if not self.ttype == 4 or self.fee:
+        if self.ttype != 4 or self.fee:
             # Main Transaction
             data = [self.opts["conum"], self.number, ttype, self.tref,
                 self.batno, self.tdte, tramt, vatamt, self.tcur, self.tdesc,
@@ -1489,7 +1490,7 @@
             vrte = rec[self.sql.bkmrtt_col.index("brt_vrate")]
             invn = rec[self.sql.bkmrtt_col.index("brt_invno")]
             invd = rec[self.sql.bkmrtt_col.index("brt_invdt")]
-            curd = invd / 100
+            curd = int(invd / 100)
             umst = self.sql.getRec(tables="bkmunm", where=[("bum_cono",
                 "=", self.opts["conum"]), ("bum_btyp", "=", utyp),
                 ("bum_code", "=", ucod)], limit=1)
@@ -1509,13 +1510,13 @@
             incamt = float(ASD(incamt) + ASD(inca))
             vatamt = float(ASD(vatamt) - ASD(vata))
             if vata:
-                if not vatc in vdic:
+                if vatc not in vdic:
                     vdic[vatc] = [0, 0]
                 vdic[vatc][0] = float(ASD(vdic[vatc][0]) + ASD(exca))
                 vdic[vatc][1] = float(ASD(vdic[vatc][1]) + ASD(vata))
             if self.glint == "Y":
                 slsa = umst[self.sql.bkmunm_col.index("bum_slsa")]
-                if not slsa in gdic:
+                if slsa not in gdic:
                     gdic[slsa] = [0, 0, vatc]
                 gdic[slsa][0] = float(ASD(gdic[slsa][0]) - ASD(exca))
                 gdic[slsa][1] = float(ASD(gdic[slsa][1]) - ASD(vata))
@@ -1727,8 +1728,8 @@
                 att = None
             self.form.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.pr.repprt,
-                repeml=self.pr.repeml, attach=att)
+                pdfnam=pdfnam, header=self.tit, repprt=self.pr.repprt,
+                fromad=self.fromad, repeml=self.pr.repeml, attach=att)
 
     def doLoadStatic(self):
         cmc = self.sql.ctlmst_col
@@ -1760,7 +1761,7 @@
 
     def doBookingDetails(self):
         t = "booking_details"
-        if not t in self.form.tptp:
+        if t not in self.form.tptp:
             return
         s = 0
         nd = self.form.newdic
@@ -1988,8 +1989,8 @@
             date = int(date.replace("-", ""))
         if not date:
             return None
-        yy = date / 10000
-        mm = date / 100 % 100
+        yy = int(date / 10000)
+        mm = int(date / 100) % 100
         dd = date % 100
         return "%s %s %s" % (dd, mthnam[mm][1], yy)
 

=== modified file 'bkm/bk2010.py'
--- bkm/bk2010.py	2017-02-25 14:03:05 +0000
+++ bkm/bk2010.py	2017-06-28 12:54:44 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Booking Invoice Raising.
@@ -148,7 +146,7 @@
             trdt = rec[3]
             incamt = 0
             vatamt = 0
-            curdt = trdt / 100
+            curdt = int(trdt / 100)
             batno = "B%s" % curdt
             gls = {}
             trns = self.sql.getRec(tables="bkmrtt", where=[("brt_cono",
@@ -188,7 +186,7 @@
                 vatamt = float(ASD(vatamt) - ASD(vata))
                 if self.glint == "Y":
                     slsa = umst[self.sql.bkmunm_col.index("bum_slsa")]
-                    if not slsa in gls:
+                    if slsa not in gls:
                         gls[slsa] = [0, 0, vatc]
                     gls[slsa][0] = float(ASD(gls[slsa][0]) - ASD(exca))
                     gls[slsa][1] = float(ASD(gls[slsa][1]) - ASD(vata))
@@ -223,7 +221,7 @@
                             invno, batno, gls[acc][1], 0, "Booking %s" % bkno,
                             "", "", 0, self.opts["capnm"], self.sysdtw, 0]
                         self.sql.insRec("gentrn", data=data)
-            if not invno in docs:
+            if invno not in docs:
                 docs.append(invno)
         self.opts["mf"].dbm.commitDbase()
         if docs:

=== modified file 'bkm/bk3010.py'
--- bkm/bk3010.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3010.py	2017-06-28 13:01:07 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Deposits Listing.
@@ -34,6 +32,7 @@
         bkmctl = mc.getCtl("bkmctl", self.opts["conum"])
         if not bkmctl:
             return
+        self.fromad = bkmctl["cbk_emadd"]
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
         return True
@@ -123,7 +122,7 @@
                     continue
                 elif not dp1 and dp2 and dt2 > self.sysdtw:
                     continue
-            elif not dp1 > 0 and not dp2 > 0:
+            elif dp1 <= 0 and dp2 <= 0:
                 continue
             if dp1 and dp1 > 0:
                 b = CCD(dt1, "D1", 10).disp
@@ -166,19 +165,21 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-                repprt=self.df.repprt)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                header=self.head, pdfnam=pdfnam, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self):
-        cdes = "%-30s" % self.opts["conam"]
-        self.fpdf.drawText(cdes, x=7, font=["courier", "B", 24])
+        cd1 = "%-30s" % self.opts["conam"]
+        self.fpdf.drawText(cd1, x=7, font=["courier", "B", 24])
         self.fpdf.drawText(font=["courier", "B", 14])
         if self.expired == "N":
-            cdes = "Deposits Due Report"
+            cd2 = "Deposits Due Report"
         else:
-            cdes = "Deposits Expired Report"
-        self.fpdf.drawText(cdes, x=7, font=["courier", "B", 16])
+            cd2 = "Deposits Expired Report"
+        self.head = "%s - %s" % (cd1, cd2)
+        self.fpdf.drawText(cd2, x=7, font=["courier", "B", 16])
         self.fpdf.drawText(font=["courier", "B", 14])
         self.printLine("Number", " Due-Date ", "%-20s" % "Name & Group",
             "  Arrive  ", "  Depart  ", "    Amount", fill=1)
@@ -191,11 +192,11 @@
         if cq > fq:
             ch = 8
             h = cq * 8
-            fh = h / fq
+            fh = int(h / fq)
         elif fq > cq:
             fh = 8
             h = fq * 8
-            ch = h / cq
+            ch = int(h / cq)
         else:
             h = cq * 8
             ch = fh = 8

=== modified file 'bkm/bk3020.py'
--- bkm/bk3020.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3020.py	2017-06-28 13:01:27 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bookings Manager Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 from tartanWork import bktrtp
 
@@ -22,8 +21,8 @@
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            self.sper = self.opts["period"][1][0] / 100
-            self.eper = self.opts["period"][2][0] / 100
+            self.sper = int(self.opts["period"][1][0] / 100)
+            self.eper = int(self.opts["period"][2][0] / 100)
             self.mainProcess()
             self.opts["mf"].startLoop()
 
@@ -34,6 +33,11 @@
             "bkmcon"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bkmctl = gc.getCtl("bkmctl", self.opts["conum"])
+        if not bkmctl:
+            return
+        self.fromad = bkmctl["cbk_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -243,7 +247,7 @@
                 break
             bkmno, trdt, trtp, refno, batch, debit, credit, taxamt, \
                 detail, taxind, name = self.getValues(dat)
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -281,8 +285,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         bkmno = CCD(data[0], "UI", 7)

=== modified file 'bkm/bk3030.py'
--- bkm/bk3030.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3030.py	2017-06-28 15:53:51 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Booking Arrivals Listing.
@@ -52,6 +50,7 @@
             return
         self.glint = bkmctl["cbk_glint"]
         self.tplnam = bkmctl["cbk_invtpl"]
+        self.fromad = bkmctl["cbk_emadd"]
         if self.glint == "Y":
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
@@ -130,18 +129,18 @@
         else:
             chk = 4
         if date:
-            year = date / 10000
-            month = date / 100 % 100
+            year = int(date / 10000)
+            month = int(date / 100) % 100
             day = date % 100
-            if not datetime.date(year, month, day).weekday() == chk:
+            if datetime.date(year, month, day).weekday() != chk:
                 return True
         else:
             date = projectDate(self.sysdtw, -1)
             dte = 99
-            while not dte == chk:
+            while dte != chk:
                 date = projectDate(date, 1)
-                year = date / 10000
-                month = date / 100 % 100
+                year = int(date / 10000)
+                month = int(date / 100) % 100
                 day = date % 100
                 dte = datetime.date(year, month, day).weekday()
             return date
@@ -207,8 +206,8 @@
             self.fpdf.output(pdfnam, "F")
             subj = "%s - %s" % (self.cdes, self.hdes)
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=subj, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=subj, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         if self.prtinv == "Y" and self.docs:
             # Print Invoice
             self.docs.sort()
@@ -295,8 +294,8 @@
                 else:
                     oldnm = name
                 if arrive >= self.start:
-                    yr = arrive / 10000
-                    mt = arrive / 100 % 100
+                    yr = int(arrive / 10000)
+                    mt = int(arrive / 100) % 100
                     dy = arrive % 100
                     d = datetime.date(yr, mt, dy)
                     arr = d.strftime("%a")
@@ -307,14 +306,14 @@
                 else:
                     td = depart
                 if td <= self.end:
-                    yr = depart / 10000
-                    mt = depart / 100 % 100
+                    yr = int(depart / 10000)
+                    mt = int(depart / 100) % 100
                     dy = depart % 100
                     e = datetime.date(yr, mt, dy)
                     dep = e.strftime("%a")
                 else:
                     dep = "-->"
-                if not last == number and bal[0]:
+                if last != number and bal[0]:
                     amt = CCD(bal[0], "SD", 13.2).disp
                 else:
                     amt = CCD(0, "SD", 13.2).disp
@@ -363,8 +362,8 @@
                 elif depart < self.start or arrive > self.end:
                     continue
                 if arrive >= self.start:
-                    yr = arrive / 10000
-                    mt = arrive / 100 % 100
+                    yr = int(arrive / 10000)
+                    mt = int(arrive / 100) % 100
                     dy = arrive % 100
                     dt = datetime.date(yr, mt, dy)
                     arrive = dt.strftime("%a")
@@ -375,8 +374,8 @@
                 else:
                     td = depart
                 if td <= self.end:
-                    yr = depart / 10000
-                    mt = depart / 100 % 100
+                    yr = int(depart / 10000)
+                    mt = int(depart / 100) % 100
                     dy = depart % 100
                     dt = datetime.date(yr, mt, dy)
                     depart = dt.strftime("%a")
@@ -437,7 +436,7 @@
         # Raise the Invoice
         incamt = 0
         vatamt = 0
-        curdt = trdt / 100
+        curdt = int(trdt / 100)
         batno = "B%s" % curdt
         gls = {}
         recs = self.sql.getRec(tables="bkmrtt", where=[("brt_cono",
@@ -447,7 +446,7 @@
             return
         invno = self.getRef(number)
         self.docs.append(invno)
-        if not number in self.book:
+        if number not in self.book:
             self.book.append(number)
         for rec in recs:
             utyp = rec[self.sql.bkmrtt_col.index("brt_utype")]
@@ -480,7 +479,7 @@
             vatamt = float(ASD(vatamt) - ASD(vata))
             if self.glint == "Y":
                 slsa = umst[self.sql.bkmunm_col.index("bum_slsa")]
-                if not slsa in gls:
+                if slsa not in gls:
                     gls[slsa] = [0, 0, vatc]
                 gls[slsa][0] = float(ASD(gls[slsa][0]) - ASD(exca))
                 gls[slsa][1] = float(ASD(gls[slsa][1]) - ASD(vata))
@@ -557,8 +556,8 @@
     def getDate(self, date):
         if type(date) == str:
             date = int(date.replace("-", ""))
-        yy = date / 10000
-        mm = date / 100 % 100
+        yy = int(date / 10000)
+        mm = int(date / 100) % 100
         dd = date % 100
         return "%s %s %s" % (dd, mthnam[mm][1], yy)
 

=== modified file 'bkm/bk3040.py'
--- bkm/bk3040.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3040.py	2017-06-28 13:04:20 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Ledger Balance Listing.
@@ -34,6 +32,7 @@
         bkmctl = gc.getCtl("bkmctl", self.opts["conum"])
         if not bkmctl:
             return
+        self.fromad = bkmctl["cbk_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -58,7 +57,7 @@
             ("Cancel", "X"))
         fld = (
             (("T",0,0,0),"ID2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCutOff,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doCutOff,None,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Status","",
                 "A","Y",self.doStatus,None,None,None))
         tnd = ((self.doEnd,"Y"), )
@@ -86,7 +85,7 @@
     def doEnd(self):
         self.df.closeProcess()
         whr = [("bkm_cono", "=", self.opts["conum"])]
-        if not self.status == "A":
+        if self.status != "A":
             whr.append(("bkm_state", "=", self.status))
         odr = "bkm_number"
         recs = self.sql.getRec(tables="bkmmst", cols=["bkm_number",
@@ -167,8 +166,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         num = CCD(data[0], "UI", 7)

=== modified file 'bkm/bk3050.py'
--- bkm/bk3050.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3050.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Ledger Print Labels. L7159
@@ -45,7 +43,7 @@
         lab = {
             "stype": "C",
             "head": ("Codes",),
-            "data": labels.keys()}
+            "data": list(labels.keys())}
         r1s = (("Yes","Y"),("Singles","S"))
         r2s = (("Number","N"),("Name","M"),("Postal Code","P"))
         fld = (
@@ -116,7 +114,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'bkm/bk3060.py'
--- bkm/bk3060.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3060.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Master Notes Listing.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import CCD, NotesPrint, ProgressBar, RepPrt, Sql
+from TartanClasses import CCD, GetCtl, NotesPrint, ProgressBar, RepPrt, Sql
 from tartanFunctions import textFormat
 
 class bk3060:
@@ -26,6 +24,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "memmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bkmctl = gc.getCtl("bkmctl", self.opts["conum"])
+        if not bkmctl:
+            return
+        self.fromad = bkmctl["cbk_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "BKM")
         if not self.notes.data:
@@ -69,6 +72,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bkm/bk3070.py'
--- bkm/bk3070.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3070.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Statements.
@@ -36,6 +34,7 @@
         if not bkmctl:
             return
         self.stpl = bkmctl["cbk_statpl"]
+        self.fromad = bkmctl["cbk_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = CCD(self.sysdtw, "D1", 10).disp
@@ -196,7 +195,7 @@
             elif self.repeml[1] == "N" or self.emadd:
                 self.repeml[2] = self.emadd
                 self.doPrint()
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.opts["mf"].closeLoop()
 
     def doLoadStatic(self):
@@ -261,8 +260,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.sysdtd),
-            repprt=self.repprt, repeml=self.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.sysdtd),
+            repprt=self.repprt, fromad=self.fromad, repeml=self.repeml)
         if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -335,7 +334,7 @@
         tdc = self.form.sql.tpldet_col
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "bkm_number_C00":
                 nl[tdc.index("tpd_text")] = self.num
@@ -354,7 +353,7 @@
 
     def doTotal(self, tdc):
         for c in self.form.total:
-            if not c == "total_balance":
+            if c != "total_balance":
                 continue
             t = "%s_T00" % c
             if c in self.form.newdic:
@@ -380,7 +379,7 @@
 
     def doExit(self):
         self.df.closeProcess()
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.opts["mf"].closeLoop()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bkm/bk3080.py'
--- bkm/bk3080.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3080.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Reprinting of Booking Invoices.

=== modified file 'bkm/bk3090.py'
--- bkm/bk3090.py	2017-02-25 14:03:05 +0000
+++ bkm/bk3090.py	2017-06-28 13:09:48 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bookings's Occupancy by Status Summary.
@@ -54,7 +52,7 @@
     def doStartPer(self, frt, pag, r, c, p, i, w):
         self.sper = w
         self.sdate = (w * 100) + 1
-        y = w / 100
+        y = int(w / 100)
         m = (w % 100) + 11
         if m > 12:
             y += 1
@@ -85,10 +83,10 @@
         rec = self.sql.getRec(tables="bkmmst", cols=col, where=whr)
         num = 1
         lookup = {}
-        mth = (self.sdate / 100) % 100
-        end = (self.edate / 100) % 100
+        mth = int(self.sdate / 100) % 100
+        end = int(self.edate / 100) % 100
         lookup[mth] = num
-        while not mth == end:
+        while mth != end:
             mth += 1
             if mth > 12:
                 mth = 1
@@ -96,9 +94,9 @@
             lookup[mth] = num
         for r in rec:
             if self.reptyp == "B":
-                if r[2] / 100 == r[3] / 100:
+                if int(r[2] / 100) == int(r[3] / 100):
                     days = dateDiff(r[2], r[3], "days")
-                    mth = (r[2] / 100) % 100
+                    mth = int(r[2] / 100) % 100
                     self.desc[r[0]][lookup[mth]] += (days * r[1])
                     if r[0] == "X":
                         continue
@@ -106,17 +104,17 @@
                 else:
                     mnd = mthendDate(r[2])
                     days = dateDiff(r[2], mnd, "days")
-                    mth = (r[2] / 100) % 100
+                    mth = int(r[2] / 100) % 100
                     self.desc[r[0]][lookup[mth]] += (days * r[1])
                     self.desc["T"][lookup[mth]] += (days * r[1])
-                    mth = (r[3] / 100) % 100
-                    days = dateDiff((((r[3]/100)*100)+1), r[3], "days")
+                    mth = int(r[3] / 100) % 100
+                    days = dateDiff(((int(r[3] / 100) * 100) + 1), r[3], "days")
                     self.desc[r[0]][lookup[mth]] += (days * r[1])
                     if r[0] == "X":
                         continue
                     self.desc["T"][lookup[mth]] += (days * r[1])
             else:
-                mth = (r[2] / 100) % 100
+                mth = int(r[2] / 100) % 100
                 self.desc[r[0]][lookup[mth]] += r[1]
                 if r[0] == "X":
                     continue
@@ -133,8 +131,8 @@
         else:
             typ = "Value"
         CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],
-            [self.sdate/100, self.edate/100], [[self.opts["conam"],
-            "Status Summary"], typ], achart, mchart)
+            [int(self.sdate / 100), int(self.edate / 100)],
+            [[self.opts["conam"], "Status Summary"], typ], achart, mchart)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bkm/bkc110.py'
--- bkm/bkc110.py	2017-02-25 14:03:05 +0000
+++ bkm/bkc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", "booking_form",
-                "booking_invoice", "booking_statement", ""]
+                "booking_invoice", "booking_statement", "", ""]
         else:
             self.new = False
         if self.genleg:
@@ -134,7 +132,9 @@
             (("T",0,seq + 2,0),"INA",20,"Statement Template","",
                 self.acc[4],"N",self.doStaTpl,tps,None,None),
             (("T",0,seq + 3,0),"ITX",50,"Terms and Conditions","",
-                self.acc[5],"N",None,trm,None,("fle","blank"))])
+                self.acc[5],"N",None,trm,None,("fle","blank")),
+            (("T",0,seq + 4,0),"ITX",50,"Email Address","",
+                self.acc[6],"N",None,None,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
@@ -158,7 +158,7 @@
     def doGlint(self, frt, pag, r, c, p, i, w):
         self.glint = w
         if self.glint == "N":
-            for x in range(1, 9):
+            for x in xrange(1, 9):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk8"
 
@@ -202,7 +202,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 9:
                 if x in (1, 3, 5, 7):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'bkm/bkc210.py'
--- bkm/bkc210.py	2017-02-25 14:03:05 +0000
+++ bkm/bkc210.py	2017-06-28 13:10:25 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Rate Records Maintenance.

=== modified file 'bkm/bkc310.py'
--- bkm/bkc310.py	2017-02-25 14:03:05 +0000
+++ bkm/bkc310.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bookings Unit File Maintenance.

=== modified file 'bkm/bkc410.py'
--- bkm/bkc410.py	2017-02-25 14:03:05 +0000
+++ bkm/bkc410.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Bulk Mailing Utility.

=== modified file 'bkm/bkc510.py'
--- bkm/bkc510.py	2017-02-25 14:03:05 +0000
+++ bkm/bkc510.py	2017-06-28 13:10:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Booking Contacts Maintenance.

=== modified file 'bks/bs1010.py'
--- bks/bs1010.py	2017-03-25 15:17:51 +0000
+++ bks/bs1010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Books Masterfile Maintenance.

=== modified file 'bks/bs3010.py'
--- bks/bs3010.py	2017-02-25 14:03:05 +0000
+++ bks/bs3010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Book Library List.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-import os, requests, time, urllib2
+import os, requests, time
 from TartanClasses import CCD, MyFpdf, SplashScreen, Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName
 
@@ -126,7 +124,7 @@
         new = []
         for rec in recs:
             stat = CCD(rec[0], "UA", 1).disp
-            if not stat == self.stat:
+            if stat != self.stat:
                 self.stat = stat
                 self.fpdf.add_page()
             titl = CCD(rec[1], "NA", 30).disp
@@ -145,7 +143,6 @@
             sp = SplashScreen(self.opts["mf"].body,
                 "Preparing precis of New Books ... Please Wait")
             try:
-                urllib2.urlopen("http://tartan.co.za",timeout=10)
                 self.new = True
                 self.fpdf.add_page()
                 for book in new:
@@ -159,7 +156,7 @@
                             font="B")
                         self.fpdf.drawText("Details:", font="B")
                         self.fpdf.drawText(desc.rstrip(), font="I", ctyp="M")
-                        if not book == new[-1]:
+                        if book != new[-1]:
                             self.fpdf.drawText()
             except:
                 pass
@@ -169,7 +166,7 @@
         self.fpdf.output(pdfnam, "F")
         head = "Book List as at %s" % (self.curdt)
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
+            header=head, repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self, new=False):
@@ -212,7 +209,7 @@
                 titb = item["volumeInfo"]["title"].lower().\
                     replace("the ","").replace(", the", "")
                 if titb.count(tita):
-                    if "description" in item["volumeInfo"].keys():
+                    if "description" in item["volumeInfo"]:
                         ok = True
                         break
             if ok:

=== modified file 'bks/bsc110.py'
--- bks/bsc110.py	2017-02-25 14:03:05 +0000
+++ bks/bsc110.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Book Club Member's Maintenance.
@@ -64,7 +62,9 @@
             (("T",0,10,0),"I@bof_mail",0,"","",
                 "","N",None,None,None,("efld",)),
             (("T",0,11,0),("IRB",r1s),0,"Membersip Status","",
-                "C","N",None,None,None,None))
+                "C","N",None,None,None,None),
+            (("T",0,12,0),"ITX",50,"Email Address","",
+                "","N",None,None,None,None))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,

=== modified file 'bks/bsc210.py'
--- bks/bsc210.py	2017-02-25 14:03:05 +0000
+++ bks/bsc210.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Book Club Author's Maintenance.

=== modified file 'bwl/bc1010.py'
--- bwl/bc1010.py	2017-02-25 14:03:05 +0000
+++ bwl/bc1010.py	2017-07-24 08:23:52 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Tabs Maintenance.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, FileImport, GetCtl, ProgressBar, RepPrt
+from TartanClasses import FileImport, GetCtl, ProgressBar, RepPrt
 from TartanClasses import SimpleDialog, Sql, TartanDialog
 from tartanFunctions import askChoice, askQuestion, getNextCode, showError
 from tartanFunctions import showInfo
@@ -54,6 +52,7 @@
         self.nstart = bwlctl["ctb_nstart"]
         self.dbase = bwlctl["ctb_dbase"]
         self.order = bwlctl["ctb_order"]
+        self.fromad = bwlctl["ctb_emadd"]
         self.keys = (
             ("bwltab", "btb_cono", "btb_tab"),
             ("bwldrt", "bdt_cono", "bdt_tab"),
@@ -292,7 +291,7 @@
             elif self.fstart < self.mstart and self.tab < self.mstart:
                 self.df.loadEntry(frt, pag, p+1, data="F")
             return
-        if not self.sname == self.snam or not w == self.fnam:
+        if self.sname != self.snam or w != self.fnam:
             but = [("Amendment", "A"), ("Re-Issue", "R"), ("Neither", "N")]
             ok = askChoice(self.opts["mf"].body, "Name Change",
                 "Please Select the Reason for the Name Change",
@@ -301,7 +300,7 @@
                 return "ff3"
             if ok == "R":
                 self.tabchg = True
-                for x in range(1, 15):
+                for x in xrange(1, 15):
                     self.df.clearEntry(frt, pag, c + x)
 
     def doGender(self, frt, pag, r, c, p, i, w):
@@ -400,6 +399,11 @@
                 break
         if error:
             if self.tab < self.nstart:
+                # Member
+                ok = askQuestion(self.opts["mf"].body, "Convert",
+                    "Convert this Member to a Visitor", default="yes")
+                if ok == "no":
+                    return "Not Deleted nor Converted"
                 tab = getNextCode(self.sql, "bwltab", "btb_tab",
                     where=[("btb_cono", "=", self.opts["conum"])],
                     start=self.nstart, last=900000)
@@ -407,10 +411,14 @@
                     self.sql.updRec(key[0], cols=[key[2]], data=[tab],
                         where=[(key[1], "=", self.opts["conum"]),
                         (key[2], "=", self.tab)])
-                showInfo(self.opts["mf"].body, "Non Member",
-                    "This Member has been converted to a Visitor")
             else:
-                return "There is History for this Player, Not Deleted"
+                # Visitor
+                chk = self.sql.getRec(tables="bwlent", where=[("bce_cono",
+                    "=", self.opts["conum"]), ("bce_scod", "=", self.tab)])
+                if chk:
+                    return "There is History for this Player, Not Deleted"
+                self.sql.delRec("bwltab", where=[("btb_cono", "=",
+                    self.opts["conum"]), ("btb_tab", "=", self.tab)])
         else:
             self.sql.delRec("bwltab", where=[("btb_cono", "=",
                 self.opts["conum"]), ("btb_tab", "=", self.tab)])
@@ -418,7 +426,7 @@
 
     def doConvert(self):
         titl = "Enter Member's Tab Number"
-        ent = SimpleDialog(parent=self.df.window, titl=titl,
+        ent = SimpleDialog(parent=self.df.window, title=titl,
             cols=(("a", "Tab Number          ", 6, "UI", "Tab"),))
         self.opts["mf"].startLoop()
         try:
@@ -475,6 +483,7 @@
             ["Telephone - Cell", "N", "btb_cell"],
             ["Email Address", "N", "btb_mail"],
             ["Ratings", "N", "ratings"],
+            ["BSA Number", "N", "btb_bsano"],
             ["Order", "T", "order"]])
         tit = ("Print Details",)
         r1s = (("Members", "M"), ("Guests", "G"), ("All", "A"))
@@ -507,7 +516,14 @@
                 if col == "name":
                     cols.append(["name", "NA", 30, "Name"])
                 elif col == "address":
-                    cols.append(["address", "NA", 120, "Address"])
+                    cols.append(["btb_add1", dic["btb_add1"][2],
+                        dic["btb_add1"][3], dic["btb_add1"][5]])
+                    cols.append(["btb_add2", dic["btb_add2"][2],
+                        dic["btb_add2"][3], dic["btb_add2"][5]])
+                    cols.append(["btb_add3", dic["btb_add3"][2],
+                        dic["btb_add3"][3], dic["btb_add3"][5]])
+                    cols.append(["btb_pcod", dic["btb_pcod"][2],
+                        dic["btb_pcod"][3], dic["btb_pcod"][5]])
                 elif col == "ratings":
                     if self.dbase == "P":
                         cols.append(["btb_pos1", dic["btb_pos1"][2],
@@ -563,17 +579,10 @@
                         else:
                             dat.append(snam)
                     elif col == "address":
-                        txt = rec[btc.index("btb_add1")]
-                        adr = rec[btc.index("btb_add2")]
-                        if adr:
-                            txt = "%s, %s" % (txt, adr)
-                        adr = rec[btc.index("btb_add3")]
-                        if adr:
-                            txt = "%s, %s" % (txt, adr)
-                        adr = rec[btc.index("btb_pcod")]
-                        if adr:
-                            txt = "%s, %s" % (txt, adr)
-                        dat.append(CCD(txt, "NA", 120).work)
+                        dat.append(rec[btc.index("btb_add1")])
+                        dat.append(rec[btc.index("btb_add2")])
+                        dat.append(rec[btc.index("btb_add3")])
+                        dat.append(rec[btc.index("btb_pcod")])
                     elif col == "ratings":
                         if self.dbase == "P":
                             dat.append(rec[btc.index("btb_pos1")])
@@ -605,7 +614,7 @@
             RepPrt(self.opts["mf"], name=__name__, conum=self.opts["conum"],
                 conam=self.opts["conam"], heads=[tit], ttype="D",
                 tables=data, cols=cols, repprt=self.pr.repprt,
-                repeml=self.pr.repeml)
+                repeml=self.pr.repeml, fromad=self.fromad)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.enableButtonsTags(state=state)
         self.df.window.focus_force()

=== modified file 'bwl/bc1020.py'
--- bwl/bc1020.py	2017-02-25 14:03:05 +0000
+++ bwl/bc1020.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     League Format Maintenance.

=== modified file 'bwl/bc1030.py'
--- bwl/bc1030.py	2017-02-25 14:03:05 +0000
+++ bwl/bc1030.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Side's Maintenance.

=== modified file 'bwl/bc1040.py'
--- bwl/bc1040.py	2017-02-25 14:03:05 +0000
+++ bwl/bc1040.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Competition Types Maintenance.
@@ -92,6 +90,9 @@
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
             eflds=fld, butt=but, tend=tnd, txit=txt)
+        if "args" in self.opts:
+            self.df.doKeyPressed("T", 0, 0, data=self.opts["args"])
+            self.df.topf[0][0][1] = "OUI"
 
     def doTypCod(self, frt, pag, r, c, p, i, w):
         if not w:
@@ -128,6 +129,8 @@
             return "There are Competitions Using this Type, Not Deleted"
         self.sql.delRec("bwltyp", where=[("bct_cono", "=", self.opts["conum"]),
             ("bct_code", "=", self.ctype)])
+        self.sql.delRec("bwlpts", where=[("bcp_cono", "=", self.opts["conum"]),
+            ("bcp_code", "=", self.ctype)])
         self.opts["mf"].dbm.commitDbase()
 
     def doDesc(self, frt, pag, r, c, p, i, w):
@@ -233,7 +236,10 @@
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)
         else:
             self.opts["mf"].dbm.commitDbase()
-            self.df.focusField("T", 0, 1)
+            if "args" in self.opts:
+                self.doExit()
+            else:
+                self.df.focusField("T", 0, 1)
 
     def doPtsFmt(self, flag=None):
         self.flag = flag

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2017-02-25 14:03:05 +0000
+++ bwl/bc2010.py	2017-07-24 08:24:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Tabs Draw.
@@ -271,7 +269,8 @@
         if self.drm:
             state = self.df.disableButtonsTags()
             butt = [("None", "N"), ("View", "V"), ("Reprint", "R")]
-            if self.date == self.sysdt and self.time == self.stime:
+            if self.date > self.sysdt or (
+                    self.date == self.sysdt and self.time == self.stime):
                 butt.extend([("Alter", "A"), ("Clear", "X")])
                 text = "Would you like to View, Reprint, Alter or Clear It?"
             else:
@@ -351,15 +350,15 @@
                 showError(self.opts["mf"].body, "Missing Tab",
                     "Tab Number %s is Not in the Database" % draw[0])
                 self.doExit()
-            if not draw[2] in rnk:
+            if draw[2] not in rnk:
                 rnk[draw[2]] = {}
-            if not draw[3] in rnk[draw[2]]:
+            if draw[3] not in rnk[draw[2]]:
                 rnk[draw[2]][draw[3]] = [0, [0,""], [0,""], [0,""], [0,""]]
             rnk[draw[2]][draw[3]][0] += draw[5]
             rnk[draw[2]][draw[3]][pos[draw[4]] + 1] = [draw[0], draw[1], r]
             if draw[8] == "A":
                 # Bounce games
-                if not draw[2] in self.bounce:
+                if draw[2] not in self.bounce:
                     self.bounce[draw[2]] = {"L":[0,0,0,0], "R":[0,0,0,0]}
                 if draw[4] == 4:
                     self.bounce[draw[2]][draw[3]][0] = draw[0]
@@ -375,7 +374,7 @@
                     skp = draw[0]
                 else:
                     skp = draw[7]
-                if not skp in self.teams:
+                if skp not in self.teams:
                     self.teams[skp] = [0,0,0,0]
                 if draw[4] == 4:
                     self.teams[skp][0] = draw[0]
@@ -390,7 +389,7 @@
                 self.adraw1.append([r, rnk[r][s][0]] + rnk[r][s][1:])
         self.tot = 0
         self.adraw1.sort()
-        for x in range(0, len(self.adraw1), 2):
+        for x in xrange(0, len(self.adraw1), 2):
             self.doAverage(self.adraw1[x], self.adraw1[x + 1])
         self.doShowQuantity()
 
@@ -416,13 +415,13 @@
             self.dofix = True
         else:
             self.dofix = False
-        if not self.dbase == "C":
+        if self.dbase != "C":
             self.nbase = self.dbase
             self.df.loadEntry(frt, pag, p + 1, data=self.dbase)
             return "sk1"
 
     def doBase(self, frt, pag, r, c, p, i, w):
-        if not w == self.dbase:
+        if w != self.dbase:
             ok = askQuestion(self.opts["mf"].body, "Override Default",
                 "Are You Sure the  Default Base (%s) Must be Overridden?" %
                 self.dbase, default="no")
@@ -452,7 +451,7 @@
                 self.visitor = True
                 self.tab = getNextCode(self.sql, "bwltab", "btb_tab",
                     where=[("btb_cono", "=", self.opts["conum"])],
-                    start=self.nstart, last=999999)
+                    start=self.nstart, last=899999)
                 self.df.loadEntry(frt, pag, p, data=self.tab)
             else:
                 return "rf"
@@ -549,7 +548,7 @@
             if not acc:
                 return
             self.df.loadEntry("T", 1, 0, data=tab)
-        if not err and not self.dbase == "P" and not acc[c.index("btb_rate1")]:
+        if not err and self.dbase != "P" and not acc[c.index("btb_rate1")]:
             return
         snam = acc[c.index("btb_surname")]
         fnam = acc[c.index("btb_names")]
@@ -614,7 +613,8 @@
             if self.alter:
                 self.doLoadTabs()
                 for b in xrange(4, 7):
-                    exec "self.df.setWidget(self.df.B%i, 'normal')" % b
+                    wid = getattr(self.df, "B%i" % b)
+                    self.df.setWidget(wid, "normal")
                 self.df.focusField("T", 1, 1)
             else:
                 self.alltabs = {}
@@ -693,7 +693,7 @@
         self.df.setWidget(self.df.mstFrame, state="show")
 
     def doBRnk(self, frt, pag, r, c, p, i, w):
-        if not len(w) == 2:
+        if len(w) != 2:
             return "Invalid Green/Rink"
         if w[0] not in self.greens:
             return "Invalid Green"
@@ -754,13 +754,13 @@
             self.bg.focusField("C", 0, 1)
 
     def doBEnd(self, widget=None):
-        if not self.rink in self.bounce:
+        if self.rink not in self.bounce:
             self.bounce[self.rink] = {}
         self.bounce[self.rink][self.team] = []
         for x in xrange(2, len(self.bg.c_work[0][self.bg.row]), 2):
             mem = self.bg.c_work[0][self.bg.row][x]
             self.bounce[self.rink][self.team].append(mem)
-            if mem and not mem in self.alltabs:
+            if mem and mem not in self.alltabs:
                 acc = self.sql.getRec(tables="bwltab", cols=["btb_surname",
                     "btb_names", "btb_gender", "btb_pos1", "btb_rate1"],
                     where=[("btb_cono", "=", self.opts["conum"]), ("btb_tab",
@@ -797,7 +797,7 @@
 
     def doBExit(self, widget=None):
         for rink in self.bounce:
-            if not "R" in self.bounce[rink]:
+            if "R" not in self.bounce[rink]:
                 del self.bounce[rink]
                 break
         self.bg.closeProcess()
@@ -888,7 +888,7 @@
         for x in xrange(0, len(self.at.c_work[0][self.at.row]), 2):
             mem = self.at.c_work[0][self.at.row][x]
             self.teams[self.tskip].append(mem)
-            if mem and not mem in self.alltabs:
+            if mem and mem not in self.alltabs:
                 acc = self.sql.getRec(tables="bwltab", cols=["btb_surname",
                     "btb_names", "btb_gender", "btb_pos1", "btb_rate1"],
                     where=[("btb_cono", "=", self.opts["conum"]), ("btb_tab",
@@ -975,7 +975,7 @@
                                     tabs.append(mem)
                 diff = []
                 for t in self.alltabs:
-                    if not t in tabs:
+                    if t not in tabs:
                         diff.append(t)
                 if diff:
                     diff.sort()
@@ -1105,7 +1105,7 @@
         if self.teams:
             needed = len(self.teams)
         else:
-            needed = num / (self.tsize * 2)
+            needed = int(num / (self.tsize * 2))
             rem = num % (self.tsize * 2)
             if rem:
                 if self.tsize == 3:
@@ -1134,11 +1134,11 @@
             if not green or green[0] not in self.greens:
                 return "Invalid Green (%s)" % green
         greens, first, endrnk, error = getGreens(w, self.needed,
-            self.bounce.keys())
+            list(self.bounce.keys()))
         if error:
             return error
         self.rinks = []
-        used = self.bounce.keys()
+        used = list(self.bounce.keys())
         for green in greens:
             for rink in greens[green]:
                 if "%s%s" % (green, rink) in self.bounce:
@@ -1155,7 +1155,6 @@
         self.adraw1 = []
         self.rinks1 = copyList(self.rinks)
         self.ndict = copyList(self.alltabs)
-        tabcnt = 0
         if self.bounce:
             # Bounce games
             self.adraw2 = []
@@ -1166,7 +1165,6 @@
                     dat = [0, 0]
                     for mem in self.bounce[rink][team]:
                         if mem:
-                            tabcnt += 1
                             dat[0] += 1
                             # Create player and remove from ndict
                             dat.append([mem] + self.ndict.pop(mem))
@@ -1181,19 +1179,18 @@
                 dat = [0, 0]
                 for mem in self.teams[skp]:
                     if mem:
-                        tabcnt += 1
                         dat[0] += 1
                         # Create player and remove from ndict
                         dat.append([mem] + self.ndict.pop(mem))
                         dat[1] += dat[-1][5]
                 temp.append(dat)
             temp = sorted(temp, key=itemgetter(1))
-            for x in range(0, len(temp), 2):
+            for x in xrange(0, len(temp), 2):
                 rink = self.rinks1.pop(0)
                 self.loadData(rink, temp[x])
                 self.loadData(rink, temp[x + 1])
             self.adraw1.extend(self.adraw2)
-        if tabcnt and tabcnt == len(self.alltabs):
+        if not self.ndict:
             # All games are bounce and/or team games
             self.count = 0
             self.tot = 0
@@ -1332,7 +1329,7 @@
             self.adraw1.sort()
             # Move seconds to thirds in broken rinks
             self.tot = 0
-            for x in range(0, len(self.adraw1), 2):
+            for x in xrange(0, len(self.adraw1), 2):
                 q1 = q2 = 0
                 for y in self.adraw1[x][2:]:
                     if y[0]:
@@ -1340,7 +1337,7 @@
                 for y in self.adraw1[x + 1][2:]:
                     if y[0]:
                         q2 += 1
-                if not q1 == q2:
+                if q1 != q2:
                     if q1 < q2:
                         self.adraw1[x][3] = self.adraw1[x][4]
                         self.adraw1[x][4] = [0, "", 0]
@@ -1422,7 +1419,7 @@
         draws = {"a": draw1[2:], "b": draw2[2:]}
         ct1 = ct2 = rt1 = rt2 = 0
         for d in ("a", "b"):
-            for x in range(4):
+            for x in xrange(4):
                 if draws[d][x][0]:
                     if d == "a":
                         ct1 += 1.0
@@ -1454,9 +1451,9 @@
     def doPositions(self, grp):
         # Calculate the number of players, by position, required
         # Treating 2nds as 3rds in trips
-        teams = len(grp) / (self.tsize * 2)  # full teams
-        odds = []                            # others
-        rem = len(grp) % (self.tsize * 2)    # players short
+        teams = int(len(grp) / (self.tsize * 2))  # full teams
+        odds = []                                 # others
+        rem = len(grp) % (self.tsize * 2)         # players short
         if rem:
             if self.tsize == 3:
                 if rem == 1:
@@ -1546,7 +1543,7 @@
                     self.seconds += 1
             self.leads = teams * 2
             for o in odds:
-                if not o in ("1/1",):
+                if o not in ("1/1",):
                     self.leads += 2
         elif self.tsize == 3:
             self.thirds = teams * 2
@@ -1561,7 +1558,7 @@
                     self.seconds += 1
             self.leads = teams * 2
             for o in odds:
-                if not o in ("1/1",):
+                if o not in ("1/1",):
                     self.leads += 2
         # Group players by position
         self.skip1 = []
@@ -1662,7 +1659,7 @@
             tab = rec[self.sql.bwldrt_col.index("bdt_tab")]
             if rec[self.sql.bwldrt_col.index("bdt_flag")] == "B":
                 self.broken.append(tab)
-            if not tab in self.hist:
+            if tab not in self.hist:
                 self.hist[tab] = [[], []]
             team = []
             p1 = self.sql.bwldrt_col.index("bdt_team1")
@@ -1711,7 +1708,7 @@
             self.lead2 = sorted(self.lead2, key=itemgetter(5), reverse=rev)
             if self.seconds % 2:
                 # Broken rink, try and select random teams fairly
-                for x in range(2):
+                for x in xrange(2):
                     tm = []
                     mx = len(self.skip2)
                     if not x:
@@ -1777,22 +1774,22 @@
                         break
                 chk = 99
                 seq = 0
-                for x in range(len(draws)):
-                    if not draws[x][0] == self.tsize:
+                for x in xrange(len(draws)):
+                    if draws[x][0] != self.tsize:
                         continue
                     if nsize == 3:
                         d1 = one[4][5]
                         d2 = 0
-                        for n in range(2, 5):
+                        for n in xrange(2, 5):
                             d1 += one[n][5]
-                        for n in range(2, 6):
+                        for n in xrange(2, 6):
                             d2 += draws[x][n][5]
                     else:
                         d1 = 0
-                        for n in range(2, 6):
+                        for n in xrange(2, 6):
                             d1 += one[n][5]
                         d2 = draws[x][4][5]
-                        for n in range(2, 5):
+                        for n in xrange(2, 5):
                             d2 += draws[x][n][5]
                     df = d1 - d2
                     if df < 0:
@@ -1866,7 +1863,7 @@
             for r in self.adraw1[x + 1][2:]:
                 if r[0]:
                     two += 1
-            if not two == one:
+            if two != one:
                 broken = True
             else:
                 broken = False
@@ -1880,10 +1877,12 @@
                     pos = [4, 3, 2, 1][num]
                     tab.append([plr, pos])
                 for t1 in tab:
+                    nam = t1[0][1].replace("VAN DER", "V D")
+                    nam = nam.replace("JANSE VAN", "J V")
                     rec = [self.opts["conum"], t1[0][0], self.date, self.time,
-                        dat[0], side, t1[0][1], t1[1], t1[0][2]]
+                        dat[0], side, nam, t1[1], t1[0][2]]
                     for t2 in tab:
-                        if not t2[0][0] == t1[0][0]:
+                        if t2[0][0] != t1[0][0]:
                             rec.extend([t2[0][0], t2[1]])
                     for _ in xrange(len(rec), 15):
                         rec.append(0)
@@ -2007,7 +2006,7 @@
                             break
                 if not error:
                     break
-        if not self.adraw3 == self.adraw1:
+        if self.adraw3 != self.adraw1:
             yn = askQuestion(self.opts["mf"].body, "Keep Changes",
                 "Do You Want to Keep the Changes?", default="yes")
             if yn == "yes":
@@ -2120,9 +2119,9 @@
             if x == 9:
                 z = 1
             if z == 1:
-                y = ((x - 8) / 2) + 2
+                y = int((x - 8) / 2) + 2
             else:
-                y = (x / 2) + 2
+                y = int(x / 2) + 2
             tab = self.cg.t_work[0][0][x]
             if not tab:
                 self.adraw3[self.seq + z][y] = [0, "", 0]
@@ -2138,7 +2137,7 @@
                             break
                     if fini:
                         break
-        for x in range(0, len(self.adraw3), 2):
+        for x in xrange(0, len(self.adraw3), 2):
             self.doAverage(self.adraw3[x], self.adraw3[x + 1])
         self.doChgExit()
 
@@ -2199,9 +2198,9 @@
         self.teams = {}
         self.bounce = {}
         self.alltabs = {}
-        recs = self.sql.getRec(tables="bwldrt", cols=["bdt_tab"],
-            where=[("bdt_cono", "=", self.opts["conum"]),
-            ("bdt_tab", "<", self.nstart)], group="bdt_tab")
+        recs = self.sql.getRec(tables="bwltab", cols=["btb_tab"],
+            where=[("btb_cono", "=", self.opts["conum"]),
+            ("btb_tab", "<", self.nstart)], group="btb_tab")
         tabs = []
         for rec in recs:
             tabs.append(rec[0])

=== modified file 'bwl/bc2020.py'
--- bwl/bc2020.py	2017-02-25 14:03:05 +0000
+++ bwl/bc2020.py	2017-06-28 13:24:56 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Selections.
@@ -27,10 +25,11 @@
 
     def setVariables(self):
         gc = GetCtl(self.opts["mf"])
-        bwlctl = gc.getCtl("bwlctl", self.opst["conum"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
         if not bwlctl:
             return
         self.nstart = bwlctl["ctb_nstart"]
+        self.fromad = bwlctl["ctb_emadd"]
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "bwlclb", "bwlflf",
             "bwlflm", "bwlflo", "bwltab", "bwlfls", "bwlflt"], prog=__name__)
         if self.sql.error:
@@ -155,7 +154,8 @@
 
     def doDate(self, frt, pag, r, c, p, i, w):
         self.date = w
-        self.disp = "%i %s %i" % (w % 100, mthnam[(w/100) % 100][1], w/10000)
+        self.disp = "%i %s %i" % (w % 100, mthnam[int(w / 100) % 100][1],
+            int(w/10000))
         acc = self.sql.getRec(tables="bwlflt", cols=["sum(bft_shotsf)"],
             where=[("bft_cono", "=", self.opts["conum"]), ("bft_fmat", "=",
             self.fmat), ("bft_type", "=", self.ftyp), ("bft_date", "=",
@@ -184,7 +184,7 @@
         self.df.loadEntry(frt, pag, p+1, data=self.rnd)
 
     def doRound(self, frt, pag, r, c, p, i, w):
-        if not w == self.rnd:
+        if w != self.rnd:
             ok = askQuestion(self.opts["mf"].body, "Round Change",
                 "The Round Has Been Changed, Please Confirm", default="no")
             if ok == "no":
@@ -577,15 +577,15 @@
                 else:
                     ftyp = "FIXTURE"
                 h1 = "TEAMS FOR %s %s - %s %s %s" % (self.fdes, ftyp,
-                    self.date % 100, mthnam[self.date / 100 % 100][1],
-                    self.date / 10000)
+                    self.date % 100, mthnam[int(self.date / 100) % 100][1],
+                    int(self.date / 10000))
                 whr.append(("bfs_league", "=", "M"))
             else:
                 ppad = 1.5
                 rr = ff
                 h1 = "TEAMS FOR %s FRIENDLY - %s %s %s" % (self.fdes,
-                    self.date % 100, mthnam[self.date / 100 % 100][1],
-                    self.date / 10000)
+                    self.date % 100, mthnam[int(self.date / 100) % 100][1],
+                    int(self.date / 10000))
                 whr.append(("bfs_league", "=", "F"))
             whr.extend([
                 ("bfs_cono=bfm_cono",),
@@ -655,8 +655,9 @@
                 pn = self.getName(p[1], p[2])
                 if p[0] in tc:
                     pn = "%s (C)" % pn
-                x = table[(((cnt % totp) / 4)+2)][0][0] + 1
-                y = table[((cnt-((cnt / 4)*4))*col)+2][1][cnt / totp] + .5
+                x = table[(int((cnt % totp) / 4) + 2)][0][0] + 1
+                y = table[((cnt - (int(cnt / 4) * 4)) * col) + 2][1][
+                    int(cnt / totp)] + .5
                 fpdf.drawText(x=x*cw, y=y*ld, txt=pn)
                 cnt += 1
             # Draw trailer
@@ -674,8 +675,8 @@
             fpdf.drawText(x=10.0*cw, y=(last+3)*ld, txt=txt, ctyp="M")
         fpdf.output(pdfnam, "F")
         head = "Match Selections for %s" % self.disp
-        doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            repprt=self.pr.repprt, repeml=self.pr.repeml)
+        doPrinter(mf=self.opts["mf"], header=head, pdfnam=pdfnam,
+            repprt=self.pr.repprt, fromad=self.fromad, repeml=self.pr.repeml)
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):

=== modified file 'bwl/bc2030.py'
--- bwl/bc2030.py	2017-02-25 14:03:05 +0000
+++ bwl/bc2030.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Results and Assessments.

=== modified file 'bwl/bc2040.py'
--- bwl/bc2040.py	2017-03-25 15:17:51 +0000
+++ bwl/bc2040.py	2017-07-18 13:29:04 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Entry Forms.
@@ -14,7 +12,7 @@
 """
 
 from TartanClasses import GetCtl, Sql, TartanDialog
-from tartanFunctions import askQuestion, getNextCode, showError
+from tartanFunctions import askQuestion, callModule, getNextCode, showError
 
 class bc2040:
     def __init__(self, **opts):
@@ -164,6 +162,16 @@
         self.cmpnam = w
 
     def doCmpTyp(self, frt, pag, r, c, p, i, w):
+        if not w:
+            ok = askQuestion(self.opts["mf"].body, head="New Type",
+                mess="Is This a New Competition Type?")
+            if ok == "yes":
+                w = getNextCode(self.sql, "bwltyp", "bct_code",
+                    where=[("bct_cono", "=", self.opts["conum"])], last=99)
+                w = callModule(self.opts["mf"], self.df, "bc1040",
+                    coy=(self.opts["conum"], self.opts["conam"]), args=w,
+                    ret="ctype")
+                self.df.loadEntry(frt, pag, p, data=w)
         self.typ = self.sql.getRec(tables="bwltyp", where=[("bct_cono", "=",
             self.opts["conum"]), ("bct_code", "=", w)], limit=1)
         if not self.typ:
@@ -183,7 +191,7 @@
             self.df.loadEntry(frt, pag, p, data=cod)
         else:
             cod = w
-        if not cod in self.skips:
+        if cod not in self.skips:
             self.skips.append(cod)
         self.scod = cod
         chk = self.sql.getRec(tables="bwltab", cols=["btb_surname",
@@ -202,7 +210,7 @@
             self.df.loadEntry(frt, pag, p+3, data=ent[1])
         else:
             self.newent = True
-        if not self.cfmat == "X":
+        if self.cfmat != "X":
             self.tcod = ""
             return "sk2"
 
@@ -310,6 +318,8 @@
                     self.sql.delRec("bwlgme", where=[("bcg_cono", "=",
                         self.opts["conum"]), ("bcg_ccod", "=", self.ccod)])
                     if self.cfmat in ("D", "K"):
+                        self.sql.delRec("bwltms", where=[("btd_cono", "=",
+                            self.opts["conum"]), ("btd_ccod", "=", self.ccod)])
                         self.sql.delRec("bwlrnd", where=[("bcr_cono", "=",
                             self.opts["conum"]), ("bcr_ccod", "=", self.ccod)])
                     if self.cfmat in ("T", "X"):

=== modified file 'bwl/bc2050.py'
--- bwl/bc2050.py	2017-03-25 15:17:51 +0000
+++ bwl/bc2050.py	2017-07-24 08:23:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Draw and Score Cards.
@@ -15,6 +13,12 @@
     Number of Rounds            = X
     Number of First Round Games = N - (P / 2)
 
+    Formulas for Round Robin Tournaments:
+
+    N = Number of entries.
+
+    Number of games             = (N x (N - 1)) / 2
+
     This file is part of Tartan Systems (TARTAN).
 
 AUTHOR
@@ -26,8 +30,8 @@
 
 import copy, random, time
 from operator import itemgetter
-from TartanClasses import CCD, DrawForm, GetCtl, MyFpdf, RepPrt, SplashScreen
-from TartanClasses import Sql, TartanDialog
+from TartanClasses import CCD, DrawForm, GetCtl, MyFpdf, ProgressBar, RepPrt
+from TartanClasses import SplashScreen, Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, doPrinter, doWriteExport
 from tartanFunctions import getModName, getGreens, getSingleRecords, copyList
 from tartanFunctions import showError, showWarning
@@ -52,6 +56,7 @@
         self.mstart = bwlctl["ctb_mstart"]
         self.fstart = bwlctl["ctb_fstart"]
         self.nstart = bwlctl["ctb_nstart"]
+        self.fromad = bwlctl["ctb_emadd"]
         t = time.localtime()
         self.today = ((t[0] * 10000) + (t[1] * 100) + t[2])
         self.game = 0
@@ -153,10 +158,10 @@
                 showError(self.opts["mf"].body, "Mismatch",
                     "There is an Odd Number of Entries (%s)" % len(teams))
                 return "rf"
-            self.totskp = len(teams) / self.tsize
+            self.totskp = int(len(teams) / self.tsize)
         else:
             self.totskp = len(teams)
-        if self.totskp % 2 and not self.cfmat in ("D", "K", "R"):
+        if self.totskp % 2 and self.cfmat in ("T", "X"):
             showError(self.opts["mf"].body, "Mismatch",
                 "There is an Uneven Number of Teams (%s)" % self.totskp)
             return "rf"
@@ -271,28 +276,28 @@
             else:
                 wom += 1
         tabs = sorted(tabs, key=itemgetter(2, 3))
-        qty = len(teams) / self.tsize
+        qty = int(len(teams) / self.tsize)
         skips = []
-        for _ in range(qty):
+        for _ in xrange(qty):
             skips.append(tabs.pop())
         if self.tsize == 3:
             seconds = []
-            for _ in range(qty):
+            for _ in xrange(qty):
                 seconds.append(tabs.pop())
         leads = []
-        for _ in range(qty):
+        for _ in xrange(qty):
             leads.append(tabs.pop())
         if men and wom:
-            qm = (men / qty)
+            qm = int(men / qty)
             if men % qty:
                 qm += 1
-            qw = (wom / qty)
+            qw = int(wom / qty)
             if wom % qty:
                 qw += 1
             count = 50000
         else:
             count = 1
-        for num in range(count):
+        for num in xrange(count):
             team = []
             redraw = False
             self.teams = {}
@@ -308,7 +313,7 @@
             elif not num or num % self.tsize == 1:
                 random.shuffle(leads)
             ld = copyList(leads)
-            for _ in range(qty):
+            for _ in xrange(qty):
                 skp = sk.pop()
                 team.append([skp[0]])
                 if self.tsize == 2:
@@ -340,15 +345,15 @@
         return team
 
     def doGamNum(self, frt, pag, r, c, p, i, w):
-        if w > self.game:
-            return "Invalid Game Number, Previous Games Unfinished"
         chk = self.sql.getRec(tables="bwlgme", cols=["bcg_game", "bcg_type",
             "bcg_date", "sum(bcg_ocod)"], where=[("bcg_cono", "=",
             self.opts["conum"]), ("bcg_ccod", "=", self.ccod), ("bcg_game",
             "=", w), ("bcg_aflag", "in", ("", "D"))],
             group="bcg_game, bcg_type, bcg_date", limit=1)
         if not chk:
-            return "Invalid Game Number, Missing, Skipped or Abandoned"
+            return "Invalid Game, Missing, Skipped or Abandoned"
+        if w > self.game and chk[1] in ("", "S"):
+            return "Invalid Game Number, Previous Games Unfinished"
         if not self.reprint and chk[3]:
             ok = askQuestion(self.opts["mf"].body, "Games Drawn",
                 "This Games is Already Drawn, Do You Want to Reprint?",
@@ -357,9 +362,9 @@
                 self.reprint = True
             else:
                 return "rf"
+        self.game = chk[0]
+        self.gtyp = chk[1]
         if self.reprint:
-            self.game = chk[0]
-            self.gtyp = chk[1]
             self.date = chk[2]
             self.datd = CCD(self.date, "D1", 10).disp
             self.df.loadEntry(frt, pag, p+1, data=self.date)
@@ -405,7 +410,8 @@
         self.grpsml = w
 
     def doGreens(self, frt, pag, r, c, p, i, w):
-        self.greens, self.first, self.endrks, err = getGreens(w, self.totskp/2)
+        self.greens, self.first, self.endrks, err = getGreens(
+            w, int(self.totskp / 2))
         if err:
             return err
         grns = w.split(",")
@@ -415,14 +421,14 @@
                 setattr(self, "gr%s" % x, grns[x-1][0])
             else:
                 setattr(self, "gr%s" % x, "")
-        if self.groups == "N" or not self.game == self.games:
+        if self.groups == "N" or self.game != self.games:
             self.grpgrn = "N"
             self.df.loadEntry(frt, pag, p+1, data=self.grpgrn)
             return "sk1"
         grps = self.sql.getRec(tables="bwlgme", cols=["bcg_group"],
             where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
             self.ccod), ("bcg_game", "=", self.game)], group="bcg_group")
-        if not len(grps) == len(grns):
+        if len(grps) != len(grns):
             self.grpgrn = "N"
             self.df.loadEntry(frt, pag, p+1, data=self.grpgrn)
             return "sk1"
@@ -455,19 +461,6 @@
     def doEnd(self):
         if not self.drawall:
             self.df.closeProcess()
-        if not self.reprint:
-            if not self.pairSkips():
-                self.opts["mf"].closeLoop()
-                self.doExit()
-                return
-            if self.game == self.games and self.grpgrn == "Y":
-                self.allocateRinks(final=True)
-            else:
-                for x in xrange(100):
-                    if x == 99:
-                        self.allocateRinks(final=True)
-                    elif self.allocateRinks(final=False):
-                        break
         if self.cfmat in ("D", "K"):
             self.printKnockout()
             if self.cfmat == "D":
@@ -476,6 +469,36 @@
                 self.opts["mf"].dbm.commitDbase(ask=True)
             self.opts["mf"].closeLoop()
             return
+        if not self.reprint:
+            if self.cfmat == "T" and self.gtyp == "D":
+                repeat = 500
+            else:
+                repeat = 1
+            self.best = [999, {}]
+            self.check = int(
+                (self.game * len(self.endrks)) / int(self.totskp / 2))
+            if (self.game * len(self.endrks)) % int(self.totskp / 2):
+                self.check += 1
+            text = "Allocating Rinks, Please Wait"
+            pb = ProgressBar(self.opts["mf"].body, typ=("G", text))
+            for x in xrange(repeat):
+                pb.displayProgress()
+                if not self.pairSkips():
+                    self.opts["mf"].closeLoop()
+                    self.doExit()
+                    return
+                if self.cfmat == "T" and self.gtyp == "D":
+                    if self.allocateRinks(final=False):
+                        break
+                    elif x == int(repeat - 1):
+                        self.allocateRinks(final=True)
+                else:
+                    self.allocateRinks(final=True)
+            pb.closeProgress()
+            if self.best[0]:
+                showWarning(self.opts["mf"].body, "End Rinks",
+                    "There are Some End Rink Anomalies, Please Print a Draw "\
+                    "Summary Sheet and, if required, Change the Draw Manually.")
         if self.reprint and self.prtcards == "O":
             pass
         else:
@@ -492,7 +515,8 @@
                 if ok == "yes":
                     callModule(self.opts["mf"], None, "bc3090",
                         coy=[self.opts["conum"], self.opts["conam"]],
-                        args=[self.ccod, self.df.repprt, self.df.repeml])
+                        args=[self.ccod, self.igend, self.df.repprt,
+                            self.df.repeml])
             if not self.drawall:
                 self.opts["mf"].dbm.commitDbase(ask=True, rback=False)
         if self.prtcards in ("Y", "O"):
@@ -544,7 +568,7 @@
                     for opp in opps:
                         teams[tcod][scod].append(opp[0])
                 chk = (len(teams["H"]), len(teams["V"]))
-                if not chk[0] == chk[1]:
+                if chk[0] != chk[1]:
                     showError(self.opts["mf"].body, "Mismatch",
                         """There is an Uneven Number of Skips per Team:
 
@@ -554,13 +578,13 @@
                 chk = True
                 while chk:
                     pair = []
-                    home = teams["H"].keys()
-                    away = teams["V"].keys()
+                    home = list(teams["H"].keys())
+                    away = list(teams["V"].keys())
                     random.shuffle(home)
                     random.shuffle(away)
                     for skp in home:
                         for opp in away:
-                            if not opp in teams["H"][skp] and not opp in pair:
+                            if opp not in teams["H"][skp] and opp not in pair:
                                 pair.extend([skp, opp])
                                 break
                     if len(pair) == len(ents):
@@ -606,7 +630,7 @@
                 # Check for pair clashes in all drawn games
                 for x in xrange(0, len(self.skips), 2):
                     one = self.skips[x]
-                    two = self.skips[x+1]
+                    two = self.skips[x + 1]
                     chk = self.sql.getRec(tables="bwlgme", where=[("bcg_cono",
                         "=", self.opts["conum"]), ("bcg_ccod", "=", self.ccod),
                         ("bcg_scod", "=", one), ("bcg_type", "=", "D"),
@@ -617,18 +641,23 @@
         # Strength versus Strength
         if self.grpsel:
             # Allocate Into Groups
-            chk = self.sql.getRec(tables="bwlgme", cols=["bcg_scod",
+            col = [
+                "bcg_scod",
                 "sum(bcg_points) as pts",
                 "sum(bcg_shots_for - bcg_shots_agt) as diff",
-                "sum(bcg_shots_agt) as agt"],
-                where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
-                self.ccod)], group="bcg_scod",
-                order="pts desc, diff desc, agt asc")
+                "sum(bcg_shots_agt) as agt"]
+            whr = [
+                ("bcg_cono", "=", self.opts["conum"]),
+                ("bcg_ccod", "=", self.ccod)]
+            grp = "bcg_scod"
+            odr = "pts desc, diff desc, agt asc"
+            chk = self.sql.getRec(tables="bwlgme", cols=col, where=whr,
+                group=grp, order=odr)
             totskp = len(chk)
             grpcnt = self.grpnum
             start = 0
             for grpcod in xrange(1, grpcnt + 1):
-                qty = totskp / grpcnt
+                qty = int(totskp / grpcnt)
                 if totskp % grpcnt:
                     if grpcod == 1 and self.grpsml == "F":
                         qty -= 1
@@ -641,8 +670,8 @@
                 for skp in xrange(start, start + qty):
                     self.sql.updRec("bwlgme", cols=["bcg_group"],
                         data=[grpcod], where=[("bcg_cono", "=",
-                        self.opts["conum"]), ("bcg_ccod", "=", self.ccod),
-                        ("bcg_scod", "=", chk[skp][0])])
+                        self.opts["conum"]), ("bcg_ccod", "=",
+                        self.ccod), ("bcg_scod", "=", chk[skp][0])])
                 start += qty
         groups = self.sql.getRec(tables="bwlgme", cols=["bcg_group"],
             where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
@@ -659,7 +688,7 @@
             if self.strict == "Y" or self.game == self.games:
                 # Last game, straight Strength versus Strength
                 for x in xrange(0, len(chk), 2):
-                    self.skips.extend([chk[x][0], chk[x+1][0]])
+                    self.skips.extend([chk[x][0], chk[x + 1][0]])
                 continue
             fini = False
             self.lock = []
@@ -701,13 +730,13 @@
                     break
         if not err:
             for x in xrange(0, len(dun), 2):
-                self.skips.extend([dun[x], dun[x+1]])
+                self.skips.extend([dun[x], dun[x + 1]])
         return err
 
     def doClash(self, chk, err):
         for x in xrange(len(chk), 0, -1):
             s = chk[x - 1]
-            if not s[0] == err and not s[0] in self.lock and not \
+            if s[0] != err and s[0] not in self.lock and not \
                                     self.checkSkip(err, s[0]):
                 self.lock.extend([err, s[0]])
                 break
@@ -718,15 +747,14 @@
             "=", one), ("bcg_ocod", "=", two), ("bcg_game", "<", self.game)])
 
     def allocateRinks(self, final=False):
-        if self.cfmat in ("D", "K"):
-            return
         allrnk = []
         for grn in self.greens:
             for rnk in self.greens[grn]:
                 allrnk.append("%s%s" % (grn, rnk))
         skpdic = {}
-        if self.cfmat == "T" and self.game == self.games:
+        if self.cfmat == "T" and self.gtyp == "S" and self.game == self.games:
             # If Final, Allocate First Green to Leaders or Green per Group
+            self.igend = "Y"
             groups = self.sql.getRec(tables="bwlgme", cols=["bcg_group"],
                 where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
                 self.ccod), ("bcg_group", "<>", 0)], group="bcg_group")
@@ -736,7 +764,7 @@
             end = len(self.greens[self.first])  # Last rink of first green
             for x in xrange(0, len(self.skips), 2):
                 one = self.skips[x]
-                two = self.skips[x+1]
+                two = self.skips[x + 1]
                 grp = self.sql.getRec(tables="bwlgme", cols=["bcg_group"],
                     where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
                     "=", self.ccod), ("bcg_scod", "=", one), ("bcg_game", "=",
@@ -772,71 +800,186 @@
                         if cnt == end:
                             break
                 pos += 1
-        # Allocate Balance of Rinks to End Rinkers
-        for y in xrange(0, len(self.skips), 2):
-            one = self.skips[y]
-            if one in skpdic:
-                continue
-            two = self.skips[y+1]
-            if not self.checkEnds(one, two):
-                continue
-            random.shuffle(allrnk)
-            done = False
-            for rk in allrnk:
-                s, e = (self.greens[rk[0]][0], self.greens[rk[0]][-1])
-                if rk[1] in (str(s), str(e)):
-                    continue
-                if not self.checkRink(one, two, rk):
-                    skpdic[one] = (two, rk)
-                    allrnk.remove(rk)
-                    done = True
-                    break
-            if not done:
-                if not final:
-                    return
-                skpdic[one] = (two, allrnk.pop())
-        # Allocate Balance of Rinks to Rest
-        for x in xrange(100):
+        else:
+            self.igend = "N"
+        # Allocate Balance of Rinks to End Rinkers First and then Others
+        if self.cfmat == "T" and self.gtyp == "D":
+            repeat = 10
+        else:
+            repeat = 100
+        for _ in xrange(repeat):
+            err = 0
             again = False
-            cpydic = copy.copy(skpdic)
-            cpyrnk = copy.copy(allrnk)
+            cpydic = copyList(skpdic)
+            cpyrnk = copyList(allrnk)
             for y in xrange(0, len(self.skips), 2):
                 one = self.skips[y]
                 if one in cpydic:
                     continue
-                two = self.skips[y+1]
+                two = self.skips[y + 1]
+                # Check if bye
                 if one > 900000 or two > 900000:
                     cpydic[one] = (two, "BY")
                     continue
+                # Check if end rinker
+                if self.checkEnds(one, two):
+                    endr = True
+                else:
+                    endr = False
                 random.shuffle(cpyrnk)
                 done = False
                 for rk in cpyrnk:
+                    if endr and rk in self.endrks:
+                        # Skip end rinks
+                        continue
+                    # Check for repeat rinks
                     if not self.checkRink(one, two, rk):
                         cpydic[one] = (two, rk)
                         cpyrnk.remove(rk)
                         done = True
                         break
+                # Check if available rink found
                 if not done:
+                    err += 1
                     again = True
-                    random.shuffle(cpyrnk)
-                    cpydic[one] = (two, cpyrnk.pop())
-            if x < 99 and not again:
+                    fixed = False
+                    for rk in cpyrnk:
+                        # Check for repeat rinks
+                        if not self.checkRink(one, two, rk):
+                            cpydic[one] = (two, rk)
+                            cpyrnk.remove(rk)
+                            fixed = True
+                            break
+                    if not fixed:
+                        err += 9
+            if err < self.best[0]:
+                self.best = [err, copyList(cpydic)]
+            if not again:
                 break
-        skpdic = cpydic
+        if again and not final:
+            return
+        if self.best[0] < 999:
+            skpdic = copyList(self.best[1])
+        else:
+            skpdic = copyList(cpydic)
         # Update Tables with Opponents and Rinks
         col = ["bcg_date", "bcg_ocod", "bcg_rink"]
+        whr = [
+            ("bcg_cono", "=", self.opts["conum"]),
+            ("bcg_ccod", "=", self.ccod)]
+        skps = []
         for one in skpdic:
             two, rnk = skpdic[one]
-            self.sql.updRec("bwlgme", cols=col, data=[self.date, two, rnk],
-                where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
-                self.ccod), ("bcg_scod", "=", one), ("bcg_game", "=",
-                self.game)])
-            self.sql.updRec("bwlgme", cols=col, data=[self.date, one, rnk],
-                where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
-                self.ccod), ("bcg_scod", "=", two), ("bcg_game", "=",
-                self.game)])
-        # Adjust scores
+            skps.append([one, two, rnk])
+            skps.append([two, one, rnk])
+            d = [self.date, two, rnk]
+            w = whr[:]
+            w.extend([("bcg_scod", "=", one), ("bcg_game", "=", self.game)])
+            self.sql.updRec("bwlgme", cols=col, data=d, where=w)
+            d = [self.date, one, rnk]
+            w = whr[:]
+            w.extend([("bcg_scod", "=", two), ("bcg_game", "=", self.game)])
+            self.sql.updRec("bwlgme", cols=col, data=d, where=w)
+        if self.gtyp == "D" and self.best[0]:
+            # Check for drawn game anomalies and attempt to fix them
+            low = []
+            big = []
+            for skp in skps:
+                sk, op, rk = skp
+                w = whr[:]
+                w.append(("bcg_scod", "=", sk))
+                w.append(("bcg_rink", "in", self.endrks))
+                one = self.sql.getRec(tables="bwlgme", cols=["count(*)"],
+                    where=w, limit=1)[0]
+                if one < self.check:
+                    low.append(skp)
+                elif one > self.check:
+                    big.append(skp)
+            if low and big:
+                chg = []
+                new = []
+                rnk = []
+                skp = False
+                for n, b in enumerate(big):
+                    if skp:
+                        skp = False
+                        continue
+                    if not n == (len(big) - 1) and big[n + 1][2] == b[2] and \
+                            len(low) > 1:
+                        ok = False
+                        for l in low:
+                            for m in low:
+                                if m == l:
+                                    continue
+                                if not self.checkSkip(l[0], m[0]):
+                                    ok = True
+                                    break
+                            if ok:
+                                break
+                        if not ok:
+                            continue
+                        if not self.checkSkip(b[0], l[1]) and \
+                                not self.checkSkip(b[1], m[1]):
+                            if not self.checkRink(b[0], l[1], l[2]) and \
+                                    not self.checkRink(b[1], m[1], m[2]):
+                                chg.append([b[0], l[1], l[2]])
+                                chg.append([b[1], m[1], m[2]])
+                            elif not self.checkRink(b[0], l[1], m[2]) and \
+                                    not self.checkRink(b[1], m[1], l[2]):
+                                chg.append([b[0], l[1], m[2]])
+                                chg.append([b[1], m[1], l[2]])
+                            else:
+                                ok = False
+                        elif not self.checkSkip(b[0], m[1]) and \
+                                not self.checkSkip(b[1], l[1]):
+                            if not self.checkRink(b[0], m[1], m[2]) and \
+                                    not self.checkRink(b[1], l[1], l[2]):
+                                chg.append([b[0], m[1], m[2]])
+                                chg.append([b[1], l[1], l[2]])
+                            elif not self.checkRink(b[0], m[1], l[2]) and \
+                                    not self.checkRink(b[1], l[1], m[2]):
+                                chg.append([b[0], m[1], l[2]])
+                                chg.append([b[1], l[1], m[2]])
+                            else:
+                                ok = False
+                        else:
+                            ok = False
+                        if not ok:
+                            skp = True
+                            continue
+                        chg.append([l[0], m[0], b[2]])
+                        chg.append([m[0], l[0], b[2]])
+                        low.remove(l)
+                        low.remove(m)
+                        skp = True
+                        continue
+                    for l in low:
+                        if not self.checkSkip(b[0], l[1]) and \
+                                not self.checkRink(b[0], l[1], l[2]):
+                            chg.append([b[0], l[1], l[2]])
+                            new.extend([l[0], b[1]])
+                            rnk.append(b[2])
+                            low.remove(l)
+                            break
+                while new:
+                    chg.append([new.pop(0), new.pop(0), rnk.pop(0)])
+                for c in chg:
+                    d = [c[1], c[2]]
+                    w = whr[:]
+                    w.extend([
+                        ("bcg_scod", "=", c[0]),
+                        ("bcg_game", "=", self.game)])
+                    self.sql.updRec("bwlgme", cols=col[1:], data=d, where=w)
+                    d = [c[0], c[2]]
+                    w = whr[:]
+                    w.extend([
+                        ("bcg_scod", "=", c[1]),
+                        ("bcg_game", "=", self.game)])
+                    self.sql.updRec("bwlgme", cols=col[1:], data=d, where=w)
+                if not low and not new:
+                    self.best[0] = 0
         if self.adjust == "Y":
+            # Adjust scores
             chk = self.sql.getRec(tables="bwlgme", where=[("bcg_cono", "=",
                 self.opts["conum"]), ("bcg_ccod", "=", self.ccod),
                 ("bcg_group", ">", 1)], order="bcg_game")
@@ -862,24 +1005,40 @@
         return True
 
     def checkEnds(self, one, two):
-        check = (self.games * self.endrks) / (self.totskp / 2)
-        if (self.games * self.endrks) % (self.totskp / 2):
-            check += 1
+        # Return whether either skip has played on an end rink more than check
         for sk in (one, two):
             ends = 0
             rnks = self.sql.getRec(tables="bwlgme", cols=["bcg_rink"],
                 where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
                 self.ccod), ("bcg_scod", "=", sk), ("bcg_rink", "<>", "")])
             for rk in rnks:
-                if rk[0][1] in ("1", "6", "7"):
+                if rk[0] in self.endrks:
                     ends += 1
-            if ends >= check:
+            if ends >= self.check:
                 return True
 
     def checkRink(self, one, two, rnk):
         return self.sql.getRec(tables="bwlgme", where=[("bcg_cono", "=",
-            self.opts["conum"]), ("bcg_ccod", "=", self.ccod), ("bcg_scod",
-            "in", (one, two)), ("bcg_rink", "=", rnk)])
+            self.opts["conum"]), ("bcg_ccod", "=", self.ccod),
+            ("bcg_scod", "in", (one, two)), ("bcg_game", "<", self.game),
+            ("bcg_rink", "=", rnk)])
+
+    def getRate(self, skp, opp, rnk):
+        dup = self.sql.getRec(tables="bwlgme", cols=["count(*)"],
+            where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
+            "=", self.ccod), ("bcg_scod", "=", skp), ("bcg_ocod",
+            "=", opp)], limit=1)[0] + 1
+        rnk = self.sql.getRec(tables="bwlgme", cols=["count(*)"],
+            where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
+            "=", self.ccod), ("bcg_scod", "=", skp), ("bcg_rink",
+            "=", rnk)], limit=1)[0] + 1
+        eds = self.sql.getRec(tables="bwlgme", cols=["count(*)"],
+            where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
+            "=", self.ccod), ("bcg_scod", "=", skp), ("bcg_rink",
+            "in", self.endrks)], limit=1)[0]
+        if rnk in self.endrks:
+            eds += 1
+        return (skp + dup + rnk + eds)
 
     def printTeams(self):
         def getNames(mem):
@@ -887,7 +1046,7 @@
                 "btb_names"], where=[("btb_cono", "=", self.opts["conum"]),
                 ("btb_tab", "=", mem[0])], limit=1)
             if rec[1]:
-                return "%s, %s (%s)" % (rec[0], rec[1].split()[0][0], mem[1])
+                return "%s, %s" % (rec[0], rec[1])
             else:
                 return rec[0]
         if self.reprint:
@@ -906,7 +1065,9 @@
                     self.teams[rec[2]].append([mem] + tab)
         if not self.teams:
             return
-        head = [(self.opts["conam"], 14), ("Teams for %s" % self.cdes, 12)]
+        head = [
+            (self.opts["conam"], 18, "C"),
+            ("Teams for %s" % self.cdes, 16, "C")]
         cols = [
             ["a", "NA", 25, "Skip", "y"]]
         if self.tsize == 3:
@@ -927,7 +1088,8 @@
                     sql.append(0)
                 self.sql.insRec("bwltms", data=sql)
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
-            cols=cols, ttype="D", repprt=self.df.repprt, repeml=self.df.repeml)
+            cols=cols, ttype="D", repprt=self.df.repprt,
+            repeml=self.df.repeml, fromad=self.fromad)
 
     def printKnockout(self):
         pwrs = 2
@@ -936,8 +1098,8 @@
             self.rnds += 1
             pwrs = pwrs * 2
         self.byes = pwrs - self.totskp
-        self.frg = self.totskp - (pwrs / 2)
-        self.prs = (self.frg + self.byes) / 4
+        self.frg = self.totskp - int(pwrs / 2)
+        self.prs = int((self.frg + self.byes) / 4)
         self.quit = False
         self.doCompletionDates()
         if self.quit:
@@ -1006,15 +1168,15 @@
                 else:
                     grp = 1
                 grps[grp-1] += 1
-                sgrps[grp-1].append(self.seeds[num+1])
+                sgrps[grp-1].append(self.seeds[num + 1])
                 self.sql.updRec("bwlgme", cols=["bcg_group"], data=[grp],
                     where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
-                    "=", self.ccod), ("bcg_scod", "=", self.seeds[num+1])])
+                    "=", self.ccod), ("bcg_scod", "=", self.seeds[num + 1])])
             # Allocate balance of players to groups
             chk = self.sql.getRec(tables="bwlgme", cols=["bcg_scod"],
-                where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
-                self.ccod), ("bcg_game", "=", self.game), ("bcg_group",
-                "=", 0)], order="bcg_scod")
+                where=[("bcg_cono", "=", self.opts["conum"]),
+                ("bcg_ccod", "=", self.ccod), ("bcg_game", "=", self.game),
+                ("bcg_group", "=", 0)], order="bcg_scod")
             skips = []
             for c in chk:
                 skips.append(c[0])
@@ -1055,7 +1217,7 @@
                     temp.append(c[0])
                 random.shuffle(temp)
                 for p1 in self.seeds:
-                    if not p1 in temp:
+                    if p1 not in temp:
                         continue
                     for x in xrange(len(temp)):
                         if temp[x] in self.seeds:
@@ -1094,7 +1256,7 @@
                         p1 = [1, 3, 4, 2]
                     elif self.prs == 8:
                         p1 = [1, 5, 7, 3, 4, 8, 6, 2]
-                    tot = len(skips) / self.prs
+                    tot = int(len(skips) / self.prs)
                     p2 = [tot] * self.prs
                     if len(skips) % self.prs:
                         p2[0] += 1
@@ -1103,7 +1265,7 @@
                             if skips[num][0] == seed:
                                 pos = p1.pop(0)
                                 self.sql.updRec("bwlgme", cols=["bcg_seed",
-                                    "bcg_pair"], data=[sd+1, pos],
+                                    "bcg_pair"], data=[sd + 1, pos],
                                     where=[("bcg_cono", "=",
                                     self.opts["conum"]), ("bcg_ccod", "=",
                                     self.ccod), ("bcg_scod", "=",
@@ -1117,7 +1279,7 @@
                         for n, p in enumerate(p2):
                             if p:
                                 self.sql.updRec("bwlgme", cols=["bcg_seed",
-                                    "bcg_pair"], data=[0, n+1],
+                                    "bcg_pair"], data=[0, n + 1],
                                     where=[("bcg_cono", "=",
                                     self.opts["conum"]), ("bcg_ccod", "=",
                                     self.ccod), ("bcg_scod", "=",
@@ -1148,8 +1310,8 @@
             self.fpdf.output(pdfnam, "F")
             head = "%s Draw" % self.cdes
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                head=head, pdfnam=pdfnam, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                header=head, pdfnam=pdfnam, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doCompletionDates(self):
@@ -1225,7 +1387,7 @@
             self.sql.delRec("bwlrnd", where=[("bcr_cono", "=",
                 self.opts["conum"]), ("bcr_ccod", "=", self.ccod)])
         dat = copyList(self.cd.t_work[0][0][1:])
-        for rnd in range(0, len(dat), 2):
+        for rnd in xrange(0, len(dat), 2):
             if not dat[rnd]:
                 dte = 99991231
                 tim = 0
@@ -1235,7 +1397,7 @@
             self.cdates.append(CCD(dte, "D1", 10).disp)
             self.ctimes.append(CCD(tim, "TM", 5).disp)
             self.sql.insRec("bwlrnd", data=[self.opts["conum"],
-                self.ccod, rnd+1, dte, tim])
+                self.ccod, rnd + 1, dte, tim])
         if self.reprint:
             self.opts["mf"].dbm.commitDbase()
         self.opts["mf"].closeLoop()
@@ -1338,35 +1500,35 @@
         for x in xrange(self.seednum):
             if ((x * 2) + 1) == p:
                 continue
-            if self.sp.t_work[0][0][x*2+1]:
-                seeds.append(self.sp.t_work[0][0][x*2+1])
+            if self.sp.t_work[0][0][x * 2 + 1]:
+                seeds.append(self.sp.t_work[0][0][x * 2 + 1])
         if w in seeds:
             return "Invalid Seed, Already Seeded"
         nam = chk[0].strip()
         if chk[1]:
             nam = "%s, %s" % (nam, chk[1][0])
         self.sp.loadEntry(frt, pag, p+1, data=nam)
-        if ((p + 1) / 2) == self.seednum:
+        if int((p + 1) / 2) == self.seednum:
             return "nd"
 
     def hideSeeds(self):
         for x in xrange(1, 32, 2):
             self.sp.setWidget(self.sp.topLabel[0][x], state="hide")
             self.sp.setWidget(self.sp.topEntry[0][x], state="hide")
-            self.sp.setWidget(self.sp.topEntry[0][x+1], state="hide")
+            self.sp.setWidget(self.sp.topEntry[0][x + 1], state="hide")
 
     def showSeeds(self):
         self.hideSeeds()
         for x in xrange(1, (self.seednum * 2), 2):
             self.sp.setWidget(self.sp.topLabel[0][x], state="show")
             self.sp.setWidget(self.sp.topEntry[0][x], state="show")
-            self.sp.setWidget(self.sp.topEntry[0][x+1], state="show")
+            self.sp.setWidget(self.sp.topEntry[0][x + 1], state="show")
 
     def doSeedEnd(self):
         self.sp.closeProcess()
         self.seeds = []
         for x in xrange(self.seednum):
-            self.seeds.append(self.sp.t_work[0][0][x*2+1])
+            self.seeds.append(self.sp.t_work[0][0][x * 2 + 1])
         self.opts["mf"].closeLoop()
 
     def doSeedsQuit(self, widget=None):
@@ -1408,42 +1570,42 @@
             x = self.fpdf.get_x()
             y = self.fpdf.get_y()
             if skip[1] > 900000:
-                self.fpdf.drawText("", w=(cwth*nm))
+                self.fpdf.drawText("", w=(cwth * nm))
             else:
-                self.fpdf.drawText(self.getSkip(skip[0], skip[2]), w=(cwth*nm),
-                    border="TLRB")
-                self.drawLink(cwth,l1,l2, x+(cwth*nm), y+(chgt/2),
-                    y+(chgt*1.5))
+                self.fpdf.drawText(self.getSkip(skip[0], skip[2]),
+                    w=(cwth * nm), border="TLRB")
+                self.drawLink(cwth, l1, l2, x + (cwth * nm), y + int(chgt / 2),
+                    y + (chgt * 1.5))
             x = self.fpdf.get_x()
             y = self.fpdf.get_y()
             if skip[1] > 900000:
-                self.fpdf.drawText(self.getSkip(skip[0], skip[2]), x+(cwth*n2),
-                    w=(cwth*nm), border="TLRB")
+                self.fpdf.drawText(self.getSkip(skip[0], skip[2]),
+                    x * (cwth * n2), w=(cwth * nm), border="TLRB")
             else:
-                self.fpdf.drawText(self.getWinner(rd, grp, skip), x+(cwth*n2),
-                    w=(cwth*nm), border="LRB")
+                self.fpdf.drawText(self.getWinner(rd, grp, skip),
+                    x + (cwth * n2), w=(cwth * nm), border="LRB")
             if not last or last == "up":
-                self.drawLink(cwth,l1,l2, x+(cwth*nx), y+(chgt/2),
-                    y+(chgt*2.5))
-                rnds.append([x+(cwth*nx), y+(chgt*2)])
+                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + int(chgt / 2),
+                    y + (chgt * 2.5))
+                rnds.append([x+(cwth * nx), y + (chgt * 2)])
                 last = "down"
             else:
-                self.drawLink(cwth,l1,l2, x+(cwth*nx), y+(chgt/2),
-                    y-(chgt*1.5))
+                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + int(chgt / 2),
+                    y - (chgt * 1.5))
                 if self.rnds == 2:
-                    rnds.append([x+(cwth*nx), y+(chgt*2)])
+                    rnds.append([x + (cwth * nx), y + (chgt * 2)])
                 last = "up"
             x = self.fpdf.get_x()
             y = self.fpdf.get_y()
             if skip[1] > 900000:
-                self.fpdf.drawText("", w=(cwth*nm))
+                self.fpdf.drawText("", w=(cwth * nm))
             else:
-                self.fpdf.drawText(self.getSkip(skip[1], 0), w=(cwth*nm),
+                self.fpdf.drawText(self.getSkip(skip[1], 0), w=(cwth * nm),
                     border="TLRB")
-                self.fpdf.line(x+(cwth*nm), y+(chgt/2), x+(cwth*n1),
-                    y+(chgt/2))
-                self.fpdf.line(x+(cwth*n1), y+(chgt/2), x+(cwth*n1),
-                    y-(chgt/2))
+                self.fpdf.line(x + (cwth * nm), y + int(chgt / 2),
+                    x + (cwth * n1), y + int(chgt / 2))
+                self.fpdf.line(x + (cwth * n1), y + int(chgt / 2),
+                    x + (cwth * n1), y - int(chgt / 2))
             self.fpdf.drawText("")
             lasty = self.fpdf.get_y()
         inc = 4
@@ -1453,18 +1615,20 @@
             for rnd in xrange(0, len(rnds), 2):
                 x = rnds[rnd][0]
                 y = rnds[rnd][1]
-                self.fpdf.drawText(self.getWinner(rd, grp, 0, rnd+1),
-                    x+(cwth*(l1+l2)), y, w=(cwth*nm),
+                self.fpdf.drawText(self.getWinner(rd, grp, 0, rnd + 1),
+                    x + (cwth * (l1 + l2)), y, w=(cwth * nm),
                     border="LRB")
                 inc1 = inc + .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc1))
-                bb.append([x+(cwth*n2), y+(chgt*(4 * (aa + 1)))])
-                x = rnds[rnd+1][0]
-                y = rnds[rnd+1][1]
-                self.fpdf.drawText(self.getWinner(rd, grp, 0, rnd+2),
-                    x+(cwth*(l1+l2)), y, w=(cwth*nm), border="LRB")
+                self.drawLink(cwth, l1, l2, x + (cwth * n2), y + int(chgt / 2),
+                    y + (chgt * inc1))
+                bb.append([x + (cwth * n2), y + (chgt * (4 * (aa + 1)))])
+                x = rnds[rnd + 1][0]
+                y = rnds[rnd + 1][1]
+                self.fpdf.drawText(self.getWinner(rd, grp, 0, rnd + 2),
+                    x + (cwth * (l1 + l2)), y, w=(cwth * nm), border="LRB")
                 inc1 -= 1
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y-(chgt*inc1))
+                self.drawLink(cwth, l1, l2, x + (cwth * n2), y + int(chgt / 2),
+                    y-(chgt * inc1))
             inc = inc * 2
             rnds = bb
         x = rnds[0][0]
@@ -1473,24 +1637,26 @@
             rd += 1
             if grp == 1:
                 self.fpdf.drawText(self.getWinner(rd, grp, 0, 1),
-                    x+(cwth*(l1+l2)), y, w=(cwth*nm), border="LRB")
+                    x + (cwth * (l1 + l2)), y, w=(cwth * nm), border="LRB")
         else:
             rd += 1
             if self.rnds > 5:
-                y += (chgt*4)
+                y += (chgt * 4)
             self.fpdf.drawText(self.getWinner(rd, grp, 0, 1),
-                x+(cwth*(l1+l2)), y, w=(cwth*nm), border="LRB")
+                x + (cwth * (l1 + l2)), y, w=(cwth * nm), border="LRB")
             if grp == 1:
                 inc += .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc))
+                self.drawLink(cwth, l1, l2, x + (cwth * n2), y + int(chgt / 2),
+                    y + (chgt * inc))
             else:
                 rd += 1
-                x1 = x + (cwth*(l1+l2+nm))
-                y1 = y - (chgt*inc)
+                x1 = x + (cwth * (l1 + l2 + nm))
+                y1 = y - (chgt * inc)
                 self.fpdf.drawText(self.getWinner(rd, grp, 0, 1),
-                    x1+(cwth*(l1+l2)), y1, w=(cwth*nm), border="LRB")
+                    x1 + (cwth * (l1 + l2)), y1, w=(cwth * nm), border="LRB")
                 inc = 0 - inc + .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc))
+                self.drawLink(cwth, l1, l2, x + (cwth * n2), y + int(chgt / 2),
+                    y + (chgt * inc))
         if grp == 1 and self.totskp > 32:
             self.fpdf.add_page()
             self.fpdf.drawText()
@@ -1588,7 +1754,7 @@
                         qq = 0
                 elif br:
                     if qq == cc:
-                        self.datas[num][1][rnd+1] = ["", "LRB"]
+                        self.datas[num][1][rnd + 1] = ["", "LRB"]
                     else:
                         self.datas[num][1][rnd] = ["", "R"]
                     qq += 1
@@ -1645,9 +1811,9 @@
         return name
 
     def drawLink(self, cwth, l1, l2, x, y, inc):
-        self.fpdf.line(x, y, x+(cwth*l1), y)
-        self.fpdf.line(x+(cwth*l1), y, x+(cwth*l1), inc)
-        self.fpdf.line(x+(cwth*l1), inc, x+(cwth*(l1+l2)), inc)
+        self.fpdf.line(x, y, x + (cwth * l1), y)
+        self.fpdf.line(x + (cwth * l1), y, x + (cwth * l1), inc)
+        self.fpdf.line(x + (cwth * l1), inc, x + (cwth * (l1 + l2)), inc)
 
     def printGame(self):
         if self.game <= self.grgame:
@@ -1662,6 +1828,7 @@
             ("bcg_game", "=", self.game),
             ("btb_tab=bcg_scod",)]
         self.fpdf = MyFpdf(name=__name__, head=65, foot=True)
+        self.fpdf.lpp = 60
         self.pglin = 999
         lastg = None
         for g in grp:
@@ -1678,7 +1845,7 @@
             for skp in recs:
                 if self.pglin > self.fpdf.lpp:
                     self.pageHeading()
-                if not g[0] == lastg:
+                if g[0] != lastg:
                     if len(recs) > (self.fpdf.lpp - self.pglin - 4):
                         self.pageHeading()
                     self.groupHeading(g[0])
@@ -1717,14 +1884,13 @@
             desc = "%sth" % self.game
         head = "%s Draw for the %s game" % (self.cdes, desc)
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
+            header=head, repprt=self.df.repprt, fromad=self.fromad,
+            repeml=self.df.repeml)
 
     def pageHeading(self, date=False):
         self.fpdf.add_page()
-        self.fpdf.drawText(self.opts["conam"], font=["courier", "B", 16],
-            align="C")
-        self.fpdf.drawText()
-        self.fpdf.drawText(self.cdes, font=["courier", "B", 14], align="C")
+        head = "%s - %s" % (self.opts["conam"], self.cdes)
+        self.fpdf.drawText(head, font=["courier", "B", 18], align="C")
         self.pglin = 1
         if not date:
             return
@@ -1746,8 +1912,8 @@
         x = self.fpdf.get_x()
         y = self.fpdf.get_y()
         for txt in text:
-            self.fpdf.drawText(txt, x=x, y=y, w=(cwth*18), border="TLRB", ln=0,
-                fill=1, align="C", ctyp="M")
+            self.fpdf.drawText(txt, x=x, y=y, w=(cwth * 18), border="TLRB",
+                ln=0, fill=1, align="C", ctyp="M")
             x += (cwth * 19)
         self.fpdf.drawText()
         self.fpdf.drawText()
@@ -1758,7 +1924,7 @@
         if group:
             head += "  Group: %s" % self.grpcod[group]
         head += "  Date: %s" % self.datd
-        self.fpdf.drawText(head, font=["courier", "B", 18])
+        self.fpdf.drawText(head, font=["courier", "B", 18], align="C")
         self.fpdf.drawText()
         self.fpdf.setFont(style="B")
         self.printLine("%-30s" % "Name", " RK ", "%-30s" % "Opposition",
@@ -1768,13 +1934,13 @@
 
     def printLine(self, a, b, c, fill=0):
         x = 10
-        w = self.fpdf.get_string_width("X"*len(a)) + 1
+        w = self.fpdf.get_string_width("X" * len(a)) + 1
         self.fpdf.drawText(a, x=x, w=w, border="TLB", fill=fill, ln=0)
         x += w + 1
-        w = self.fpdf.get_string_width("X"*len(b)) + 1
+        w = self.fpdf.get_string_width("X" * len(b)) + 1
         self.fpdf.drawText(b, x=x, w=w, border="TLB", fill=fill, ln=0)
         x += w + 1
-        w = self.fpdf.get_string_width("X"*len(c)) + 1
+        w = self.fpdf.get_string_width("X" * len(c)) + 1
         self.fpdf.drawText(c, x=x, w=w, border="TLRB", fill=fill)
 
     def printCards(self):

=== modified file 'bwl/bc2060.py'
--- bwl/bc2060.py	2017-02-25 14:03:05 +0000
+++ bwl/bc2060.py	2017-07-24 08:24:32 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Match Cards Maintenance.
@@ -66,7 +64,8 @@
             (("T",0,0,0),"I@bcm_code",0,"","",
                 "","Y",self.doCmpCod,com,None,("notzero",)),
             (("T",0,0,0),"ONA",30,""),
-            (("T",0,1,0),"O@bcg_game",0,"Game Number"),
+            (("T",0,1,0),"I@bcg_game",0,"Game Number","",
+                1,"N",self.doGame,None,None,("efld",)),
             (("T",0,1,0),"I@bcg_date",0,"Date","",
                 self.today,"N",self.doDate,None,None,("efld",)),
             (("T",0,2,0),"IUA",30,"Greens","Greens (A,B,C)",
@@ -96,6 +95,7 @@
         if not com:
             return "Invalid Competition Code"
         name, self.sdat, ctyp = com
+        self.df.loadEntry(frt, pag, p+1, data=name)
         chk = self.sql.getRec(tables="bwltyp", cols=["bct_cfmat"],
             where=[("bct_cono", "=", self.opts["conum"]), ("bct_code", "=",
             ctyp)], limit=1)
@@ -107,44 +107,38 @@
             w)], group="bcg_game, bcg_date, bcg_aflag")
         self.ccod = w
         self.game = 0
-        results = False
-        abandon = False
+        self.draws = {}
+        self.manual = False
         for c in chk:
-            if c[2] == "A":
-                abandon = True
+            if c[2] == "A" or c[4]:
                 continue
             if c[4]:
-                results = True
+                continue
             if c[2] in ("", "D", "S") and c[3]:
-                abandon = False
-                if c[4]:
-                    results = True
-                else:
-                    self.game = c[0]
-                    self.date = c[1]
-                    break
-        if not self.game:
-            if not abandon and not results:
-                ok = askQuestion(self.opts["mf"].body, "Manual Draw",
-                    "Is this the First Game and is it going to be a "\
-                    "Manual Draw?", default="no")
-                if ok == "no":
-                    return "rf"
-            else:
-                return "No Available Draw to Edit"
+                self.draws[c[0]] = c[1:]
+        if not self.draws:
+            ok = askQuestion(self.opts["mf"].body, "Manual Draw",
+                "Is this the First Game and is it going to be a "\
+                "Manual Draw?", default="no")
+            if ok == "no":
+                return "rf"
+            self.manual = True
             self.game = 1
-            manual = True
-        else:
-            manual = False
-        self.df.loadEntry(frt, pag, p+1, data=name)
-        self.df.loadEntry(frt, pag, p+2, data=self.game)
+            self.df.loadEntry(frt, pag, p+2, data=self.game)
+            self.totskp = self.sql.getRec(tables="bwlent", cols=["count(*)"],
+                where=[("bce_cono", "=", self.opts["conum"]), ("bce_ccod", "=",
+                self.ccod)], limit=1)[0]
+            return "sk2"
+
+    def doGame(self, frt, pag, r, c, p, i, w):
+        if w not in self.draws:
+            return "Invalid Game Number"
+        self.game = w
+        self.date = self.draws[w][0]
+        self.df.loadEntry(frt, pag, p+1, data=self.date)
         self.totskp = self.sql.getRec(tables="bwlent", cols=["count(*)"],
             where=[("bce_cono", "=", self.opts["conum"]), ("bce_ccod", "=",
             self.ccod)], limit=1)[0]
-        if manual:
-            return "sk2"
-        self.df.loadEntry(frt, pag, p+3, data=self.date)
-        return "sk3"
 
     def doDate(self, frt, pag, r, c, p, i, w):
         if w < self.today or w < self.sdat:
@@ -163,14 +157,14 @@
                     self.rinks.append("%s%s" % (g[0], x))
                 rinks += 6
             elif len(g) == 2 and g[1] == "7":
-                for x in range(1, 8):
+                for x in xrange(1, 8):
                     self.rinks.append("%s%s" % (g[0], x))
                 rinks += 7
             else:
                 for r in g[1:]:
                     self.rinks.append("%s%s" % (g[0], r))
                     rinks += 1
-        if (self.totskp / 2) > rinks:
+        if int(self.totskp / 2) > rinks:
             return "Not Enough Rinks"
 
     def doSkpCod(self, frt, pag, r, c, p, i, w):
@@ -279,7 +273,7 @@
                     for s in skp:
                         if [s[1], s[0]] not in skps:
                             skps.append(s)
-                    err = "Rink %s Shows %s time(s)\n" % (c[0], c[1] / 2)
+                    err = "Rink %s Shows %s time(s)\n" % (c[0], int(c[1] / 2))
                     for s in skps:
                         err = err + "\nSkip %2s Opp %2s" % (s[0], s[1])
                     rnk = self.sql.getRec(tables="bwlgme", cols=["bcg_rink",

=== modified file 'bwl/bc2070.py'
--- bwl/bc2070.py	2017-03-25 15:17:51 +0000
+++ bwl/bc2070.py	2017-07-24 08:24:43 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Capture Match Results.
@@ -157,7 +155,7 @@
                 ("bcg_ccod", "=", self.ccod), ("bcg_game", "=", w + 1)],
                 group="bcg_aflag")
             for c in chk:
-                if c[0] in ("A", "S") or (not c[0] == "D" and c[1]):
+                if c[0] in ("A", "S") or (c[0] != "D" and c[1]):
                     return "Invalid Game Number, Next Game Already Drawn"
         elif chk[0] in ("A", "S"):
             return "Invalid Game Number, Abandoned or Skipped"
@@ -182,7 +180,7 @@
 
     def doEndsFin(self, frt, pag, r, c, p, i, w):
         self.bonus = self.bpts
-        if not w == self.ends:
+        if w != self.ends:
             if not w:
                 but = (("Exit",1),("Skipped",2),("Abandoned",3))
                 ok = askChoice(self.opts["mf"].body, head="Zero Ends",
@@ -215,7 +213,7 @@
                     self.bonus = "N"
         self.totpts = (w * self.epts) + self.gpts
         if self.skins == "Y":
-            self.totpts = self.totpts + ((w / self.sends) * self.spts)
+            self.totpts = self.totpts + (int(w / self.sends) * self.spts)
         if self.bonus == "Y":
             self.maxpts = float(ASD(self.totpts) + ASD(1))
         else:
@@ -286,7 +284,7 @@
                 self.p_for = 0
                 self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
-            if not self.s_for or (not self.totpts and not self.bonus == "Y"):
+            if not self.s_for or (not self.totpts and self.bonus != "Y"):
                 self.p_for = w
                 self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
@@ -296,7 +294,7 @@
                 self.p_agt = 0
                 self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
-            if not self.s_agt or (not self.totpts and not self.bonus == "Y"):
+            if not self.s_agt or (not self.totpts and self.bonus != "Y"):
                 self.p_agt = w
                 self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
@@ -465,7 +463,7 @@
                         err="Missing Score Card for Skips %s and %s" % (scod,
                         ocod))
                     return
-            if self.cfmat in ("D", "K") and not self.gcod == self.games:
+            if self.cfmat in ("D", "K") and self.gcod != self.games:
                 # Delete Next Round's Records
                 whr = [
                     ("bcg_cono", "=", self.opts["conum"]),
@@ -477,12 +475,12 @@
                 whr.append(("bcg_game", "=", self.gcod))
                 odr = "bcg_group, bcg_pair, bcg_scod"
                 g = self.sql.bwlgme_col
-                for grp in range(1, 3):
+                for grp in xrange(1, 3):
                     w = whr[:]
                     w.append(("bcg_group", "=", grp))
                     recs = self.sql.getRec(tables="bwlgme", where=w, order=odr)
-                    for num in range(0, len(recs), 2):
-                        pair = (num / 2) + 1
+                    for num in xrange(0, len(recs), 2):
+                        pair = int(num / 2) + 1
                         rec1 = copyList(recs[num])
                         if len(recs) == 1:
                             w = whr[:]

=== modified file 'bwl/bc3010.py'
--- bwl/bc3010.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3010.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Random Tabs Draw Re-Print.

=== modified file 'bwl/bc3020.py'
--- bwl/bc3020.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3020.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Tab Draws Summary.
@@ -35,6 +33,7 @@
         if not bwlctl:
             return
         self.nstart = bwlctl["ctb_nstart"]
+        self.fromad = bwlctl["ctb_emadd"]
         t = time.localtime()
         self.sysdt = time.strftime("%d %B %Y %H:%M:%S", t)
         self.curdt = time.strftime("%Y-%m", t)
@@ -79,6 +78,7 @@
         dat = []
         where = [
             ("bdt_cono", "=", self.opts["conum"]),
+            ("bdt_tab", "<", self.nstart),
             ("bdt_flag", "in", ("B", "D"))]
         if self.start.work:
             where.append(("bdt_date", ">=", self.start.work))
@@ -97,8 +97,8 @@
             for r in rec:
                 tab.append(r[1])
             whr.append(("bdt_tab", "in", tab))
-        rec = self.sql.getRec(tables="bwldrt", where=whr,
-            order="bdt_name, bdt_date")
+        odr = "bdt_name, bdt_date"
+        rec = self.sql.getRec(tables="bwldrt", where=whr, order=odr)
         c = self.sql.bwldrt_col
         l = ""
         self.dic = {}
@@ -114,7 +114,7 @@
             self.clash = ""
             side = [["", ""], ["", ""], ["", ""], ["", ""]]
             self.tab = r[c.index("bdt_tab")]
-            if not self.tab in self.dic:
+            if self.tab not in self.dic:
                 self.dic[self.tab] = []
             nam = self.getName(self.tab)
             pos = (0 - (r[c.index("bdt_pos")] - 4))
@@ -123,19 +123,19 @@
                 tm = self.getName(r[c.index("bdt_team%s" % x)])
                 if not tm:
                     continue
-                cl = ""
                 if self.clash:
                     cl = "X"
+                else:
+                    cl = ""
                 pos = (0 - (r[c.index("bdt_pos%s" % x)] - 4))
                 side[pos] = [cl, tm]
-            if not self.tab == l:
+            if self.tab != l:
                 if l:
                     dat.append([])
                 d = [nam]
             else:
                 d = [""]
-            d.extend([dte.disp, side[0][0], side[0][1], side[1][0], side[1][1],
-                side[2][0], side[2][1], side[3][0], side[3][1]])
+            d.extend([dte.disp, side[0], side[1], side[2], side[3]])
             dat.append(d)
             l = self.tab
         self.fpdf = MyFpdf(name=__name__, head=120, auto=True, foot=True)
@@ -148,28 +148,28 @@
             else:
                 self.fpdf.cell(w=cwth*21, h=5, txt=d[0], border=0, ln=0)
                 self.fpdf.cell(w=cwth*11, h=5, txt=d[1], border=0, ln=0)
-                if d[2]:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3], border=1, ln=0)
-                else:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3], border=0, ln=0)
-                if d[4]:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5], border=1, ln=0)
-                else:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5], border=0, ln=0)
-                if d[6]:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[7], border=1, ln=0)
-                else:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[7], border=0, ln=0)
-                if d[8]:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[9], border=1, ln=1)
-                else:
-                    self.fpdf.cell(w=cwth*21, h=5, txt=d[9], border=0, ln=1)
+                if d[2][0]:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[2][1], border=1, ln=0)
+                else:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[2][1], border=0, ln=0)
+                if d[3][0]:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3][1], border=1, ln=0)
+                else:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[3][1], border=0, ln=0)
+                if d[4][0]:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[4][1], border=1, ln=0)
+                else:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[4][1], border=0, ln=0)
+                if d[5][0]:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5][1], border=1, ln=1)
+                else:
+                    self.fpdf.cell(w=cwth*21, h=5, txt=d[5][1], border=0, ln=1)
         if self.whole == "Y":
             # Print top attendees
             self.heading = "summary"
             whr = copyList(where)
-            whr.append(("bdt_tab=btb_tab",))
-            self.cnt = self.sql.getRec(tables=["bwltab", "bwldrt"],
+            whr.append(("bdt_tab", "<", self.nstart))
+            self.cnt = self.sql.getRec(tables="bwldrt",
                     cols=["count(*) as count", "bdt_tab"],
                     where=whr, group="bdt_tab",
                     order="count desc, bdt_name")
@@ -207,7 +207,8 @@
         head = "Tabs Draw Summary for the period %s to %s" % (self.start.disp,
             self.end.disp)
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
+            header=head, repprt=self.df.repprt, fromad=self.fromad,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def getName(self, tab):
@@ -226,6 +227,7 @@
             else:
                 nam = rec[0]
             nam = nam.replace("VAN DER", "V D")
+            nam = nam.replace("JANSE VAN", "J V")
             if tab in self.dic[self.tab]:
                 self.clash = True
             self.dic[self.tab].append(tab)

=== modified file 'bwl/bc3030.py'
--- bwl/bc3030.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3030.py	2017-06-28 13:57:00 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Assessment Forms.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import MyFpdf, Sql, TartanDialog
+from TartanClasses import GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import askQuestion, getModName, doDrawTable, doPrinter
 from tartanWork import mthnam
 
@@ -29,6 +27,11 @@
             "bwlflo", "bwltab", "bwlfls", "bwlflt"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         return True
 
     def mainProcess(self):
@@ -83,7 +86,8 @@
 
     def doDate(self, frt, pag, r, c, p, i, w):
         self.date = w
-        self.disp = "%i %s %i" % (w % 100, mthnam[(w/100) % 100][1], w / 10000)
+        self.disp = "%i %s %i" % (w % 100, mthnam[int(w / 100) % 100][1],
+            int(w / 10000))
         acc = self.sql.getRec(tables="bwlflt", cols=["sum(bft_shotsf)"],
             where=[("bft_cono", "=", self.opts["conum"]), ("bft_fmat", "=",
             self.fmat), ("bft_type", "=", self.ftyp), ("bft_date", "=", w)],
@@ -212,40 +216,40 @@
             fpdf.add_page()
             last, table = doDrawTable(fpdf, rr, ppad, spad=2, cw=cw, ld=ld)
             for y in xrange(maxf):
-                card = cards[x+y]
+                card = cards[x + y]
                 if self.forms == 4:
                     if y % 2:
-                        xx = 53*cw
+                        xx = 53 * cw
                     else:
-                        xx = 5*cw
+                        xx = 5 * cw
                     sx = xx
                     fpdf.setFont("helvetica", "B", 12)
-                    fpdf.set_y((yy[y/2])*ld)
-                    fpdf.drawText(x=xx, w=45*cw, align="C", txt=h1)
+                    fpdf.set_y((yy[int(y / 2)]) * ld)
+                    fpdf.drawText(x=xx, w=45 * cw, align="C", txt=h1)
                     fpdf.setFont("helvetica", "B", 8)
                     h2 = "%s vs %s at %s on %s" % (card[0], card[1], card[2],
                         self.disp)
-                    fpdf.drawText(x=xx, w=45*cw, align="C", txt=h2)
+                    fpdf.drawText(x=xx, w=45 * cw, align="C", txt=h2)
                     fpdf.setFont("helvetica", "B", 10)
                     h3 = "Skip: %s    Player: %s" % (card[3], card[4])
-                    fpdf.drawText(x=xx, w=45*cw, align="C", txt=h3)
+                    fpdf.drawText(x=xx, w=45 * cw, align="C", txt=h3)
                     fpdf.drawText(h=2)
                     fpdf.setFont("helvetica", "B", 10)
                 else:
-                    xx = 3*cw
-                    sx = 25*cw
+                    xx = 3 * cw
+                    sx = 25 * cw
                     fpdf.setFont("helvetica", "B", 18)
-                    fpdf.set_y((yy[y])*ld)
-                    fpdf.drawText(x=xx, w=90*cw, h=10, align="C", txt=h1)
+                    fpdf.set_y((yy[y]) * ld)
+                    fpdf.drawText(x=xx, w=90 * cw, h=10, align="C", txt=h1)
                     fpdf.setFont("helvetica", "B", 16)
                     h2 = "%s vs %s at %s on %s" % (card[0], card[1], card[2],
                         self.disp)
-                    fpdf.drawText(x=xx, w=90*cw, h=8, align="C", txt=h2)
+                    fpdf.drawText(x=xx, w=90 * cw, h=8, align="C", txt=h2)
                     fpdf.drawText()
                     fpdf.setFont("helvetica", "B", 12)
                 w1 = fpdf.get_string_width("XXXXXXXXX")
                 w2 = fpdf.get_string_width("XXXXX")
-                fpdf.drawText(x=sx+(7*cw), w=w1, txt="Shots-For", border=1,
+                fpdf.drawText(x=sx + (7 * cw), w=w1, txt="Shots-For", border=1,
                     fill=1, ln=0)
                 fpdf.drawText(w=w1, txt="Shots-Agt", border=1, fill=1, ln=0)
                 fpdf.drawText(w=w1, txt="   Points", border=1, fill=1, ln=0)
@@ -253,7 +257,7 @@
                 if self.sets == "Y":
                     for s in xrange(1, 3):
                         fpdf.drawText(x=sx, h=5, txt="Set %s" % s, ln=0)
-                        fpdf.drawText(x=sx+(7*cw), w=w1, h=5, txt="",
+                        fpdf.drawText(x=sx + (7 * cw), w=w1, h=5, txt="",
                             border=1, ln=0)
                         fpdf.drawText(w=w1, h=5, txt="", border=1, ln=0)
                         fpdf.drawText(w=w1, h=5, txt="", border=1, ln=0)
@@ -262,16 +266,17 @@
                         else:
                             fpdf.drawText(w=w2, h=5, txt="", border="LRB")
                 else:
-                    fpdf.drawText(x=sx+(7*cw), w=w1, h=5,txt="",
+                    fpdf.drawText(x=sx + (7 * cw), w=w1, h=5, txt="",
                         border=1, ln=0)
                     fpdf.drawText(w=w1, h=5, txt="", border=1, ln=0)
-                    fpdf.drawText(w=w1, h=5, txt="", border=1)
+                    fpdf.drawText(w=w1, h=5, txt="", border=1, ln=0)
+                    fpdf.drawText(w=w2, h=5, txt="", border=1)
                 if self.forms == 1:
                     fpdf.setFont("helvetica", "", 12)
                     r = (y * 21) + 4.5
                     for z in xrange(4):
-                        fpdf.set_xy(13.5*cw, (9+(z*2)+r)*ld)
-                        fpdf.drawText(txt=card[4+z])
+                        fpdf.set_xy(13.5 * cw, (9 + (z * 2) + r) * ld)
+                        fpdf.drawText(txt=card[4 + z])
                 elif self.self == "N" and card[5] in (1,2,3,4):
                     if y % 2:
                         posx = 127
@@ -288,8 +293,8 @@
                     fpdf.drawText(x=posx, y=posy, txt="XXXXXXX")
         fpdf.output(pdfnam, "F")
         head = "Match Assessment Forms for %s" % self.disp
-        doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            repprt=self.df.repprt, repeml=self.df.repeml)
+        doPrinter(mf=self.opts["mf"], header=head, pdfnam=pdfnam,
+            repprt=self.df.repprt, fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bwl/bc3040.py'
--- bwl/bc3040.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3040.py	2017-06-28 13:58:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Match Declaration Forms.
@@ -14,7 +12,7 @@
 """
 
 import os
-from TartanClasses import MyFpdf, Sql, TartanDialog
+from TartanClasses import GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import doDrawTable, doPrinter, getModName
 
 class bc3040:
@@ -29,6 +27,11 @@
             "bwlflm", "bwlflo", "bwltab", "bwlfls", "bwlflt"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         return True
 
     def mainProcess(self):
@@ -191,7 +194,7 @@
                 if player[0]:
                     for i in player[0].split():
                         init = init + i[0].upper() + " "
-                pos = tab2[((num % 4) + 1) * 4][1][num / 4] + .4
+                pos = tab2[((num % 4) + 1) * 4][1][int(num / 4)] + .4
                 fpdf.drawText(x=20*cw, y=pos*ld, txt=init.strip())
                 fpdf.drawText(x=30*cw, y=pos*ld, txt=player[1])
                 fpdf.drawText(x=82*cw, y=pos*ld, txt=str(player[2]))
@@ -215,8 +218,8 @@
             fpdf.drawText(x=26*cw, y=64*ld, txt="(Signature)")
         fpdf.output(pdfnam, "F")
         head = "Match Declaration Forms for %s" % self.disp
-        doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            repprt=self.df.repprt, repeml=self.df.repeml)
+        doPrinter(mf=self.opts["mf"], header=head, pdfnam=pdfnam,
+            repprt=self.df.repprt, fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def doExit(self):

=== modified file 'bwl/bc3050.py'
--- bwl/bc3050.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3050.py	2017-06-28 14:00:35 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Match Assessment Report.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import TartanDialog, RepPrt, Sql
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 from tartanFunctions import dateDiff, showError, textFormat
 
 class bc3050:
@@ -28,6 +26,11 @@
             "bwltab"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         self.pos = ["", "Skip", " 3rd", " 2nd", "Lead"]
         return True
 
@@ -138,11 +141,11 @@
                     div = 3.0
                 data.append([names[player[2]-1][0], self.pos[pos], player[3],
                     player[4], player[5], sc[0][0], sc[1][0], sc[2][0],
-                    sc[3][0], round(tot/div, 1), his, round((tot-his)/3.0, 1),
-                    tav, player[10]])
+                    sc[3][0], round(tot / div, 1), his,
+                    round((tot - his) / 3.0, 1), tav, player[10]])
             if pos == 4:
                 data.append(["BLANK"])
-        if not tav == "error":
+        if tav != "error":
             head = ("Match Assessment for %s Match Played on %s" % \
                 (self.fnam, self.disp),)
             cols = [
@@ -167,7 +170,7 @@
                 ["n", "NA",  70, "Remarks", "y"]])
             RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def getHistory(self, player):

=== modified file 'bwl/bc3060.py'
--- bwl/bc3060.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3060.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls League Assessment Summary.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import TartanDialog, RepPrt, Sql
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 
 class bc3060:
     def __init__(self, **opts):
@@ -27,6 +25,11 @@
             "bwltab"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         return True
 
     def mainProcess(self):
@@ -193,7 +196,7 @@
                 ["m", "UD", 4.1, "NA",     "y"]])
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
             cols=cols, ttype="D", blank=True, repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bwl/bc3070.py'
--- bwl/bc3070.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3070.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     List of Entered Players.
@@ -14,7 +12,7 @@
 """
 
 import os, time
-from TartanClasses import CCD, MyFpdf, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter
 
 class bc3070:
@@ -27,6 +25,13 @@
     def setVariables(self):
         self.sql = Sql(self.opts["mf"].dbm, ["bwlcmp", "bwlent", "bwltab"],
             prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         t = time.localtime()
         self.sysdt = time.strftime("%d %B %Y %H:%M:%S", t)
         self.image = os.path.join(self.opts["mf"].rcdic["prgdir"], "img",
@@ -104,8 +109,8 @@
             self.fpdf.output(pdfnam, "F")
             head = "%s - Entered Teams" % self.cnam
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=head, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=head, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doHead(self):

=== modified file 'bwl/bc3080.py'
--- bwl/bc3080.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3080.py	2017-06-28 14:05:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Competition Format Sheet.
@@ -14,26 +12,33 @@
 """
 
 import os, time
-from TartanClasses import MyFpdf, Sql, TartanDialog
+from TartanClasses import GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import copyList, getModName, doPrinter
 
 class bc3080:
     def __init__(self, **opts):
         self.opts = opts
-        self.setVariables()
-        if "args" in self.opts:
-            self.ctyp = self.opts["args"][0]
-            self.cnam = self.opts["args"][1]
-            self.card = False
-            self.qty = 1
-            self.doEnd()
-        else:
-            self.mainProcess()
-            self.opts["mf"].startLoop()
+        if self.setVariables():
+            if "args" in self.opts:
+                self.ctyp = self.opts["args"][0]
+                self.cnam = self.opts["args"][1]
+                self.card = False
+                self.qty = 1
+                self.doEnd()
+            else:
+                self.mainProcess()
+                self.opts["mf"].startLoop()
 
     def setVariables(self):
         self.sql = Sql(self.opts["mf"].dbm, ["bwlcmp", "bwltyp", "bwlpts"],
             prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         t = time.localtime()
         self.sysdt = time.strftime("%d %B %Y %H:%M:%S", t)
         self.image = os.path.join(self.opts["mf"].rcdic["prgdir"],
@@ -41,9 +46,10 @@
         if not os.path.isfile(self.image):
             self.image = None
         self.card = True
+        return True
 
     def mainProcess(self):
-        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Competition Format")
         com = {
             "stype": "R",
@@ -64,7 +70,7 @@
                 1,"N",self.doQty,None,None,("notzero",)))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
+        self.df = TartanDialog(self.opts["mf"], tops=False, title=self.tit,
             eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
 
     def doCmpCod(self, frt, pag, r, c, p, i, w):
@@ -87,19 +93,23 @@
         self.qty = w
 
     def doEnd(self):
-        if not "args" in self.opts:
+        if "args" not in self.opts:
+            hdr = self.tit
             prt = copyList(self.df.repprt)
             eml = copyList(self.df.repeml)
             self.df.closeProcess()
         else:
+            hdr = "%03i %s - %s" % (self.opts["conum"], self.opts["conam"],
+            "Competition Format")
             prt = ["Y", "V", "view"]
             eml = None
         self.drawFormat()
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
-        doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, repprt=prt, repeml=eml)
-        if not "args" in self.opts:
+        doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=hdr,
+            repprt=prt, fromad=self.fromad, repeml=eml)
+        if "args" not in self.opts:
             self.opts["mf"].closeLoop()
 
     def drawFormat(self):
@@ -234,7 +244,7 @@
                         txt = "%s Points per Skin" % ldic[ptyp]["bcp_s_points"]
                     self.fpdf.drawText(txt=txt, x=x1, h=h, ctyp="M")
                     pts += (ldic[ptyp]["bcp_s_points"] *
-                        (ldic["bct_ends"] / ldic[ptyp]["bcp_sends"]))
+                        int(ldic["bct_ends"] / ldic[ptyp]["bcp_sends"]))
                 if ldic[ptyp]["bcp_g_points"]:
                     if ldic[ptyp]["bcp_g_points"] == 1:
                         txt = "%s Point per Game" % ldic[ptyp]["bcp_g_points"]

=== modified file 'bwl/bc3090.py'
--- bwl/bc3090.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3090.py	2017-07-18 12:55:22 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Draw Summary Sheet.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import RepPrt, TartanDialog, Sql
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 
 class bc3090:
     def __init__(self, **opts):
@@ -22,6 +20,7 @@
             if "args" in self.opts:
                 self.auto = True
                 self.getCompDetails(self.opts["args"][0])
+                self.excfin = self.opts["args"][1]
                 self.doEnd()
             else:
                 self.auto = False
@@ -33,6 +32,11 @@
             "bwltyp", "bwlent"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         return True
 
     def mainProcess(self):
@@ -44,10 +48,13 @@
             "cols": (
                 ("bcm_code", "", 0, "Cod"),
                 ("bcm_name", "", 0, "Name", "Y"))}
+        r1s = (("Yes", "Y"), ("No", "N"))
         fld = (
             (("T",0,0,0),"I@bcm_code",0,"","",
                 "","N",self.doCmpCod,bcp,None,None),
-            (("T",0,0,0),"ONA",30,""))
+            (("T",0,0,0),"ONA",30,""),
+            (("T",0,1,0),("IRB",r1s),0,"Exclude Final Clash","",
+                "Y","N",self.doExcFin,None,None,None))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
@@ -58,6 +65,10 @@
         if ret:
             return ret
         self.df.loadEntry(frt, pag, p+1, data=self.cdes)
+        if self.cfmat == "R":
+            self.excfin = "N"
+            self.df.loadEntry(frt, pag, p+2, data=self.excfin)
+            return "sk2"
 
     def getCompDetails(self, w):
         chk = self.sql.getRec(tables="bwlcmp", where=[("bcm_cono", "=",
@@ -75,11 +86,14 @@
         if self.cfmat == "R":
             self.games = self.sql.getRec(tables="bwlent", cols=["count(*)"],
                 where=[("bce_cono", "=", self.opts["conum"]), ("bce_ccod", "=",
-                self.ccod)], limit=1)[0]
+                self.ccod)], limit=1)[0] - 1
         else:
             self.games = bwltyp[self.sql.bwltyp_col.index("bct_games")]
         self.grgame = bwltyp[self.sql.bwltyp_col.index("bct_grgame")]
 
+    def doExcFin(self, frt, pag, r, c, p, i, w):
+        self.excfin = w
+
     def doEnd(self):
         if not self.auto:
             self.df.closeProcess()
@@ -92,14 +106,15 @@
             if l[1]:
                 lgame = l[0]
         col = ["bce_scod", "btb_surname", "btb_names"]
-        grp = "bce_scod, btb_surname, btb_names, bcg_group"
         if lgame <= self.grgame:
-            col.extend(["sum(bcg_shots_for) as sfor",
+            col.extend([
+                "sum(bcg_shots_for) as sfor",
                 "sum(bcg_shots_agt) as sagt",
                 "sum(bcg_shots_for - bcg_shots_agt) as agg",
                 "sum(bcg_points) as pts"])
         else:
-            col.extend(["sum(bcg_a_shots_for) as sfor",
+            col.extend([
+                "sum(bcg_a_shots_for) as sfor",
                 "sum(bcg_a_shots_agt) as sagt",
                 "sum(bcg_a_shots_for - bcg_a_shots_agt) as agg",
                 "sum(bcg_a_points) as pts"])
@@ -111,9 +126,19 @@
             ("bcg_cono=bce_cono",),
             ("bcg_ccod=bce_ccod",),
             ("bcg_scod=bce_scod",)]
-        odr = "bcg_group, pts desc, agg desc, sagt asc"
+        grp = "bce_scod, btb_surname, btb_names, bcg_group"
+        odr = "bcg_group, pts desc, agg desc, sagt asc, btb_surname"
         skips = self.sql.getRec(tables=["bwlent", "bwltab", "bwlgme"],
             cols=col, where=whr, group=grp, order=odr)
+        rinks = self.sql.getRec(tables="bwlgme", cols=["bcg_rink"],
+            where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod",
+            "=", self.ccod)], group="bcg_rink", order="bcg_rink")
+        endrk = []
+        for rnk in rinks:
+            if rnk[0] and rnk[0][1] == "7":
+                endrk.remove("%s6" % rnk[0][0])
+            elif rnk[0] and rnk[0][1] in ("1", "6"):
+                endrk.append(rnk[0])
         data = []
         for skip in skips:
             nam = skip[1].strip()
@@ -122,6 +147,7 @@
             dat = [skip[0], nam]
             ops = []
             rks = []
+            eds = 0
             dup = ["-", "-"]
             games = self.sql.getRec(tables="bwlgme", where=[("bcg_cono", "=",
                 self.opts["conum"]), ("bcg_ccod", "=", self.ccod), ("bcg_scod",
@@ -134,23 +160,30 @@
                     rnk = ""
                 else:
                     rnk = game[self.sql.bwlgme_col.index("bcg_rink")]
+                    if self.excfin == "Y" and game == games[-1]:
+                        pass
+                    elif rnk and rnk in endrk:
+                        eds += 1
                 dat.extend([opp, rnk])
                 if opp:
-                    if opp in ops:
+                    if self.excfin == "Y" and game == games[-1]:
+                        pass
+                    elif opp in ops:
                         dup[0] = "X"
-                    else:
-                        dup[0] = "-"
                     ops.append(opp)
                 if rnk:
-                    if rnk in rks:
+                    if self.excfin == "Y" and game == games[-1]:
+                        pass
+                    elif rnk in rks:
                         dup[1] = "X"
-                    else:
-                        dup[1] = "-"
                     rks.append(rnk)
+            dup.append("%s" % eds)
             dat.insert(2, groups[grp])
-            dat.append("%1s%1s" % tuple(dup))
+            dat.append("%1s%1s%1s" % tuple(dup))
             data.append(dat)
-        head = [(self.cdes, 24), ("Bowls Draw Summary Sheet", 14)]
+        head = [
+            ("%s - %s" % (self.opts["conam"], self.cdes), 18, "C"),
+            ("Draw Summary Sheet", 16, "C")]
         cols = [
             ["a", "UI",  6, "Skp",  "y"],
             ["b", "NA", 29, "Name", "y"],
@@ -159,15 +192,16 @@
             cols.extend([
                 ["d%s" % x, "UI", 6, "Opp", "y"],
                 ["e%s" % x, "UA", 2, "Rk",  "y"]])
-        cols.append(["f", "UA",  2, "OR",  "y"])
+        cols.append(["f", "UA",  3, "ORE",  "y"])
         if self.auto:
-            repprt = self.opts["args"][1]
-            repeml = self.opts["args"][2]
+            repprt = self.opts["args"][2]
+            repeml = self.opts["args"][3]
         else:
             repprt = self.df.repprt
             repeml = self.df.repprt
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
-            cols=cols, ttype="D", pages=False, repprt=repprt, repeml=repeml)
+            cols=cols, ttype="D", pages=False, repprt=repprt,
+            repeml=repeml, fromad=self.fromad)
         if not self.auto:
             self.opts["mf"].closeLoop()
 

=== modified file 'bwl/bc3100.py'
--- bwl/bc3100.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3100.py	2017-07-11 18:41:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Competition Match Results.
@@ -14,7 +12,7 @@
 """
 
 import os
-from TartanClasses import ASD, CCD, MyFpdf, TartanDialog, Sql
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, TartanDialog, Sql
 from tartanFunctions import askQuestion, copyList, doPrinter, getModName
 
 class bc3100:
@@ -29,6 +27,11 @@
             "bwltyp", "bwlpts", "bwlent"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        bwlctl = gc.getCtl("bwlctl", self.opts["conum"])
+        if not bwlctl:
+            return
+        self.fromad = bwlctl["ctb_emadd"]
         self.grpcod = ["", "A", "B", "C"]
         return True
 
@@ -151,10 +154,10 @@
                 fors = c[self.sql.bwlgme_col.index("bcg_shots_for")]
                 agts = c[self.sql.bwlgme_col.index("bcg_shots_agt")]
             if not fors and not agts:
-                if not scod in non:
+                if scod not in non:
                     non.append(scod)
         if non:
-            return "%s Result(s) Not Yet Entered" % (len(non) / 2)
+            return "%s Result(s) Not Yet Entered" % int(len(non) / 2)
         self.pgame = w
         if self.pgame == 1:
             self.gamrep = "N"
@@ -203,7 +206,7 @@
                 self.grps[rec[0]] = [[rec[1]], [], []]
             else:
                 self.grps[rec[0]][0].append(rec[1])
-        self.keys = self.grps.keys()
+        self.keys = list(self.grps.keys())
         self.keys.sort()
         self.fpdf = MyFpdf(name=__name__, head=65, foot=True)
         self.lastg = None
@@ -282,7 +285,8 @@
                     self.df.repeml[2].append(rec[0])
         head = "%s - Results after game %s" % (self.cdes, self.pgame)
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
+            header=head, repprt=self.df.repprt, fromad=self.fromad,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doReport(self, rtyp, grp):
@@ -423,7 +427,7 @@
                         break
                 if not ign:
                     self.allp.append(rec[0])
-                    if not gme in sess:
+                    if gme not in sess:
                         sess[gme] = {}
                     if rec[2]:
                         nam = "%s, %s" % (rec[1], rec[2].split()[0])
@@ -441,14 +445,14 @@
         self.fpdf.setFont()
         for gme in xrange(1, self.games + 1):
             stxt = str("%3s" % gme)
-            if not gme in sess:
+            if gme not in sess:
                 self.fpdf.drawText(stxt, w=12, border="TLRB", ln=0)
                 if self.sesg == "Y":
                     self.fpdf.drawText("", w=12, border="TLRB", ln=0)
                 self.fpdf.drawText("* No Valid Winner or Abandoned *",
                     border="TLRB")
                 continue
-            grps = sess[gme].keys()
+            grps = list(sess[gme].keys())
             grps.sort()
             for grp in grps:
                 gtxt = "%3s" % self.grpcod[grp]
@@ -538,24 +542,26 @@
 
     def pageHeading(self, htyp=None):
         self.fpdf.add_page()
-        self.fpdf.drawText(self.cdes, font=["courier", "B", 24])
+        head = "%s - %s" % (self.opts["conam"], self.cdes)
+        self.fpdf.drawText(head, font=["courier", "B", 18], align="C")
         if htyp == "S":
             self.fpdf.drawText()
-            self.fpdf.drawText("Match Summary", font=["courier", "B", 18])
+            self.fpdf.drawText("Match Summary", font=["courier", "B", 16],
+                align="C")
             self.fpdf.drawText()
             self.pglin = 4
         else:
             self.pglin = 1
 
     def groupHeading(self, rtyp, group):
-        self.fpdf.drawText(font=["courier", "B", 18])
+        self.fpdf.drawText(font=["courier", "B", 18], align="C")
         if rtyp == "G":
             head = "Results for Game Number: %s" % self.pgame
         else:
-            head = "Match Results After Game Number: %s" % self.pgame
+            head = "Match Standings After Game Number: %s" % self.pgame
         if group:
             head += "  for Group: %s" % self.grpcod[group]
-        self.fpdf.drawText(head, font=["courier", "B", 18])
+        self.fpdf.drawText(head, font=["courier", "B", 16], align="C")
         self.fpdf.drawText()
         self.fpdf.setFont(style="B")
         self.printLine("Pos", "%-30s" % "Name", "  +For ", "  -Agt ",

=== modified file 'bwl/bc3110.py'
--- bwl/bc3110.py	2017-02-25 14:03:05 +0000
+++ bwl/bc3110.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Player's Contact Request Forms.
@@ -41,7 +39,7 @@
         fld = (
             (("T",0,0,0),"I@bcm_code",0,"","",
                 "","N",self.doCmpCod,com,None,("notzero",)),
-            (("T",0,0,0),"O@bcm_name",0,""))
+            (("T",0,0,0),"ONA",30,""))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
@@ -91,9 +89,7 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam,
-                repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, repprt=self.df.repprt)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bwl/bc6010.py'
--- bwl/bc6010.py	2017-02-25 14:03:05 +0000
+++ bwl/bc6010.py	2017-07-24 08:24:52 +0000
@@ -1,5 +1,3 @@
-#[0]! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Tab Number Change.
@@ -94,11 +92,11 @@
     def doNewTab(self, frt, pag, r, c, p, i, w):
         if self.oldtab < self.nstart:
             if self.mstart < self.fstart:
-                if self.gender == "M" and not w < self.fstart:
+                if self.gender == "M" and w >= self.fstart:
                     return "Invalid Male Tab Number"
                 elif self.gender == "F" and w < self.fstart:
                     return "Invalid Female Tab Number"
-            elif self.gender == "M" and not w < self.mstart:
+            elif self.gender == "M" and w >= self.mstart:
                 return "Invalid Male Tab Number"
             elif self.gender == "F" and w < self.mstart:
                 return "Invalid Female Tab Number"
@@ -170,7 +168,7 @@
             for rec in recs:
                 for k in ot[2:]:
                     c = rec[cc.index(k)]
-                    if not c in key:
+                    if c not in key:
                         continue
                     rec[cc.index(k)] = key[c]
                 self.sql.insRec(ot[0], data=rec)
@@ -181,14 +179,14 @@
 
     def doProcess(self):
         for tab in self.tables:
-            for x in range(len(tab[2:])):
+            for x in xrange(len(tab[2:])):
                 whr = [
                     (tab[1], "=", self.opts["conum"]),
                     (tab[x+2], "=", self.oldtab)]
                 dat = [self.newtab]
                 col = [tab[x+2]]
                 self.sql.updRec(tab[0], where=whr, data=dat, cols=col)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.df.focusField("T", 0, 1)
 
     def doExit(self):

=== modified file 'bwl/bc6020.py'
--- bwl/bc6020.py	2017-02-25 14:03:05 +0000
+++ bwl/bc6020.py	2017-06-27 09:48:17 +0000
@@ -1,8 +1,10 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
-    Bowls Merge Visitor Tab Duplications.
+    Delete All Visitor's Tabs
+
+            or
+
+    Only Those Without History and Re-Number Tabs with History.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -13,7 +15,8 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import GetCtl, SplashScreen, Sql
+from TartanClasses import GetCtl, SplashScreen, Sql, TartanDialog
+from tartanFunctions import getNextCode
 
 class bc6020:
     def __init__(self, **opts):
@@ -38,49 +41,89 @@
         if not bwlctl:
             return
         self.nstart = bwlctl["ctb_nstart"]
-        self.dbase = bwlctl["ctb_dbase"]
+        self.keys = (
+            ("bwldrt", "bdt_cono", "bdt_tab"),
+            ("bwldrt", "bdt_cono", "bdt_team1"),
+            ("bwldrt", "bdt_cono", "bdt_team2"),
+            ("bwldrt", "bdt_cono", "bdt_team3"),
+            ("bwlent", "bce_cono", "bce_scod"),
+            ("bwlgme", "bcg_cono", "bcg_scod"),
+            ("bwlgme", "bcg_cono", "bcg_ocod"),
+            ("bwltab", "btb_cono", "btb_tab"))
         return True
 
     def mainProcess(self):
+        tit = "Delete Visitors' Tabs"
+        fld = (
+            (("T",0,0,0),"IUI",3,"Minimum Tabs-In","",
+                2,"N",self.doDelTyp,None,None,("notzero",),None,
+                "The Minimum Number of Times a Visitor Must Have "\
+                "Played Tabs-In to Remain in the System."),)
+        tnd = ((self.doEnd,"y"),)
+        txt = (self.doExit,)
+        self.df = TartanDialog(self.opts["mf"], tops=True, title=tit,
+            eflds=fld, tend=tnd, txit=txt)
+        self.opts["mf"].startLoop()
+
+    def doDelTyp(self, frt, pag, r, c, p, i, w):
+        self.delent = w
+
+    def doEnd(self):
+        self.df.closeProcess()
         splash = SplashScreen(self.opts["mf"].body,
-            "Merging Duplicate Names ... Please Wait")
-        # Get all visitor's tabs
-        tabs = self.sql.getRec(tables="bwltab", cols=["btb_tab", "btb_surname",
-            "btb_names", "btb_pos1", "btb_pos2"], where=[("btb_cono", "=",
-            self.opts["conum"]), ("btb_tab", ">=", self.nstart)],
-            order="btb_surname, btb_names, btb_tab")
-        old = []
+            "Deleting Visitors' Tabs ... Please Wait")
+        # Delete tabs without competition history
+        tab = ["bwltab", "bwldrt"]
+        col = ["count(*)", "btb_tab"]
+        whr = [
+            ("btb_cono", "=", self.opts["conum"]),
+            ("btb_tab", ">=", self.nstart),
+            ("bdt_cono=btb_cono",),
+            ("bdt_tab=btb_tab",)]
+        grp = "btb_tab"
+        odr = "btb_tab"
+        tabs = self.sql.getRec(tables=tab, cols=col, where=whr, group=grp,
+            order=odr)
         for tab in tabs:
-            # Set default position and rating
-            chk = self.sql.getRec(tables="bwlent", where=[("bce_cono", "=",
-                self.opts["conum"]), ("bce_scod", "=", tab[0])], limit=1)
-            if chk and self.dbase in ("C", "P") and tab[3] == 1:
-                dat = [4, 5, 4, 5]
-            elif self.dbase in ("C", "R") and tab[4] == 1:
-                dat = [tab[3], 5, tab[3], 5]
-            else:
-                dat = None
-            if dat:
-                self.sql.updRec("bwltab", cols=["btb_pos1", "btb_rate1",
-                    "btb_pos2", "btb_rate2"], data=dat, where=[("btb_cono",
-                    "=", self.opts["conum"]), ("btb_tab", "=", tab[0])])
-            # Check if duplicate and merge
-            if tab[1:3] == old[1:3]:
-                for ot in self.tables:
-                    col = getattr(self.sql, "%s_col" % ot[0])
-                    for k in ot[2:]:
-                        recs = self.sql.getRec(tables=ot[0], where=[(ot[1],
-                            "=", self.opts["conum"]), (k, "=", tab[0])])
-                        self.sql.delRec(ot[0], where=[(ot[1], "=",
-                            self.opts["conum"]), (k, "=", tab[0])])
-                        for rec in recs:
-                            rec[col.index(k)] = old[0]
-                            self.sql.insRec(ot[0], data=rec)
+            if tab[0] >= self.delent:
+                continue
+            found = False
+            for key in self.keys:
+                if key[0] in ("bwldrt", "bwltab"):
+                    continue
+                chk = self.sql.getRec(tables=key[0], where=[(key[1], "=",
+                    self.opts["conum"]), (key[2], "=", tab[1])], limit=1)
+                if chk:
+                    found = True
+                    break
+            if not found:
                 self.sql.delRec("bwltab", where=[("btb_cono", "=",
-                    self.opts["conum"]), ("btb_tab", "=", tab[0])])
-            else:
-                old = tab
+                    self.opts["conum"]), ("btb_tab", "=", tab[1])])
+                nxt = getNextCode(self.sql, "bwldrt", "bdt_tab",
+                    [("bdt_cono", "=", self.opts["conum"])], 900001, 999999)
+                for key in self.keys:
+                    if key[0] == "bwltab":
+                        continue
+                    self.sql.updRec(key[0], cols=[key[2]], data=[nxt],
+                        where=[(key[1], "=", self.opts["conum"]),
+                        (key[2], "=", tab[1])])
+        # Re-number tabs with competition history
+        tabs = self.sql.getRec(tables="bwltab", cols=["btb_tab"],
+            where=[("btb_cono", "=", self.opts["conum"]),
+            ("btb_tab", ">=", self.nstart)], order="btb_tab")
+        start = self.nstart
+        for tab in tabs:
+            for key in self.keys:
+                self.sql.updRec(key[0], cols=[key[2]], data=[start],
+                    where=[(key[1], "=", self.opts["conum"]),
+                    (key[2], "=", tab[0])])
+            start += 1
         self.opts["mf"].dbm.commitDbase(ask=True)
         splash.closeSplash()
+        self.opts["mf"].closeLoop()
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc6030.py'
--- bwl/bc6030.py	2017-02-25 14:03:05 +0000
+++ bwl/bc6030.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Bowls Clear History Dialog.

=== modified file 'bwl/bcc110.py'
--- bwl/bcc110.py	2017-02-25 14:03:05 +0000
+++ bwl/bcc110.py	2017-07-24 08:24:59 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bowls Control File Maintenance.
@@ -30,6 +28,7 @@
         if self.sql.error:
             if self.sql.error == ["memctl"]:
                 self.memctl = False
+                self.chgint = False
                 self.mlint = None
                 self.same = "N"
             else:
@@ -40,7 +39,8 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"],"N","N",0,0,0,"P","A","Y",4,0,0,"A"]
+            self.acc = [self.opts["conum"], "N", "N", 0, 0, 0, "P",
+                "A", "Y", 4, 0, 0, "A", "B", ""]
         else:
             self.new = False
             self.oldm = self.acc[self.sql.bwlctl_col.index("ctb_mstart")]
@@ -58,39 +58,44 @@
         r2s = (("Position","P"),("Rating","R"),("Combined","C"))
         r3s = (("Ascending","A"),("Descending","D"))
         r4s = (("S32L-S32L","A"),("S32L-L23S","B"))
-        if not self.memctl:
-            self.fld = [
-                (("T",0,0,0),["ORB",r1s],0,"M/L Integration"),
-                (("T",0,1,0),("ORB",r1s),0,"Same Numbers")]
-        else:
+        if self.memctl:
             self.fld = [
                 (("T",0,0,0),["IRB",r1s],0,"M/L Integration","",
                     self.acc[1],"N",self.doMlint,None,None,None),
                 (("T",0,1,0),("IRB",r1s),0,"Same Numbers","",
                     self.acc[2],"N",self.doSame,None,None,None)]
+            idx = 2
+        else:
+            self.fld = []
+            idx = 0
         self.fld.extend([
-            (("T",0,2,0),"IUI",6,"Male Start Seq","",
+            (("T",0,idx,0),"IUI",6,"Male Start Seq","",
                 self.acc[3],"N",self.doMStart,None,None,("notzero",)),
-            (("T",0,3,0),"IUI",6,"Female Start Seq","",
+            (("T",0,idx+1,0),"IUI",6,"Female Start Seq","",
                 self.acc[4],"N",self.doFStart,None,None,("notzero",)),
-            (("T",0,4,0),"IUI",6,"Non-Member Start Seq","",
+            (("T",0,idx+2,0),"IUI",6,"Non-Member Start Seq","",
                 self.acc[5],"N",self.doNStart,None,None,("notzero",)),
-            (("T",0,5,0),("IRB",r2s),0,"Draw Base","",
+            (("T",0,idx+3,0),("IRB",r2s),0,"Draw Base","",
                 self.acc[6],"N",self.doBase,None,None,None),
-            (("T",0,6,0),("IRB",r3s),0,"Rating Order","",
+            (("T",0,idx+4,0),("IRB",r3s),0,"Rating Order","",
                 self.acc[7],"N",None,None,None,None),
-            (("T",0,7,0),("IRB",r1s),0,"Replace Fours","",
-                self.acc[8],"N",None,None,None,None),
-            (("T",0,8,0),"IUI",2,"Weeks Between Draws","",
-                self.acc[9],"N",None,None,None,("between", 0, 4)),
-            (("T",0,9,0),"IUD",5.2,"Rate - Member","",
+            (("T",0,idx+5,0),("IRB",r1s),0,"Replace Fours","",
+                self.acc[8],"N",None,None,None,None,None,
+                "When the Draw is Trips Use Pairs Instead of Fours."),
+            (("T",0,idx+6,0),"IUI",2,"Weeks Between Draws","",
+                self.acc[9],"N",None,None,None,("between", 0, 4),None,
+                "Minimum number of Weeks that Players Should Not be "\
+                "Drawn in the Same Team."),
+            (("T",0,idx+7,0),"IUD",5.2,"Rate - Member","",
                 self.acc[10],"N",None,None,None,("efld",)),
-            (("T",0,10,0),"IUD",5.2,"Rate - Visitor","",
+            (("T",0,idx+8,0),"IUD",5.2,"Rate - Visitor","",
                 self.acc[11],"N",None,None,None,("efld",)),
-            (("T",0,11,0),"IUA",6,"Greens","",
+            (("T",0,idx+9,0),"IUA",6,"Greens","",
                 self.acc[12],"N",self.doGreens,None,None,("notblank",)),
-            (("T",0,12,0),("IRB",r4s),0,"Draw Format","",
-                self.acc[12],"N",None,None,None,None)])
+            (("T",0,idx+10,0),("IRB",r4s),0,"Draw Format","",
+                self.acc[13],"N",None,None,None,None),
+            (("T",0,idx+11,0),"ITX",50,"Email Address","",
+                self.acc[14],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -99,20 +104,22 @@
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
-            for n, f in enumerate(self.acc[1:]):
-                if not n:
-                    self.oldint = f
+            if self.memctl:
+                idx = 1
+                self.oldint = self.acc[0]
+            else:
+                idx = 3
+            for n, f in enumerate(self.acc[idx:]):
                 self.df.loadEntry("T", 0, n, data=f)
         if not self.memctl:
             self.chgint = False
-            self.df.loadEntry("T", 0, 0, data="N")
-            self.df.loadEntry("T", 0, 1, data="N")
-            self.df.focusField("T", 0, 3)
+            self.same = "N"
+        self.df.focusField("T", 0, 1)
 
     def doMlint(self, frt, pag, r, c, p, i, w):
         if w == "Y" and not self.mlint:
             return "Invalid Selection, Member's System Not Set Up"
-        if not self.new and not w == self.oldint:
+        if not self.new and w != self.oldint:
             self.chgint = True
         else:
             self.chgint = False
@@ -130,7 +137,7 @@
     def doFStart(self, frt, pag, r, c, p, i, w):
         if w == self.mstart and self.same == "N":
             return "Invalid Number, Same as Male"
-        if not w == self.mstart:
+        if w != self.mstart:
             if w < self.mstart:
                 r = self.mstart - w
                 g = "Female"
@@ -191,6 +198,8 @@
             self.df.focusField("T", 0, 3, err=err)
         else:
             data = [self.opts["conum"]]
+            if not self.memctl:
+                data.extend(["N", "N"])
             for x in xrange(0, len(self.df.t_work[0][0])):
                 data.append(self.df.t_work[0][0][x])
             if self.new:

=== modified file 'bwl/bcc210.py'
--- bwl/bcc210.py	2017-02-25 14:03:05 +0000
+++ bwl/bcc210.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Clubs's Maintenance.

=== modified file 'crs/cr1010.py'
--- crs/cr1010.py	2017-02-25 14:03:05 +0000
+++ crs/cr1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Masterfile Maintenance.

=== modified file 'crs/cr1010_rne.py'
--- crs/cr1010_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr1010_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Masterfile Maintenance.

=== modified file 'crs/cr2010.py'
--- crs/cr2010.py	2017-02-25 14:03:05 +0000
+++ crs/cr2010.py	2017-07-24 08:31:55 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditors Data Capture Screen and Execution.
@@ -367,7 +365,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -436,7 +434,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         self.amt = self.trnamt
@@ -479,7 +477,8 @@
             state = self.df.disableButtonsTags()
             self.opts["mf"].updateStatus("Choose an Ageing Option")
             for x in xrange(4, 8):
-                exec "self.df.setWidget(self.df.B%s, 'normal')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, "normal")
             self.df.setWidget(self.df.B4, "focus")
             self.ageloop = True
             self.opts["mf"].startLoop()
@@ -525,7 +524,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for x in xrange(4, 8):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"],  system="crs", agetyp=atype,
             agekey=[self.opts["conum"], self.cracno, self.opts["rtn"],
@@ -642,7 +642,7 @@
             self.opts["mf"].dbm.rollbackDbase()
             if self.batupd:
                 self.updateBatch(rev=True)
-            for pg in range(self.df.pgs, 1, -1):
+            for pg in xrange(self.df.pgs, 1, -1):
                 self.df.clearFrame("C", pg)
             self.df.selPage("Transaction")
             row = int((self.df.last[1][1] - 1) / self.df.colq[1])
@@ -686,7 +686,7 @@
 
     def updateTables2(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.opts["rtn"] == 1:                          # Invoices
@@ -881,7 +881,7 @@
             # Loans Ledger Masterfile
             self.sql.insRec("lonmf2", data=[self.allcoy, self.lonacc,
                 self.lonnum, self.londes, self.trndat, self.lonmth,
-                self.lonpay])
+                self.lonpay, 0])
             self.othrtn = 2
         else:
             self.othrtn = 3

=== modified file 'crs/cr2010_rne.py'
--- crs/cr2010_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr2010_rne.py	2017-06-28 14:21:58 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditors Data Capture Screen and Execution.
@@ -189,8 +187,8 @@
         elif w > self.sysdtw:
             return "Invalid Date, After Today"
         self.trndte = w
-        if (self.trndte / 100) > self.bh.curdt:
-            self.curdt = self.trndte / 100
+        if int(self.trndte / 100) > self.bh.curdt:
+            self.curdt = int(self.trndte / 100)
         else:
             self.curdt = self.bh.curdt
 
@@ -340,7 +338,7 @@
             os.path.join(self.opts["mf"].rcdic["wrkdir"], "*.xml"))
         for seq, fle in enumerate(files):
             imp = XmlInvoice(fle)
-            if not imp.imprtn == self.opts["rtn"]:
+            if imp.imprtn != self.opts["rtn"]:
                 continue
             if imp.trndte > self.opts["period"][2][0]:
                 continue

=== modified file 'crs/cr2020_rne.py'
--- crs/cr2020_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr2020_rne.py	2017-07-01 14:49:04 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Remittance Advices and Payments.
@@ -16,8 +14,8 @@
 import time
 from TartanClasses import ASD, CCD, DrawForm, GetCtl, ProgressBar, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import askQuestion, checkSunday, doPrinter, getTrn
-from tartanFunctions import getModName, getSingleRecords, copyList
+from tartanFunctions import askQuestion, doPrinter, getModName
+from tartanFunctions import getSingleRecords, getTrn, mthendDate, copyList
 from tartanFunctions import projectDate, showError
 from tartanWork import crtrtp
 
@@ -29,15 +27,15 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "crsmst", "crsrmf",
+            "crstrn", "crsrtf", "crspay", "crsage", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         crsctl = gc.getCtl("crsctl", self.opts["conum"])
         if not crsctl:
             return
         self.tplnam = crsctl["ctc_tplnam"]
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "crsmst", "crsrmf",
-            "crstrn", "crsrtf", "crspay", "crsage", "tplmst"], prog=__name__)
-        if self.sql.error:
-            return
         acc = self.sql.getRec(tables="crstrn", cols=["max(crt_ref1)"],
             where=[("crt_cono", "=", self.opts["conum"]), ("crt_type", "=", 5),
             ("crt_ref1", "like", "CHQ%")], limit=1)
@@ -437,7 +435,7 @@
         count = 0
         text = tdc.index("tpd_text")
         for tr in crt:
-            paydt = CCD(checkSunday(tr[ctc.index("crt_paydt")]), "d1", 10)
+            paydt = CCD(self.checkSunday(tr[ctc.index("crt_paydt")]), "d1", 10)
             if self.paydt.work and paydt.work < self.paydt.work:
                 paydt = CCD(self.paydt.work, "D1", 10)
             if paydt.work < self.sysdtw:
@@ -584,12 +582,28 @@
             self.sql.updRec("crstrn", cols=["crt_ref2"], data=[self.refno],
                 where=whr)
             # Create the crsage Record for the Transaction
-            curdt = self.paydt.work / 100
+            curdt = int(self.paydt.work / 100)
             data = [self.opts["conum"], self.acno.work, types.work, ref1.work,
                 curdt, 5, self.refno, payamt, 0]
             self.sql.insRec("crsage", data=data)
         self.doTrailer(tdc, count)
 
+    def checkSunday(self, paydt):
+        try:
+            chkdt = str(paydt)
+            if time.strftime("%A", time.strptime(chkdt,"%Y%m%d")) == "Sunday":
+                pyyr = int(paydt / 10000)
+                pymt = int(paydt / 100) % 100
+                pydy = (paydt % 100) - 1
+                if not pydy:
+                    pymt -= 1
+                    paydt = mthendDate((pyyr * 10000) + (pymt * 100) + 1)
+                else:
+                    paydt = (pyyr * 10000) + (pymt * 100) + pydy
+        except:
+            paydt = 0
+        return paydt
+
     def doTrailer(self, tdc, count):
         for x in xrange(count, self.form.maxlines):
             for cod in self.form.body:
@@ -610,7 +624,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             elif nl[tdc.index("tpd_detseq")] == "crm_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acno.work
@@ -665,7 +679,7 @@
                 self.form.doDrawDetail(line)
         # Create a CRS Payment Record
         f = float(ASD(0) - ASD(self.total_payment))
-        curdt = self.paydt.work / 100
+        curdt = int(self.paydt.work / 100)
         data = [self.opts["conum"], self.acno.work, 5, self.refno, "CRS/PMT",
             self.paydt.work, "", f, 0, 0, curdt, 0, "Y", 0, "",
             "", "", self.opts["capnm"], self.sysdtw, 0]
@@ -779,8 +793,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Remittance Advice" % self.opts["conam"],
-            repprt=self.df.repprt, repeml=self.df.repeml, fromad=fromad)
+            header="%s Remittance Advice" % self.opts["conam"],
+            repprt=self.df.repprt, fromad=fromad, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])

=== modified file 'crs/cr2030_rne.py'
--- crs/cr2030_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr2030_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Electronic Payment CATS and BEFT File Creation.

=== modified file 'crs/cr3010.py'
--- crs/cr3010.py	2017-02-25 14:03:05 +0000
+++ crs/cr3010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import crtrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "crstrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -152,8 +156,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'crs/cr3020.py'
--- crs/cr3020.py	2017-02-25 14:03:05 +0000
+++ crs/cr3020.py	2017-06-28 14:23:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditor's Ledger Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, doPrinter, getModName, copyList
 from tartanFunctions import showError
 from tartanWork import crtrtp
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -42,8 +46,8 @@
         self.forms = [("UI", 2, False, False, True), ("Na", 7), ("NA", 7),
             ("NA", 30), ("Na", 9), ("D1", 10), ("SD", 15.2), ("SD", 15.2),
             ("SD", 15.2), ("UA", 1), ("NA", 30)]
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.gqt = [0] * (len(crtrtp) + 1)
         self.gdr = [0] * (len(crtrtp) + 1)
         self.gcr = [0] * (len(crtrtp) + 1)
@@ -238,7 +242,7 @@
                 continue
             acno, trdt, trtp, ref1, batch, debit, credit, taxamt, detail, \
                 taxind, name = vals
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -275,9 +279,9 @@
             self.typeTotal()
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         acno = CCD(data[0], "NA", 7)

=== modified file 'crs/cr3030.py'
--- crs/cr3030.py	2017-02-25 14:03:05 +0000
+++ crs/cr3030.py	2017-06-28 14:23:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Transactions Due For Payment.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getTrn, getModName, projectDate
 from tartanFunctions import showError
 from tartanWork import crtrtp
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -149,9 +153,9 @@
         if self.fpdf.page and not p.quit:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, acno, name, ptyp):
         self.fpdf.add_page()

=== modified file 'crs/cr3030_rne.py'
--- crs/cr3030_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3030_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Transactions Due For Payment.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getTrn, getModName, projectDate
 from tartanFunctions import showError
 from tartanWork import crtrtp
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -188,9 +192,9 @@
         if self.fpdf.page and not p.quit:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, acno, name, ptyp):
         self.fpdf.add_page()

=== modified file 'crs/cr3040.py'
--- crs/cr3040.py	2017-02-25 14:03:05 +0000
+++ crs/cr3040.py	2017-06-28 14:23:41 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Outstanding Transactions.
@@ -35,11 +33,12 @@
         crsctl = gc.getCtl("crsctl", self.opts["conum"])
         if not crsctl:
             return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -135,9 +134,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, acno, name):
         self.fpdf.add_page()

=== modified file 'crs/cr3050.py'
--- crs/cr3050.py	2017-02-25 14:03:05 +0000
+++ crs/cr3050.py	2017-06-28 14:24:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Age Analysis.
@@ -34,6 +32,7 @@
         crsctl = gc.getCtl("crsctl", self.opts["conum"])
         if not crsctl:
             return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -61,7 +60,7 @@
         r2s = (("Yes","Y"),("No","N"),("Only","O"))
         fld = (
             (("T",0,0,0),"Id2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCutOff,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doCutOff,None,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Totals Only","",
                 "N","Y",self.doTots,None,None,None),
             (("T",0,2,0),"INA",7,"First Account Number","",
@@ -229,9 +228,9 @@
         if self.fpdf.page:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         acc = CCD(data[0], "NA", 7)
@@ -246,7 +245,7 @@
             return
         if self.debit == "N" and bal.work < 0:
             return
-        if self.debit == "O" and not bal.work < 0:
+        if self.debit == "O" and bal.work >= 0:
             return
         cur = CCD(ages[0], "SD", 13.2)
         d30 = CCD(ages[1], "SD", 13.2)

=== modified file 'crs/cr3060.py'
--- crs/cr3060.py	2017-02-25 14:03:05 +0000
+++ crs/cr3060.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Master Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class cr3060:
@@ -28,6 +26,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "crsmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -132,9 +135,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'crs/cr3070.py'
--- crs/cr3070.py	2017-02-25 14:03:05 +0000
+++ crs/cr3070.py	2017-06-28 14:24:37 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Reconciliation Statements.
@@ -15,7 +13,8 @@
 
 import time
 from tartanWork import crtrtp
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getTrn, getModName, getSingleRecords
 from tartanFunctions import showError
 
@@ -31,11 +30,16 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -95,8 +99,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.focusField("T", 0, 1)
 

=== modified file 'crs/cr3070_rne.py'
--- crs/cr3070_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3070_rne.py	2017-06-28 14:25:09 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Reconciliation Statements.
@@ -15,7 +13,8 @@
 
 import time
 from tartanWork import crtrtp
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getTrn, getModName, getSingleRecords
 from tartanFunctions import showError
 
@@ -31,11 +30,16 @@
             "crsrtf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -97,8 +101,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.focusField("T", 0, 1)
 
@@ -191,7 +195,7 @@
             taxind = CCD(trn[self.ctc.index("crt_taxind")], "UA", 1)
             payamt = CCD(trn[self.ctc.index("paid")], "SD", 13.2)
             owebal = CCD(trn[self.ctc.index("balance")], "SD", 13.2)
-            if not trn[self.ctc.index("rtf_depno")] is None:
+            if trn[self.ctc.index("rtf_depno")] is not None:
                 depno = CCD(trn[self.ctc.index("rtf_depno")], "UI", 3)
                 pjno = CCD(trn[self.ctc.index("rtf_pjno")], "UI", 6)
             else:

=== modified file 'crs/cr3080.py'
--- crs/cr3080.py	2017-02-25 14:03:05 +0000
+++ crs/cr3080.py	2017-06-28 14:25:23 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Remittance Advices.
@@ -42,6 +40,7 @@
         self.besttp = crsctl["ctc_besttp"]
         self.bankac = crsctl["ctc_bankac"]
         self.tplnam = crsctl["ctc_tplnam"]
+        self.fromad = crsctl["ctc_emadd"]
         if self.glint == "Y":
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
@@ -152,7 +151,7 @@
     def doPaydat(self, frt, pag, r, c, p, i, w):
         self.paydtw = w
         self.paydtd = self.df.t_disp[pag][0][p]
-        self.curdt = self.paydtw / 100
+        self.curdt = int(self.paydtw / 100)
         self.batno = "E%s" % self.curdt
 
     def doEnd(self):
@@ -451,8 +450,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Remittance Advice" % self.opts["conam"],
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            header="%s Remittance Advice" % self.opts["conam"],
+            repprt=self.df.repprt, fromad=self.fromad, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -509,7 +508,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "crm_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acno

=== modified file 'crs/cr3090.py'
--- crs/cr3090.py	2017-02-25 14:03:05 +0000
+++ crs/cr3090.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Print Labels.
@@ -45,7 +43,7 @@
         lab = {
             "stype": "C",
             "head": ("Codes",),
-            "data": labels.keys()}
+            "data": list(labels.keys())}
         r1s = (("Yes","Y"),("Singles","S"))
         r2s = (("Number","N"),("Name","M"),("Postal Code","P"))
         fld = (
@@ -116,7 +114,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'crs/cr3100.py'
--- crs/cr3100.py	2017-02-25 14:03:05 +0000
+++ crs/cr3100.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Notes Listing.
@@ -30,6 +28,7 @@
         crsctl = gc.getCtl("crsctl", self.opts["conum"])
         if not crsctl:
             return
+        self.fromad = crsctl["ctc_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "CRS")
         if not self.notes.data:
@@ -73,6 +72,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'crs/cr3110.py'
--- crs/cr3110.py	2017-02-25 14:03:05 +0000
+++ crs/cr3110.py	2017-06-28 14:25:40 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Purchase History.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import Balances, CCD, CreateChart, MyFpdf, ProgressBar, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import Balances, CCD, CreateChart, GetCtl, MyFpdf
+from TartanClasses import ProgressBar, Sql, TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 from tartanWork import mthnam
 
@@ -30,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "crsmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -47,7 +50,7 @@
         r1s = (("Yes","Y"),("No","N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Ending Period","",
-                (self.sysdtw/100),"Y",self.doDat,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doDat,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Ignore Zero Purch","",
                 "Y","Y",self.doZer,None,None,None))
         tnd = ((self.doEnd,"Y"), )
@@ -158,7 +161,7 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
+            header=self.tit, repprt=self.df.repprt, fromad=self.fromad,
             repeml=self.df.repeml)
         if self.df.repprt[1] == "X":
             return

=== modified file 'crs/cr3310_rne.py'
--- crs/cr3310_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3310_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Terms Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 
 class cr3310:
@@ -29,6 +27,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -150,8 +153,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):

=== modified file 'crs/cr3320_rne.py'
--- crs/cr3320_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3320_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Purchase Journal Listing.
@@ -14,8 +12,8 @@
 """
 
 import copy, time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, SplashScreen, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, SplashScreen
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName, getSingleRecords, showError
 from tartanWork import crtrtp
 
@@ -31,6 +29,11 @@
             "crstrn", "crsrtf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -190,7 +193,7 @@
         if self.reprint == "N" and self.preview == "N":
             self.opts["mf"].dbm.commitDbase()
         if self.fpdf.page:
-            keys = self.deptot.keys()
+            keys = list(self.deptot.keys())
             keys.sort()
             self.pglin = 999
             tots = [0, 0, 0, 0]
@@ -220,8 +223,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doTotHead(self):
@@ -360,7 +363,7 @@
         totvat = CCD(self.totvat, "SD", 13.2)
         totnet = CCD(self.totnet, "SD", 13.2)
         totdis = CCD(self.totdis, "SD", 13.2)
-        if not self.depno in self.deptot:
+        if self.depno not in self.deptot:
             self.deptot[self.depno] = [self.bname, 0, 0, 0, 0]
         self.deptot[self.depno][1] = float(
             ASD(self.deptot[self.depno][1]) + ASD(totamt.work))

=== modified file 'crs/cr3330_rne.py'
--- crs/cr3330_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3330_rne.py	2017-06-28 14:26:52 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Branch Purchases Report.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, SplashScreen, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, SplashScreen
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 
 class cr3330:
@@ -30,6 +28,11 @@
             "crsrtf", "crsrdm"])
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" %   \
@@ -59,7 +62,7 @@
         r2s = (("Yes", "Y"), ("No", "N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Report Period","",
-                self.sysdtw/100,"N",self.doPeriod,None,None,("efld",)),
+                int(self.sysdtw / 100),"N",self.doPeriod,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Report Type","",
                 "M","N",self.doType,None,None,None),
             (("T",0,2,0),("IRB",r2s),0,"Ignore Zeros","",
@@ -70,10 +73,10 @@
             tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
-        if w < (self.opts["period"][1][0] / 100) or \
-                w > (self.opts["period"][2][0] / 100):
+        if w < int(self.opts["period"][1][0] / 100) or \
+                w > int(self.opts["period"][2][0] / 100):
             return "Invalid Date, Not in Financial Period"
-        self.start = CCD(self.opts["period"][1][0] / 100, "D2", 7)
+        self.start = CCD(int(self.opts["period"][1][0] / 100), "D2", 7)
         self.curdt = CCD(w, "D2", 7)
 
     def doType(self, frt, pag, r, c, p, i, w):
@@ -111,7 +114,7 @@
             order=odr)
         if pur:
             for rec in pur:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = [rec[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                 if rec[3]:
                     tbl = round((rec[3] * 100.0 / 14.0), 2)
@@ -141,31 +144,45 @@
                 order=odr)
         else:
             # New Calculated Values
-            tab = ["ctlmst", "crsage"]
-            jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-                "rtf_acno=cra_acno and rtf_type=cra_type and "\
-                "rtf_ref1=cra_ref1"
-            col = [
-                "rtf_depno", "ctm_name",
-                "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
-                "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
-                "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+            # Get all Payments for the period(s)
             whr = [
-                ("cra_cono", "=", self.opts["conum"]),
-                ("cra_type", "in", (1, 2, 3, 4)),
-                ("ctm_cono=rtf_depno",)]
+                ("crt_cono", "=", self.opts["conum"]),
+                ("crt_type", "=", 5)]
             if self.perind == "M":
-                whr.append(("cra_curdt", "=", self.curdt.work))
+                whr.append(("crt_curdt", "=", self.curdt.work))
             else:
-                whr.append(("cra_curdt", "between", self.start.work,
+                whr.append(("crt_curdt", "between", self.start.work,
                     self.curdt.work))
-            grp = "rtf_depno, ctm_name"
-            odr = "rtf_depno"
-            pay = self.sql.getRec(tables=tab, join=jon, cols=col, where=whr,
-                group=grp, order=odr)
+            recs = self.sql.getRec(tables="crstrn", cols=["crt_ref1"],
+                where=whr, group="crt_ref1", order="crt_ref1")
+            pays = []
+            for rec in recs:
+                pays.append(rec[0])
+            if pays:
+                # Get all Discounts
+                tab = ["ctlmst", "crsrtf"]
+                jon = "left outer join crstrn on crt_cono=rtf_cono and "\
+                    "crt_acno=rtf_acno and crt_type=rtf_type and "\
+                    "crt_ref1=rtf_ref1"
+                col = [
+                    "rtf_depno", "ctm_name",
+                    "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
+                    "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
+                    "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+                whr = [
+                    ("rtf_cono", "=", self.opts["conum"]),
+                    ("rtf_type", "in", (1, 2, 3, 4)),
+                    ("crt_ref2", "in", pays),
+                    ("ctm_cono=rtf_depno",)]
+                grp = "rtf_depno, ctm_name"
+                odr = "rtf_depno"
+                pay = self.sql.getRec(tables=tab, join=jon, cols=col,
+                    where=whr, group=grp, order=odr)
+            else:
+                pay = []
         if pay:
             for rec in pay:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = [rec[1], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                 dic[rec[0]][5] = float(ASD(dic[rec[0]][5]) + ASD(rec[2]))
                 dic[rec[0]][6] = float(ASD(dic[rec[0]][6]) + ASD(rec[3]))
@@ -175,7 +192,7 @@
                 dic[rec[0]][10] = float(ASD(dic[rec[0]][10]) + ASD(rec[7]))
         data = []
         if dic:
-            key = dic.keys()
+            key = list(dic.keys())
             key.sort()
             for k in key:
                 data.append([k] + dic[k])
@@ -247,9 +264,9 @@
         if self.fpdf.page and not p.quit:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         dep = CCD(data[0], "UI", 3)

=== modified file 'crs/cr3340_rne.py'
--- crs/cr3340_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3340_rne.py	2017-06-28 14:27:36 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Branch Purchases by Supplier Report.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, SplashScreen, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, SplashScreen
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 
 class cr3340:
@@ -30,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -60,7 +63,7 @@
         r1s = (("Month to Date", "M"), ("Year to Date", "Y"))
         fld = (
             (("T",0,0,0),"ID2",7,"Report Period","",
-                self.sysdtw/100,"N",self.doPeriod,None,None,("efld",)),
+                int(self.sysdtw / 100),"N",self.doPeriod,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Report Type","",
                 "M","N",self.doType,None,None,None))
         tnd = ((self.doEnd,"y"), )
@@ -69,10 +72,10 @@
             tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
-        if w < (self.opts["period"][1][0] / 100) or \
-                w > (self.opts["period"][2][0] / 100):
+        if w < int(self.opts["period"][1][0] / 100) or \
+                w > int(self.opts["period"][2][0] / 100):
             return "Invalid Date, Not in Financial Period"
-        self.start = CCD(self.opts["period"][1][0] / 100, "D2", 7)
+        self.start = CCD(int(self.opts["period"][1][0] / 100), "D2", 7)
         self.curdt = CCD(w, "D2", 7)
         if self.curdt.work < 200703:
             return "Period Out of Range"
@@ -107,9 +110,9 @@
         dic = {}
         if pur:
             for rec in pur:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = {}
-                if not rec[1] in dic[rec[0]]:
+                if rec[1] not in dic[rec[0]]:
                     dic[rec[0]][rec[1]] = {}
                     dic[rec[0]][rec[1]] = [rec[2], 0, 0, 0, 0, 0, 0, 0, 0]
                 dic[rec[0]][rec[1]][1] = float(ASD(dic[rec[0]][rec[1]][1]) + \
@@ -122,9 +125,9 @@
             dis = self.getNewPeriod()
         if dis:
             for rec in dis:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = {}
-                if not rec[1] in dic[rec[0]]:
+                if rec[1] not in dic[rec[0]]:
                     dic[rec[0]][rec[1]] = {}
                     dic[rec[0]][rec[1]] = [rec[2], 0, 0, 0, 0, 0, 0, 0, 0]
                 dic[rec[0]][rec[1]][3] = float(ASD(dic[rec[0]][rec[1]][3]) + \
@@ -141,10 +144,10 @@
                     ASD(rec[8]))
         data = []
         if dic:
-            key1 = dic.keys()
+            key1 = list(dic.keys())
             key1.sort()
             for k1 in key1:
-                key2 = dic[k1].keys()
+                key2 = list(dic[k1].keys())
                 key2.sort()
                 for k2 in key2:
                     data.append([k1, k2] + dic[k1][k2])
@@ -182,30 +185,42 @@
 
     def getNewPeriod(self):
         # New Discounts
-        tab = ["crsmst", "crsage"]
-        jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-            "rtf_acno=cra_acno and rtf_type=cra_type and "\
-            "rtf_ref1=cra_ref1"
-        col = [
-            "rtf_depno", "rtf_acno", "crm_name",
-            "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
-            "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
-            "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+        # Get all Payments for the period(s)
         whr = [
-            ("cra_cono", "=", self.opts["conum"]),
-            ("cra_type", "in", (1, 2, 3, 4)),
-            ("crm_cono=cra_cono",),
-            ("crm_acno=cra_acno",)]
+            ("crt_cono", "=", self.opts["conum"]),
+            ("crt_type", "=", 5)]
         if self.perind == "M":
-            whr.append(("cra_curdt", "=", self.curdt.work))
+            whr.append(("crt_curdt", "=", self.curdt.work))
         else:
-            whr.append(("cra_curdt", "between", self.start.work,
+            whr.append(("crt_curdt", "between", self.start.work,
                 self.curdt.work))
-        grp = "rtf_depno, rtf_acno, crm_name"
-        odr = "rtf_depno, rtf_acno"
-        dis = self.sql.getRec(tables=tab, join=jon, cols=col, where=whr,
-            group=grp, order=odr)
-        return dis
+        recs = self.sql.getRec(tables="crstrn", cols=["crt_ref1"],
+            where=whr, group="crt_ref1", order="crt_ref1")
+        pays = []
+        for rec in recs:
+            pays.append(rec[0])
+        if pays:
+            # Get all Discounts
+            tab = ["crsmst", "crsrtf"]
+            jon = "left outer join crstrn on crt_cono=rtf_cono and "\
+                "crt_acno=rtf_acno and crt_type=rtf_type and "\
+                "crt_ref1=rtf_ref1"
+            col = [
+                "rtf_depno", "rtf_acno", "crm_name",
+                "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
+                "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
+                "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+            whr = [
+                ("rtf_cono", "=", self.opts["conum"]),
+                ("rtf_type", "in", (1, 2, 3, 4)),
+                ("crt_ref2", "in", pays),
+                ("crm_cono=rtf_cono",),
+                ("crm_acno=rtf_acno",)]
+            grp = "rtf_depno, rtf_acno, crm_name"
+            odr = "rtf_depno, rtf_acno"
+            dis = self.sql.getRec(tables=tab, join=jon, cols=col, where=whr,
+                group=grp, order=odr)
+            return dis
 
     def exportReport(self, data):
         p = ProgressBar(self.opts["mf"].body, mxs=len(data), esc=True)
@@ -287,9 +302,9 @@
             self.doBranchTotal()
             self.doGrandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         bch = CCD(data[0], "UI", 3)

=== modified file 'crs/cr3350_rne.py'
--- crs/cr3350_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3350_rne.py	2017-06-28 14:28:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Purchases by Supplier by Branch Report.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, SplashScreen, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, SplashScreen
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class cr3350:
@@ -30,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" %   \
@@ -52,7 +55,7 @@
         r1s = (("Month to Date", "M"), ("Year to Date", "Y"))
         fld = (
             (("T",0,0,0),"ID2",7,"Report Period","",
-                self.sysdtw/100,"N",self.doPeriod,None,None,("efld",)),
+                int(self.sysdtw / 100),"N",self.doPeriod,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Report Type","",
                 "M","N",self.doType,None,None,None))
         tnd = ((self.doEnd,"y"), )
@@ -61,10 +64,10 @@
             tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
-        if w < (self.opts["period"][1][0] / 100) or \
-                w > (self.opts["period"][2][0] / 100):
+        if w < int(self.opts["period"][1][0] / 100) or \
+                w > int(self.opts["period"][2][0] / 100):
             return "Invalid Date, Not in Financial Period"
-        self.start = CCD(self.opts["period"][1][0] / 100, "D2", 7)
+        self.start = CCD(int(self.opts["period"][1][0] / 100), "D2", 7)
         self.curdt = CCD(w, "D2", 7)
         if self.curdt.work < 200703:
             return "Period Out of Range"
@@ -99,9 +102,9 @@
         dic = {}
         if pur:
             for rec in pur:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = {}
-                if not rec[1] in dic[rec[0]]:
+                if rec[1] not in dic[rec[0]]:
                     dic[rec[0]][rec[1]] = {}
                     dic[rec[0]][rec[1]] = [rec[2], 0, 0, 0, 0, 0, 0, 0, 0]
                 dic[rec[0]][rec[1]][1] = float(ASD(dic[rec[0]][rec[1]][1]) + \
@@ -114,9 +117,9 @@
             dis = self.getNewPeriod()
         if dis:
             for rec in dis:
-                if not rec[0] in dic:
+                if rec[0] not in dic:
                     dic[rec[0]] = {}
-                if not rec[1] in dic[rec[0]]:
+                if rec[1] not in dic[rec[0]]:
                     dic[rec[0]][rec[1]] = {}
                     dic[rec[0]][rec[1]] = [rec[2], 0, 0, 0, 0, 0, 0, 0, 0]
                 dic[rec[0]][rec[1]][3] = float(ASD(dic[rec[0]][rec[1]][3]) + \
@@ -133,10 +136,10 @@
                     ASD(rec[8]))
         data = []
         if dic:
-            key1 = dic.keys()
+            key1 = list(dic.keys())
             key1.sort()
             for k1 in key1:
-                key2 = dic[k1].keys()
+                key2 = list(dic[k1].keys())
                 key2.sort()
                 for k2 in key2:
                     data.append([k1, k2] + dic[k1][k2])
@@ -169,29 +172,41 @@
 
     def getNewPeriod(self):
         # New Discounts
-        tab = ["ctlmst", "crsage"]
-        jon = "left outer join crsrtf on rtf_cono=cra_cono and "\
-            "rtf_acno=cra_acno and rtf_type=cra_type and "\
-            "rtf_ref1=cra_ref1"
-        col = [
-            "rtf_acno", "rtf_depno", "ctm_name",
-            "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
-            "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
-            "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+        # Get all Payments for the period(s)
         whr = [
-            ("cra_cono", "=", self.opts["conum"]),
-            ("cra_type", "in", (1, 2, 3, 4)),
-            ("ctm_cono=rtf_depno",)]
+            ("crt_cono", "=", self.opts["conum"]),
+            ("crt_type", "=", 5)]
         if self.perind == "M":
-            whr.append(("cra_curdt", "=", self.curdt.work))
+            whr.append(("crt_curdt", "=", self.curdt.work))
         else:
-            whr.append(("cra_curdt", "between", self.start.work,
+            whr.append(("crt_curdt", "between", self.start.work,
                 self.curdt.work))
-        grp = "rtf_acno, rtf_depno, ctm_name"
-        odr = "rtf_acno, rtf_depno"
-        dis = self.sql.getRec(tables=tab, join=jon, cols=col, where=whr,
-            group=grp, order=odr)
-        return dis
+        recs = self.sql.getRec(tables="crstrn", cols=["crt_ref1"],
+            where=whr, group="crt_ref1", order="crt_ref1")
+        pays = []
+        for rec in recs:
+            pays.append(rec[0])
+        if pays:
+            # Get all Discounts
+            tab = ["ctlmst", "crsrtf"]
+            jon = "left outer join crstrn on crt_cono=rtf_cono and "\
+                "crt_acno=rtf_acno and crt_type=rtf_type and "\
+                "crt_ref1=rtf_ref1"
+            col = [
+                "rtf_acno", "rtf_depno", "ctm_name",
+                "round(sum(rtf_disamt), 2)", "round(sum(rtf_distax), 2)",
+                "round(sum(rtf_incamt), 2)", "round(sum(rtf_inctax), 2)",
+                "round(sum(rtf_advamt), 2)", "round(sum(rtf_advtax), 2)"]
+            whr = [
+                ("rtf_cono", "=", self.opts["conum"]),
+                ("rtf_type", "in", (1, 2, 3, 4)),
+                ("crt_ref2", "in", pays),
+                ("ctm_cono=rtf_depno",)]
+            grp = "rtf_acno, rtf_depno, ctm_name"
+            odr = "rtf_acno, rtf_depno"
+            dis = self.sql.getRec(tables=tab, join=jon, cols=col, where=whr,
+                group=grp, order=odr)
+            return dis
 
     def printReport(self, data):
         self.acno = None
@@ -247,9 +262,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'crs/cr3360_rne.py'
--- crs/cr3360_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3360_rne.py	2017-06-28 14:28:34 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Reprint Creditors Ledger Remittance Advices.
@@ -76,7 +74,7 @@
             (("T",0,0,0),"INA",20,"Template Name","",
                 self.tplnam,"Y",self.doTplNam,tpm,None,None),
             (("T",0,1,0),"ID2",7,"Starting Period","",
-                self.sysdtw/100,"Y",self.doPer,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doPer,None,None,None),
             (("T",0,2,0),"INA",9,"From Number","",
                 "","Y",self.doNum,num,None,None),
             (("T",0,3,0),"INA",9,"To   Number","To Number",
@@ -301,7 +299,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             elif nl[tdc.index("tpd_detseq")] == "crm_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acno.work
@@ -383,7 +381,7 @@
             fromad = "recon4@spargs.co.za"
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+            pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
             fromad=fromad, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,

=== modified file 'crs/cr3370_rne.py'
--- crs/cr3370_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3370_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Creditor's Advertising and Incentive Discount Invoices.
@@ -14,7 +12,7 @@
 """
 
 import os, time
-from TartanClasses import ASD, CCD, MyFpdf, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import doDrawTable, doPrinter, getModName
 from tartanFunctions import getSingleRecords, getVatRate
 
@@ -26,12 +24,17 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        t = time.localtime()
-        self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "crsmst", "crstrn",
             "crsrtf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
+        t = time.localtime()
+        self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
         ctl = self.sql.getRec(tables="ctlmst",
             where=[("ctm_cono", "=", self.opts["conum"])], limit=1)
         for col in ("ctm_name", "ctm_add1", "ctm_add2", "ctm_add3",
@@ -129,15 +132,15 @@
             for a in acc:
                 if self.select == "I" and a[0]:
                     d = [a[0], a[1], "I"]
-                    if not d in self.doc["data"]:
+                    if d not in self.doc["data"]:
                         self.doc["data"].append(d)
                 if self.select == "A" and a[2]:
                     d = [a[2], a[3], "A"]
-                    if not d in self.doc["data"]:
+                    if d not in self.doc["data"]:
                         self.doc["data"].append(d)
                 if self.select == "B" and a[0] == a[2]:
                     d = [a[0], a[1], "B"]
-                    if not d in self.doc["data"]:
+                    if d not in self.doc["data"]:
                         self.doc["data"].append(d)
             self.doc["data"].sort()
         else:
@@ -214,7 +217,7 @@
         for eft, ind, ia, iv, aa, av, ii, ix, ai, ax, sq in acc:
             if not ia and not aa:
                 continue
-            if not eft in data[0]:
+            if eft not in data[0]:
                 data[0][eft] = [0.00, 0.00, 0.00, 0.00]
             if ia and self.select in ("B", "I"):
                 if not self.reprint and ii:
@@ -237,9 +240,9 @@
                             a2 = 0
                     else:
                         a2 = 0
-                if not r in data:
+                if r not in data:
                     data[r] = {}
-                if not eft in data[r]:
+                if eft not in data[r]:
                     data[r][eft] = [0.00, 0.00, 0.00, 0.00]
                 data[r][eft][0] = float(ASD(data[r][eft][0]) + ASD(a1))
                 data[r][eft][1] = float(ASD(data[r][eft][1]) + ASD(t1))
@@ -269,9 +272,9 @@
                             a2 = 0
                     else:
                         a2 = 0
-                if not r in data:
+                if r not in data:
                     data[r] = {}
-                if not eft in data[r]:
+                if eft not in data[r]:
                     data[r][eft] = [0.00, 0.00, 0.00, 0.00]
                 data[r][eft][2] = float(ASD(data[r][eft][2]) + ASD(a1))
                 data[r][eft][3] = float(ASD(data[r][eft][3]) + ASD(t1))
@@ -345,8 +348,8 @@
         self.fpdf.output(pdfnam, "F")
         self.df.repeml[2] = self.emadd.work
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            header="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
+            fromad=self.fromad, repeml=self.df.repeml)
 
     def drawInvoice(self, cw, ld):
         self.fpdf.add_page()

=== modified file 'crs/cr3380_rne.py'
--- crs/cr3380_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr3380_rne.py	2017-07-24 08:30:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Ledger Transactions by Branch Groups.
@@ -23,14 +21,15 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlgrp", "crsmst",
+            "crstrn", "crsrtf"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         crsctl = gc.getCtl("crsctl", self.opts["conum"])
         if not crsctl:
             return
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlgrp", "crsmst",
-            "crstrn", "crsrtf"], prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = crsctl["ctc_emadd"]
         return True
 
     def mainProcess(self):
@@ -43,12 +42,16 @@
                 ("ctg_code", "", 0, "Acc-Num"),
                 ("ctg_desc", "", 0, "Description", "Y")),
             "order": "ctg_code"}
+        bch = {
+            "stype": "C",
+            "titl": "Valid Types",
+            "data": []}
         fld = (
             (("T",0,0,0),"IUI",3,"Group Code","",
                 "","Y",self.doGrpCod,grp,None,("efld",)),
             (("T",0,0,0),"ONA",30,""),
             (("T",0,1,0),"IUI",3,"Branch Code","",
-                "","N",self.doBranch,grp,None,("efld",)),
+                "","N",self.doBranch,bch,None,("efld",)),
             (("T",0,1,0),"ONA",30,""),
             (("T",0,2,0),"ID2",7,"From Period","",
                 0,"N",self.doFrom,None,None,("efld",)),
@@ -70,13 +73,17 @@
         self.grpdes = grp[self.sql.ctlgrp_col.index("ctg_desc")]
         if self.grpcod == 22:
             self.grpcoy = [1]
+            data = [[1, "RNE"]]
         else:
             self.grpcoy = []
-        for x in range(2, 25, 2):
+            data = []
+        for x in xrange(2, 25, 2):
             if not grp[x]:
                 break
             self.grpcoy.append(grp[x])
+            data.append([grp[x], grp[x+1]])
         self.df.loadEntry(frt, pag, p+1, data=self.grpdes)
+        self.df.topf[0][2][8]["data"] = data
         return "sk2"
 
     def doBranch(self, frt, pag, r, c, p, i, w):
@@ -120,7 +127,8 @@
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=tab, heads=hds,
             cols=col, where=whr, group=grp, order=odr, stots=sdy, gtots=tot,
-            repprt=self.df.repprt, repeml=self.df.repeml, pbar="P")
+            repprt=self.df.repprt, repeml=self.df.repeml, fromad=self.fromad,
+            pbar="P")
         self.closeProcess()
 
     def doExit(self):

=== modified file 'crs/cr4010.py'
--- crs/cr4010.py	2017-02-25 14:03:05 +0000
+++ crs/cr4010.py	2017-06-28 14:29:30 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Interrogation.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, NotesCreate, PrintOrder, RepPrt
+from TartanClasses import ASD, Balances, GetCtl, NotesCreate, PrintOrder, RepPrt
 from TartanClasses import SChoice, SelectChoice, Sql, TabPrt, TartanDialog
 from tartanFunctions import getTrn
 from tartanWork import crtrtp, mthnam
@@ -37,11 +35,16 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.paidup = "N"
         return True
 
@@ -114,8 +117,8 @@
         txt = (self.doExit, None, None, None, None, self.doExit)
         self.df = TartanDialog(self.opts["mf"], title=self.tit, tags=tag,
             eflds=fld, butt=but, tend=tnd, txit=txt)
-        yer = self.sysdtw / 10000
-        mon = (self.sysdtw % 10000) / 100
+        yer = int(self.sysdtw / 10000)
+        mon = int((self.sysdtw % 10000) / 100)
         self.hist_tit = []
         for x in xrange(1, 14):
             if x == 13:
@@ -157,7 +160,7 @@
 
     def loadBalances(self):
         bals = Balances(self.opts["mf"], "CRS", self.opts["conum"],
-            (self.sysdtw/100), (self.acno,))
+            int(self.sysdtw / 100), (self.acno,))
         obal, tbal, ages = bals.doAllBals()
         this, hist = bals.doCrsDrsHist()
         self.purch = hist[0]
@@ -373,7 +376,7 @@
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["crt_type",
                     crtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
-                    repeml=repeml)
+                    repeml=repeml, fromad=self.fromad)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'crs/cr4010_rne.py'
--- crs/cr4010_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr4010_rne.py	2017-06-28 14:30:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Interrogation.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, NotesCreate, RepPrt, SChoice
+from TartanClasses import ASD, Balances, GetCtl, NotesCreate, RepPrt, SChoice
 from TartanClasses import SelectChoice, Sql, TabPrt, TartanDialog
 from tartanFunctions import callModule, getTrn, copyList
 from tartanWork import crtrtp, mthnam
@@ -37,11 +35,16 @@
             "crsrtf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
+        self.fromad = crsctl["ctc_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.history = "N"
         self.year = 0
         return True
@@ -135,8 +138,8 @@
         txt = (self.doExit, None, None, None, None, None, self.doExit)
         self.df = TartanDialog(self.opts["mf"], title=self.tit, tags=tag,
             eflds=fld, butt=but, tend=tnd, txit=txt)
-        yer = self.sysdtw / 10000
-        mon = (self.sysdtw % 10000) / 100
+        yer = int(self.sysdtw / 10000)
+        mon = int((self.sysdtw % 10000) / 100)
         self.hist_tit = []
         for x in xrange(1, 14):
             if x == 13:
@@ -184,7 +187,7 @@
 
     def loadBalances(self):
         bals = Balances(self.opts["mf"], "CRS", self.opts["conum"],
-            (self.sysdtw/100), (self.acno,))
+            int(self.sysdtw / 100), (self.acno,))
         obal, tbal, ages = bals.doAllBals()
         this, hist = bals.doCrsDrsHist()
         self.purch = hist[0]
@@ -238,7 +241,7 @@
     def doYear(self, frt, pag, r, c, p, i, w):
         self.year = w
         if self.year:
-            self.start = (self.year * 10000) + 0101
+            self.start = (self.year * 10000) + 101
             self.end = (self.year * 10000) + 1231
 
     def doTrans2(self, widget=None):
@@ -403,7 +406,7 @@
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["crt_type",
                     crtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
-                    repeml=repeml)
+                    repeml=repeml, fromad=self.fromad)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'crs/cr6010.py'
--- crs/cr6010.py	2017-02-25 14:03:05 +0000
+++ crs/cr6010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditor's Ledger Account Code Change.

=== modified file 'crs/cr6010_rne.py'
--- crs/cr6010_rne.py	2017-02-25 14:03:05 +0000
+++ crs/cr6010_rne.py	2017-06-27 09:48:19 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditor's Ledger Key Change.

=== modified file 'crs/cr6020.py'
--- crs/cr6020.py	2017-02-25 14:03:05 +0000
+++ crs/cr6020.py	2017-06-28 14:30:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Creditors Ledger Change Age Allocations.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import AgeTrans, ASD, CCD, Sql, TartanDialog
+from TartanClasses import AgeTrans, ASD, GetCtl, ProgressBar, Sql, TartanDialog
 from tartanFunctions import copyList, getTrn
 
 class cr6020:
@@ -29,9 +27,13 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        crsctl = gc.getCtl("crsctl", self.opts["conum"])
+        if not crsctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def dataHeader(self):
@@ -76,7 +78,8 @@
         self.df.loadEntry("T", pag, p+1, data=acc[0])
         self.opts["mf"].updateStatus("Select Routine")
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'normal')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "normal")
         self.df.setWidget(self.df.B0, "focus")
         self.opts["mf"].startLoop()
         if self.key in ("normal", "history"):
@@ -103,7 +106,8 @@
     def doReAge(self):
         self.opts["mf"].updateStatus("")
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         col = ["crt_trdt","crt_ref1","crt_type","crt_tramt","paid","balance"]
         whr = [
             ("crt_cono", "=", self.opts["conum"]),
@@ -145,29 +149,30 @@
         self.opts["mf"].updateStatus("Re-Ageing .... Please Wait!")
         self.key = "normal"
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         self.sql.delRec("crsage", where=[("cra_cono", "=", self.opts["conum"]),
             ("cra_acno", "=", self.acno)])
-        recs = self.sql.getRec(tables="crstrn", where=[("crt_cono", "=",
-            self.opts["conum"]), ("crt_acno", "=", self.acno)])
-        self.sql.delRec("crstrn", where=[("crt_cono", "=", self.opts["conum"]),
-            ("crt_acno", "=", self.acno)])
-        for rec in recs:
-            self.sql.insRec("crstrn", data=rec)
-        col, cr = getTrn(self.opts["mf"].dbm, "crs", whr=[("crt_cono", "=",
+        crc, cr = getTrn(self.opts["mf"].dbm, "crs", whr=[("crt_cono", "=",
             self.opts["conum"]), ("crt_acno", "=", self.acno), ("crt_tramt",
             "<", 0)], zer="N")
         if cr:
-            for ctr in cr:
-                ccdt = ctr[col.index("crt_curdt")]
-                cbal = CCD(ctr[col.index("balance")], "SD", 13.2).work
-                camt = cbal
-                col, dr = getTrn(self.opts["mf"].dbm, "crs", whr=[("crt_cono",
-                    "=", self.opts["conum"]), ("crt_acno", "=", self.acno),
-                    ("crt_tramt", ">", 0)], neg=False, zer="N")
-                if dr:
-                    for dtr in dr:
-                        dbal = CCD(dtr[col.index("balance")], "SD", 13.2).work
+            drc, dr = getTrn(self.opts["mf"].dbm, "crs", whr=[("crt_cono",
+                "=", self.opts["conum"]), ("crt_acno", "=", self.acno),
+                ("crt_tramt", ">", 0)], neg=False, zer="N")
+            if dr:
+                self.df.setWidget(self.df.mstFrame, state="hide")
+                txt = "Re-Allocating ... Please Wait"
+                pb = ProgressBar(self.opts["mf"].body, typ=txt, mxs=len(cr))
+                for cno, ctr in enumerate(cr):
+                    pb.displayProgress(cno)
+                    ccdt = ctr[crc.index("crt_curdt")]
+                    cbal = ctr[crc.index("balance")]
+                    camt = cbal
+                    for dno, dtr in enumerate(dr):
+                        dbal = dtr[drc.index("balance")]
+                        if not dbal:
+                            continue
                         damt = float(ASD(dbal) + ASD(camt))
                         if damt < 0:
                             camt = damt
@@ -175,23 +180,25 @@
                         else:
                             camt = 0.00
                         diff = float(ASD(dbal) - ASD(damt))
+                        dr[dno][drc.index("balance")] = damt
                         if diff:
                             self.sql.insRec("crsage", data=[self.opts["conum"],
-                                self.acno,
-                                dtr[col.index("crt_type")],
-                                dtr[col.index("crt_ref1")], ccdt,
-                                ctr[col.index("crt_type")],
-                                ctr[col.index("crt_ref1")], diff, 0])
+                                self.acno, dtr[drc.index("crt_type")],
+                                dtr[drc.index("crt_ref1")], ccdt,
+                                ctr[drc.index("crt_type")],
+                                ctr[drc.index("crt_ref1")], diff, 0])
                         if not camt:
                             break
-                diff = float(ASD(cbal) - ASD(camt))
-                if diff:
-                    self.sql.insRec("crsage", data=[self.opts["conum"],
-                        self.acno,
-                        ctr[col.index("crt_type")],
-                        ctr[col.index("crt_ref1")], ccdt,
-                        ctr[col.index("crt_type")],
-                        ctr[col.index("crt_ref1")], diff, 0])
+                    diff = float(ASD(cbal) - ASD(camt))
+                    if diff:
+                        self.sql.insRec("crsage", data=[self.opts["conum"],
+                            self.acno,
+                            ctr[drc.index("crt_type")],
+                            ctr[drc.index("crt_ref1")], ccdt,
+                            ctr[drc.index("crt_type")],
+                            ctr[drc.index("crt_ref1")], diff, 0])
+                pb.closeProgress()
+                self.df.setWidget(self.df.mstFrame, state="show")
         self.opts["mf"].closeLoop()
 
     def endTop(self):
@@ -204,4 +211,13 @@
         self.df.closeProcess()
         self.opts["mf"].closeLoop()
 
+if __name__ == "__main__":
+    from TartanClasses import Dbase, MainFrame
+    from tartanFunctions import loadRcFile
+    rcdic = loadRcFile("/home/paul/rcf/tartanrc_rnehol")
+    mf = MainFrame(rcdic=rcdic)
+    mf.dbm = Dbase(rcdic=rcdic)
+    mf.dbm.openDbase()
+    cr6020(**{"mf": mf, "conum": 1, "conam": "RNE Holdings"})
+
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'crs/crc110.py'
--- crs/crc110.py	2017-02-25 14:03:05 +0000
+++ crs/crc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Creditors Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", "E", "", 0, 0,
-                "remittance_advice"]
+                "remittance_advice", ""]
         else:
             self.new = False
         if self.genleg:
@@ -115,9 +113,11 @@
         else:
             fld = []
             seq = 0
-        fld.append(
+        fld.extend([
             (("T",0,seq,0),"INA",20,"Remittance Template","",
-                self.acc[6],"N",self.doTplNam,tpm,None,("efld",)))
+                self.acc[6],"N",self.doTplNam,tpm,None,("efld",)),
+            (("T",0,seq + 1,0),"ITX",50,"Email Address","",
+                self.acc[7],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -143,7 +143,7 @@
     def doGlint(self, frt, pag, r, c, p, i, w):
         self.glint = w
         if self.glint == "N":
-            for x in range(1, 5):
+            for x in xrange(1, 5):
                 self.df.loadEntry(frt, pag, p+x, data="")
             self.df.loadEntry(frt, pag, p+5, data="E")
             return "sk5"
@@ -190,7 +190,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 9:
                 if x in (1, 3):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)
@@ -209,12 +209,12 @@
                 data.append(d)
         if self.new:
             self.sql.insRec("crsctl", data=data)
-        elif not data == self.acc:
+        elif data != self.acc:
             self.sql.updRec("crsctl", data=data, where=[("ctc_cono", "=",
                 self.opts["conum"])])
             dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
             for num, dat in enumerate(self.acc):
-                if not dat == data[num]:
+                if dat != data[num]:
                     self.sql.insRec("chglog", data=["crsctl", "U",
                         "%03i" % self.opts["conum"], self.sql.crsctl_col[num],
                         dte, self.opts["capnm"], str(dat), str(data[num]), 0])

=== modified file 'csh/ca2010.py'
--- csh/ca2010.py	2017-02-25 14:03:05 +0000
+++ csh/ca2010.py	2017-06-28 14:34:07 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Cash Takings and Analysis.
@@ -226,7 +224,7 @@
         self.df.loadEntry("T", 0, 4, data=self.ctotal)
 
     def doQty(self, frt, pag, r, c, p, i, w):
-        val = w * self.denoms[p/2][1]
+        val = w * self.denoms[int(p / 2)][1]
         self.df.loadEntry(frt, pag, p+1, val)
         self.ctotal = float(ASD(self.ctotal) + ASD(val))
         self.df.loadEntry("T", 0, 4, data=self.ctotal)

=== modified file 'csh/ca2020.py'
--- csh/ca2020.py	2017-02-25 14:03:05 +0000
+++ csh/ca2020.py	2017-06-28 14:34:34 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     This is the Cash Analysis Transaction Import Utility.
@@ -31,8 +29,8 @@
             return
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
-        self.curdt_from = self.opts["period"][1][0] / 100
-        self.curdt_to = self.opts["period"][2][0] / 100
+        self.curdt_from = int(self.opts["period"][1][0] / 100)
+        self.curdt_to = int(self.opts["period"][2][0] / 100)
         return True
 
     def mainProcess(self):
@@ -94,7 +92,7 @@
                     credit = CCD(worksh.cell_value(rowx=row, colx=7),"SD",13.2)
                     continue
                 except:
-                    print "Error", worksh.cell_value(rowx=row, colx=0)
+                    print("Error", worksh.cell_value(rowx=row, colx=0))
                     continue
             elif line and type(worksh.cell_value(rowx=row, colx=0)) == str:
                 line = False

=== modified file 'csh/ca3010.py'
--- csh/ca3010.py	2017-02-25 14:03:05 +0000
+++ csh/ca3010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Cash Reconciliation Report.
@@ -121,7 +119,7 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
                 repeml=self.df.repeml)
         self.closeProcess()
 

=== modified file 'csv/all_data_types.py'
--- csv/all_data_types.py	2015-08-25 15:02:35 +0000
+++ csv/all_data_types.py	2017-05-28 13:36:24 +0000
@@ -8,4 +8,4 @@
         if not dat in all:
             all.append(dat)
 all.sort()
-print all
+print(all)

=== modified file 'csv/assctl_fld.csv'
--- csv/assctl_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/assctl_fld.csv	2017-05-02 07:53:11 +0000
@@ -2,3 +2,4 @@
 1,"cta_glint","UA","1.0","Integration","I"
 2,"cta_rordp","UA","1.0","Receiver Dep","R"
 3,"cta_lastp","D2","7.0","Last Dep Period","Last-DP"
+4,"cta_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/bkmctl_fld.csv'
--- csv/bkmctl_fld.csv	2014-12-09 16:32:44 +0000
+++ csv/bkmctl_fld.csv	2017-05-02 07:53:50 +0000
@@ -4,3 +4,4 @@
 3,"cbk_invtpl","NA","20.0","Invoice Template","Invoice-Template"
 4,"cbk_statpl","NA","20.0","Statement Template","Statement-Template"
 5,"cbk_terms","TX","50.0","Terms and Conditions","Terms-and-Conditions"
+6,"cbk_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/bwlctl_fld.csv'
--- csv/bwlctl_fld.csv	2015-06-24 07:32:39 +0000
+++ csv/bwlctl_fld.csv	2017-05-02 07:54:29 +0000
@@ -12,3 +12,4 @@
 11,"ctb_ratev","UD","5.2","Rate - Visitor","RateV"
 12,"ctb_greens","UA","6.0","Greens","Greens"
 13,"ctb_drfmat","UA","1.0","Draw Format","F"
+14,"ctb_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/crsctl_fld.csv'
--- csv/crsctl_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/crsctl_fld.csv	2017-05-02 07:54:49 +0000
@@ -5,3 +5,4 @@
 4,"ctc_besttp","UI","2.0","Best Account Type","BT"
 5,"ctc_bankac","UI","7.0","G/L Bank Account","Bank-Ac"
 6,"ctc_tplnam","NA","20.0","Remittance Template","Template-Name"
+7,"ctc_emadd","TX","50.0","Email Address","Email Address"

=== added file 'csv/crstrn_idx_rne.csv'
--- csv/crstrn_idx_rne.csv	1970-01-01 00:00:00 +0000
+++ csv/crstrn_idx_rne.csv	2017-03-30 14:53:15 +0000
@@ -0,0 +1,7 @@
+"Creditors Transactions",1,"U","crt_seq"
+"",2,"N","crt_ref2"
+"",3,"N","crt_cono","crt_type","crt_ref1"
+"",4,"U","crt_cono","crt_acno","crt_type","crt_ref1"
+"",5,"N","crt_cono","crt_acno","crt_type","crt_ref2"
+"",6,"N","crt_cono","crt_type","crt_batch","crt_batind"
+"",7,"N","crt_cono","crt_acno","crt_paydt","crt_payind"

=== modified file 'csv/drsctl_fld.csv'
--- csv/drsctl_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/drsctl_fld.csv	2017-05-02 07:55:37 +0000
@@ -4,3 +4,4 @@
 3,"ctd_chain","UA","1.0","Chain Stores","C"
 4,"ctd_tplnam","NA","20.0","Statement Template","Template-Name"
 5,"ctd_ageing","UA","1.0","Statement Ageing","A"
+6,"ctd_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/ibtctl_fld.csv'
--- csv/ibtctl_fld.csv	2016-02-27 13:18:41 +0000
+++ csv/ibtctl_fld.csv	2017-05-02 07:55:56 +0000
@@ -1,3 +1,4 @@
 0,"cbt_cono","UI","3.0","Company Number","Coy"
 1,"cbt_tplnam","NA","20.0","Transfer Template","Template-Name"
 2,"cbt_crscoy","UI","3.0","Creditor's Company","CCN"
+3,"cbt_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/lonctl_fld.csv'
--- csv/lonctl_fld.csv	2015-12-12 09:12:17 +0000
+++ csv/lonctl_fld.csv	2017-05-02 07:56:10 +0000
@@ -7,3 +7,4 @@
 6,"cln_crte","UD","6.2","Credit Rate","CRte-%"
 7,"cln_last","D1","10.0","Last Interest Date","Last-IntDt"
 8,"cln_tplnam","NA","20.0","Statement Template","Template-Name"
+9,"cln_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/memctl_fld.csv'
--- csv/memctl_fld.csv	2015-02-07 06:31:11 +0000
+++ csv/memctl_fld.csv	2017-05-02 07:56:34 +0000
@@ -13,3 +13,4 @@
 12,"mcm_cftpl","NA","20.0","Card Template - Front","Member-Card-Front"
 13,"mcm_cbtpl","NA","20.0","Card Template - Back","Member-Card-Back"
 14,"mcm_sttpl","NA","20.0","Statement Template","Statement-Template"
+15,"mcm_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/rcactl_fld.csv'
--- csv/rcactl_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/rcactl_fld.csv	2017-05-02 07:56:46 +0000
@@ -4,3 +4,4 @@
 3,"cte_lme","d1","10.0","Last Month End","LME-Date"
 4,"cte_tplown","NA","20.0","Owner Template","Owner-Template"
 5,"cte_tpltnt","NA","20.0","Tenant Template","Tenant-Template"
+6,"cte_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/rtlctl_fld.csv'
--- csv/rtlctl_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/rtlctl_fld.csv	2017-05-02 07:56:56 +0000
@@ -2,3 +2,4 @@
 1,"ctr_glint","UA","1.0","Integration","I"
 2,"ctr_lme","d1","10.0","Last Month End","LME-Date"
 3,"ctr_tplnam","NA","20.0","Statement Template","Template-Name"
+4,"ctr_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/slsctl_fld.csv'
--- csv/slsctl_fld.csv	2015-10-03 07:36:56 +0000
+++ csv/slsctl_fld.csv	2017-05-03 04:57:18 +0000
@@ -2,4 +2,4 @@
 1,"ctv_delnos","UA","1.0","Delivery Notes","D"
 2,"ctv_delval","UA","1.0","Print Values","V"
 3,"ctv_tplnam","NA","20.0","Document Template","Template-Name"
-4,"ctv_tills","UA","1.0","Point of Sale Tills","T"
+4,"ctv_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/strctl_fld.csv'
--- csv/strctl_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/strctl_fld.csv	2017-05-02 08:34:18 +0000
@@ -4,3 +4,4 @@
 3,"cts_prices","UI","1.0","Selling Prices","P"
 4,"cts_automu","UA","1.0","Automatic Markup","A"
 5,"cts_tplnam","NA","20.0","Orders Template","Template-Name"
+6,"cts_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'csv/wagctl_fld.csv'
--- csv/wagctl_fld.csv	2015-10-03 07:36:56 +0000
+++ csv/wagctl_fld.csv	2017-05-02 08:34:36 +0000
@@ -13,3 +13,4 @@
 12,"ctw_bestac","NA","4.0","Best Account Code","Best"
 13,"ctw_besttp","UI","2.0","Best Account Type","BT"
 14,"ctw_tplnam","NA","20.0","Payslip Template","Template-Name"
+15,"ctw_emadd","TX","50.0","Email Address","Email Address"

=== modified file 'doc/ASS.rst'
--- doc/ASS.rst	2016-07-10 11:57:24 +0000
+++ doc/ASS.rst	2017-07-18 10:06:53 +0000
@@ -10,6 +10,7 @@
 + **Sale of Assets** - If integrated, enter the general ledger account number for the `Sale of Assets` account.
 + **Receiver Dep** - Yes to have separate depreciation rates for the receiver.
 + **Last Dep Period** - Enter the last financial period that depreciation was raised.
++ **Email Address** - The email address of the person in charge of assets, if not the default email address in the company record.
 
 Depreciation Codes (AR)
 +++++++++++++++++++++++
@@ -44,6 +45,10 @@
 + **Description** - Enter the asset description.
 + **Depreciation Code** - Enter the asset depreciation code.
 
+.. raw:: pdf
+
+   PageBreak
+
 Data Capture
 ............
 Opening Balances (AR)

=== modified file 'doc/BKM.rst'
--- doc/BKM.rst	2016-12-30 14:10:51 +0000
+++ doc/BKM.rst	2017-05-03 06:10:21 +0000
@@ -15,6 +15,7 @@
 + **Booking Template** - The template to use for the booking invoice.
 + **Statement Template** - The template to use for the booking statement.
 + **Terms and Conditions** - The terms and conditions file to attach to the booking query.
++ **Email Address** - The email address of the person in charge of bookings, if not the default email address in the company record.
 
 Unit Records (BK)
 +++++++++++++++++

=== modified file 'doc/BKS.rst'
--- doc/BKS.rst	2017-03-25 15:17:51 +0000
+++ doc/BKS.rst	2017-08-24 07:49:09 +0000
@@ -2,7 +2,7 @@
  TARTAN SYSTEMS - Book Clubs
 =============================
 
-:Version:   5.3.0
+:Version:   5.3.1
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/BQS.rst'
--- doc/BQS.rst	2017-02-25 14:03:05 +0000
+++ doc/BQS.rst	2017-05-09 08:34:48 +0000
@@ -1,6 +1,6 @@
-==============================
- Tartan Systems - Quick Start
-==============================
+===================================
+ Tartan Systems - Bowls Quick Start
+===================================
 
 Once Tartan Systems has been installed, the following procedures have to be performed before any meaningful work can be done.
 
@@ -16,27 +16,27 @@
 + The first time Tartan is started you will be taken to `Preferences` where you will have to enter your preferences regarding database, paths, utilities and various other choices. In order to use the defaults press `Enter` to accept the `Configuration File` and then click the `Save Button`. You will then have to create the system record using `System Record Maintenance`. Click on the `Accept Button` to accept the defaults. You will also have to create a club record using `Club Master Record`. For most club installations there will only be one club record.
 
 + **Tabs Draw**
-    * Create a Control record by selecting `Control Record` from the File Maintenance menu.
-    * Create Tab records by selecting `Tabs Maintenance` from the File Maintenance menu.
-    * Do a draw by selecting `Draw` from the Tabs Draw menu.
-    * Reprint a draw by selecting `Reprint Draw` from the Tabs Draw menu.
-    * Print a draw summary by selecting `Draws Summary` from the Tabs Draw menu.
+    * Create a Control record by selecting `Control Record` from the menu.
+    * Create Tab records by selecting `Tabs Maintenance` from the menu.
+    * Do a draw by selecting `Tabs-In Draw` from the menu.
+    * Reprint a draw by selecting `Reprint Draw` from the menu.
+    * Print a draw summary by selecting `Draws Summary` from the menu.
 + **League Selections**
-    * Create a league format record by selecting `League Formats` from the File Maintenance menu.
-    * Create Tab records by selecting `TABS Maintenance` from the File Maintenance menu.
-    * Create side records by selecting `Side's Maintenance` from the File Maintenance menu.
-    * Enter team selections by selecting `Capture Selections` from the League Selections menu.
-    * To print `Assessment Forms` select Assessment Forms from the League Selections menu.
-    * To print flag `Declaration Forms` select Declaration Forms from the League Selections menu.
+    * Create a league format record by selecting `League Formats` from the menu.
+    * Create Tab records by selecting `Tabs Maintenance` from the Tabs menu.
+    * Create side records by selecting `Side's Maintenance` from the menu.
+    * Enter team selections by selecting `Capture Selections` from the menu.
+    * To print `Assessment Forms` select Assessment Forms from the menu.
+    * To print flag `Declaration Forms` select Declaration Forms from the menu.
     * To capture the completed `Assessment Forms` select `Capture Assessments` from the menu.
-    * To print the `Match Assessment Report` select Match Assessment Report from the League Selections menu.
-    * To print the `Assessment Summary` select `Assessment Summary` from the League Selections menu.
+    * To print the `Match Assessment Report` select Match Assessment Report from the menu.
+    * To print the `Assessment Summary` select `Assessment Summary` from the menu.
     * To clear historical selections select `Clear League History` from the Toolbox menu.
-+ **Club Competitions**
-    * Create a Competition Type record by selecting `Competition Types` from the File Maintenance menu.
-    * Capture Competition Entries by selecting `Capture Entries` from the Club Competitions menu.
-    * Print Match Draw and Cards by selecting `cCompetition Draw` from the Club Competitions menu.
-    * Print Match Cards Summary by selecting `Draw Summary` from the Club Competitions menu. This report is a running summary of all draws.
-    * To change the Draw select `Change Draw` from the Club Competitions menu. After changing the draw you must reprint them as per above. Please note that to only reprint cards you must select `Cards Only`.
-    * After the games have been played enter the results by selecting `Capture Game Results` from the Club Competitions menu.
-    * Print the game and match results by selecting the `Match Results Report` from the Club Competitions menu.
++ **Competitions**
+    * Create a Competition Type record by selecting `Competition Types` from the menu.
+    * Capture Competition Entries by selecting `Capture Entries` from the menu.
+    * Print Match Draw and Cards by selecting `cCompetition Draw` from the menu.
+    * Print Match Cards Summary by selecting `Draw Summary` from the menu. This report is a running summary of all draws.
+    * To change the Draw select `Change Draw` from the menu. After changing the draw you must reprint them as per above. Please note that to only reprint cards you must select `Cards Only`.
+    * After the games have been played enter the results by selecting `Capture Game Results` from the menu.
+    * Print the game and match results by selecting the `Match Results Report` from the menu.

=== modified file 'doc/BWL.rst'
--- doc/BWL.rst	2017-02-25 14:03:05 +0000
+++ doc/BWL.rst	2017-07-19 08:36:17 +0000
@@ -1,13 +1,13 @@
 Bowls Clubs
 -----------
-File Maintenance
-................
+Tabs
+....
 Control Record (BC)
 +++++++++++++++++++
 Use this routine to create the bowls control record.
 
-+ **M/L Integration** - Select whether or not the bowls system is integrated with the Member's system.
-+ **Same Numbers** - If integrated with the member's system is the tab number the same as the member number.
++ **M/L Integration** - Select whether or not the bowls system is integrated with the Member's system, if applicable.
++ **Same Numbers** - If integrated with the member's system is the tab number the same as the member number, if applicable.
 + **Male Start Seq** - The number range for male bowler's tab numbers.
 + **Female Start Seq** - The number range for female bowler's tab numbers.
 + **Non-member Start Seq** - The number range for non-member's player codes. This number must be greater than the male and female numbers.
@@ -21,13 +21,7 @@
 + **Draw Format** - The format to print the draw sheets as follows:
     + **S32L-S32L** - Skip, 3rd, 2nd, Lead - Skip, 3rd, 2nd, Lead
     + **S32L-L23S** - Skip, 3rd, 2nd, Lead - Lead, 2nd, 3rd, Skip
-
-Club's Records
-++++++++++++++
-Use this routine to add, amend and delete clubs records. These records are used by the `League Selections` modules.
-
-+ **Club Code** - The applicable club's code. A zero code will automatically select the next available code.
-+ **Club Name** - The name of the club.
++ **Email Address** - The email address of the person in charge of bowls, if not the default email address in the company record.
 
 Tab's Maintenance
 +++++++++++++++++
@@ -52,6 +46,8 @@
 + **Rating - Mixed** - The person's rating in mixed bowls.
 + **Association Number** - The person's number with the bowling association.
 
+|
+
 In addition there are the following buttons.
 
 + **Import** - Use this button to import, only tab ratings for existing tabs or all tab details for existing and new members, from an excel (xls) or comma separated (csv) file.
@@ -59,68 +55,8 @@
 + **Convert** - Use this button to convert visitor's tabs to member's tabs.
 + **Print** - Use this button to print a listing of member's details.
 
-League Formats
-++++++++++++++
-Use this routine to create league format records e.g. Flag or Muter.
-
-+ **Format Code** - The applicable format code. A zero code will automatically select the next available code.
-+ **Description** - The description of the format.
-+ **Assessment Forms** - Allow printing of assessment forms.
-+ **Number of Forms** - Print assessment form per team or individual.
-+ **Assess Self** - Whether the player must assess himself.
-+ **Rating Out Of** - What the maximum assessment rating could be.
-+ **Sets Format** - Whether sets are to be played.
-+ **Logo** - The logo image file of the sponsor, if applicable.
-
-Side's Maintenance
-++++++++++++++++++
-Use this routine to create or amend side records. These are sides as entered in the league e.g. `WPCC A` or `WPCC B`.
-
-+ **Format Code** - The applicable league format code as created using `League Formats`_.
-+ **Side Code** - The applicable side code. A zero code will automatically select the next available code.
-+ **Description** - The description of the side e.g. `WPCC A`
-+ **League** - Select whether this side is playing in the `Main` or `Friendly` league.
-+ **Division** - The division that the side is playing in e.g. `PR`, `1A` etc.
-+ **Number of Teams** - The number of teams in the side.
-+ **Active Flag** - Whether or not this side is still active. If a team gets relegated or promoted it must be made inactive and a new side must be created. An inactive side can be made active again in the future if it once again becomes applicable.
-
-Competition Types
-+++++++++++++++++
-Use this routine to create competition type records as follows:
-
-+ **Type Code** - zero for the next number else an existing number. To see existing types press the F1 key.
-+ **Description** - The competition description.
-+ **Competition Format** - The type of competition i.e. Tournament, K/Out (D), K/Out (N), R/Robin or Teams. K/Out (D) is for drawn teams knockout and K/Out (N) is for nominated teams knockout. Teams is for a competition between the home club and a visiting club.
-+ **Team Size** - The number of players in a team.
-+ **Number of Games** - The total number of games comprising the competition.
-+ **Number of Ends per Game** - The number of ends to be completed in a game.
-+ **Groups by Position** - Whether or not the teams must be split into different groups. If grouping is not going to occur continue with `Strict S v S` below.
-+ **Group After Game** - Select the game after which the grouping is to take place.
-+ **Adjust Scores** - Whether or not the scores are to be adjusted.
-+ **Expunge Games** - Which games, if any, must be expunged i.e. cleared. The games must be comma separated e.g. 1,2
-+ **Retain Percentage** - What percentage of the shots of the games, not expunged, must be retained when split into groups.
-+ **Number of Drawn Games** - The number of games which are randomly drawn. Enter 99 for a Round Robin.
-+ **Strict S v S** - Whether the competition is strictly strength versus strength i.e. teams could play each other again before the last game.
-+ **Different Drawn Games Scoring** - Whether or not drawn games have a different scoring format from strength versus strength games.
-+ **Points Format** - The formats for Drawn and Strength V Strength games.
-    + **Skins** - Whether or not to have skins.
-    + **Number of Ends per Skin** - If skins were selected then enter the number of games per skin.
-    + **Points Only** - Only points are to be captured i.e. no shots.
-    + **Points per End** - Number of points per end won.
-    + **Points per Skin** - If skins were selected then enter the number of points allocated per skin.
-    + **Points per Game** - Number of points for the game.
-    + **Bonus Points** - Whether to allocated a bonus point.
-    + **Win by More Than** - If bonus points are allocated enter the number of points which the winning margin must be more than.
-    + **Lose by Less Than** - If bonus points are allocated enter the number of points which the losing margin must be less than.
-
-.. raw:: pdf
-
-    PageBreak
-
-Tabs Draw
-.........
-Draw
-++++
+Tabs-In Draw
+++++++++++++
 Use this routine to make a new draw or to amend a current draw.
 
 + **Date** - The date of the draw.
@@ -131,6 +67,8 @@
 + **Fees - Member** - The fee charged per member.
 + **Fees - Visitor** - The fee charged per visitor.
 
+|
+
 Once the above fields have been entered capture all tabs as follows:
 
 + **Tab Number** - The player's tab number. Enter zero for a visitor. A number will be allocated to the visitor which can then be written on his tab e.g. 901.
@@ -141,6 +79,8 @@
 + **Rating** - The player's rating. Only for visitors.
 + **Paid** - Whether or not the player has paid.
 
+|
+
 The following *Buttons* are available:
 
 + **Bounce**** - Use this button to enter bounce games.
@@ -163,10 +103,6 @@
     + **Include Empty Rinks** - Whether to include or exclude empty rinks when printing a tabs draw board.
 + **Exit** - Use this button to exit the program. If the draw has not yet been done you will be prompted to confirm exiting.
 
-.. raw:: pdf
-
-    PageBreak
-
 Reprint Draw
 ++++++++++++
 Use this routine to reprint a previous draw.
@@ -178,8 +114,9 @@
 + **Tabs Draw Board** - Print an emulation of a tabs draw board.
 + **Include Empty Rinks** - Whether to include or exclude empty rinks when printing a tabs draw board.
 
-|
-|
+.. raw:: pdf
+
+    PageBreak
 
 How the Draw Works
 ++++++++++++++++++
@@ -223,8 +160,40 @@
 
     PageBreak
 
-League Selections
-.................
+League
+......
+Club Records
+++++++++++++
+Use this routine to add, amend and delete club records. These records are used by the `League Selections` modules.
+
++ **Club Code** - The applicable club's code. A zero code will automatically select the next available code.
++ **Club Name** - The name of the club.
+
+League Formats
+++++++++++++++
+Use this routine to create league format records e.g. Flag or Muter.
+
++ **Format Code** - The applicable format code. A zero code will automatically select the next available code.
++ **Description** - The description of the format.
++ **Assessment Forms** - Allow printing of assessment forms.
++ **Number of Forms** - Print assessment form per team or individual.
++ **Assess Self** - Whether the player must assess himself.
++ **Rating Out Of** - What the maximum assessment rating could be.
++ **Sets Format** - Whether sets are to be played.
++ **Logo** - The logo image file of the sponsor, if applicable.
+
+Side's Maintenance
+++++++++++++++++++
+Use this routine to create or amend side records. These are sides as entered in the league e.g. `WPCC A` or `WPCC B`.
+
++ **Format Code** - The applicable league format code as created using `League Formats`_.
++ **Side Code** - The applicable side code. A zero code will automatically select the next available code.
++ **Description** - The description of the side e.g. `WPCC A`
++ **League** - Select whether this side is playing in the `Main` or `Friendly` league.
++ **Division** - The division that the side is playing in e.g. `PR`, `1A` etc.
++ **Number of Teams** - The number of teams in the side.
++ **Active Flag** - Whether or not this side is still active. If a team gets relegated or promoted it must be made inactive and a new side must be created. An inactive side can be made active again in the future if it once again becomes applicable.
+
 Capture Selections
 ++++++++++++++++++
 Use this routine to capture team selections as follows:
@@ -306,6 +275,35 @@
 
 Club Competitions
 .................
+Competition Types
++++++++++++++++++
+Use this routine to create competition type records as follows:
+
++ **Type Code** - zero for the next number else an existing number. To see existing types press the F1 key.
++ **Description** - The competition description.
++ **Competition Format** - The type of competition i.e. Tournament, K/Out (D), K/Out (N), R/Robin or Teams. K/Out (D) is for drawn teams knockout and K/Out (N) is for nominated teams knockout. Teams is for a competition between the home club and a visiting club.
++ **Team Size** - The number of players in a team.
++ **Number of Games** - The total number of games comprising the competition.
++ **Number of Ends per Game** - The number of ends to be completed in a game.
++ **Groups by Position** - Whether or not the teams must be split into different groups. If grouping is not going to occur continue with `Strict S v S` below.
++ **Group After Game** - Select the game after which the grouping is to take place.
++ **Adjust Scores** - Whether or not the scores are to be adjusted.
++ **Expunge Games** - Which games, if any, must be expunged i.e. cleared. The games must be comma separated e.g. 1,2
++ **Retain Percentage** - What percentage of the shots of the games, not expunged, must be retained when split into groups.
++ **Number of Drawn Games** - The number of games which are randomly drawn. Enter 99 for a Round Robin.
++ **Strict S v S** - Whether the competition is strictly strength versus strength i.e. teams could play each other again before the last game.
++ **Different Drawn Games Scoring** - Whether or not drawn games have a different scoring format from strength versus strength games.
++ **Points Format** - The formats for Drawn and Strength V Strength games.
+    + **Skins** - Whether or not to have skins.
+    + **Number of Ends per Skin** - If skins were selected then enter the number of games per skin.
+    + **Points Only** - Only points are to be captured i.e. no shots.
+    + **Points per End** - Number of points per end won.
+    + **Points per Skin** - If skins were selected then enter the number of points allocated per skin.
+    + **Points per Game** - Number of points for the game.
+    + **Bonus Points** - Whether to allocated a bonus point.
+    + **Win by More Than** - If bonus points are allocated enter the number of points which the winning margin must be more than.
+    + **Lose by Less Than** - If bonus points are allocated enter the number of points which the losing margin must be less than.
+
 Capture Entries
 +++++++++++++++
 Use this routine to capture entries in a competition as follows:
@@ -345,17 +343,13 @@
         + **No** - Standard random draw where anyone could be paired with anyone.
         + **Yes** - An attempt will be made to pair visitors with local members.
     + **Number of Groups** - The number of groups, if applicable, to split the players into.
-    + **Smallest Group** - Select which group will have the least number of teams if applicable.
+    + **Smallest Group** - Select which group will have the least number of teams, if applicable.
     + **Greens** - The greens to be used, comma separated e.g. A,B,C will default to 6 rinks per green. You can default a green to seven by entering A7,B7,C which would give us 20 rinks. You can also exclude rinks by entering rinks to be used e.g. A2345,B345 which would give us 7 rinks.
     + **Group per Green** - Whether to allocate greens to groups. This only applies to the final game.
     + **Print Cards** - Whether or not to print score cards.
     + **All Cards** - If cards were selected to be printed, whether to print all cards or only selected ones.
     + **Template Name** - The template to use for the cards.
 
-.. raw:: pdf
-
-    PageBreak
-
 + **Knockout**
     + **Competition Code** - The relevant competition code.
     + **Completion Dates** - Enter the dates each round must be completed by.
@@ -430,13 +424,15 @@
 
 The **Generate** button is used to automatically renumber tabs in surname and names sequence.
 
-Merge Duplicate Visitors
-++++++++++++++++++++++++
-Use this routine to merge all visitor's tabs for the same name e.g. Smith Peter has 3 different tab numbers. This routine will merge all three into the first number.
+Delete Visitors' Tabs
++++++++++++++++++++++
+Use this routine to delete visitor's tabs without competition history and re-number the remaining visitor's tabs.
+
++ **Minimum Tabs-In** - Enter the minimum number of times a visitor must have played tabs-in to stay in the system.
 
 Clear History
 +++++++++++++
-Use this routine to erase all previous selection data as well as selectively erasing player and opponent details. Please ensure that you have a **backup** before selecting this routine as there is no going back.
+Use this routine to selectively erase historical data. Please ensure that you make a **backup** before selecting this routine as there is no going back.
 
 + **Clear** - Select what to clear.
     + **Tabs Draw** - All history relating to tabs draws.

=== modified file 'doc/BWM.rst'
--- doc/BWM.rst	2017-03-25 15:17:51 +0000
+++ doc/BWM.rst	2017-08-24 07:49:09 +0000
@@ -2,7 +2,7 @@
  TARTAN SYSTEMS - Bowling Clubs
 ================================
 
-:Version:   5.3.0
+:Version:   5.3.1
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/BWU.rst'
--- doc/BWU.rst	2016-07-10 11:57:24 +0000
+++ doc/BWU.rst	2017-05-09 08:21:56 +0000
@@ -1,26 +1,5 @@
 Utilities
 ---------
-Telephone Directory
-...................
-Use this routine to manage a telephone directory.
-
-All the fields are self explanatory with the exception of the following:
-
-+ **Directory Groups** - These are 3 letter group codes. If the code does not exist you will have to also enter the group description. This code can also be used in the bulk mailing module.
-
-+ **Directory Entries** - These are the individual directory entries. All the fields are self explanatory with the exception of the 'Contact Groups' which is a comma separated list of directory groups.
-
-+ **Buttons**
-    + **Back** - Select this button to display the previous directory entry.
-    + **Forward** - Select this button to display the next directory entry.
-    + **Import** - Select this button to import all contacts from other sources e.g. Creditors, Debtors, Members, Bookings etc.
-    + **Notes** - Select this button to maintain notes relating to this entry.
-    + **Print** - Select this button to print all entries or the current entry.
-    + **Apply** - Select this button to apply current addition or change.
-    + **Contacts** - Select this button to maintain contacts of the current entry.
-    + **Cancel** - Select this button to cancel any current additions or changes.
-    + **Quit** - Select this button to quit the application.
-
 Bulk Mail Utility
 .................
 Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Record`_.
@@ -96,112 +75,6 @@
 + **Exceptions**
 + **Order**
 
-.. raw:: pdf
-
-    PageBreak
-
-Template Manager
-................
-Use this routine to create, edit or delete templates.
-
-+ **Name** - The name of the template.
-+ **Title** - The title of the template.
-+ **TT** - The template type as follows:
-    + **I** - Sales Document
-    + **O** - Purchase Order
-    + **P** - Payslip
-    + **R** - Remittance Advice
-    + **S** - Statement
-+ **Sys** - The relevant system code relating to the type.
-+ **ST** - This only applies to statements and is the type of statement as follows:
-    + **N** - Normal
-    + **O** - Other
-+ **Size** - The page size i.e. A4, A5 or A6
-+ **Orient** - The page orientation i.e. Portrait or Landscape.
-+ **Sequence**
-    + **Line Number** - The line number to edit or 0 for the next available number.
-    + **Line Type** - The line type as follows:
-        + **C Merge Code** - Use this code for lines that will be populated with data.
-        + **I Image** - Use this code to display an image.
-        + **L Line** - Use this code to draw a line.
-        + **R Rectangle** - Use this code to draw a rectangle.
-        + **T Text** - Use this code to print some fixed text.
-    + **Placement** - Where to place this line.
-+ **Rectangle**
-    + **X1 Co-Ordinate** - The left hand position of the rectangle in mm.
-    + **X2 Co-Ordinate** - The right hand position of the rectangle in mm.
-    + **Y1 Co-Ordinate** - The top position of the rectangle in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the rectangle in mm.
-    + **Line Thickness** - The thickness of the line.
-+ **Image**
-    + **X1 Co-Ordinate** - The left hand position of the image in mm.
-    + **X2 Co-Ordinate** - The right hand position of the image in mm.
-    + **Y1 Co-Ordinate** - The top position of the image in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the image in mm.
-    + **File name** - The full path of the file name of the image.
-    + **Merge Code** - The merge code containing the path to the image e.g. ctlmst ctm_logo.
-+ **Line**
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The line colour.
-    + **Bold** - Whether to display the line in bold format.
-    + **X1 Co-Ordinate** - The left hand position of the line in mm.
-    + **Chrs** - The number of characters the line should extend.
-    + **X2** - The right hand position of the line in mm.
-    + **Y1 Co-Ordinate** - The top position of the line in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the line in mm.
-    + **Line Thickness** - The thickness of the line.
-+ **Text**
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the text in bold format.
-    + **Italic** - Whether to display the text in italic format.
-    + **Underline** - Whether to underline the text.
-    + **Alignment** - How to align the text.
-    + **Border** - Whether to draw borders around the text, TLRB.
-    + **Fill Background** - Whether to fill the background of the text.
-    + **X1 Co-Ordinate** - The left hand position of the text in mm.
-    + **Chrs** - The number of characters the text should extend.
-    + **X2** - The right hand position of the text in mm.
-    + **Y1 Co-Ordinate** - The top position of the text in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the text in mm.
-    + **Text Detail** - The text.
-+ **Code**
-    + **Text Type** - The text type. Heading, Label of a Column or No text.
-    + **Text Detail** - The text.
-    + **Font Name** - The name of the font to use.
-    + **Size** - The font size to use.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the text in bold format.
-    + **Italic** - Whether to display the text in italic format.
-    + **Underline** - Whether to underline the text.
-    + **Alignment** - How to align the text.
-    + **Border** - Whether to draw borders around the text, TLRB.
-    + **Fill Background** - Whether to fill the background of the text.
-    + **X1 Co-Ordinate** - The left hand position of the text in mm.
-    + **Chrs** - The number of characters the text should extend.
-    + **X2** - The right hand position of the text in mm.
-    + **Y1 Co-Ordinate** - The top position of the text in mm.
-    + **Y2** - The bottom position of the text in mm.
-    + **Merge Code** - The code to use to import data.
-    + **Font Name** - The name of the font to use for the imported data.
-    + **Size** - The font size to use for the imported data.
-    + **Colour** - The text colour.
-    + **Bold** - Whether to display the imported data in bold format.
-    + **Italic** - Whether to display the imported data in italic format.
-    + **Underline** - Whether to underline the imported data.
-    + **Alignment** - How to align the imported data.
-    + **Border** - Whether to draw borders around the imported data, TLRB.
-    + **Fill Background** - Whether to fill the background of the imported data.
-    + **X1 Co-Ordinate** - The left hand position of the imported data in mm.
-    + **Chrs** - The number of characters the imported data should extend.
-    + **X2** - The right hand position of the imported data in mm.
-    + **Y1 Co-Ordinate** - The top position of the imported data in mm.
-    + **Y2 Co-Ordinate** - The bottom position of the imported data in mm.
-    + **Number of Lines** - The number of lines the imported data can contain e.g. a name and address could be 5 lines.
-    + **Repeats** - The number of time to repeat the imported data e.g. the number of lines in the body of a statement could be 30.
-
 Help
 ----
 About Tartan
@@ -214,3 +87,7 @@
 Manual
 ......
 This routine will display this manual, if available, or the on-line one using your default browser.
+
+Quick Start Guide
+.................
+This routine will display the quick start guide, if available, or the on-line one using your default browser.

=== modified file 'doc/CRS.rst'
--- doc/CRS.rst	2016-07-10 11:57:24 +0000
+++ doc/CRS.rst	2017-05-03 06:10:31 +0000
@@ -14,6 +14,7 @@
 + **Best Account Type** - The Standard Bank Best account type.
 + **Bank Account Code** - The Standard Bank account code.
 + **Remittance Template** - The default template to use for remittance advices.
++ **Email Address** - The email address of the person in charge of creditors, if not the default email address in the company record.
 
 Masterfile Records (CR)
 +++++++++++++++++++++++

=== modified file 'doc/CRS_rne.rst'
--- doc/CRS_rne.rst	2016-07-10 11:57:24 +0000
+++ doc/CRS_rne.rst	2017-05-26 09:38:16 +0000
@@ -12,6 +12,7 @@
 + **Best Account Type** - The Standard Bank account type.
 + **Bank Account Code** - The Standard bank account code.
 + **Remittance Template** - The remittance advice template.
++ **Email Address** - The email address of the person in charge of creditors, if not the default email address in the company record.
 
 Masterfile Records (CR)
 +++++++++++++++++++++++

=== modified file 'doc/DRS.rst'
--- doc/DRS.rst	2016-07-10 11:57:24 +0000
+++ doc/DRS.rst	2017-05-03 06:10:33 +0000
@@ -12,6 +12,7 @@
 + **G/L Input Method** - If integrated, select whether allocations to general ledger accounts are entered inclusive or exclusive of VAT.
 + **Chain Stores** - Select whether to enable chain store groups.
 + **Statement Template** - The default template to use for statements.
++ **Email Address** - The email address of the person in charge of debtors, if not the default email address in the company record.
 
 Chain Stores (DR)
 +++++++++++++++++

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2017-03-25 15:17:51 +0000
+++ doc/Downloads.rst	2017-08-24 07:49:09 +0000
@@ -11,23 +11,23 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.3.0 and was released on the 25th March, 2017.
+The latest version of Tartan is 5.3.1 and was released on the 24th August, 2017.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.3.0.tgz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.3.1.tgz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tgz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tgz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tgz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.3.0.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.3.1.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.3.0.tgz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.3.0.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.3.0.tgz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.3.0.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.3.1.tgz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.3.1.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.3.1.tgz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.3.1.exe
 
 |linux| Linux
 =============

=== modified file 'doc/GEN.rst'
--- doc/GEN.rst	2017-03-25 15:17:51 +0000
+++ doc/GEN.rst	2017-07-18 10:02:00 +0000
@@ -329,10 +329,24 @@
     + **Rate-%** - The new interest rate to apply to the loan.
     + **Mth** - The interest rate to apply to the loan.
     + **Repayment** - The new amount to be repaid monthly.
-+ **MEM** = This only applies if the `Acc-Num` is the members control account and members have been integrated.
++ **MEM** - This only applies if the `Acc-Num` is the members control account and members have been integrated.
     + **Mem-Num** - The member's number.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this member.
++ **RCA** - This only applies if the `Acc-Num` is one of the extended rentals control accounts and extended rentals have been integrated.
+    + **Prm-Cod** - The premises code.
+    + **Own-Cod** - The owners code.
+    + **Tnt-Cod** - The tenants code, if applicable.
+    + **Seq** - The contract sequence number, if applicable.
+    + **T** - The movement type, if applicable.
+    + **Amount** - The transaction amount.
+    + **Details** - The transaction details.
++ **RTL** - This only applies if the `Acc-Num` is one of the basic rentals control accounts and basic rentals have been integrated.
+    + **Prm-Cod** - The premises code.
+    + **Acc-Num** - The account number.
+    + **Seq** - The contract sequence number.
+    + **Amount** - The transaction amount.
+    + **Details** - The transaction details.
 + **SLN** - This only applies if the `Acc-Num` is the staff loans control account and salaries have been integrated.
     + **EmpNo** - The employee number.
     + **Ln** - The loan number.
@@ -386,9 +400,23 @@
     + **Mth** - The interest rate to apply to the loan.
     + **Repayment** - The new amount to be repaid monthly.
 + **MEM** = This only applies if the `Acc-Num` is the members control account and members have been integrated.
-    + **Mem-Num** - The member's number.
+    + **Mem-Num** - The members number.
     + **Discount** - A discount amount.
     + **Amount** - The amount to be allocated to this member.
++ **RCA** - This only applies if the `Acc-Num` is one of the extended rentals control accounts and extended rentals have been integrated.
+    + **Prm-Cod** - The premises code.
+    + **Own-Cod** - The owners code.
+    + **Tnt-Cod** - The tenants code, if applicable.
+    + **Seq** - The contract sequence number, if applicable.
+    + **T** - The movement type, if applicable.
+    + **Amount** - The transaction amount.
+    + **Details** - The transaction details.
++ **RTL** - This only applies if the `Acc-Num` is one of the basic rentals control accounts and basic rentals have been integrated.
+    + **Prm-Cod** - The premises code.
+    + **Acc-Num** - The account number.
+    + **Seq** - The contract sequence number.
+    + **Amount** - The transaction amount.
+    + **Details** - The transaction details.
 + **SLN** - This only applies if the `Acc-Num` is the staff loans control account and salaries have been integrated.
     + **EmpNo** - The employee number.
     + **Ln** - The loan number.
@@ -595,4 +623,6 @@
 
 Interrogation (GL)
 ..................
-This routine is for querying individual general ledger accounts.
+
++ **Normal** - Use this routine for querying individual general ledger accounts.
++ **Financials** - Use this routine for querying individual general ledger accounts by report. The report will appear in spreadsheet format and individual month's transactions can be viewed by double clicking on the Actual balance.

=== modified file 'doc/IBT.rst'
--- doc/IBT.rst	2016-07-10 11:57:24 +0000
+++ doc/IBT.rst	2017-05-26 09:38:19 +0000
@@ -8,6 +8,7 @@
 
 + **Invoice Template** - The template to be used for invoices.
 + **Creditor's Company** - The company number of the creditor's ledger.
++ **Email Address** - The email address of the person in charge of transfers, if not the default email address in the company record.
 
 Data Capture (IB)
 .................

=== modified file 'doc/LON.rst'
--- doc/LON.rst	2016-07-10 11:57:24 +0000
+++ doc/LON.rst	2017-05-03 06:10:35 +0000
@@ -22,6 +22,7 @@
 + **Debit Rate** - The default interest rate on debit balances.
 + **Credit Rate** - The default interest rate on credit balances.
 + **Last Interest Date** - The last date interest was raised.
++ **Email Address** - The email address of the person in charge of loans, if not the default email address in the company record.
 
 Loans Masterfile (LN)
 +++++++++++++++++++++

=== modified file 'doc/MEM.rst'
--- doc/MEM.rst	2016-07-10 11:57:24 +0000
+++ doc/MEM.rst	2017-05-03 06:10:37 +0000
@@ -17,6 +17,7 @@
 + **Access Database** - The database name of the system.
 + **Access Username** - The user's name to access the system.
 + **Access Password** - The user's password to access the system.
++ **Email Address** - The email address of the person in charge of members, if not the default email address in the company record.
 
 Category Records
 ++++++++++++++++

=== modified file 'doc/MST.rst'
--- doc/MST.rst	2017-03-25 15:17:51 +0000
+++ doc/MST.rst	2017-08-24 07:49:09 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.3.0
+:Version:   5.3.1
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -68,7 +68,6 @@
 Additionally, the following dependencies should also be installed using pip:
 
 + ghostscript
-+ odfpy
 + markdown
 + pysmb
 + python-chart
@@ -98,7 +97,7 @@
 
 + Tartan_5.x.x.exe
 
-Install Tartan_5.x.x.exe by browsing to it and double clicking and then accept the defaults, except, also agree to creating an icon on your desktop.
+Install Tartan_5.x.x.exe by browsing to it and double clicking and then accept the defaults, except, agree to creating an icon on your desktop.
 
 Tartan should now be installed on your computer and you can continue with the `Startup Procedure`_.
 
@@ -115,7 +114,6 @@
 Windows Binary
 --------------
 .. NOTE::
-
   Users must first perform the following steps:
 
     1) Right click on the Tartan shortcut icon.
@@ -131,9 +129,14 @@
 ----
 The first time you run Tartan you will automatically be taken to `Preferences`_ where you will have to enter various parameters relating to your installation. After saving the preferences and restarting Tartan you will be prompted to create the database. Once the database has been created you will have to create the System record as per `System Record Maintenance`_ as well as a Company record as per `Company Records Maintenance`_.
 
+.. raw:: pdf
+
+   PageBreak
+
 Status Line
 -----------
-Please note that when using Tartan your available options will be highlighted on the status line at the bottom left hand side of the screen. Please read this carefully before asking for assistance.
+.. NOTE::
+  When using Tartan your available options will be highlighted on the status line at the bottom left hand side of the screen. Please read this carefully before asking for assistance.
 
 Common Keyboard Functions
 -------------------------
@@ -251,6 +254,10 @@
     + **Password** - The password. If the password is left blank it is the same as denying the selection i.e. The user will not be able to select the module(s).
     + **Check Password** - If the password is not blank then enter the password again for verification
 
+.. raw:: pdf
+
+   PageBreak
+
 **Examples**
 
 .. csv-table::
@@ -363,6 +370,8 @@
         + **FG** - The booking manager calendar settle foreground colour.
         + **BG** - The booking manager calendar settle background colour.
 
+|
+
 If this is a new installation you will be prompted to Create the Database after which you will need to create a `System Record` and at least one `Company Record`.
 
 Quit

=== modified file 'doc/QST.rst'
--- doc/QST.rst	2016-07-10 11:57:24 +0000
+++ doc/QST.rst	2017-05-09 08:33:05 +0000
@@ -55,15 +55,15 @@
 
 + Create a systems record, by selecting `System Record Maintenance` from the Control menu.
 + Create a company/club record, by selecting `Company Records Maintenance` from the Control menu.
-+ **Tabs Draw**
-    * Create a Control record by selecting `Control Record` from the File Maintenance menu.
-    * Create Tab records by selecting `TABS Maintenance` from the File Maintenance menu.
-    * Do a draw by selecting `New Draw` from the menu.
++ **Tabs**
+    * Create a Control record by selecting `Control Record` from the menu.
+    * Create Tab records by selecting `Tabs Maintenance` from the menu.
+    * Do a draw by selecting `Tabs-In Draw` from the menu.
     * Reprint a draw by selecting `Reprint Draw` from the menu.
-+ **League Selections**
-    * Create a league format record by selecting `League Formats` from the File Maintenance menu.
-    * Create Tab records by selecting `TABS Maintenance` from the File Maintenance menu.
-    * Create side records by selecting `Side's Maintenance` from the File Maintenance menu.
++ **League**
+    * Create a league format record by selecting `League Formats` from the menu.
+    * Create Tab records by selecting `Tabs Maintenance` from the Tabs menu.
+    * Create side records by selecting `Side's Maintenance` from the menu.
     * Enter team selections by selecting `Capture Selections` from the menu.
     * To print `Assessment Forms` select Assessment Forms from the menu.
     * To print flag `Declaration Forms` select Declaration Forms from the menu.
@@ -71,9 +71,9 @@
     * To print the `Match Assessment Report` select Match Assessment Report from the menu.
     * To print the `Assessment Summary` select `Assessment Summary` from the menu.
     * To clear historical selections select `Clear League History` from the toolbox menu.
-+ **Club Competitions**
-    * Create a Competition Type record by selecting `Competition Types` from the File Maintenance menu.
-    * Create player's records by selecting `Player's Maintenance` from the File Maintenance menu.
++ **Competitions**
+    * Create a Competition Type record by selecting `Competition Types` from the menu.
+    * Create player's records by selecting `Player's Maintenance` from the menu.
     * Capture Competition Entries by selecting `Capture Entries` from the menu.
     * Print Match Cards and Match Report by selecting `Print Match Cards` from the menu.
     * Print Match Cards Summary by selecting `Print Cards Summary` from the menu. This report is a running summary of all draws.

=== modified file 'doc/RCA.rst'
--- doc/RCA.rst	2016-07-10 11:57:24 +0000
+++ doc/RCA.rst	2017-05-03 06:10:40 +0000
@@ -18,6 +18,7 @@
 + **Last Month End** - The date of the last month end.
 + **Owner Template** - The template to be used to print owner's statements.
 + **Tenant Template** - The template to be used to print tenant's statements.
++ **Email Address** - The email address of the person in charge of rentals, if not the default email address in the company record.
 
 Owners Records (RC)
 +++++++++++++++++++

=== modified file 'doc/RTL.rst'
--- doc/RTL.rst	2016-07-10 11:57:24 +0000
+++ doc/RTL.rst	2017-05-03 06:10:39 +0000
@@ -20,6 +20,7 @@
 + **Postal Code** - The postal code.
 + **Rental Account** - If integrated with the general ledger this would be the control account.
 + **Income Account** - If integrated with the general ledger this would be the account to be credited with rentals raised.
++ **Email Address** - The email address of the person in charge of rentals, if not the default email address in the company record.
 
 Masterfile Records (RT)
 +++++++++++++++++++++++

=== modified file 'doc/SEC.rst'
--- doc/SEC.rst	2017-03-25 15:17:51 +0000
+++ doc/SEC.rst	2017-08-24 07:49:09 +0000
@@ -2,7 +2,7 @@
  TARTAN SYSTEMS - Sectional Competitions
 ========================================
 
-:Version:   5.3.0
+:Version:   5.3.1
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/SLS.rst'
--- doc/SLS.rst	2016-07-10 11:57:24 +0000
+++ doc/SLS.rst	2017-05-03 06:10:43 +0000
@@ -9,7 +9,7 @@
 + **Delivery Notes** - Whether to print delivery notes.
 + **Print Values** - Whether to include values on delivery notes.
 + **Invoice Template** - Enter the template to be used for sales documents.
-+ **Point of Sale Tills** - This has not yet been implemented.
++ **Email Address** - The email address of the person in charge of sales, if not the default email address in the company record.
 
 Reporting (SI)
 ..............

=== modified file 'doc/STR.rst'
--- doc/STR.rst	2017-03-25 15:17:51 +0000
+++ doc/STR.rst	2017-05-03 06:10:42 +0000
@@ -13,6 +13,7 @@
 + **Number of Price Levels** - Select the number of price levels up to a maximum of five.
 + **Automatic Markup** - Select whether to allow automatic markup of items received based on a percentage stored in the group or masterfile records.
 + **Orders Template** - The template to use to purchases orders.
++ **Email Address** - The email address of the person in charge of stores, if not the default email address in the company record.
 
 Units of Issue (ST)
 +++++++++++++++++++

=== modified file 'doc/UTY.rst'
--- doc/UTY.rst	2016-07-10 11:57:24 +0000
+++ doc/UTY.rst	2017-07-18 12:01:17 +0000
@@ -26,7 +26,9 @@
 Use this routine to send bulk MAIL or bulk SMSes. In order to use the MAIL facility you must enter a valid SMTP server in the `System Control Record`. In order to use the SMS facility you must register with www.smsportal.co.za and then enter your username and password in the `System Control Record` using `System Record Maintenance`_.
 
 + **Delivery Type** - The available delivery types will depend on what is entered in the `System Control Record` and can be either E-Mail, SMS or both.
+
 + **List to Use** - The available lists will depend on the systems being used and can contain Bookings, Bowls, Creditors, Debtors, Members and Directory (Telephone). In addition to the lists, CSV or XLS files can also be used, as long as they contain a name and an email address and or a cell number. Please note that Creditors and Debtors do not have SMS capabilities.
+
     + **Bookings** - This list accesses the tartan booking's contacts.
         + **Individuals** - Allow selection of individual recipients.
     + **Bowls** - This list accesses the tartan bowl's tabs.
@@ -82,7 +84,7 @@
 + **Heading-1** - The first heading of the report.
 + **Heading-2** - A second heading, if applicable.
 
-+ The following screens are now available:
+The following screens are now available:
 
 + **Tables** - These are the tables to be used to generate the report. At least one table must be selected.
     + **Table Sequence** - A sequential number of the line to enter or edit.

=== modified file 'doc/WAG.rst'
--- doc/WAG.rst	2016-07-10 11:57:24 +0000
+++ doc/WAG.rst	2017-07-18 10:17:17 +0000
@@ -23,6 +23,7 @@
 + **Best Account Code** - Enter the Standard bank Best Account Code.
 + **Best Account Type** - Enter the Standard bank Best Account Type.
 + **Payslip Template** - Enter the default template to use for payslips.
++ **Email Address** - The email address of the person in charge of salaries and wages, if not the default email address in the company record.
 
 Receiver Codes (WG)
 +++++++++++++++++++
@@ -111,6 +112,10 @@
 + **Tax-Amt** - The initial tax amount for the Inc-Fr column e.g. 0.
 + **Rate** - The rate for the income up to the Inc-To column e.g. 18.00.
 
+.. raw:: pdf
+
+   PageBreak
+
 Employee Masterfile (WG)
 ++++++++++++++++++++++++
 Use this routine to create, amend or delete employee masterfile records.
@@ -151,6 +156,11 @@
     + **Account Number**
     + **Account Holder's Name**
     + **Holder's Relationship**
+
+.. raw:: pdf
+
+   PageBreak
+
 + **Earnings**
     + **Cod** - The code of the earning to be automatically raised.
     + **Amnt/Rate** - The value or rate of the earning to be raised.

=== modified file 'doc/mystylesheet'
--- doc/mystylesheet	2017-02-25 14:03:05 +0000
+++ doc/mystylesheet	2017-07-18 11:57:01 +0000
@@ -234,13 +234,17 @@
 
     bullet-list:
       parent: bodytext
+      spaceBefore: 5
+      spaceAfter: 5
       commands: []
              [VALIGN, [ 0, 0 ], [ -1, -1 ], TOP ]
              [RIGHTPADDING, [ 0, 0 ], [ 1, -1 ], 0 ]
-      colWidths: ["20", null]
+      colWidths: ["12", null]
 
     bullet-list-item:
       parent: bodytext
+      spaceBefore: 5
+      spaceAfter: 5
 
     item-list:
       parent: bodytext

=== modified file 'doc/tarlic.rst'
--- doc/tarlic.rst	2015-04-02 19:32:07 +0000
+++ doc/tarlic.rst	2017-06-23 07:18:20 +0000
@@ -19,35 +19,40 @@
 1.5 Use within the scope of this License is free of charge and no royalty or licensing fees shall be paid by the Licensee.
 
 2. INTELLECTUAL PROPERTY RIGHTS
-2.1 This License does not transmit any intellectual rights on the Software. The Software and any copies that the Licensee is authorized by the Licensor to make are the intellectual property of and are owned by the Licensor.
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+2.1 This License does not transmit any intellectual rights on the Software. The Software and any copies that the Licensee is authorised by the Licensor to make are the intellectual property of and are owned by the Licensor.
 
 2.2 The Software is protected by copyright, including without limitation by Copyright Law and international treaty provisions.
 
 2.3 Any copies that the Licensee is permitted to make pursuant to this Agreement must contain the same copyright and other proprietary notices that appear on or in the Software.
 
-2.4 The structure, organization and code of the Software are the valuable trade secrets and confidential information of the Licensor. The Licensee agrees not to decompile, disassemble or otherwise attempt to discover the source code of the Software.
-
-2.5 Any attempts to reverse-engineer, copy, clone, modify or alter in any way the installer program without the Licensor’s specific approval are strictly prohibited. The Licensee is not authorized to use any plug-in or enhancement that permits to save modifications to a file with software licensed and distributed by the Licensor.
-
-2.6 Trademarks shall be used in accordance with accepted trademark practice, including identification of trademarks owners’ names. Trademarks can only be used to identify printed output produced by the Software and such use of any trademark does not give the Licensee any rights of ownership in that trademark.
+2.4 The structure, organisation and code of the Software are the valuable trade secrets and confidential information of the Licensor. The Licensee agrees not to decompile, disassemble or otherwise attempt to discover the source code of the Software.
+
+2.5 Any attempts to reverse-engineer, copy, clone, modify or alter in any way the installer program without the Licensor's specific approval are strictly prohibited. The Licensee is not authorised to use any plug-in or enhancement that permits to save modifications to a file with software licensed and distributed by the Licensor.
+
+2.6 Trademarks shall be used in accordance with accepted trademark practice, including identification of trademarks owners' names. Trademarks can only be used to identify printed output produced by the Software and such use of any trademark does not give the Licensee any rights of ownership in that trademark.
 
 3. WARRANTY
 ~~~~~~~~~~~
 3.1 The Licensor warrants that:
 
-3.1.1 The Licensor owns the Software and documentation and/or is in possession of valid and existing licenses that support the terms of this Agreement;
-
-3.1.2 the Software conforms to specifications and functionality as specified in Documentation;
-
-3.1.3 to the best of the Licensor's knowledge, the Software does not infringe upon or violate any intellectual property right of any third party;
-
-3.1.4 the Software does not contain any routine, intentionally designed by the Licensor to disable a computer program, or computer instructions that may alter, destroy or inhibit the processing environment.
-
-3.2 Except those warranties specified in section 3.1 above, the Software is being delivered to the Licensee “AS IS” and the Licensor makes no warranty as to its use or performance.
+  3.1.1 The Licensor owns the Software and documentation and/or is in possession of valid and existing licenses that support the terms of this Agreement;
+
+  3.1.2 the Software conforms to specifications and functionality as specified in Documentation;
+
+  3.1.3 to the best of the Licensor's knowledge, the Software does not infringe upon or violate any intellectual property right of any third party;
+
+  3.1.4 the Software does not contain any routine, intentionally designed by the Licensor to disable a computer program, or computer instructions that may alter, destroy or inhibit the processing environment.
+
+3.2 Except those warranties specified in section 3.1 above, the Software is being delivered to the Licensee "AS IS" and the Licensor makes no warranty as to its use or performance.
 
 The Licensor does not and cannot warrant the performance or results the Licensee may obtain by using the Software. The entire risk arising out of use or performance of the Software remains with the Licensee.
 
-The Licensor gives no warranty, express or implied, that (i) the Software will be of satisfactory quality, suitable for any particular purpose or for any particular use under specified conditions, notwithstanding that such purpose, use, or conditions may be known to the Licensor; or (ii) that the Software will operate error free or without interruption or that any errors will be corrected.
+The Licensor gives no warranty, express or implied, that:
+
+  (i) the Software will be of satisfactory quality, suitable for any particular purpose or for any particular use under specified conditions, notwithstanding that such purpose, use, or conditions may be known to the Licensor; or
+
+  (ii) that the Software will operate error free or without interruption or that any errors will be corrected.
 
 4. LIMITATION OF LIABILITY
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -57,4 +62,4 @@
 
 5. NON-WAIVER
 ~~~~~~~~~~~~~
-If a portion of this agreement is held unenforceable, the remainder shall be valid. It means that if one section of the Agreement is not lawful, the rest of the Agreement is still in force. A party’s failure to exercise any right under this Agreement will not constitute a waiver of (a) any other terms or conditions of this Agreement, or (b) a right at any time thereafter to require exact and strict compliance with the terms of this Agreement.
+If a portion of this agreement is held unenforceable, the remainder shall be valid. It means that if one section of the Agreement is not lawful, the rest of the Agreement is still in force. A party's failure to exercise any right under this Agreement will not constitute a waiver of (a) any other terms or conditions of this Agreement, or (b) a right at any time thereafter to require exact and strict compliance with the terms of this Agreement.

=== modified file 'drs/dr1010.py'
--- drs/dr1010.py	2017-02-25 14:03:05 +0000
+++ drs/dr1010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Materfile Maintenance.

=== modified file 'drs/dr1020.py'
--- drs/dr1020.py	2017-02-25 14:03:05 +0000
+++ drs/dr1020.py	2017-06-28 14:35:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtors Ledger Recurring Charges Creation, Deletion and Amendments.
@@ -46,8 +44,8 @@
             ctls = ["drs_ctl", "vat_ctl", "dis_all"]
             if self.gc.chkRec(self.opts["conum"], ctlctl, ctls):
                 return
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         return True
 
     def buildScreen(self):
@@ -194,7 +192,8 @@
             else:
                 self.df.loadEntry(frt, pag, p+4, data=num[d.index("dcm_vat")])
             for x in xrange(2):
-                exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, "disabled")
         if self.num == 999:
             return "nd"
 

=== modified file 'drs/dr2010.py'
--- drs/dr2010.py	2017-02-25 14:03:05 +0000
+++ drs/dr2010.py	2017-06-28 14:36:07 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtor's Ledger Data Capture.
@@ -280,7 +278,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -349,7 +347,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         self.amt = self.trnamt
@@ -379,7 +377,8 @@
             state = self.df.disableButtonsTags()
             self.opts["mf"].updateStatus("Choose an Ageing Option")
             for x in xrange(4, 8):
-                exec "self.df.setWidget(self.df.B%s, 'normal')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, "normal")
             self.df.setWidget(self.df.B4, "focus")
             self.ageloop = True
             self.opts["mf"].startLoop()
@@ -426,7 +425,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for x in xrange(4, 8):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"], system="drs", agetyp=atype,
             agekey=[self.opts["conum"], self.chain, self.dracno,
@@ -544,7 +544,7 @@
 
     def updateTables2(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.opts["rtn"] == 1:                          # Invoices

=== modified file 'drs/dr2020.py'
--- drs/dr2020.py	2017-02-25 14:03:05 +0000
+++ drs/dr2020.py	2017-06-28 14:36:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtors Ledger Receipts Data Capture.
@@ -223,7 +221,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -246,7 +244,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.glint == "Y":
@@ -354,7 +352,8 @@
         state = self.df.disableButtonsTags()
         self.opts["mf"].updateStatus("Choose an Ageing Option")
         for x in xrange(4, 8):
-            exec "self.df.setWidget(self.df.B%s, 'normal')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "normal")
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         if self.agecan:
@@ -431,7 +430,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for x in xrange(4, 8):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"], system="drs", agetyp=atype,
             agekey=[self.allcoy, self.chain, self.dracno, self.opts["rtn"],

=== modified file 'drs/dr2030.py'
--- drs/dr2030.py	2017-02-25 14:03:05 +0000
+++ drs/dr2030.py	2017-06-28 14:36:47 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtors Ledger - Raising Recurring Charges.
@@ -37,6 +35,7 @@
         if not drsctl:
             return
         self.glint = drsctl["ctd_glint"]
+        self.fromad = drsctl["ctd_emadd"]
         if self.glint == "Y":
             ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
@@ -61,7 +60,6 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.reprint = False
         return True
 
     def batchHeader(self):
@@ -166,9 +164,9 @@
                     # Check for Valid Period
                     charge = False
                     start = dct[col.index("dct_start")]
-                    year = start / 100
+                    year = int(start / 100)
                     month = start % 100
-                    while not start > self.bh.curdt:
+                    while start <= self.bh.curdt:
                         if start == self.bh.curdt:
                             charge = True
                             break
@@ -263,11 +261,7 @@
         self.fpdf.setFont("courier", "B", 16)
         self.fpdf.drawText(x=22*cw, y=1*ld, txt=self.ctm_name)
         self.fpdf.setFont("courier", "B", 14)
-        if self.reprint:
-            txt = "Copy Tax Invoice"
-        else:
-            txt = "Tax Invoice"
-        self.fpdf.drawText(x=108*cw, y=2*ld, w=16, align="R", txt=txt)
+        self.fpdf.drawText(x=108*cw, y=2*ld, w=16, align="R", txt="Tax Invoice")
         self.fpdf.setFont("courier", "B", self.fpdf.font[1])
         if self.ctm_logo:
             self.fpdf.image(self.ctm_logo, 45, 3, 138, 28)
@@ -353,8 +347,8 @@
              ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            header="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
+            fromad=self.fromad, repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'drs/dr3010.py'
--- drs/dr3010.py	2017-02-25 14:03:05 +0000
+++ drs/dr3010.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import drtrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "drstrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -153,8 +157,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr3020.py'
--- drs/dr3020.py	2017-02-25 14:03:05 +0000
+++ drs/dr3020.py	2017-06-28 14:37:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtor's Ledger Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, copyList
 from tartanFunctions import showError
 from tartanWork import drtrtp
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -43,8 +47,8 @@
             ("UI", 3, False, False, True), ("NA", 7), ("NA", 30), ("Na", 9),
             ("D1", 10), ("SD", 13.2), ("SD", 13.2), ("SD", 13.2), ("UA", 1),
             ("NA", 30)]
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.gqt = [0] * (len(drtrtp) + 1)
         self.gdr = [0] * (len(drtrtp) + 1)
         self.gcr = [0] * (len(drtrtp) + 1)
@@ -241,7 +245,7 @@
                 continue
             chain, acno, trdt, trtp, ref1, batch, debit, credit, taxamt, \
                 detail, taxind, name = vals
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -280,8 +284,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         chain = CCD(data[0], "UI", 3)

=== modified file 'drs/dr3030.py'
--- drs/dr3030.py	2017-02-25 14:03:05 +0000
+++ drs/dr3030.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Transactions Due For Payment.
@@ -15,7 +13,8 @@
 
 import time
 from tartanWork import drtrtp
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getTrn, getModName, showError
 
 class dr3030:
@@ -30,6 +29,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -120,9 +124,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3040.py'
--- drs/dr3040.py	2017-02-25 14:03:05 +0000
+++ drs/dr3040.py	2017-06-28 14:37:31 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Outstanding Transactions.
@@ -35,11 +33,12 @@
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -139,9 +138,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3050.py'
--- drs/dr3050.py	2017-02-25 14:03:05 +0000
+++ drs/dr3050.py	2017-06-28 14:37:51 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Age Analysis.
@@ -34,6 +32,7 @@
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -65,7 +64,7 @@
         r2s = (("Yes","Y"),("No","N"),("Only","O"))
         fld = (
             (("T",0,0,0),"ID2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCutOff,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doCutOff,None,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Totals Only","",
                 "N","Y",self.doTots,None,None,None),
             (("T",0,2,0),"IUA",3,"Business Activity","",
@@ -242,9 +241,9 @@
         if self.fpdf.page:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         chn = CCD(data[0], "UI", 3)
@@ -260,7 +259,7 @@
             return
         if self.credit == "N" and bal.work < 0:
             return
-        if self.credit == "O" and not bal.work < 0:
+        if self.credit == "O" and bal.work >= 0:
             return
         cur = CCD(ages[0], "SD", 13.2)
         d30 = CCD(ages[1], "SD", 13.2)

=== modified file 'drs/dr3060.py'
--- drs/dr3060.py	2017-02-25 14:03:05 +0000
+++ drs/dr3060.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Master Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class dr3060:
@@ -29,6 +27,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -189,8 +192,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr3080.py'
--- drs/dr3080.py	2017-02-25 14:03:05 +0000
+++ drs/dr3080.py	2017-06-28 14:38:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Statements.
@@ -28,19 +26,20 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "drschn",
+            "drsmst", "drstrn", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
-        t = time.localtime()
-        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "drschn",
-            "drsmst", "drstrn", "tplmst"], prog=__name__)
-        if self.sql.error:
-            return
         self.chains = drsctl["ctd_chain"]
         self.stpl = drsctl["ctd_tplnam"]
         self.ageing = drsctl["ctd_ageing"]
+        self.fromad = drsctl["ctd_emadd"]
+        t = time.localtime()
+        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         if self.chains == "N":
             self.schn = 0
             self.echn = 0
@@ -233,7 +232,7 @@
     def doDat(self, frt, pag, r, c, p, i, w):
         self.datew = w
         self.dated = self.df.t_disp[pag][0][p]
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
 
     def doEnd(self):
         self.df.closeProcess()
@@ -360,13 +359,13 @@
                 t[trns[0].index("drt_taxind")] = ""
                 t[trns[0].index("drt_batind")] = ""
                 trns[1].insert(0, t)
-            if not len(trns[1]) > self.form.maxlines:
+            if len(trns[1]) <= self.form.maxlines:
                 self.doBody(trns[0], trns[1], tdc)
             else:
-                pages = len(trns[1]) / self.form.maxlines
+                pages = int(len(trns[1]) / self.form.maxlines)
                 if len(trns[1]) % self.form.maxlines:
                     pages += 1
-                if not pages > self.pages:
+                if pages <= self.pages:
                     self.doBody(trns[0], trns[1], tdc)
                 else:
                     bal = 0
@@ -406,8 +405,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.dated),
+            repprt=self.df.repprt, fromad=self.fromad, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -453,7 +452,7 @@
         tdc = self.form.sql.tpldet_col
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "drm_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acc
@@ -472,7 +471,7 @@
 
     def doTotal(self, tdc):
         for c in self.form.total:
-            if self.ageing == "N" and not c == "total_balance":
+            if self.ageing == "N" and c != "total_balance":
                 continue
             t = "%s_T00" % c
             if c in self.form.newdic:

=== modified file 'drs/dr3090.py'
--- drs/dr3090.py	2017-02-25 14:03:05 +0000
+++ drs/dr3090.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Print Labels. L7159
@@ -45,7 +43,7 @@
         lab = {
             "stype": "C",
             "head": ("Codes",),
-            "data": labels.keys()}
+            "data": list(labels.keys())}
         r1s = (("Yes","Y"),("Singles","S"))
         r2s = (("Number","N"),("Name","M"),("Postal Code","P"))
         fld = (
@@ -116,7 +114,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'drs/dr3100.py'
--- drs/dr3100.py	2017-02-25 14:03:05 +0000
+++ drs/dr3100.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Notes Listing.
@@ -30,6 +28,7 @@
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
+        self.fromad = drsctl["ctd_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "DRS")
         if not self.notes.data:
@@ -76,6 +75,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'drs/dr3110.py'
--- drs/dr3110.py	2017-02-25 14:03:05 +0000
+++ drs/dr3110.py	2017-06-28 14:38:48 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Sales History.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import Balances, CCD, CreateChart, MyFpdf, ProgressBar, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import Balances, CCD, CreateChart, GetCtl, MyFpdf
+from TartanClasses import ProgressBar, Sql, TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 from tartanWork import mthnam
 
@@ -30,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "drsmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -51,7 +54,7 @@
         r1s = (("Yes","Y"),("No","N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Ending Period","",
-                (self.sysdtw/100),"Y",self.doDat,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doDat,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Ignore Zero Sales","",
                 "Y","Y",self.doZer,None,None,None),
             (("T",0,2,0),("IRB",r1s),0,"Report By Salesman","",
@@ -221,7 +224,7 @@
         self.doTotals(ttype="G")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
+            header=self.tit, repprt=self.df.repprt, fromad=self.fromad,
             repeml=self.df.repeml)
         if self.df.repprt[1] == "X":
             return

=== modified file 'drs/dr3120.py'
--- drs/dr3120.py	2017-02-25 14:03:05 +0000
+++ drs/dr3120.py	2017-06-28 14:39:03 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Ledger Interest Chargeable.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, CCD, MyFpdf, ProgressBar, Sql
+from TartanClasses import ASD, Balances, CCD, GetCtl, MyFpdf, ProgressBar, Sql
 from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, projectDate, showError
 
@@ -29,6 +27,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "drsmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -102,7 +105,7 @@
                     continue
                 per = CCD(self.defrte, "UD", 5.2)
             bals = Balances(self.opts["mf"], "DRS", self.opts["conum"],
-                (self.cutoff/100), (chn.work, acno.work))
+                int(self.cutoff / 100), (chn.work, acno.work))
             obal, tbal, ages = bals.doAllBals()
             if tbal <= 0:
                 continue
@@ -133,8 +136,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr4010.py'
--- drs/dr4010.py	2017-02-25 14:03:05 +0000
+++ drs/dr4010.py	2017-06-28 14:39:39 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Interrogation.
@@ -40,12 +38,13 @@
         if not drsctl:
             return
         self.chains = drsctl["ctd_chain"]
+        self.fromad = drsctl["ctd_emadd"]
         self.paidup = "N"
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -159,8 +158,8 @@
             self.chain = 0
         self.df = TartanDialog(self.opts["mf"], title=self.tit, tags=tag,
             eflds=fld, butt=but, tend=tnd, txit=txt)
-        yer = self.sysdtw / 10000
-        mon = (self.sysdtw % 10000) / 100
+        yer = int(self.sysdtw / 10000)
+        mon = int((self.sysdtw % 10000) / 100)
         self.hist_tit = []
         for x in xrange(1, 14):
             if x == 13:
@@ -252,7 +251,7 @@
 
     def loadBalances(self):
         bals = Balances(self.opts["mf"], "DRS", self.opts["conum"],
-            (self.sysdtw/100), (self.chain, self.acno))
+            int(self.sysdtw / 100), (self.chain, self.acno))
         obal, tbal, ages = bals.doAllBals()
         this, hist = bals.doCrsDrsHist()
         self.sale = hist[0]
@@ -535,7 +534,7 @@
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["drt_type",
                     drtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
-                    repeml=repeml)
+                    repeml=repeml, fromad=self.fromad)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'drs/dr6010.py'
--- drs/dr6010.py	2017-02-25 14:03:05 +0000
+++ drs/dr6010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtor's Ledger Key Change.

=== modified file 'drs/dr6020.py'
--- drs/dr6020.py	2017-02-25 14:03:05 +0000
+++ drs/dr6020.py	2017-06-28 14:39:51 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtors Ledger Change Age Allocations.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import AgeTrans, ASD, CCD, GetCtl, Sql, TartanDialog
+from TartanClasses import AgeTrans, ASD, CCD, GetCtl, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import copyList, getTrn
 
 class dr6020:
@@ -36,7 +35,7 @@
         self.chains = drsctl["ctd_chain"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def dataHeader(self):
@@ -114,7 +113,8 @@
         self.df.loadEntry("T", pag, p+1, data=acc[0])
         self.opts["mf"].updateStatus("Select Routine")
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'normal')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "normal")
         self.df.setWidget(self.df.B0, "focus")
         self.opts["mf"].startLoop()
         if self.key in ("normal", "history"):
@@ -141,7 +141,8 @@
     def doReAge(self):
         self.opts["mf"].updateStatus("")
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         col = ["drt_trdt","drt_ref1","drt_type","drt_tramt","paid","balance"]
         whr = [
             ("drt_cono", "=", self.opts["conum"]),
@@ -184,31 +185,31 @@
         self.opts["mf"].updateStatus("Re-Ageing .... Please Wait!")
         self.key = "normal"
         for b in xrange(3):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         self.sql.delRec("drsage", where=[("dra_cono", "=", self.opts["conum"]),
             ("dra_chain", "=", self.chain), ("dra_acno", "=", self.acno)])
-        recs = self.sql.getRec(tables="drstrn", where=[("drt_cono", "=",
-            self.opts["conum"]), ("drt_chain", "=", self.chain), ("drt_acno",
-            "=", self.acno)])
-        self.sql.delRec("drstrn", where=[("drt_cono", "=", self.opts["conum"]),
-            ("drt_chain", "=", self.chain), ("drt_acno", "=", self.acno)])
-        for rec in recs:
-            self.sql.insRec("drstrn", data=rec)
-        col, cr = getTrn(self.opts["mf"].dbm, "drs", whr=[("drt_cono", "=",
+        crc, cr = getTrn(self.opts["mf"].dbm, "drs", whr=[("drt_cono", "=",
             self.opts["conum"]), ("drt_chain", "=", self.chain), ("drt_acno",
             "=", self.acno), ("drt_tramt", "<", 0)], zer="N")
         if cr:
-            for ctr in cr:
-                ccdt = ctr[col.index("drt_curdt")]
-                cbal = CCD(ctr[col.index("balance")], "SD", 13.2).work
-                camt = cbal
-                col, dr = getTrn(self.opts["mf"].dbm, "drs", whr=[("drt_cono",
-                    "=", self.opts["conum"]), ("drt_chain", "=", self.chain),
-                    ("drt_acno", "=", self.acno), ("drt_tramt", ">", 0)],
-                    neg=False, zer="N")
-                if dr:
-                    for dtr in dr:
-                        dbal = CCD(dtr[col.index("balance")], "SD", 13.2).work
+            drc, dr = getTrn(self.opts["mf"].dbm, "drs", whr=[("drt_cono",
+                "=", self.opts["conum"]), ("drt_chain", "=", self.chain),
+                ("drt_acno", "=", self.acno), ("drt_tramt", ">", 0)],
+                neg=False, zer="N")
+            if dr:
+                self.df.setWidget(self.df.mstFrame, state="hide")
+                txt = "Re-Allocating ... Please Wait"
+                pb = ProgressBar(self.opts["mf"].body, typ=txt, mxs=len(cr))
+                for cno, ctr in enumerate(cr):
+                    pb.displayProgress(cno)
+                    ccdt = ctr[crc.index("drt_curdt")]
+                    cbal = CCD(ctr[crc.index("balance")], "SD", 13.2).work
+                    camt = cbal
+                    for dno, dtr in enumerate(dr):
+                        dbal = dtr[drc.index("balance")]
+                        if not dbal:
+                            continue
                         damt = float(ASD(dbal) + ASD(camt))
                         if damt < 0:
                             camt = damt
@@ -216,23 +217,26 @@
                         else:
                             camt = 0.00
                         diff = float(ASD(dbal) - ASD(damt))
+                        dr[dno][drc.index("balance")] = damt
                         if diff:
                             self.sql.insRec("drsage", data=[self.opts["conum"],
                                 self.chain, self.acno,
-                                dtr[col.index("drt_type")],
-                                dtr[col.index("drt_ref1")], ccdt,
-                                ctr[col.index("drt_type")],
-                                ctr[col.index("drt_ref1")], diff, 0])
+                                dtr[drc.index("drt_type")],
+                                dtr[drc.index("drt_ref1")], ccdt,
+                                ctr[drc.index("drt_type")],
+                                ctr[drc.index("drt_ref1")], diff, 0])
                         if not camt:
                             break
-                diff = float(ASD(cbal) - ASD(camt))
-                if diff:
-                    self.sql.insRec("drsage", data=[self.opts["conum"],
-                        self.chain, self.acno,
-                        ctr[col.index("drt_type")],
-                        ctr[col.index("drt_ref1")], ccdt,
-                        ctr[col.index("drt_type")],
-                        ctr[col.index("drt_ref1")], diff, 0])
+                    diff = float(ASD(cbal) - ASD(camt))
+                    if diff:
+                        self.sql.insRec("drsage", data=[self.opts["conum"],
+                            self.chain, self.acno,
+                            ctr[drc.index("drt_type")],
+                            ctr[drc.index("drt_ref1")], ccdt,
+                            ctr[drc.index("drt_type")],
+                            ctr[drc.index("drt_ref1")], diff, 0])
+                pb.closeProgress()
+                self.df.setWidget(self.df.mstFrame, state="show")
         self.opts["mf"].closeLoop()
 
     def endTop(self):

=== modified file 'drs/dr6030.py'
--- drs/dr6030.py	2017-02-25 14:03:05 +0000
+++ drs/dr6030.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Debtor's Ledger Calculate Credit Ratings.

=== modified file 'drs/drc110.py'
--- drs/drc110.py	2017-02-25 14:03:05 +0000
+++ drs/drc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", "E", "N",
-                "statement_normal", "Y"]
+                "statement_normal", "Y", ""]
         else:
             self.new = False
         if self.genleg:
@@ -102,7 +100,9 @@
             (("T",0,seq + 1,0),"INA",20,"Statement Template","",
                 self.acc[4],"N",self.doTplNam,tpm,None,None),
             (("T",0,seq + 2,0),("IRB",r1s),0,"Statement Ageing","",
-                self.acc[5],"N",None,None,None,None)])
+                self.acc[5],"N",None,None,None,None),
+            (("T",0,seq + 3,0),"ITX",50,"Email Address","",
+                self.acc[6],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -127,7 +127,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 5):
+            for x in xrange(1, 5):
                 self.df.loadEntry(frt, pag, p+x, data="")
             self.df.loadEntry(frt, pag, p+5, data="E")
             return "sk5"
@@ -160,7 +160,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 6:
                 if x in (1, 3):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)
@@ -179,7 +179,7 @@
                 data.append(d)
         if self.new:
             self.sql.insRec("drsctl", data=data)
-        elif not data == self.acc:
+        elif data != self.acc:
             self.sql.updRec("drsctl", data=data, where=[("ctd_cono", "=",
                 self.opts["conum"])])
             dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])

=== modified file 'drs/drc210.py'
--- drs/drc210.py	2017-02-25 14:03:05 +0000
+++ drs/drc210.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Chainstores File Maintenance.

=== modified file 'drs/drc220.py'
--- drs/drc220.py	2017-02-25 14:03:05 +0000
+++ drs/drc220.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Chainstores Listing.
@@ -25,6 +23,9 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, "drschn", prog=__name__)
+        if self.sql.error:
+            return
         self.gc = GetCtl(self.opts["mf"])
         drsctl = self.gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
@@ -33,9 +34,7 @@
             showError(self.opts["mf"].body, "Error",
                 "Chain Stores are Not Enabled")
             return
-        self.sql = Sql(self.opts["mf"].dbm, "drschn", prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -65,7 +64,7 @@
         RepPrt(self.opts["mf"], name=__name__, tables=["drschn"], heads=heads,
             cols=cols, where=[("chm_cono", "=", self.opts["conum"])],
             conum=self.opts["conum"], conam=self.opts["conam"],
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            repprt=self.df.repprt, repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc310.py'
--- drs/drc310.py	2017-02-25 14:03:05 +0000
+++ drs/drc310.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Reps File Maintenance.

=== modified file 'drs/drc320.py'
--- drs/drc320.py	2017-02-25 14:03:05 +0000
+++ drs/drc320.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Reps Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import RepPrt, Sql, TartanDialog
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 
 class drc320:
     def __init__(self, **opts):
@@ -27,6 +25,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "ctlrep", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -68,7 +71,7 @@
         RepPrt(self.opts["mf"], tables=tables, heads=heads, cols=cols,
             order=odr, opts=opts, where=whr, conum=self.opts["conum"],
             conam=self.opts["conam"], repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc410.py'
--- drs/drc410.py	2017-02-25 14:03:05 +0000
+++ drs/drc410.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Delivery Address Maintenance.

=== modified file 'drs/drc420.py'
--- drs/drc420.py	2017-02-25 14:03:05 +0000
+++ drs/drc420.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Delivery Addresses Listing.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import RepPrt, Sql, TartanDialog
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 from tartanFunctions import showError
 
 class drc420:
@@ -27,6 +25,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "drsdel", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        drsctl = gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        self.fromad = drsctl["ctd_emadd"]
         return True
 
     def mainProcess(self):
@@ -71,7 +74,7 @@
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=cols, conum=self.opts["conum"], ttype="D",
             conam=self.opts["conam"], repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc510.py'
--- drs/drc510.py	2017-02-25 14:03:05 +0000
+++ drs/drc510.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Messages File Maintenance.

=== modified file 'drs/drc520.py'
--- drs/drc520.py	2017-02-25 14:03:05 +0000
+++ drs/drc520.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Messages Listing.
@@ -109,9 +107,8 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, 0,
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=self.tit,
+                repprt=self.df.repprt)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'drs/drc610.py'
--- drs/drc610.py	2017-02-25 14:03:05 +0000
+++ drs/drc610.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Business Activity File Maintenance.

=== modified file 'drs/drc710.py'
--- drs/drc710.py	2017-02-25 14:03:05 +0000
+++ drs/drc710.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Debtors Business Type File Maintenance.

=== modified file 'gen/gl1010.py'
--- gen/gl1010.py	2017-02-25 14:03:05 +0000
+++ gen/gl1010.py	2017-06-28 14:58:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Accounts Maintenance.
@@ -235,8 +233,8 @@
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def doCheckDep(self, acno):
-        dep = acno / (10 ** (7 - self.gldig))
-        acc = acno % (10 ** (7 - self.gldig))
+        dep = int(acno / (10 ** (7 - self.gldig)))
+        acc = int(acno % (10 ** (7 - self.gldig)))
         if dep:
             chk = self.sql.getRec(tables="ctldep", where=[("dep_cono",
                 "=", self.opts["conum"]), ("dep_code", "=", dep)], limit=1)
@@ -310,17 +308,17 @@
         data = csv.reader(csvfle, quoting=csv.QUOTE_MINIMAL)
         for dat in data:
             if dat[0] in ("crs_ctl", "dis_rec"):
-                if not self.igcrs == "Y":
+                if self.igcrs != "Y":
                     continue
                 if dat[0] == "crs_ctl":
                     crsctl = int(dat[2])
             elif dat[0] in ("drs_ctl", "dis_all"):
-                if not self.igdrs == "Y":
+                if self.igdrs != "Y":
                     continue
                 if dat[0] == "drs_ctl":
                     drsctl = int(dat[2])
             elif dat[0] in ("stk_soh", "stk_susp"):
-                if not self.igstr == "Y":
+                if self.igstr != "Y":
                     continue
                 if dat[0] == "stk_soh":
                     stksoh = int(dat[2])
@@ -333,7 +331,7 @@
                 where=[("ctc_cono", "=", self.opts["conum"])])
             if not chk:
                 self.sql.insRec("crsctl", data=[self.opts["conum"], self.igcrs,
-                    "E", "", 0, 0, "remittance_advice"])
+                    "E", "", 0, 0, "remittance_advice", ""])
             else:
                 self.sql.updRec("crsctl", cols=["ctc_glint"], data=[self.igcrs],
                     where=[("ctc_cono", "=", self.opts["conum"])])
@@ -346,7 +344,7 @@
                 where=[("ctd_cono", "=", self.opts["conum"])])
             if not chk:
                 self.sql.insRec("drsctl", data=[self.opts["conum"], self.igdrs,
-                    "E", "N", "statement_normal", "Y"])
+                    "E", "N", "statement_normal", "Y", ""])
             else:
                 self.sql.updRec("drsctl", cols=["ctd_glint"], data=[self.igdrs],
                     where=[("ctd_cono", "=", self.opts["conum"])])
@@ -359,7 +357,7 @@
                 where=[("cts_cono", "=", self.opts["conum"])])
             if not chk:
                 self.sql.insRec("strctl", data=[self.opts["conum"],self.igstr,
-                    "N", 1, "N", "purchase_order"])
+                    "N", 1, "N", "purchase_order", ""])
             else:
                 self.sql.updRec("strctl", cols=["cts_glint"], data=[self.igstr],
                     where=[("cts_cono", "=", self.opts["conum"])])
@@ -377,7 +375,7 @@
                 where=[("ctv_cono", "=", self.opts["conum"])])
             if not chk:
                 self.sql.insRec("slsctl", data=[self.opts["conum"],
-                    "Y", "Y", "sales_document", "N"])
+                    "Y", "Y", "sales_document", ""])
         sp.closeSplash()
         self.opts["mf"].dbm.commitDbase()
         self.df.setWidget(self.df.mstFrame, state="show")

=== modified file 'gen/gl1020.py'
--- gen/gl1020.py	2017-02-25 14:03:05 +0000
+++ gen/gl1020.py	2017-06-28 14:58:49 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Standard Journal Creation, Deletion and Amendments.
@@ -28,8 +26,8 @@
             "genjlt"], prog=__name__)
         if self.sql.error:
             return
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         return True
 
     def buildScreen(self):
@@ -108,7 +106,8 @@
             self.df.loadEntry(frt, pag, p+3, data=num[d.index("gjm_start")])
             self.df.loadEntry(frt, pag, p+4, data=num[d.index("gjm_end")])
             for x in xrange(3):
-                exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, "disabled")
 
     def doDelNum(self):
         if self.new_num == "y":

=== modified file 'gen/gl1030.py'
--- gen/gl1030.py	2017-02-25 14:03:05 +0000
+++ gen/gl1030.py	2017-06-28 14:58:58 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Report Generator Record Maintenance.
@@ -623,7 +621,7 @@
                     self.df.loadEntry("T", 1, 0, data=s)
                     self.df.focusField("T", 1, 1)
                     return
-                if lg and not lg == g:
+                if lg and lg != g:
                     if g in gp:
                         showError(self.opts["mf"].body, "Group Error",
                             errmess % (g, s))

=== modified file 'gen/gl1040.py'
--- gen/gl1040.py	2017-02-25 14:03:05 +0000
+++ gen/gl1040.py	2017-06-28 14:59:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Detail Records Creation, Deletion and Amendments.
@@ -29,8 +27,8 @@
             return
         self.title = ("%-3d %s" % (self.opts["conum"], self.opts["conam"]),
             "General Ledger Details Maintenance (%s)" % __name__)
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         return True
 
     def buildScreen(self):

=== modified file 'gen/gl1050.py'
--- gen/gl1050.py	2017-02-25 14:03:05 +0000
+++ gen/gl1050.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger - Capturing Stream Records.

=== modified file 'gen/gl1060.py'
--- gen/gl1060.py	2017-02-25 14:03:05 +0000
+++ gen/gl1060.py	2017-08-19 11:51:40 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Bank Reconciliation Codes.

=== modified file 'gen/gl2010.py'
--- gen/gl2010.py	2017-02-25 14:03:05 +0000
+++ gen/gl2010.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger - Capturing Opening Balances.
@@ -65,7 +63,7 @@
                 "","N",self.doAcc,sel_acc,None,None),
             (("C",0,0,1),"ONA",30,"Description"),
             (("C",0,0,2),"ISD",13.2,"Balance","Balance Value",
-                "","N",self.doBal,None,self.doDelAcc,None))
+                "","N",self.doBal,None,None,None))
         but = (
             ("Import File",None,self.doImport,0,("C",0,1),("C",0,2),
                 "Import Opening Balances from a CSV or XLS File."),
@@ -101,8 +99,8 @@
                 break
             self.bal = bal.work
             chk = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
-                where=[("glo_cono", "=", self.opts["conum"]), ("glo_acno", "=",
-                self.acc), ("glo_trdt", "=", self.start)], limit=1)
+                where=[("glo_cono", "=", self.opts["conum"]), ("glo_acno",
+                "=", self.acc), ("glo_trdt", "=", self.start)], limit=1)
             if not chk:
                 self.new_acc = "y"
             else:
@@ -133,13 +131,6 @@
             self.new_acc = "n"
             self.df.loadEntry(frt, pag, p+2, bals[0])
 
-    def doDelAcc(self):
-        if self.new_acc == "y":
-            return
-        self.sql.delRec("genbal", where=[("glo_cono", "=", self.opts["conum"]),
-            ("glo_acno", "=", self.acc), ("glo_trdt", "=", self.start)])
-        self.opts["mf"].dbm.commitDbase()
-
     def doBal(self, frt, pag, r, c, p, i, w):
         self.bal = w
 

=== modified file 'gen/gl2020.py'
--- gen/gl2020.py	2017-02-25 14:03:05 +0000
+++ gen/gl2020.py	2017-06-28 15:03:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger - Capturing Budgets.
@@ -28,8 +26,8 @@
             prog=__name__)
         if self.sql.error:
             return
-        self.s_cur = self.opts["period"][1][0] / 100
-        self.e_cur = self.opts["period"][2][0] / 100
+        self.s_cur = int(self.opts["period"][1][0] / 100)
+        self.e_cur = int(self.opts["period"][2][0] / 100)
         self.s_old = self.s_cur - 100
         self.e_old = self.e_cur - 100
         return True
@@ -53,8 +51,8 @@
                 ("glm_cono=glb_cono",),
                 ("glb_acno=glm_acno",),
                 ("glb_curdt", "between",
-                    self.opts["period"][1][0]/100,
-                    self.opts["period"][2][0]/100)],
+                    int(self.opts["period"][1][0] / 100),
+                    int(self.opts["period"][2][0] / 100))],
             "group": "glb_cono, glb_acno, glm_desc",
             "order": "glb_acno"}
         bud = {
@@ -65,8 +63,8 @@
             "where": [
                 ("glb_cono", "=", self.opts["conum"]),
                 ("glb_curdt", "between",
-                    self.opts["period"][1][0]/100,
-                    self.opts["period"][2][0]/100)],
+                    int(self.opts["period"][1][0] / 100),
+                    int(self.opts["period"][2][0] / 100))],
             "whera": (("C", "glb_acno", 0),)}
         tit = ("%-3d %s" % (self.opts["conum"], self.opts["conam"]),
             "General Ledger Budgets Data Capture (%s)" % __name__)
@@ -146,8 +144,8 @@
                 self.bud = bud.work
                 self.endData(imp=True)
                 continue
-            sy = self.s_cur / 100
-            sm = self.s_cur % 100
+            sy = int(self.s_cur / 100)
+            sm = int(self.s_cur % 100)
             for b in line[1:]:
                 self.per = (sy * 100) + sm
                 bud = CCD(b, "SD", 13.2)
@@ -271,7 +269,7 @@
 
     def doShow(self, widget=None):
         data = []
-        keys = self.rates.keys()
+        keys = list(self.rates.keys())
         keys.sort()
         for key in keys:
             data.append((key, self.rates[key][0], self.rates[key][1]))
@@ -301,7 +299,7 @@
             ("glm_type", "=", "P")], order="glm_acno")
         if not recs:
             return
-        exc = self.rates.keys()
+        exc = list(self.rates.keys())
         p = ProgressBar(self.opts["mf"].body, typ="Populating Budgets",
             mxs=len(recs))
         for num, acc in enumerate(recs):
@@ -331,9 +329,9 @@
                 if self.rnd:
                     dif = amt % self.rnd
                     amt = amt - dif
-                    if amt < 0 and dif > (self.rnd / 2):
+                    if amt < 0 and dif > int(self.rnd / 2):
                         amt = amt + self.rnd
-                    elif amt > 0 and dif >= (self.rnd / 2):
+                    elif amt > 0 and dif >= int(self.rnd / 2):
                         amt = amt + self.rnd
                 self.sql.insRec("genbud", data=[self.opts["conum"],
                     acc[0], cur, amt])
@@ -363,8 +361,8 @@
             return "sk1"
 
     def doPer(self, frt, pag, r, c, p, i, w):
-        if w < self.opts["period"][1][0]/100 or \
-                w > self.opts["period"][2][0]/100:
+        if w < int(self.opts["period"][1][0] / 100) or \
+                w > int(self.opts["period"][2][0] / 100):
             return "Invalid Period"
         self.per = w
         bud = self.sql.getRec(tables="genbud", cols=["glb_tramt"],
@@ -378,9 +376,9 @@
 
     def endData(self, imp=False):
         if self.frq == "A":
-            mthamt = self.bud / 12
-            p = self.opts["period"][1][0] / 100
-            y = p / 100
+            mthamt = int(self.bud / 12)
+            p = int(self.opts["period"][1][0] / 100)
+            y = int(p / 100)
             m = p % 100
             for _ in xrange(12):
                 per = (y * 100) + m

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2017-02-25 14:03:05 +0000
+++ gen/gl2030.py	2017-08-19 12:39:29 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Data Capture for:
@@ -33,7 +31,7 @@
 from tartanFunctions import askQuestion, callModule, chkGenAcc, getNextCode
 from tartanFunctions import getSingleRecords, getVatRate, copyList, mthendDate
 from tartanFunctions import showError
-from tartanWork import armvtp, gltrtp
+from tartanWork import armvtp, gltrtp, rcmvtp
 
 class gl2030:
     def __init__(self, **opts):
@@ -141,6 +139,25 @@
                 self.tags.append(("MEM", None, None, None, False))
                 page += 1
                 self.tagp["ML"] = page
+        if mod.count("RC"):
+            ctl = self.gc.getCtl("rcactl", self.opts["conum"])
+            if not ctl:
+                return
+            if ctl["cte_glint"] == "Y":
+                tab.extend(["rcaprm", "rcaowm", "rcaowt", "rcatnm",
+                    "rcatnt", "rcacon"])
+                self.tags.append(("RCA", None, None, None, False))
+                page += 1
+                self.tagp["RC"] = page
+        if mod.count("RT"):
+            ctl = self.gc.getCtl("rtlctl", self.opts["conum"])
+            if not ctl:
+                return
+            if ctl["ctr_glint"] == "Y":
+                tab.extend(["rtlprm", "rtlmst", "rtlcon", "rtltrn"])
+                self.tags.append(("RTL", None, None, None, False))
+                page += 1
+                self.tagp["RT"] = page
         if mod.count("SL"):
             ctl = self.gc.getCtl("wagctl", self.opts["conum"])
             if not ctl:
@@ -331,6 +348,76 @@
                     ("mlm_surname", "", 0, "Surname", "Y"),
                     ("mlm_names", "", 0, "Names")),
                 "whera": [("C", "mlm_cono", 0, 2)]}
+        if "RC" in self.tagp:
+            rcp = {
+                "stype": "R",
+                "tables": ("rcaprm",),
+                "cols": (
+                    ("rcp_code", "", 0, "Pr-Code"),
+                    ("rcp_desc", "", 0, "Description", "Y")),
+                "whera": [
+                    ("C", "rcp_cono", 0, 2)]}
+            rct = {
+                "stype": "R",
+                "tables": ("rcatnm",),
+                "cols": (
+                    ("rtn_acno", "", 0, "Cod-Num"),
+                    ("rtn_name", "", 0, "Name", "Y")),
+                "whera": [
+                    ("C", "rtn_cono", 0, 2),
+                    ("C", "rtn_owner", 2, self.tagp["RC"]),
+                    ("C", "rtn_code", 0, self.tagp["RC"])]}
+            rcc = {
+                "stype": "R",
+                "tables": ("rcacon",),
+                "cols": (
+                    ("rcc_cnum", "", 0, "Cod-Num"),
+                    ("rcc_payind", "", 0, "F"),
+                    ("rcc_start", "", 0, "Start-Date"),
+                    ("rcc_period", "", 0, "Per")),
+                "whera": [
+                    ("C", "rcc_cono", 0, 2),
+                    ("C", "rcc_code", 0, self.tagp["RC"]),
+                    ("C", "rcc_acno", 4, self.tagp["RC"])]}
+            data = []
+            for x in xrange(1, len(rcmvtp)+1):
+                if x == 2:
+                    continue
+                data.append((x, rcmvtp[x-1][1]))
+            rcm = {
+                "stype": "C",
+                "titl": "Select the Required Type",
+                "head": ("C", "Type"),
+                "data": data}
+        if "RT" in self.tagp:
+            rtp = {
+                "stype": "R",
+                "tables": ("rtlprm",),
+                "cols": (
+                    ("rtp_code", "", 0, "Pr-Code"),
+                    ("rtp_desc", "", 0, "Description", "Y")),
+                "whera": [("C", "rtp_cono", 0, 2)]}
+            rtm = {
+                "stype": "R",
+                "tables": ("rtlmst",),
+                "cols": (
+                    ("rtm_acno", "", 0, "Cod-Num"),
+                    ("rtm_name", "", 0, "Name", "Y")),
+                "whera": [
+                    ("C", "rtm_cono", 0, 2),
+                    ("C", "rtm_code", 0, self.tagp["RT"])]}
+            rtc = {
+                "stype": "R",
+                "tables": ("rtlcon",),
+                "cols": (
+                    ("rtc_cnum", "", 0, "Cod-Num"),
+                    ("rtc_payind", "", 0, "F"),
+                    ("rtc_start", "", 0, "Start-Date"),
+                    ("rtc_period", "", 0, "Per")),
+                "whera": [
+                    ("C", "rtc_cono", 0, 2),
+                    ("C", "rtc_code", 0, self.tagp["RT"]),
+                    ("C", "rtc_acno", 2, self.tagp["RT"])]}
         if "SL" in self.tagp:
             wgm = {
                 "stype": "R",
@@ -372,7 +459,7 @@
             [["C",1,0,0],"INa",9,"Reference","Reference Number",
                 "i","Y",self.doTrnRef,None,None,("notblank",)],
             [["C",1,0,1],"ID1",10,"Date","Transaction Date",
-                "r","N",self.doTrnDat,None,None,("efld",)],
+                "r","N",self.doTrnDte,None,None,("efld",)],
             [["C",1,0,2],"ISD",13.2,"Amount","Transaction Amount",
                 "","N",self.doTrnAmt,None,None,("efld",)],
             [["C",1,0,3],"INA",30,"Details","Transaction Details",
@@ -391,7 +478,7 @@
                 "","N",self.doVatAmt,None,None,("efld",)],
             [["C",2,0,6],"INA",(28,30),"Details","Allocation Details",
                 "","N",self.doAllDet,None,None,("notblank",)]]
-        tags = self.tagp.keys()
+        tags = list(self.tagp.keys())
         tags.sort()
         for tag in tags:
             if tag == "AR":
@@ -477,6 +564,42 @@
                         "","N",self.doMemDis,None,None,("efld",)],
                     [["C",self.mempag,0,3],"ISD",13.2,"Amount","",
                         "","N",self.doMemAmt,None,None,("efld",)]])
+            elif tag == "RC":
+                self.rcapag = self.tagp[tag]
+                fld.extend([
+                    [["T",self.rcapag,0,0],"OSD",13.2,"Unallocated Balance"],
+                    [["C",self.rcapag,0,0],"INA",7,"Prm-Cod","Premises Code",
+                        "","N",self.doRcaPrm,rcp,None,("efld",)],
+                    [["C",self.rcapag,0,1],"ONA",15,"Description"],
+                    [["C",self.rcapag,0,0],"ONA",7,"Own-Cod"],
+                    [["C",self.rcapag,0,1],"ONA",15,"Owners Name"],
+                    [["C",self.rcapag,0,4],"INA",7,"Tnt-Cod","Tenant Code",
+                        "","N",self.doRcaTnt,rct,None,("efld",)],
+                    [["C",self.rcapag,0,5],"ONA",15,"Tenants Name"],
+                    [("C",self.rcapag,0,6),"IUI",3,"Seq","Contract Sequence",
+                        "","N",self.doRcaCon,rcc,None,None],
+                    [("C",self.rcapag,0,7),"IUI",1,"T","Movement Type",
+                        "","N",self.doRcaTyp,rcm,None,("in", (1,3,4,5,6))],
+                    [["C",self.rcapag,0,8],"ISD",13.2,"Amount","",
+                        "","N",self.doRcaAmt,None,None,("efld",)],
+                    [["C",self.rcapag,0,9],"INA",30,"Details","Details",
+                        "","N",self.doRcaDet,None,None,("efld",)]])
+            elif tag == "RT":
+                self.rtlpag = self.tagp[tag]
+                fld.extend([
+                    [["T",self.rtlpag,0,0],"OSD",13.2,"Unallocated Balance"],
+                    [["C",self.rtlpag,0,0],"INA",7,"Prm-Cod","Premises Code",
+                        "","N",self.doRtlPrm,rtp,None,("efld",)],
+                    [["C",self.rtlpag,0,1],"ONA",20,"Description"],
+                    [["C",self.rtlpag,0,2],"INA",7,"Acc-Num","Account Number",
+                        "","N",self.doRtlAcc,rtm,None,("notblank",)],
+                    [["C",self.rtlpag,0,3],"ONA",20,"Name"],
+                    [("C",self.rtlpag,0,4),"IUI",3,"Seq","Contract Sequence",
+                        "","N",self.doRtlCon,rtc,None,None],
+                    [["C",self.rtlpag,0,5],"ISD",13.2,"Amount","",
+                        "","N",self.doRtlAmt,None,None,("efld",)],
+                    [["C",self.rtlpag,0,6],"INA",30,"Details","Details",
+                        "","N",self.doRtlDet,None,None,("efld",)]])
             elif tag == "SL":
                 self.slnpag = self.tagp[tag]
                 fld.extend([
@@ -528,6 +651,12 @@
             elif tag == "ML":
                 cnd.append((self.endCrsDrsMem, "n"))
                 cxt.append(None)
+            elif tag == "RC":
+                cnd.append((self.endRca, "y"))
+                cxt.append(None)
+            elif tag == "RT":
+                cnd.append((self.endRtl, "y"))
+                cxt.append(None)
             elif tag == "SL":
                 cnd.append((self.endSln, "y"))
                 cxt.append(None)
@@ -586,7 +715,7 @@
             self.but.insert(3, ("Cance_l",None,self.doCancel,1,
                 None,("C",1,1)))
         else:
-            self.but.append(("Cancel",None,self.doCancel,1,
+            self.but.append(("Cance_l",None,self.doCancel,1,
                 ("C",1,0),("C",1,1)))
         self.df = TartanDialog(self.opts["mf"], title=tit, tags=self.tags,
             eflds=fld, butt=self.but, cend=cnd, cxit=cxt)
@@ -595,7 +724,7 @@
         self.df.focusField("C", 1, 1)
 
     def doImpBank(self, widget=None):
-        if not self.impfmt in ("O", "Q", "S"):
+        if self.impfmt not in ("O", "Q", "S"):
             showError(self.opts["mf"].body, "Recon Error",
                 "Invalid Import Format Type for Control %s" % self.bh.ctl)
             self.df.focusField("C", 1, self.df.col)
@@ -758,7 +887,7 @@
             index = sc.selection
             self.recon = False
             self.rctupd = False
-            a,b,self.trndat,memo,self.trnref,payee,amount,c,seq = data[index]
+            a,b,self.trndte,memo,self.trnref,payee,amount,c,seq = data[index]
             if amount < 0:
                 self.typ = "P"
                 self.glrtn = 2
@@ -770,7 +899,7 @@
             p = self.df.pos
             self.df.loadEntry("C", 1, p, data=self.typ)
             self.df.loadEntry("C", 1, p+1, data=self.trnref)
-            self.df.loadEntry("C", 1, p+2, data=self.trndat)
+            self.df.loadEntry("C", 1, p+2, data=self.trndte)
             self.df.loadEntry("C", 1, p+3, data=self.trnamt)
             self.df.loadEntry("C", 1, p+4, data=memo[:30])
             self.df.focusField("C", 1, p+5)
@@ -819,29 +948,34 @@
                 else:
                     glt = [glt[get]]
             # Set recon Flag on gentrn
-            self.sql.updRec("gentrn", cols=["glt_recon"], data=[date/100],
-                where=[("glt_seq", "=", glt[0][0])])
+            self.sql.updRec("gentrn", cols=["glt_recon"],
+                data=[int(date / 100)], where=[("glt_seq", "=", glt[0][0])])
             self.doUpdateRct(seq)
             return
         if not amount:
             # Transaction amount is zero
             self.doUpdateRct(seq)
             return
-        whr = [("grc_cono", "=", self.opts["conum"]), ("grc_acno", "=",
-            self.bh.acc)]
+        col = [
+            "grc_desc1", "grc_desc2", "grc_desc3", "grc_rtn", "grc_acoy",
+            "grc_aacc", "grc_acrs", "grc_achn", "grc_adrs", "grc_aage",
+            "grc_vat"]
+        whr = [
+            ("grc_cono", "=", self.opts["conum"]),
+            ("grc_acno", "=", self.bh.acc)]
         if amount < 0:
             whr.append(("grc_rtn", "=", "P"))
         else:
             whr.append(("grc_rtn", "=", "R"))
-        codes = self.sql.getRec(tables="genrcc", where=whr)
+        codes = self.sql.getRec(tables="genrcc", cols=col, where=whr)
         if codes:
             # There are standard genrcc codes
             if self.bh.multi == "Y":
-                self.curdt = date / 100
+                self.curdt = int(date / 100)
             else:
                 self.curdt = self.bh.curdt
-            for cono, acno, code, desc1, desc2, desc3, trtp, self.allcoy, \
-                    self.accnum, acrs, achn, adrs, aage, self.vatcod in codes:
+            for desc1, desc2, desc3, trtp, self.allcoy, self.accnum, \
+                        acrs, achn, adrs, aage, self.vatcod in codes:
                 self.alldet = CCD(desc1, "NA", 30).work
                 if memo.find(desc1) != -1:
                     if desc2:
@@ -869,28 +1003,31 @@
                     # Code matched, do automatic posting
                     self.trndet = self.alldet
                     if trtp == "P":
+                        # Payments
                         othrtn = 5
                         self.glrtn = 2
                         self.vtyp = "I"
                     elif trtp == "R":
+                        # Receipts
                         othrtn = 2
                         self.glrtn = 6
                         self.vtyp = "O"
                     else:
+                        # Journals
                         self.glrtn = 4
                         othrtn = 3
                         if amount < 0:
                             self.vtyp = "I"
                         else:
                             self.vtyp = "O"
-                    self.trndat = date
+                    self.trndte = date
                     self.trnref = refno
                     self.allamt = amount
                     if self.doVatCalc(self.vatcod):
                         self.vatamt = 0
                     data = (self.opts["conum"], self.bh.acc, self.curdt, date,
                         self.glrtn, self.trnref, self.bh.batno, self.allamt,
-                        0.00, self.trndet, "", "", date/100,
+                        0.00, self.trndet, "", "", int(date / 100),
                         self.opts["capnm"], self.sysdtw, 0)
                     self.sql.insRec("gentrn", data=data)
                     amt = float(ASD(0) - ASD(self.allamt))
@@ -1059,12 +1196,12 @@
         else:
             self.recon = False
 
-    def doTrnDat(self, frt, pag, r, c, p, i, w):
+    def doTrnDte(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
-        self.trndat = w
+        self.trndte = w
 
     def doTrnAmt(self, frt, pag, r, c, p, i, w):
         self.trnamt = w
@@ -1155,6 +1292,22 @@
             self.mem_gl = ctl["mcm_glint"]
         else:
             self.mem_gl = "N"
+        # Load Rca Integration
+        if mod.count("RC"):
+            ctl = self.gc.getCtl("rcactl", self.allcoy)
+            if not ctl:
+                return "rf"
+            self.rca_gl = ctl["cte_glint"]
+        else:
+            self.rca_gl = "N"
+        # Load Rtl Integration
+        if mod.count("RT"):
+            ctl = self.gc.getCtl("rtlctl", self.allcoy)
+            if not ctl:
+                return "rf"
+            self.rtl_gl = ctl["ctr_glint"]
+        else:
+            self.rtl_gl = "N"
         # Load Sln Integration
         if mod.count("SL"):
             ctl = self.gc.getCtl("wagctl", self.allcoy)
@@ -1182,8 +1335,13 @@
                 ctls.extend(["lon_ctl", "int_pay", "int_rec"])
             if self.mem_gl == "Y":
                 ctls.append("mem_ctl")
-                if not "dis_all" in ctls:
+                if "dis_all" not in ctls:
                     ctls.append("dis_all")
+            if self.rca_gl == "Y":
+                self.rcactl = []
+                for c in ("rca_own", "rca_tnt", "rca_dep"):
+                    self.rcactl.append(self.ctlctl[c])
+                    ctls.append(c)
             if self.sln_gl == "Y":
                 ctls.extend(["wag_slc", "wag_sli"])
         if self.gc.chkRec(self.allcoy, self.ctlctl, ctls):
@@ -1196,6 +1354,13 @@
                 where=[("asg_cono", "=", self.allcoy)])
             for a in ass:
                 self.assctl.append(a[0])
+        # Get for Rental Accounts
+        if self.rtl_gl == "Y":
+            self.rtlctl = []
+            rtl = self.sql.getRec(tables="rtlprm", cols=["rtp_rtlacc"],
+                where=[("rtp_cono", "=", self.allcoy)])
+            for r in rtl:
+                self.rtlctl.append(r[0])
 
     def doAccNum(self, frt, pag, r, c, p, i, w):
         if self.allcoy == self.opts["conum"] and w == self.bh.acc:
@@ -1216,6 +1381,15 @@
                 self.others = "lon"
             elif self.mem_gl == "Y" and w == self.ctlctl["mem_ctl"]:
                 self.others = "mem"
+            elif self.rca_gl == "Y" and w in self.rcactl:
+                if str(self.rcactl.index(w)) == "0":
+                    self.others = "own"
+                elif str(self.rcactl.index(w)) == "1":
+                    self.others = "tnt"
+                else:
+                    self.others = "dep"
+            elif self.rtl_gl == "Y" and w in self.rtlctl:
+                self.others = "rtl"
             elif self.sln_gl == "Y" and w == self.ctlctl["wag_slc"]:
                 self.others = "sln"
         if self.others:
@@ -1226,20 +1400,24 @@
         if type(chk) is str:
             return chk
         if self.others:
+            # Staff Loans set in endLon, endSln
             if self.glrtn == 2:
-                if self.others == "bkm":
+                if self.others in ("ass", "lon"):
+                    self.othrtn = 1
+                elif self.others == "bkm":
                     self.othrtn = 4
                 elif self.others == "mem":
                     self.othrtn = 2
-                else:
-                    self.othrtn = 5
-            else:
-                if self.others == "bkm":
+                elif self.others in ("own", "tnt", "dep", "rtl"):
                     self.othrtn = 3
-                elif self.others == "mem":
+                else:
                     self.othrtn = 5
-                else:
-                    self.othrtn = 2
+            elif self.others == "bkm":
+                self.othrtn = 3
+            elif self.others == "mem":
+                self.othrtn = 5
+            else:
+                self.othrtn = 2
         self.accnum = w
         if not chk[2]:
             if chk[3] == "P":
@@ -1255,7 +1433,7 @@
             w = float(ASD(self.trnamt) - ASD(self.allocated))
             self.df.loadEntry(frt, pag, p, w)
         self.allamt = w
-        if self.others in ("bkm", "drs", "crs", "mem"):
+        if self.others:
             self.vatcod = "N"
             self.vatamt = 0
             self.df.loadEntry(frt, pag, p+1, self.vatcod)
@@ -1273,7 +1451,7 @@
             return "sk1"
 
     def doVatCalc(self, code):
-        vrte = getVatRate(self.sql, self.opts["conum"], code, self.trndat)
+        vrte = getVatRate(self.sql, self.opts["conum"], code, self.trndte)
         if vrte is None:
             return "Invalid V.A.T. Code"
         self.vatcod = code
@@ -1411,6 +1589,28 @@
                 return
             self.df.clearFrame("C", self.mempag)
             self.df.selPage("Allocation")
+        elif self.others in ("own", "tnt", "dep"):
+            self.df.selPage("RCA")
+            self.df.loadEntry("T", self.rcapag, 0, data=self.allamt)
+            self.df.focusField("C", self.rcapag, 1)
+            self.opts["mf"].startLoop()
+            if self.cancel:
+                if self.rctimp:
+                    self.opts["mf"].closeLoop()
+                return
+            self.df.clearFrame("C", self.rcapag)
+            self.df.selPage("Allocation")
+        elif self.others == "rtl":
+            self.df.selPage("RTL")
+            self.df.loadEntry("T", self.rtlpag, 0, data=self.allamt)
+            self.df.focusField("C", self.rtlpag, 1)
+            self.opts["mf"].startLoop()
+            if self.cancel:
+                if self.rctimp:
+                    self.opts["mf"].closeLoop()
+                return
+            self.df.clearFrame("C", self.rtlpag)
+            self.df.selPage("Allocation")
         elif self.others == "sln":
             self.df.selPage("SLN")
             self.df.loadEntry("T", self.slnpag, 0, data=self.allamt)
@@ -1439,7 +1639,7 @@
 
     def updateTables(self, pag):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndte / 100)
         else:
             self.curdt = self.bh.curdt
         if self.glrtn == 1:                          # Sales
@@ -1480,7 +1680,7 @@
     def debit(self, pag):
         if pag == 1:
             amt = self.trnamt
-            data = (self.opts["conum"], self.conacc, self.curdt, self.trndat,
+            data = (self.opts["conum"], self.conacc, self.curdt, self.trndte,
                 self.glrtn, self.trnref, self.bh.batno, amt, 0.00,
                 self.trndet, "", "N", self.rflag, self.opts["capnm"],
                 self.sysdtw, 0)
@@ -1493,7 +1693,7 @@
     def credit(self, pag):
         if pag == 1:
             amt = float(ASD(0) - ASD(self.trnamt))
-            data = (self.opts["conum"], self.conacc, self.curdt, self.trndat,
+            data = (self.opts["conum"], self.conacc, self.curdt, self.trndte,
                 self.glrtn, self.trnref, self.bh.batno, amt, 0.00,
                 self.trndet, "", "N", self.rflag, self.opts["capnm"],
                 self.sysdtw, 0)
@@ -1504,7 +1704,7 @@
             self.restDebitCredit(amt, vat)
 
     def restDebitCredit(self, amt, vat):
-        data = (self.allcoy, self.accnum, self.curdt, self.trndat,
+        data = (self.allcoy, self.accnum, self.curdt, self.trndte,
             self.glrtn, self.trnref, self.bh.batno, amt, vat,
             self.alldet, self.vatcod, "", 0, self.opts["capnm"],
             self.sysdtw, 0)
@@ -1514,7 +1714,7 @@
                 where=[("cti_cono", "=", self.opts["conum"]), ("cti_inco", "=",
                 self.allcoy)], limit=1)[0]
             val = float(ASD(amt) + ASD(vat))
-            data = (self.opts["conum"], acc, self.curdt, self.trndat,
+            data = (self.opts["conum"], acc, self.curdt, self.trndte,
                 self.glrtn, self.trnref, self.bh.batno, val, 0.00,
                 self.alldet, self.vatcod, "", 0, self.opts["capnm"],
                 self.sysdtw, 0)
@@ -1523,20 +1723,20 @@
                 where=[("cti_cono", "=", self.allcoy), ("cti_inco", "=",
                 self.opts["conum"])], limit=1)[0]
             val = float(ASD(0) - ASD(amt) - ASD(vat))
-            data = (self.allcoy, acc, self.curdt, self.trndat,
+            data = (self.allcoy, acc, self.curdt, self.trndte,
                 self.glrtn, self.trnref, self.bh.batno, val, 0.00,
                 self.alldet, self.vatcod, "", 0, self.opts["capnm"],
                 self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
         if self.vatcod:
             if vat:
-                data = (self.allcoy, self.convat, self.curdt, self.trndat,
+                data = (self.allcoy, self.convat, self.curdt, self.trndte,
                     self.glrtn, self.trnref, self.bh.batno, vat, 0.00,
                     self.alldet, self.vatcod, "", 0, self.opts["capnm"],
                     self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
             data = (self.allcoy, self.vatcod, self.vtyp, self.curdt, "G",
-                self.glrtn, self.bh.batno, self.trnref, self.trndat,
+                self.glrtn, self.bh.batno, self.trnref, self.trndte,
                 self.accnum, self.alldet, amt, vat, 0,self.opts["capnm"],
                 self.sysdtw, 0)
             self.sql.insRec("ctlvtf", data=data)
@@ -1627,11 +1827,9 @@
 
     def endAss(self):
         if self.glrtn == 2:
-            self.othrtn = 1
             self.tramt = self.othamt
             self.vtamt = self.othvat
         else:
-            self.othrtn = 2
             self.tramt = float(ASD(0.0) - ASD(self.othamt))
             self.vtamt = float(ASD(0.0) - ASD(self.othvat))
         self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
@@ -1642,7 +1840,7 @@
                 ASD(self.othvat) + ASD(self.vatamt) - ASD(self.vattot))
         # Asset Register Transaction
         data = [self.allcoy, self.assgrp, self.asscod, self.othrtn,
-            self.trnref, self.bh.batno, self.trndat, self.othmov,
+            self.trnref, self.bh.batno, self.trndte, self.othmov,
             self.tramt, self.tramt, self.othvat, self.curdt,
             self.alldet, self.vatcod, "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("asstrn", data=data)
@@ -1659,7 +1857,7 @@
                 self.assgrp), ("ast_code", "=", self.asscod)], limit=1)
             if amt[0]:
                 data = [self.opts["conum"], self.ctlctl["ass_sls"],
-                    self.curdt, self.trndat, self.glrtn, self.trnref,
+                    self.curdt, self.trndte, self.glrtn, self.trnref,
                     self.bh.batno, amt[0], 0, self.alldet, "N", "",
                     0, self.opts["capnm"], self.sysdtw, 0]
                 self.sql.insRec("gentrn", data=data)
@@ -1745,7 +1943,7 @@
         self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
         # Bookings Ledger Transaction
         data = [self.allcoy, self.bkmnum, self.othrtn, self.trnref,
-            self.bh.batno, self.trndat, tramt, 0, self.curdt, self.alldet,
+            self.bh.batno, self.trndte, tramt, 0, self.curdt, self.alldet,
             "", "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("bkmtrn", data=data)
         # Check and Update Status
@@ -1940,18 +2138,14 @@
         if self.newlon:
             # Loans Rate
             self.sql.insRec("lonrte", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.trndat, self.newdri, self.newcri])
+                self.lonnum, self.trndte, self.newdri, self.newcri])
             # Loans Ledger Masterfile
             self.sql.insRec("lonmf2", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.londes, self.trndat, self.lonmth,
-                self.lonpay])
+                self.lonnum, self.londes, self.trndte, self.lonmth,
+                self.lonpay, 0])
         # Loans Ledger Transaction
-        if self.glrtn == 2:
-            self.othrtn = 1
-        else:
-            self.othrtn = 2
         data = [self.allcoy, self.lonacc, self.lonnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, tramt, self.curdt,
+            self.othrtn, self.trndte, self.trnref, tramt, self.curdt,
             self.alldet, "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("lontrn", data=data)
         if self.othtot != self.allamt:
@@ -1981,6 +2175,167 @@
             self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
             self.df.loadEntry(frt, pag, p, data=self.othamt)
 
+    def doRcaPrm(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables=["rcaprm", "rcaowm"], cols=["rcp_desc",
+            "rcp_owner", "rom_name"], where=[("rcp_cono", "=", self.allcoy),
+            ("rcp_code", "=", w), ("rom_cono=rcp_cono",),
+            ("rom_acno=rcp_owner",)], limit=1)
+        if not acc:
+            return "Invalid Premises Code"
+        self.rcaprm = w
+        self.rcaown = acc[1]
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        self.df.loadEntry(frt, pag, p+2, data=acc[1])
+        self.df.loadEntry(frt, pag, p+3, data=acc[2])
+        if self.others == "own":
+            self.rcatnt = 0
+            return "sk7"
+
+    def doRcaTnt(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="rcatnm", cols=["rtn_name"],
+            where=[("rtn_cono", "=", self.allcoy), ("rtn_owner",
+            "=", self.rcaown), ("rtn_code", "=", self.rcaprm),
+            ("rtn_acno", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Tenant"
+        self.rcatnt = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        con = self.sql.getRec(tables="rcacon", where=[("rcc_cono", "=",
+            self.allcoy), ("rcc_owner", "=", self.rcaown), ("rcc_code", "=",
+            self.rcaprm), ("rcc_acno", "=", self.rcatnt)], order="rcc_cnum")
+        if not con:
+            return "No Valid Contracts"
+        self.rcacon = con[-1:][0][4]
+        self.df.loadEntry(frt, pag, p+2, data=self.rcacon)
+
+    def doRcaCon(self, frt, pag, r, c, p, i, w):
+        con = self.sql.getRec(tables="rcacon", where=[("rcc_cono", "=",
+            self.allcoy), ("rcc_owner", "=", self.rcaown), ("rcc_code", "=",
+            self.rcaprm), ("rcc_acno", "=", self.rcatnt), ("rcc_cnum", "=",
+            w)], limit=1)
+        if not con:
+            return "Invalid Contract Sequence"
+        self.rcacon = w
+        if self.others == "dep":
+            self.rcatyp = 2
+            self.df.loadEntry(frt, pag, p+1, data=self.rcatyp)
+            return "sk1"
+
+    def doRcaTyp(self, frt, pag, r, c, p, i, w):
+        self.rcatyp = w
+
+    def doRcaAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry(frt, pag, p, data=self.othamt)
+
+    def doRcaDet(self, frt, pag, r, c, p, i, w):
+        self.alldet = w
+
+    def endRca(self):
+        if self.glrtn == 6:
+            tramt = float(ASD(0.0) - ASD(self.othamt))
+        else:
+            tramt = self.othamt
+        self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
+        if not self.rcatnt:
+            # Owners Transaction
+            data = [self.allcoy, self.rcaown, self.othrtn, self.trnref,
+                self.bh.batno, self.trndte, tramt, 0, self.curdt, self.alldet,
+                "N", "", self.opts["capnm"], self.sysdtw, 0]
+            self.sql.insRec("rcaowt", data=data)
+        else:
+            # Tenants Transaction
+            data = [self.allcoy, self.rcaown, self.rcaprm, self.rcatnt,
+                self.rcacon, self.othrtn, self.trnref, self.bh.batno,
+                self.trndte, self.rcatyp, tramt, 0, self.curdt, self.alldet,
+                "N", "", self.opts["capnm"], self.sysdtw, 0]
+            self.sql.insRec("rcatnt", data=data)
+        if self.othtot != self.allamt:
+            bal = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry("T", self.rcapag, 0, data=bal)
+            self.df.advanceLine(self.tagp["RC"])
+        else:
+            self.opts["mf"].closeLoop()
+
+    def doRtlPrm(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="rtlprm", cols=["rtp_desc"],
+            where=[("rtp_cono", "=", self.allcoy), ("rtp_code", "=", w)],
+            limit=1)
+        if not acc:
+            return "Invalid Premises Code"
+        self.rtlprm = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+
+    def doRtlAcc(self, frt, pag, r, c, p, i, w):
+        self.othacno = w
+        acc = self.sql.getRec(tables="rtlmst", cols=["rtm_name"],
+            where=[("rtm_cono", "=", self.allcoy), ("rtm_code",
+            "=", self.rtlprm), ("rtm_acno", "=", self.othacno)],
+            limit=1)
+        if not acc:
+            ok = askQuestion(screen=self.opts["mf"].body, head="New Contract",
+                mess="Account does not exist, Create?")
+            if ok == "no":
+                return "rf"
+            self.doNewRtl()
+            acc = self.sql.getRec(tables="rtlmst", cols=["rtm_name"],
+                where=[("rtm_cono", "=", self.allcoy), ("rtm_code", "=",
+                self.rtlprm), ("rtm_acno", "=", self.othacno)], limit=1)
+            if not acc:
+                return "rf"
+        self.othacno = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        con = self.sql.getRec(tables="rtlcon", where=[("rtc_cono", "=",
+            self.allcoy), ("rtc_code", "=", self.rtlprm), ("rtc_acno", "=",
+            self.othacno)], order="rtc_cnum")
+        if not con:
+            return "No Valid Contracts"
+        self.rtlcon = con[-1:][0][3]
+        self.df.loadEntry(frt, pag, p+2, data=self.rtlcon)
+
+    def doRtlCon(self, frt, pag, r, c, p, i, w):
+        con = self.sql.getRec(tables="rtlcon", where=[("rtc_cono", "=",
+            self.allcoy), ("rtc_code", "=", self.rtlprm), ("rtc_acno", "=",
+            self.othacno), ("rtc_cnum", "=", w)], limit=1)
+        if not con:
+            return "Invalid Contract Sequence"
+        self.rtlcon = w
+
+    def doRtlAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry(frt, pag, p, data=self.othamt)
+
+    def doRtlDet(self, frt, pag, r, c, p, i, w):
+        self.alldet = w
+
+    def doNewRtl(self, widget=None):
+        callModule(self.opts["mf"], self.df, "rt1010", coy=(self.allcoy,
+            self.allnam), period=None, user=self.opts["capnm"],
+            args=(self.rtlprm, self.othacno))
+
+    def endRtl(self):
+        if self.glrtn == 6:
+            tramt = float(ASD(0.0) - ASD(self.othamt))
+        else:
+            tramt = self.othamt
+        self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
+        # Rental Ledger Transaction
+        data = [self.allcoy, self.rtlprm, self.othacno, self.rtlcon,
+            self.othrtn, self.trnref, self.bh.batno, self.trndte, tramt,
+            0, self.curdt, self.alldet, "N", "", self.opts["capnm"],
+            self.sysdtw, 0]
+        self.sql.insRec("rtltrn", data=data)
+        if self.othtot != self.allamt:
+            bal = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry("T", self.rtlpag, 0, data=bal)
+            self.df.advanceLine(self.tagp["RT"])
+        else:
+            self.opts["mf"].closeLoop()
+
     def doSlnEmp(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
             where=[("wgm_cono", "=", self.allcoy), ("wgm_empno", "=", w)],
@@ -2069,7 +2424,7 @@
             cap = self.othamt
             self.sql.insRec("waglmf", data=[self.allcoy, self.empnum,
                 self.slnnum, self.slndes, self.slncod, self.newrte,
-                self.trndat, self.slnded])
+                self.trndte, self.slnded])
         else:
             # Staff Loans Ledger Masterfile
             self.sql.updRec("waglmf", cols=["wlm_int_per"], data=[self.newrte],
@@ -2083,7 +2438,7 @@
                 cap = tramt
         # Staff Loans Ledger Transaction
         data = [self.allcoy, self.empnum, self.slnnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, tramt, cap, self.slnded,
+            self.othrtn, self.trndte, self.trnref, tramt, cap, self.slnded,
             self.newrte, self.curdt, self.alldet, "", self.opts["capnm"],
             self.sysdtw, 0]
         self.sql.insRec("wagltf", data=data)
@@ -2111,8 +2466,10 @@
         elif len(self.but) == 8:
             self.beg = 4
         for b in xrange(self.beg, (self.beg + 4)):
-            exec "self.df.setWidget(self.df.B%d, 'normal')" % b
-        exec "self.df.setWidget(self.df.B%d, 'focus')" % self.beg
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "normal")
+        wid = getattr(self.df, "B%s" % self.bwg)
+        self.df.setWidget(wid, "focus")
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         if self.agecan:
@@ -2122,7 +2479,7 @@
         if self.others == "crs":
             # Creditors Ledger Transaction
             data = [self.allcoy, self.othacno, self.othrtn, self.allref,
-                self.bh.batno, self.trndat, self.othref, self.tramt,
+                self.bh.batno, self.trndte, self.othref, self.tramt,
                 self.vatamt, 0, self.curdt, 0, "Y", 0, self.alldet,
                 self.vatcod, "", self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("crstrn", data=data, unique="crt_ref1")
@@ -2134,14 +2491,14 @@
                 self.sql.insRec("crstrn", data=data, unique="crt_ref1")
                 # General Ledger Discount Received
                 data = (self.allcoy, self.ctlctl["dis_rec"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, self.dsamt,
+                    self.trndte, 4, self.allref, self.bh.batno, self.dsamt,
                     0, self.alldet, "", "", 0, self.opts["capnm"],
                     self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
                 # General Ledger Creditors Control
                 dis = float(ASD(0.0) - ASD(self.dsamt))
                 data = (self.allcoy, self.ctlctl["crs_ctl"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, dis, 0,
+                    self.trndte, 4, self.allref, self.bh.batno, dis, 0,
                     self.trndet, "", "", 0, self.opts["capnm"], self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
             if self.othtot != self.allamt:
@@ -2153,7 +2510,7 @@
         elif self.others == "drs":
             # Debtors Ledger Transaction
             data = [self.allcoy, self.chain, self.othacno, self.othrtn,
-                self.allref, self.bh.batno, self.trndat, self.othref,
+                self.allref, self.bh.batno, self.trndte, self.othref,
                 self.tramt, self.vatamt, self.curdt, self.alldet,
                 self.vatcod, "", self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("drstrn", data=data, unique="drt_ref1")
@@ -2165,14 +2522,14 @@
                 self.sql.insRec("drstrn", data=data, unique="drt_ref1")
                 # General Ledger Debtors Control
                 data = (self.allcoy, self.ctlctl["drs_ctl"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, self.dsamt,
+                    self.trndte, 4, self.allref, self.bh.batno, self.dsamt,
                     0, self.alldet, "", "", 0, self.opts["capnm"],
                     self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
                 # General Ledger Discount Allowed
                 dis = float(ASD(0.0) - ASD(self.dsamt))
                 data = (self.allcoy, self.ctlctl["dis_all"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, dis, 0,
+                    self.trndte, 4, self.allref, self.bh.batno, dis, 0,
                     self.trndet, "", "", 0, self.opts["capnm"], self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
             if self.othtot != self.allamt:
@@ -2184,7 +2541,7 @@
         elif self.others == "mem":
             # Members Ledger Transaction
             data = [self.allcoy, self.othacno, self.othrtn, self.allref,
-                self.bh.batno, self.trndat, self.tramt, self.vatamt,
+                self.bh.batno, self.trndte, self.tramt, self.vatamt,
                 self.curdt, "", 0, self.alldet, self.vatcod, "",
                 self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("memtrn", data=data, unique="mlt_refno")
@@ -2196,14 +2553,14 @@
                 self.sql.insRec("memtrn", data=data, unique="mlt_refno")
                 # General Ledger Members Control
                 data = (self.allcoy, self.ctlctl["mem_ctl"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, self.dsamt,
+                    self.trndte, 4, self.allref, self.bh.batno, self.dsamt,
                     0, self.alldet, "", "", 0, self.opts["capnm"],
                     self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
                 # General Ledger Discount Allowed
                 dis = float(ASD(0.0) - ASD(self.dsamt))
                 data = (self.allcoy, self.ctlctl["dis_all"], self.curdt,
-                    self.trndat, 4, self.allref, self.bh.batno, dis, 0,
+                    self.trndte, 4, self.allref, self.bh.batno, dis, 0,
                     self.trndet, "", "", 0, self.opts["capnm"], self.sysdtw, 0)
                 self.sql.insRec("gentrn", data=data)
             if self.othtot != self.allamt:
@@ -2228,7 +2585,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for b in xrange(self.beg, (self.beg + 4)):
-            exec "self.df.setWidget(self.df.B%d, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         if self.others == "crs":
             age = AgeAll(self.opts["mf"], system="crs", agetyp=atype,

=== modified file 'gen/gl2040.py'
--- gen/gl2040.py	2017-02-25 14:03:05 +0000
+++ gen/gl2040.py	2017-08-11 09:52:59 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Journal Entries.
@@ -19,7 +17,7 @@
 from TartanClasses import TartanDialog
 from tartanFunctions import askQuestion, callModule, chkGenAcc, getNextCode
 from tartanFunctions import getVatRate, showError
-from tartanWork import armvtp, gltrtp
+from tartanWork import armvtp, gltrtp, rcmvtp
 
 class gl2040:
     def __init__(self, **opts):
@@ -102,6 +100,25 @@
                 self.tags.append(("MEM", None, None, None, False))
                 page += 1
                 self.tagp["ML"] = page
+        if mod.count("RC"):
+            ctl = self.gc.getCtl("rcactl", self.opts["conum"])
+            if not ctl:
+                return
+            if ctl["cte_glint"] == "Y":
+                tab.extend(["rcaprm", "rcaowm", "rcaowt", "rcatnm",
+                    "rcatnt", "rcacon"])
+                self.tags.append(("RCA", None, None, None, False))
+                page += 1
+                self.tagp["RC"] = page
+        if mod.count("RT"):
+            ctl = self.gc.getCtl("rtlctl", self.opts["conum"])
+            if not ctl:
+                return
+            if ctl["ctr_glint"] == "Y":
+                tab.extend(["rtlprm", "rtlmst", "rtlcon", "rtltrn"])
+                self.tags.append(("RTL", None, None, None, False))
+                page += 1
+                self.tagp["RT"] = page
         if mod.count("SL"):
             ctl = self.gc.getCtl("wagctl", self.opts["conum"])
             if not ctl:
@@ -144,8 +161,8 @@
         # Other
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][1][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][1][0] / 100)
         self.importing = False
         return True
 
@@ -271,6 +288,76 @@
                     ("mlm_surname", "", 0, "Surname", "Y"),
                     ("mlm_names", "", 0, "Names")),
                 "whera": [("C", "mlm_cono", 2, 1)]}
+        if "RC" in self.tagp:
+            rcp = {
+                "stype": "R",
+                "tables": ("rcaprm",),
+                "cols": (
+                    ("rcp_code", "", 0, "Pr-Code"),
+                    ("rcp_desc", "", 0, "Description", "Y")),
+                "whera": [
+                    ("C", "rcp_cono", 2, 1)]}
+            rct = {
+                "stype": "R",
+                "tables": ("rcatnm",),
+                "cols": (
+                    ("rtn_acno", "", 0, "Cod-Num"),
+                    ("rtn_name", "", 0, "Name", "Y")),
+                "whera": [
+                    ("C", "rtn_cono", 2, 1),
+                    ("C", "rtn_owner", 2, self.tagp["RC"]),
+                    ("C", "rtn_code", 0, self.tagp["RC"])]}
+            rcc = {
+                "stype": "R",
+                "tables": ("rcacon",),
+                "cols": (
+                    ("rcc_cnum", "", 0, "Cod-Num"),
+                    ("rcc_payind", "", 0, "F"),
+                    ("rcc_start", "", 0, "Start-Date"),
+                    ("rcc_period", "", 0, "Per")),
+                "whera": [
+                    ("C", "rcc_cono", 2, 1),
+                    ("C", "rcc_code", 0, self.tagp["RC"]),
+                    ("C", "rcc_acno", 4, self.tagp["RC"])]}
+            data = []
+            for x in xrange(1, len(rcmvtp)+1):
+                if x == 2:
+                    continue
+                data.append((x, rcmvtp[x-1][1]))
+            rcm = {
+                "stype": "C",
+                "titl": "Select the Required Type",
+                "head": ("C", "Type"),
+                "data": data}
+        if "RT" in self.tagp:
+            prm = {
+                "stype": "R",
+                "tables": ("rtlprm",),
+                "cols": (
+                    ("rtp_code", "", 0, "Pr-Code"),
+                    ("rtp_desc", "", 0, "Description", "Y")),
+                "whera": [("C", "rtp_cono", 2, 1)]}
+            rtm = {
+                "stype": "R",
+                "tables": ("rtlmst",),
+                "cols": (
+                    ("rtm_acno", "", 0, "Cod-Num"),
+                    ("rtm_name", "", 0, "Name", "Y")),
+                "whera": [
+                    ("C", "rtm_cono", 2, 1),
+                    ("C", "rtm_code", 0, self.tagp["RT"])]}
+            con = {
+                "stype": "R",
+                "tables": ("rtlcon",),
+                "cols": (
+                    ("rtc_cnum", "", 0, "Cod-Num"),
+                    ("rtc_payind", "", 0, "F"),
+                    ("rtc_start", "", 0, "Start-Date"),
+                    ("rtc_period", "", 0, "Per")),
+                "whera": [
+                    ("C", "rtc_cono", 2, 1),
+                    ("C", "rtc_code", 0, self.tagp["RT"]),
+                    ("C", "rtc_acno", 2, self.tagp["RT"])]}
         if "SL" in self.tagp:
             wgm = {
                 "stype": "R",
@@ -326,7 +413,7 @@
                 "","N",self.doVatAmt,None,None,("efld",)),
             (("C",1,0,8),"INA",(20,30),"Details","Details",
                 "r","N",self.doTrnDet,None,None,("notblank",))]
-        tags = self.tagp.keys()
+        tags = list(self.tagp.keys())
         tags.sort()
         for tag in tags:
             if tag == "AR":
@@ -406,6 +493,42 @@
                     [["C",self.mempag,0,1],"ONA",30,"Name"],
                     [["C",self.mempag,0,2],"ISD",13.2,"Amount","",
                         "","N",self.doMemAmt,None,None,("efld",)]])
+            elif tag == "RC":
+                self.rcapag = self.tagp[tag]
+                self.fld.extend([
+                    [["T",self.rcapag,0,0],"OSD",13.2,"Unallocated Balance"],
+                    [["C",self.rcapag,0,0],"INA",7,"Prm-Cod","Premises Code",
+                        "","N",self.doRcaPrm,rcp,None,("efld",)],
+                    [["C",self.rcapag,0,1],"ONA",15,"Description"],
+                    [["C",self.rcapag,0,0],"ONA",7,"Own-Cod"],
+                    [["C",self.rcapag,0,1],"ONA",15,"Owners Name"],
+                    [["C",self.rcapag,0,4],"INA",7,"Tnt-Cod","Tenant Code",
+                        "","N",self.doRcaTnt,rct,None,("efld",)],
+                    [["C",self.rcapag,0,5],"ONA",15,"Tenants Name"],
+                    [("C",self.rcapag,0,6),"IUI",3,"Seq","Contract Sequence",
+                        "","N",self.doRcaCon,rcc,None,None],
+                    [("C",self.rcapag,0,7),"IUI",1,"T","Movement Type",
+                        "","N",self.doRcaTyp,rcm,None,("in", (1,3,4,5,6))],
+                    [["C",self.rcapag,0,8],"ISD",13.2,"Amount","",
+                        "","N",self.doRcaAmt,None,None,("efld",)],
+                    [["C",self.rcapag,0,9],"INA",30,"Details","Details",
+                        "","N",self.doRcaDet,None,None,("efld",)]])
+            elif tag == "RT":
+                self.rtlpag = self.tagp[tag]
+                self.fld.extend([
+                    [["T",self.rtlpag,0,0],"OSD",13.2,"Unallocated Balance"],
+                    [["C",self.rtlpag,0,0],"INA",7,"Prm-Cod","Premises Code",
+                        "","N",self.doRtlPrm,prm,None,("efld",)],
+                    [["C",self.rtlpag,0,1],"ONA",30,"Description"],
+                    [["C",self.rtlpag,0,2],"INA",7,"Acc-Num","Account Number",
+                        "","N",self.doRtlAcc,rtm,None,("notblank",)],
+                    [["C",self.rtlpag,0,3],"ONA",30,"Name"],
+                    [("C",self.rtlpag,0,4),"IUI",3,"Seq","Contract Sequence",
+                        "","N",self.doRtlCon,con,None,None],
+                    [["C",self.rtlpag,0,5],"ISD",13.2,"Amount","",
+                        "","N",self.doRtlAmt,None,None,("efld",)],
+                    [["C",self.rtlpag,0,6],"INA",30,"Details","Details",
+                        "","N",self.doRtlDet,None,None,("efld",)]])
             elif tag == "SL":
                 self.slnpag = self.tagp[tag]
                 self.fld.extend([
@@ -460,6 +583,12 @@
             elif tag == "ML":
                 cnd.append((self.endCrsDrsMem, "y"))
                 cxt.append(None)
+            elif tag == "RC":
+                cnd.append((self.endRca, "y"))
+                cxt.append(None)
+            elif tag == "RT":
+                cnd.append((self.endRtl, "y"))
+                cxt.append(None)
             elif tag == "SL":
                 cnd.append((self.endSln, "y"))
                 cxt.append(None)
@@ -474,11 +603,9 @@
         self.importing = True
         impcol = []
         pos = 0
-        for num, fld in enumerate(self.fld[2:]):
+        for num, fld in enumerate(self.fld[2:9]):
             if num == 4:
                 continue
-            if num > 8:
-                break
             if type(fld[2]) in (tuple, list):
                 size = fld[2][1]
             else:
@@ -499,7 +626,7 @@
         err = False
         for num, line in enumerate(fi.impdat):
             p.displayProgress(num)
-            if not len(line) == 8:
+            if len(line) != 8:
                 err = "Line %s: Invalid Number of Fields (S/B 8 is %s)" % \
                     (num + 1, len(line))
                 break
@@ -522,7 +649,7 @@
             err = coy.err
             if not err:
                 # Check if valid company number
-                if self.impint == "N" and not coy.work == self.opts["conum"]:
+                if self.impint == "N" and coy.work != self.opts["conum"]:
                     err = "Invalid Company (S/B %s is %s)" % \
                         (self.opts["conum"], coy.disp)
                 elif self.incoac and coy.work not in self.incoac:
@@ -584,16 +711,16 @@
         else:
             sp = SplashScreen(self.opts["mf"].body,
                 "Updating Records ... Please Wait")
-            for self.trnref, self.trndat, self.allcoy, self.acno, \
+            for self.trnref, self.trndte, self.allcoy, self.acno, \
                     self.trnamt, self.vatcod, vat, self.trndet in trans:
                 if self.bh.multi == "N":
                     self.curdt = self.bh.curdt
                 else:
-                    self.curdt = self.trndat / 100
+                    self.curdt = int(self.trndte / 100)
                 self.doChkLoadCtls()
                 if self.vatcod and not vat:
                     vrte = getVatRate(self.sql, self.opts["conum"],
-                        self.vatcod, self.trndat)
+                        self.vatcod, self.trndte)
                     if vrte is None:
                         vrte = 0.0
                     self.vatamt = round((self.trnamt * vrte / (vrte + 100)), 2)
@@ -617,11 +744,11 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
-        self.trndat = w
+        self.trndte = w
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndte / 100)
         else:
             self.curdt = self.bh.curdt
 
@@ -705,6 +832,22 @@
             self.mem_gl = ctl["mcm_glint"]
         else:
             self.mem_gl = "N"
+        # Load Rca Integration
+        if mod.count("RC"):
+            ctl = self.gc.getCtl("rcactl", self.allcoy)
+            if not ctl:
+                return "rf"
+            self.rca_gl = ctl["cte_glint"]
+        else:
+            self.rca_gl = "N"
+        # Load Rtl Integration
+        if mod.count("RT"):
+            ctl = self.gc.getCtl("rtlctl", self.allcoy)
+            if not ctl:
+                return "rf"
+            self.rtl_gl = ctl["ctr_glint"]
+        else:
+            self.rtl_gl = "N"
         # Load Sln Integration
         if mod.count("SL"):
             ctl = self.gc.getCtl("wagctl", self.allcoy)
@@ -731,6 +874,11 @@
             ctls.extend(["lon_ctl", "int_pay", "int_rec"])
         if self.mem_gl == "Y":
             ctls.append("mem_ctl")
+        if self.rca_gl == "Y":
+            self.rcactl = []
+            for c in ("rca_own", "rca_tnt", "rca_dep"):
+                self.rcactl.append(self.ctlctl[c])
+                ctls.append(c)
         if self.sln_gl == "Y":
             ctls.extend(["wag_slc", "wag_sli"])
         if self.gc.chkRec(self.allcoy, self.ctlctl, ctls):
@@ -743,6 +891,13 @@
                 where=[("asg_cono", "=", self.allcoy)])
             for a in ass:
                 self.assctl.append(a[0])
+        # Get for Rental Accounts
+        if self.ass_gl == "Y":
+            self.rtlctl = []
+            rtl = self.sql.getRec(tables="rtlprm", cols=["rtp_rtlacc"],
+                where=[("rtp_cono", "=", self.allcoy)])
+            for r in rtl:
+                self.rtlctl.append(r[0])
         # Batch Indicator
         if self.allcoy == self.opts["conum"]:
             self.batind = "N"
@@ -764,6 +919,15 @@
             self.others = "lon"
         elif self.mem_gl == "Y" and w == self.ctlctl["mem_ctl"]:
             self.others = "mem"
+        elif self.rca_gl == "Y" and w in self.rcactl:
+            if str(self.rcactl.index(w)) == "0":
+                self.others = "own"
+            elif str(self.rcactl.index(w)) == "1":
+                self.others = "tnt"
+            else:
+                self.others = "dep"
+        elif self.rtl_gl == "Y" and w in self.rtlctl:
+            self.others = "rtl"
         elif self.sln_gl == "Y" and w == self.ctlctl["wag_slc"]:
             self.others = "sln"
         if self.others:
@@ -778,6 +942,8 @@
         if self.others:
             if self.others in ("bkm", "sln"):
                 self.othrtn = 5
+            elif self.others in ("own", "tnt", "dep", "rtl"):
+                self.othrtn = 4
             else:
                 self.othrtn = 3
             self.vatcod = "N"
@@ -799,7 +965,7 @@
             return "sk2"
 
     def doVatCod(self, frt, pag, r, c, p, i, w):
-        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndte)
         if vrte is None:
             return "Invalid V.A.T. Code"
         self.vatcod = w
@@ -855,6 +1021,14 @@
             self.df.selPage("MEM")
             self.df.loadEntry("T", self.mempag, 0, data=self.allamt)
             self.df.focusField("C", self.mempag, 1)
+        elif self.others in ("own", "tnt", "dep"):
+            self.df.selPage("RCA")
+            self.df.loadEntry("T", self.rcapag, 0, data=self.allamt)
+            self.df.focusField("C", self.rcapag, 1)
+        elif self.others == "rtl":
+            self.df.selPage("RTL")
+            self.df.loadEntry("T", self.rtlpag, 0, data=self.allamt)
+            self.df.focusField("C", self.rtlpag, 1)
         elif self.others == "sln":
             self.df.selPage("SLN")
             self.df.loadEntry("T", self.slnpag, 0, data=self.allamt)
@@ -939,7 +1113,7 @@
     def endAss(self):
         # Asset Register Transaction
         data = [self.allcoy, self.assgrp, self.asscod, self.othrtn,
-            self.trnref, self.bh.batno, self.trndat, self.othmov,
+            self.trnref, self.bh.batno, self.trndte, self.othmov,
             self.othamt, self.othamt, 0, self.curdt, self.trndet,
             "", "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("asstrn", data=data)
@@ -956,7 +1130,7 @@
                 self.assgrp), ("ast_code", "=", self.asscod)], limit=1)
             if amt[0]:
                 data = [self.opts["conum"], self.ctlctl["ass_sls"], self.curdt,
-                    self.trndat, self.opts["rtn"], self.trnref, self.bh.batno,
+                    self.trndte, self.opts["rtn"], self.trnref, self.bh.batno,
                     amt[0], 0, self.trndet, "N", "", 0, self.opts["capnm"],
                     self.sysdtw, 0]
                 self.sql.insRec("gentrn", data=data)
@@ -980,7 +1154,7 @@
                 ("asd_code", "", 0, "Cod"),
                 ("asd_desc", "", 0, "Description", "Y")),
             "where": [("asd_cono", "=", self.allcoy)]}
-        self.fld = (
+        fld = (
             (("T",0,0,0),"INA",30,"Description","",
                 "","N",None,None,None,("notblank",)),
             (("T",0,1,0),"INa",3,"Dep Code","Depreciation Code",
@@ -990,7 +1164,7 @@
         txt = (self.doNewAXit, )
         state = self.df.disableButtonsTags()
         self.na = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=self.fld, tend=tnd, txit=txt)
+            eflds=fld, tend=tnd, txit=txt)
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
 
@@ -1037,7 +1211,7 @@
     def endBkm(self):
         # Bookings Ledger Transaction
         data = [self.allcoy, self.bkmnum, self.othrtn, self.trnref,
-            self.bh.batno, self.trndat, self.othamt, 0, self.curdt,
+            self.bh.batno, self.trndte, self.othamt, 0, self.curdt,
             self.trndet, "", "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("bkmtrn", data=data)
         # Check and Update Status
@@ -1221,14 +1395,14 @@
         if self.newlon:
             # Loans Rate
             self.sql.insRec("lonrte", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.trndat, self.newdri, self.newcri])
+                self.lonnum, self.trndte, self.newdri, self.newcri])
             # Loans Ledger Masterfile
             self.sql.insRec("lonmf2", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.londes, self.trndat, self.lonmth,
+                self.lonnum, self.londes, self.trndte, self.lonmth,
                 self.lonpay, 0])
         # Loans Ledger Transaction
         data = [self.allcoy, self.lonacc, self.lonnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, self.othamt, self.curdt,
+            self.othrtn, self.trndte, self.trnref, self.othamt, self.curdt,
             self.trndet, "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("lontrn", data=data)
         self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
@@ -1256,6 +1430,154 @@
             self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
             self.df.loadEntry(frt, pag, p, data=self.othamt)
 
+    def doRcaPrm(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables=["rcaprm", "rcaowm"], cols=["rcp_desc",
+            "rcp_owner", "rom_name"], where=[("rcp_cono", "=", self.allcoy),
+            ("rcp_code", "=", w), ("rom_cono=rcp_cono",),
+            ("rom_acno=rcp_owner",)], limit=1)
+        if not acc:
+            return "Invalid Premises Code"
+        self.rcaprm = w
+        self.rcaown = acc[1]
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        self.df.loadEntry(frt, pag, p+2, data=acc[1])
+        self.df.loadEntry(frt, pag, p+3, data=acc[2])
+        if self.others == "own":
+            self.rcatnt = 0
+            return "sk7"
+
+    def doRcaTnt(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="rcatnm", cols=["rtn_name"],
+            where=[("rtn_cono", "=", self.allcoy), ("rtn_owner",
+            "=", self.rcaown), ("rtn_code", "=", self.rcaprm),
+            ("rtn_acno", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Tenant"
+        self.rcatnt = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        con = self.sql.getRec(tables="rcacon", where=[("rcc_cono", "=",
+            self.allcoy), ("rcc_owner", "=", self.rcaown), ("rcc_code", "=",
+            self.rcaprm), ("rcc_acno", "=", self.rcatnt)], order="rcc_cnum")
+        if not con:
+            return "No Valid Contracts"
+        self.rcacon = con[-1:][0][4]
+        self.df.loadEntry(frt, pag, p+2, data=self.rcacon)
+
+    def doRcaCon(self, frt, pag, r, c, p, i, w):
+        con = self.sql.getRec(tables="rcacon", where=[("rcc_cono", "=",
+            self.allcoy), ("rcc_owner", "=", self.rcaown), ("rcc_code", "=",
+            self.rcaprm), ("rcc_acno", "=", self.rcatnt), ("rcc_cnum", "=",
+            w)], limit=1)
+        if not con:
+            return "Invalid Contract Sequence"
+        self.rcacon = w
+        if self.others == "dep":
+            self.rcatyp = 2
+            self.df.loadEntry(frt, pag, p+1, data=self.rcatyp)
+            return "sk1"
+
+    def doRcaTyp(self, frt, pag, r, c, p, i, w):
+        self.rcatyp = w
+
+    def doRcaAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry(frt, pag, p, data=self.othamt)
+
+    def doRcaDet(self, frt, pag, r, c, p, i, w):
+        self.alldet = w
+
+    def endRca(self):
+        self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
+        if not self.rcatnt:
+            # Owners Transaction
+            data = [self.allcoy, self.rcaown, self.othrtn, self.trnref,
+                self.bh.batno, self.trndte, self.othamt, 0, self.curdt,
+                self.alldet, "N", "", self.opts["capnm"], self.sysdtw, 0]
+            self.sql.insRec("rcaowt", data=data)
+        else:
+            # Tenants Transaction
+            data = [self.allcoy, self.rcaown, self.rcaprm, self.rcatnt,
+                self.rcacon, self.othrtn, self.trnref, self.bh.batno,
+                self.trndte, self.rcatyp, self.othamt, 0, self.curdt,
+                self.alldet, "N", "", self.opts["capnm"], self.sysdtw, 0]
+            self.sql.insRec("rcatnt", data=data)
+        if self.othtot == self.allamt:
+            self.endOther()
+        else:
+            bal = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry("T", self.rcapag, 0, data=bal)
+            self.df.advanceLine(self.tagp["RC"])
+
+    def doRtlPrm(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="rtlprm", cols=["rtp_desc"],
+            where=[("rtp_cono", "=", self.allcoy), ("rtp_code", "=", w)],
+            limit=1)
+        if not acc:
+            return "Invalid Premises Code"
+        self.rtlprm = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+
+    def doRtlAcc(self, frt, pag, r, c, p, i, w):
+        self.othacno = w
+        acc = self.sql.getRec(tables="rtlmst", cols=["rtm_name"],
+            where=[("rtm_cono", "=", self.allcoy), ("rtm_code",
+            "=", self.rtlprm), ("rtm_acno", "=", self.othacno)],
+            limit=1)
+        if not acc:
+            ok = askQuestion(screen=self.opts["mf"].body, head="New Contract",
+                mess="Account does not exist, Create?")
+            if ok == "no":
+                return "rf"
+            self.doNewRtl()
+            acc = self.sql.getRec(tables="rtlmst", cols=["rtm_name"],
+                where=[("rtm_cono", "=", self.allcoy), ("rtm_code", "=",
+                self.rtlprm), ("rtm_acno", "=", self.othacno)], limit=1)
+            if not acc:
+                return "rf"
+        self.othacno = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+        con = self.sql.getRec(tables="rtlcon", where=[("rtc_cono", "=",
+            self.allcoy), ("rtc_code", "=", self.rtlprm), ("rtc_acno",
+            "=", self.othacno)], order="rtc_cnum")
+        if not con:
+            return "No Valid Contracts"
+        self.rtlcon = con[-1:][0][3]
+        self.df.loadEntry(frt, pag, p+2, data=self.rtlcon)
+
+    def doRtlCon(self, frt, pag, r, c, p, i, w):
+        con = self.sql.getRec(tables="rtlcon", where=[("rtc_cono", "=",
+            self.allcoy), ("rtc_code", "=", self.rtlprm), ("rtc_acno",
+            "=", self.othacno), ("rtc_cnum", "=", w)], order="rtc_cnum")
+        if not con:
+            return "Invalid Contract Sequence"
+        self.rtlcon = w
+
+    def doRtlAmt(self, frt, pag, r, c, p, i, w):
+        self.othamt = w
+        if not self.othamt:
+            self.othamt = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry(frt, pag, p, data=self.othamt)
+
+    def doRtlDet(self, frt, pag, r, c, p, i, w):
+        self.alldet = w
+
+    def endRtl(self):
+        self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
+        # Rental Ledger Transaction
+        data = [self.allcoy, self.rtlprm, self.othacno, self.rtlcon,
+            self.othrtn, self.trnref, self.bh.batno, self.trndte,
+            self.othamt, 0, self.curdt, self.alldet, "N", "",
+            self.opts["capnm"], self.sysdtw, 0]
+        self.sql.insRec("rtltrn", data=data)
+        if self.othtot == self.allamt:
+            self.endOther()
+        else:
+            bal = float(ASD(self.allamt) - ASD(self.othtot))
+            self.df.loadEntry("T", self.rtlpag, 0, data=bal)
+            self.df.advanceLine(self.tagp["RT"])
+
     def doSlnEmp(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
             where=[("wgm_cono", "=", self.allcoy), ("wgm_empno", "=", w)],
@@ -1279,7 +1601,7 @@
         else:
             acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
                 "=", self.allcoy), ("wlm_empno", "=", self.empnum),
-                ("wlm_loan", "=", self.slnnum)], limit=1)
+                ("wlm_loan", "=", w)], limit=1)
             if not acc:
                 return "Loan Does Not Exist"
             self.slnnum = w
@@ -1333,7 +1655,7 @@
             cap = self.othamt
             self.sql.insRec("waglmf", data=[self.allcoy, self.empnum,
                 self.slnnum, self.slndes, self.slncod, self.newrte,
-                self.trndat, self.slnded])
+                self.trndte, self.slnded])
         else:
             # Staff Loans Ledger Masterfile
             cap = self.othamt
@@ -1342,7 +1664,7 @@
                 self.empnum), ("wlm_loan", "=", self.slnnum)])
         # Staff Loans Ledger Transaction
         data = [self.allcoy, self.empnum, self.slnnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, self.othamt, cap,
+            self.othrtn, self.trndte, self.trnref, self.othamt, cap,
             self.slnded, self.newrte, self.curdt, self.trndet, "",
             self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("wagltf", data=data)
@@ -1360,7 +1682,7 @@
             # Creditors Ledger Transaction
             amt = float(ASD(0) - ASD(self.othamt))
             data = [self.allcoy, self.othacno, self.othrtn, self.allref,
-                self.bh.batno, self.trndat, self.othref, amt, 0, 0,
+                self.bh.batno, self.trndte, self.othref, amt, 0, 0,
                 self.curdt, 0, "Y", 0, self.trndet, "", "",
                 self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("crstrn", data=data, unique="crt_ref1")
@@ -1373,7 +1695,7 @@
         elif self.others == "drs":
             # Debtors Ledger Transaction
             data = [self.allcoy, self.chain, self.othacno, self.othrtn,
-                self.allref, self.bh.batno, self.trndat, self.othref,
+                self.allref, self.bh.batno, self.trndte, self.othref,
                 self.othamt, 0, self.curdt, self.trndet, "", "",
                 self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("drstrn", data=data, unique="drt_ref1")
@@ -1386,7 +1708,7 @@
         elif self.others == "mem":
             # Members Ledger Transaction
             data = [self.allcoy, self.othacno, self.othrtn, self.allref,
-                self.bh.batno, self.trndat, self.othamt, 0, self.curdt,
+                self.bh.batno, self.trndte, self.othamt, 0, self.curdt,
                 "", 0, self.trndet, "", "", self.opts["capnm"], self.sysdtw, 0]
             self.sql.insRec("memtrn", data=data, unique="mlt_refno")
             if self.othtot == self.allamt:
@@ -1405,13 +1727,17 @@
             self.df.clearFrame("C", self.lonpag)
         elif self.others == "mem":
             self.df.clearFrame("C", self.mempag)
+        elif self.others in ("own", "tnt", "dep"):
+            self.df.clearFrame("C", self.rcapag)
+        elif self.others == "rtl":
+            self.df.clearFrame("C", self.rtlpag)
         elif self.others == "sln":
             self.df.clearFrame("C", self.slnpag)
         self.df.selPage("Transaction")
         self.df.advanceLine(1)
 
     def updateTables(self):
-        if not self.allcoy == self.opts["conum"]:
+        if self.allcoy != self.opts["conum"]:
             inter = True
             ac1 = self.sql.getRec(tables="genint", cols=["cti_acno"],
                 where=[("cti_cono", "=", self.opts["conum"]),
@@ -1421,14 +1747,14 @@
                 ("cti_inco", "=", self.opts["conum"])], limit=1)[0]
         else:
             inter = False
-        data = (self.allcoy, self.acno, self.curdt, self.trndat,
+        data = (self.allcoy, self.acno, self.curdt, self.trndte,
             self.opts["rtn"], self.trnref, self.bh.batno, self.allamt,
             self.vatamt, self.trndet, self.vatcod, self.batind, 0,
             self.opts["capnm"], self.sysdtw, 0)
         self.sql.insRec("gentrn", data=data)
         if self.vatcod:
             if self.vatamt:
-                data = (self.allcoy, self.convat, self.curdt, self.trndat,
+                data = (self.allcoy, self.convat, self.curdt, self.trndte,
                     self.opts["rtn"], self.trnref, self.bh.batno, self.vatamt,
                     0.00, self.trndet, self.vatcod, self.batind, 0,
                     self.opts["capnm"], self.sysdtw, 0)
@@ -1438,18 +1764,18 @@
             else:
                 vtyp = "I"
             data = (self.allcoy, self.vatcod, vtyp, self.curdt, "G",
-                self.opts["rtn"], self.bh.batno, self.trnref, self.trndat,
+                self.opts["rtn"], self.bh.batno, self.trnref, self.trndte,
                 self.acno, self.trndet, self.allamt, self.vatamt, 0,
                 self.opts["capnm"], self.sysdtw, 0)
             self.sql.insRec("ctlvtf", data=data)
         if inter:
-            data = (self.opts["conum"], ac1, self.curdt, self.trndat,
+            data = (self.opts["conum"], ac1, self.curdt, self.trndte,
                 self.opts["rtn"], self.trnref, self.bh.batno, self.trnamt,
                 0.00, self.trndet, self.vatcod, "N", 0, self.opts["capnm"],
                 self.sysdtw, 0)
             self.sql.insRec("gentrn", data=data)
             val = float(ASD(0) - ASD(self.trnamt))
-            data = (self.allcoy, ac2, self.curdt, self.trndat,
+            data = (self.allcoy, ac2, self.curdt, self.trndte,
                 self.opts["rtn"], self.trnref, self.bh.batno, val, 0.00,
                 self.trndet, self.vatcod, "", 0, self.opts["capnm"],
                 self.sysdtw, 0)

=== modified file 'gen/gl2050.py'
--- gen/gl2050.py	2017-02-25 14:03:05 +0000
+++ gen/gl2050.py	2017-06-28 15:06:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Standard Journals.
@@ -54,8 +52,8 @@
             return
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][1][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][1][0] / 100)
         return True
 
     def doProcess(self):
@@ -119,12 +117,12 @@
             start = gjm[self.sql.genjlm_col.index("gjm_start")]
             last = gjm[self.sql.genjlm_col.index("gjm_last")]
             dates = []
-            while not start > self.bh.curdt:
+            while start <= self.bh.curdt:
                 if start < self.s_per or start <= last:
                     pass
                 elif self.allper == "N" and start == self.bh.curdt:
                     dates.append(start)
-                elif self.allper == "Y" and not start > self.bh.curdt:
+                elif self.allper == "Y" and start <= self.bh.curdt:
                     dates.append(start)
                 start = self.nextPeriod(start)
             for self.curdt in dates:
@@ -156,7 +154,7 @@
         self.opts["mf"].closeLoop()
 
     def nextPeriod(self, period):
-        yy = period / 100
+        yy = int(period / 100)
         mm = (period % 100) + self.mths
         if mm > 12:
             yy += 1

=== modified file 'gen/gl3010.py'
--- gen/gl3010.py	2017-02-25 14:03:05 +0000
+++ gen/gl3010.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     General Ledger Batch Error Listing.
@@ -155,7 +153,7 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
                 repeml=self.df.repeml)
 
     def pageHeading(self):

=== modified file 'gen/gl3020.py'
--- gen/gl3020.py	2017-02-25 14:03:05 +0000
+++ gen/gl3020.py	2017-06-28 15:06:44 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Transaction Audit Trail.
@@ -49,8 +47,8 @@
             ("UI", 3, False, False, True), ("UI", 7, False, False, True),
             ("NA", 30), ("Na", 9), ("D1", 10), ("SD", 15.2), ("SD", 15.2),
             ("SD", 15.2), ("UA", 1), ("NA", 30)]
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.gqt = [0] * (len(gltrtp) + 1)
         self.gdr = [0] * (len(gltrtp) + 1)
         self.gcr = [0] * (len(gltrtp) + 1)
@@ -343,7 +341,7 @@
                 continue
             cono, acno, trdt, trtp, refno, batch, debit, credit, taxamt, \
                 detail, taxind, desc = vals
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -382,7 +380,7 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
                 repeml=self.df.repeml)
 
     def getValues(self, data):

=== modified file 'gen/gl3030.py'
--- gen/gl3030.py	2017-02-25 14:03:05 +0000
+++ gen/gl3030.py	2017-06-28 15:07:03 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Account Statements.
@@ -21,7 +19,7 @@
 class gl3030:
     def __init__(self, **opts):
         self.opts = opts
-        if not "auto" in opts:
+        if "auto" not in opts:
             self.auto = None
         if self.setVariables():
             if self.auto:
@@ -51,8 +49,8 @@
         self.forms = [("UI", 3), ("UI", 7), ("NA", 30), ("D1", 10),
             ("Na", 9), ("NA", 3), ("Na", 7), ("NA", 30), ("SD", 13.2),
             ("SD", 13.2), ("SD", 13.2)]
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         return True
 
     def mainProcess(self):
@@ -262,7 +260,7 @@
             self.fpdf.output(pdfnam, "F")
             if not self.auto:
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
                     repeml=self.df.repeml)
 
     def getAccValues(self, data):

=== modified file 'gen/gl3040.py'
--- gen/gl3040.py	2017-02-25 14:03:05 +0000
+++ gen/gl3040.py	2017-06-28 15:07:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Trial Balance.
@@ -44,8 +42,8 @@
             "%s"))
         self.colsh = ["Acc-Num", "T", "Description", "Debit", "Credit"]
         self.forms = [("UI", 7), ("UA", 1), ("NA", 40)] + [("SD", 14.2)] * 2
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.dtot = 0.00
         self.ctot = 0.00
         self.gp = 0.00
@@ -102,7 +100,7 @@
         self.zerbal = w
 
     def doEnd(self):
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.repprt = self.df.repprt
             self.repeml = self.df.repeml
             self.df.closeProcess()
@@ -115,7 +113,7 @@
             self.exportReport(recs)
         else:
             self.printReport(recs)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.closeProcess()
 
     def exportReport(self, recs):
@@ -175,7 +173,7 @@
         pad = chrs - len(self.head2) + 4 - 11  # %s%s and ' Page     1'
         self.head2 = self.head2 % (" " * pad, " Page %5s")
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.fpdf = MyFpdf(name=__name__, head=self.head1)
         self.pgnum = 0
         self.pglin = 999
@@ -194,14 +192,14 @@
         p.closeProgress()
         if self.fpdf.page and not p.quit:
             self.grandTotal()
-            if not "args" in self.opts:
+            if "args" not in self.opts:
                 pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
+                    pdfnam=pdfnam, header=self.tit, repprt=self.repprt,
                     repeml=self.repeml)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.closeProcess()
 
     def getValues(self, data):

=== modified file 'gen/gl3050.py'
--- gen/gl3050.py	2017-02-25 14:03:05 +0000
+++ gen/gl3050.py	2017-07-24 08:26:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Financial Statements.
@@ -29,9 +27,10 @@
                     self.repprt, self.repeml, self.fpdf = self.opts["args"]
                 yed = CCD(mthendDate((self.end * 100) + 1), "D1", 10)
                 self.yed = "%s %s %s" % ((yed.work % 100),
-                    mthnam[((yed.work % 10000) / 100)][1], yed.work / 10000)
-                self.cyr = "  %4s" % (self.end / 100)
-                self.pyr = "  %4s" % ((self.end / 100) - 1)
+                    mthnam[int((yed.work % 10000) / 100)][1],
+                    int(yed.work / 10000))
+                self.cyr = "  %4s" % int(self.end / 100)
+                self.pyr = "  %4s" % (int(self.end / 100) - 1)
                 self.strm = 0
                 self.con = "N"
                 self.dep = "N"
@@ -57,14 +56,14 @@
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %s" % \
             (t[0], t[1], t[2], t[3], t[4], __name__)
-        self.i_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.i_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         df = self.e_per - self.i_per - 87
         if df > 12:
             self.d_per = df - 12
-            yr = self.i_per / 100
+            yr = int(self.i_per / 100)
             mt = self.i_per % 100
-            for _ in range(self.d_per):
+            for _ in xrange(self.d_per):
                 mt += 1
                 if mt > 12:
                     mt -= 12
@@ -181,9 +180,9 @@
         self.end = w
         yed = CCD(mthendDate((self.end * 100) + 1), "D1", 10)
         self.yed = "%s %s %s" % ((yed.work % 100),
-            mthnam[((yed.work % 10000) / 100)][1], yed.work / 10000)
-        self.cyr = "  %4s" % (self.end / 100)
-        self.pyr = "  %4s" % ((self.end / 100) - 1)
+            mthnam[int((yed.work % 10000) / 100)][1], int(yed.work / 10000))
+        self.cyr = "  %4s" % int(self.end / 100)
+        self.pyr = "  %4s" % (int(self.end / 100) - 1)
         bud = self.sql.getRec(tables="genbud", where=[("glb_cono", "=",
             self.opts["conum"]), ("glb_curdt", "between", self.s_per,
             self.end)])
@@ -306,7 +305,7 @@
         self.num = w
 
     def doMainEnd(self):
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.repprt = self.df.repprt
             self.repeml = self.df.repeml
             self.df.closeProcess()
@@ -390,7 +389,7 @@
                     self.opts["mf"].closeLoop()
                     return
             self.doCreateReport()
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.opts["mf"].closeLoop()
 
     def getRepDetails(self):
@@ -838,7 +837,7 @@
         else:
             self.doPrintReport()
             # For type M and a Manual or Auto Chart is selected
-            if not "args" in self.opts and not self.strm and \
+            if "args" not in self.opts and not self.strm and \
                     self.gldep == "N" and (self.achart or self.mchart):
                 CreateChart(self.opts["mf"], self.opts["conum"],
                     self.opts["conam"], [self.s_per, self.end],
@@ -1079,7 +1078,7 @@
             self.linw = self.linw[:-1]
             self.heds.append(head)
             self.width = head
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.fpdf = MyFpdf(name=__name__, head=self.width)
         self.pgnum = 0
         self.pglin = 999
@@ -1101,10 +1100,10 @@
                 self.doUnderline(dat)
             self.counter = dat[6]
         p.closeProgress()
-        if not "args" in self.opts and self.fpdf.page:
+        if "args" not in self.opts and self.fpdf.page:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.emlhead,
+                pdfnam=self.pdfnam, header=self.emlhead,
                 repprt=self.repprt, repeml=self.repeml)
 
     def doHeading(self, line):

=== modified file 'gen/gl3060.py'
--- gen/gl3060.py	2017-02-25 14:03:05 +0000
+++ gen/gl3060.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Chart Of Accounts.

=== modified file 'gen/gl3070.py'
--- gen/gl3070.py	2017-02-25 14:03:05 +0000
+++ gen/gl3070.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     General Ledger Notes Listing.

=== modified file 'gen/gl3080.py'
--- gen/gl3080.py	2017-02-25 14:03:05 +0000
+++ gen/gl3080.py	2017-06-28 15:11:31 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Bank Reconciliation.
@@ -32,8 +30,8 @@
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.c_per = (t[0] * 100) + t[1]
         return True
 
@@ -81,8 +79,7 @@
         self.sortPayments()
         self.sortReceipts()
         self.sortImports()
-        if self.bal != 0 or self.pays or self.recs or self.imps:
-            self.printReport()
+        self.printReport()
         self.closeProcess()
 
     def sortPayments(self):
@@ -182,7 +179,7 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+            pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
             repeml=self.df.repeml)
 
     def printLine(self, num, mxs, dat, typ):

=== modified file 'gen/gl3090.py'
--- gen/gl3090.py	2017-02-25 14:03:05 +0000
+++ gen/gl3090.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Imported Bank Statements..

=== modified file 'gen/gl3100_rne.py'
--- gen/gl3100_rne.py	2017-02-25 14:03:05 +0000
+++ gen/gl3100_rne.py	2017-07-24 08:29:01 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Multiple Company Trial Balance Reporting.
@@ -89,16 +87,16 @@
         if f == (None, None, None):
             return "Invalid Financial Period"
         self.c_per = (w, (f[0].work, f[0].disp), (f[1].work, f[1].disp))
-        self.s_cfp = f[0].work / 100
-        self.e_cfp = f[1].work / 100
+        self.s_cfp = int(f[0].work / 100)
+        self.e_cfp = int(f[1].work / 100)
         if w:
             # Previous Year
             f = getPeriods(self.opts["mf"], 1, w - 1)
             if f == (None, None, None):
                 return "Invalid Financial Period"
             self.p_per = (w - 1, (f[0].work, f[0].disp), (f[1].work, f[1].disp))
-            self.s_pfp = f[0].work / 100
-            self.e_pfp = f[1].work / 100
+            self.s_pfp = int(f[0].work / 100)
+            self.e_pfp = int(f[1].work / 100)
         self.df.loadEntry(frt, pag, p+1, data=self.e_cfp)
 
     def doEP(self, frt, pag, r, c, p, i, w):
@@ -110,7 +108,7 @@
 
     def doTBG(self, frt, pag, r, c, p, i, w):
         self.seqdic = {}
-        for x in range(1, 13):
+        for x in xrange(1, 13):
             self.seqdic[x] = [0, "", ""]
         if w:
             acc = self.sql.getRec(tables="ctlgrp",
@@ -125,7 +123,7 @@
                 self.newgrp = False
                 self.df.loadEntry(frt, pag, p+1, data=acc[1])
                 seq = 1
-                for x in range(0, 24, 2):
+                for x in xrange(0, 24, 2):
                     coy = acc[x + 2]
                     hed = acc[x + 3]
                     if not coy:
@@ -170,12 +168,12 @@
         olddic = copy.deepcopy(self.seqdic)
         self.seqdic = {}
         seq = 1
-        for x in range(1, 13):
+        for x in xrange(1, 13):
             if x == self.seq:
                 continue
             self.seqdic[seq] = olddic[x]
             seq += 1
-        for x in range(seq, 13):
+        for x in xrange(seq, 13):
             self.seqdic[x] = [0, "", ""]
         self.df.focusField("C", 0, self.doReload() + 1)
 
@@ -201,7 +199,7 @@
     def doReload(self):
         self.df.clearFrame("C", 0)
         idx = 0
-        for x in range(1, 13):
+        for x in xrange(1, 13):
             if not self.seqdic[x][0]:
                 continue
             self.df.loadEntry("C", 0, idx, data=x)
@@ -223,7 +221,7 @@
                 data = [self.grp, self.tbh]
             coys = []
             coyd = ""
-            for x in range(1, 13):
+            for x in xrange(1, 13):
                 if self.grp:
                     data.extend([self.seqdic[x][0], self.seqdic[x][2]])
                 if not self.seqdic[x][0]:

=== modified file 'gen/gl3110_rne.py'
--- gen/gl3110_rne.py	2017-02-25 14:03:05 +0000
+++ gen/gl3110_rne.py	2017-06-28 15:12:31 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Multiple Company Reporting.
@@ -94,14 +92,14 @@
         if f == (None, None, None):
             return "Invalid Financial Period"
         self.c_per = (w, (f[0].work, f[0].disp), (f[1].work, f[1].disp))
-        self.s_cfp = f[0].work / 100
-        self.e_cfp = f[1].work / 100
+        self.s_cfp = int(f[0].work / 100)
+        self.e_cfp = int(f[1].work / 100)
         f = getPeriods(self.opts["mf"], 1, w - 1, check=True)
         if f == (None, None, None):
             return "Invalid Financial Period"
         self.p_per = (w - 1, (f[0].work, f[0].disp), (f[1].work, f[1].disp))
-        self.s_pfp = f[0].work / 100
-        self.e_pfp = f[1].work / 100
+        self.s_pfp = int(f[0].work / 100)
+        self.e_pfp = int(f[1].work / 100)
         self.df.loadEntry(frt, pag, p+1, data=self.e_cfp)
 
     def doEP(self, frt, pag, r, c, p, i, w):
@@ -169,7 +167,7 @@
                     coy[1]), period=self.c_per, args=(self.ep, self.iz,
                     self.df.repprt, self.df.repeml, self.fpdf))
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=tit,
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=tit,
                 repprt=self.df.repprt, repeml=self.df.repeml)
         if self.fs == "Y":
             tit = "Financial Statements as at %s for Companies %s" % (self.epd,
@@ -189,7 +187,7 @@
                     self.rn, self.rv, "P", self.iz, self.df.repprt,
                     self.df.repeml, self.fpdf))
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=tit,
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=tit,
                 repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 

=== modified file 'gen/gl3120_rne.py'
--- gen/gl3120_rne.py	2016-11-07 16:11:53 +0000
+++ gen/gl3120_rne.py	2017-07-24 08:29:18 +0000
@@ -15,7 +15,7 @@
 from TartanClasses import TartanDialog, rgb
 from tartanFunctions import askQuestion, copyList, doPrinter, getModName
 from tartanFunctions import getNextCode, getPeriods, getSingleRecords
-from tartanFunctions import showError, simpleLineChart
+from tartanFunctions import showError
 
 class gl3120:
     def __init__(self, **opts):
@@ -121,8 +121,8 @@
         if f == (None, None, None):
             return "Invalid Financial Period"
         self.cper = w
-        self.sper = f[0].work / 100
-        self.eper = f[1].work / 100
+        self.sper = int(f[0].work / 100)
+        self.eper = int(f[1].work / 100)
         self.df.loadEntry(frt, pag, p+1, data=self.eper)
 
     def doEPer(self, frt, pag, r, c, p, i, w):
@@ -314,7 +314,7 @@
         self.cg = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, butt=but, tend=((self.doChgEnd,"n"),),
             txit=(self.doChgExit,))
-        for x in range(9):
+        for x in xrange(9):
             self.cg.loadEntry("T", 0, x, data=self.chg[x])
         self.cg.focusField("T", 0, 3, clr=False)
         self.opts["mf"].startLoop()
@@ -412,7 +412,7 @@
                 chk = self.sql.getRec(tables="genqrt", cols=["gqt_stock"],
                     where=[("gqt_cono", "=", coy[0]), ("gqt_curdt",
                     "=", self.eper)], limit=1)
-                if not chk and not coy[0] in miss:
+                if not chk and coy[0] not in miss:
                     miss.append(coy[0])
         if miss:
             txt = ""
@@ -461,10 +461,10 @@
         self.fpdf.header = self.doHead
         self.fpdf.set_fill_color(220)
         self.gt = {900: {}, 999: {}}
-        self.br = [["T", self.eper / 100], ["T", (self.eper / 100) - 1]]
-        self.bg = [["T", self.eper / 100], ["T", (self.eper / 100) - 1]]
-        self.dp = [["T", self.eper / 100], ["T", (self.eper / 100) - 1]]
-        self.dg = [["T", self.eper / 100], ["T", (self.eper / 100) - 1]]
+        self.br = [["T", int(self.eper / 100)], ["T", int(self.eper / 100) - 1]]
+        self.bg = [["T", int(self.eper / 100)], ["T", int(self.eper / 100) - 1]]
+        self.dp = [["T", int(self.eper / 100)], ["T", int(self.eper / 100) - 1]]
+        self.dg = [["T", int(self.eper / 100)], ["T", int(self.eper / 100) - 1]]
         self.codes = {
             "P": [[201101], {900: 0, 999: 0}],
             "S": [[101098, 101099, 101100, 101101, 101103, 101104,
@@ -519,7 +519,7 @@
             for b in self.br:
                 ycol.append(b[1])
                 vals.append(b[2:])
-            simpleLineChart(self.fpdf, head, xcol, vals, ycol=ycol, labs=False)
+            self.doLineChart(head, xcol, vals, ycol=ycol, labs=False)
             self.fpdf.add_page()
             head = "Branches G/P Percentages for Period End %s" % self.eperd
             vals = []
@@ -527,7 +527,7 @@
             for b in self.bg:
                 ycol.append(b[1])
                 vals.append(b[2:])
-            simpleLineChart(self.fpdf, head, xcol, vals, ycol=ycol, labs=False)
+            self.doLineChart(head, xcol, vals, ycol=ycol, labs=False)
             if self.prtdep == "Y" and len(self.deps) > 1:
                 self.fpdf.add_page()
                 head = "Department Gross Profit for Period End %s" % \
@@ -540,8 +540,7 @@
                 for d in self.dp:
                     ycol.append(d[1])
                     vals.append(d[2:])
-                simpleLineChart(self.fpdf, head, xcol, vals, ycol=ycol,
-                    labs=False)
+                self.doLineChart(head, xcol, vals, ycol=ycol, labs=False)
                 self.fpdf.add_page()
                 head = "Department G/P Percentages for Period End %s" % \
                     self.eperd
@@ -550,8 +549,7 @@
                 for d in self.dg:
                     ycol.append(d[1])
                     vals.append(d[2:])
-                simpleLineChart(self.fpdf, head, xcol, vals, ycol=ycol,
-                    labs=False)
+                self.doLineChart(head, xcol, vals, ycol=ycol, labs=False)
         sp.closeSplash()
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             "all", ext="pdf")
@@ -599,7 +597,7 @@
             self.codes["C"][1][900] += qrt[6]
             if dep:
                 dep += 900
-                if not dep in self.gt:
+                if dep not in self.gt:
                     self.gt[dep] = {}
                     for cod in ("P", "S", "I", "A", "R", "O", "T", "C"):
                         self.codes[cod][1][dep] = 0
@@ -614,7 +612,7 @@
                 self.codes["T"][1][999] += qrt[5]
                 self.codes["C"][1][999] += qrt[6]
             for code in self.codes:
-                if not self.conum in self.codes[code][1]:
+                if self.conum not in self.codes[code][1]:
                     self.codes[code][1][self.conum] = 0
                 accs = copyList(self.codes[code][0])
                 if accs:
@@ -648,21 +646,21 @@
                 self.codes["R"][1][self.conum] -
                 self.codes["C"][1][self.conum]),
                 self.codes["S"][1][self.conum]]
-            if not self.conum in self.gt:
+            if self.conum not in self.gt:
                 self.gt[self.conum] = {}
             self.gt[self.conum][self.eper] = [gp[0], gp[1]]
-            if not self.eper in self.gt[900]:
+            if self.eper not in self.gt[900]:
                 self.gt[900][self.eper] = [gp[0], gp[1]]
             else:
                 self.gt[900][self.eper][0] += gp[0]
                 self.gt[900][self.eper][1] += gp[1]
             if dep:
-                if not self.eper in self.gt[dep]:
+                if self.eper not in self.gt[dep]:
                     self.gt[dep][self.eper] = [gp[0], gp[1]]
                 else:
                     self.gt[dep][self.eper][0] += gp[0]
                     self.gt[dep][self.eper][1] += gp[1]
-                if not self.eper in self.gt[999]:
+                if self.eper not in self.gt[999]:
                     self.gt[999][self.eper] = [gp[0], gp[1]]
                 else:
                     self.gt[999][self.eper][0] += gp[0]
@@ -784,12 +782,12 @@
             work[code] = 0
             if self.codes[code][0]:
                 if code == "C":
-                    sp = (per[2] / 100) + 100
-                    ep = (per[3] / 100) + 100
+                    sp = int(per[2] / 100) + 100
+                    ep = int(per[3] / 100) + 100
                     accs = [201100]
                 else:
-                    sp = per[2] / 100
-                    ep = per[3] / 100
+                    sp = int(per[2] / 100)
+                    ep = int(per[3] / 100)
                     accs = copyList(self.codes[code][0])
                 for acc in accs:
                     whr = [
@@ -802,14 +800,14 @@
                         cols=["sum(glt_tramt)"], where=whr, limit=1)
                     if amt[0]:
                         work[code] += int(amt[0])
-        curdt = per[3] / 100
+        curdt = int(per[3] / 100)
         self.gt[self.conum][curdt] = [0, 0]
-        if not curdt in self.gt[900]:
+        if curdt not in self.gt[900]:
             self.gt[900][curdt] = [0, 0]
         if dep:
-            if not curdt in self.gt[dep]:
+            if curdt not in self.gt[dep]:
                 self.gt[dep][curdt] = [0, 0]
-            if not curdt in self.gt[999]:
+            if curdt not in self.gt[999]:
                 self.gt[999][curdt] = [0, 0]
         for code in work:
             if code == "S":
@@ -830,7 +828,7 @@
     def doPrintGross(self):
         # Heading
         cwth = self.fpdf.get_string_width("X")
-        pers = self.gt[self.conum].keys()
+        pers = list(self.gt[self.conum].keys())
         pers.sort()
         if len(pers) > 5:
             pers = pers[-5:]
@@ -859,11 +857,116 @@
         vals = [[]]
         for per in pers:
             if self.gt[self.conum][per][1]:
-                xcol.append("%s" % (per / 100))
+                xcol.append("%s" % int(per / 100))
                 gp = round(self.gt[self.conum][per][0] * 100.0 /
                     self.gt[self.conum][per][1], 2)
                 vals[0].append(gp)
-        simpleLineChart(self.fpdf, xcol=xcol, vals=vals)
+        self.doLineChart(xcol=xcol, vals=vals)
+
+    def doLineChart(self, head="", xcol=[], vals=[], ycol=None, labs=True):
+        if not vals or not vals[0]:
+            return
+        # Minimum and Maximum Values
+        mins = None
+        maxs = None
+        for val in vals:
+            for v in val:
+                if mins is None or v < mins:
+                    mins = v
+                if maxs is None or v > maxs:
+                    maxs = v
+        uu = len(str(int(maxs - mins)))
+        if uu == 3:
+            vi = 100
+        elif uu > 3:
+            vi = 10 ** (uu - 2)
+        else:
+            vi = 1
+        mins = int(mins / vi) * vi
+        maxs = (int(maxs / vi) + 1) * vi
+        # Heading
+        lm = 20                                 # Left margin
+        cw = int(self.fpdf.w * .90) - lm             # Chart width
+        self.fpdf.drawText()
+        self.fpdf.setFont("Courier", "B", 12)
+        if head:
+            self.fpdf.drawText(head, x=lm, w=cw, align="C")
+            self.fpdf.drawText()
+        if maxs > 99:
+            txt = "{:,}'s".format(vi)
+            self.fpdf.drawText(txt, align="C")
+            self.fpdf.drawText()
+        # Chart Variables
+        if self.fpdf.cur_orientation == "P":
+            mx = .80
+        else:
+            mx = .75
+        dw = self.fpdf.line_width
+        sy = int(self.fpdf.get_y()) + 1              # Initial y value
+        ch = (self.fpdf.h * mx) - sy                 # Chart height
+        vb = int((maxs - mins) / vi)            # Vertical blocks
+        vd = float(ch / vb)                     # Depth of blocks
+        ly = sy + ch                            # Last y value
+        cl = ["#ff0000", "#0000ff", "#00ff00"]  # Line colours
+        # Horizontal Lines
+        for z in xrange(vb + 1):
+            num = maxs - (z * vi)
+            if num:
+                if vb > 50 and num % (vi * 10):
+                    continue
+                self.fpdf.set_line_width(0)
+            else:
+                self.fpdf.set_line_width(1)
+            txt = int(num / vi)
+            self.fpdf.drawText(txt, x=lm-8, y=sy+(z*vd)-2, w=3, align="R")
+            self.fpdf.line(lm-3, sy+(z*vd), lm+cw, sy+(z*vd))
+        # Vertical Lines
+        self.fpdf.set_line_width(1)
+        self.fpdf.line(lm, sy, lm, ly)
+        hw = int(cw / len(xcol))
+        for num, tab in enumerate(xcol):
+            txt = "%12s" % tab
+            lx = lm + (num * hw) + 10
+            rx = lm + (num * hw) - 7
+            ry = ly + self.fpdf.get_string_width(txt)
+            self.fpdf.set_line_width(0)
+            self.fpdf.line(lx, ly+3, lx, sy)
+            self.fpdf.rotate(60, x=rx, y=ry)
+            self.fpdf.drawText(txt=txt, x=rx, y=ry)
+            self.fpdf.rotate(0)
+        # Chart
+        clrs = cl[:len(vals)]
+        for col, val in enumerate(vals):
+            self.fpdf.set_draw_color(*rgb(clrs[col]))
+            for num, tab in enumerate(xcol):
+                x1 = lm + 10 + (num * hw)
+                y1 = float(sy + ((vd / vi) * (maxs - val[num])))
+                if tab != xcol[-1]:
+                    self.fpdf.set_line_width(.80)
+                    y2 = float(sy + ((vd / vi) * (maxs - val[num + 1])))
+                    self.fpdf.line(x1, y1, x1 + hw, y2)
+                    self.fpdf.set_line_width(0)
+                if labs:
+                    self.fpdf.drawText(vals[col][num], x1-5, y1-4, w=11,
+                        fill=1, font=["courier", "B", 8], border="TLRB")
+                self.fpdf.setFont("Courier", "B", 12)
+            self.fpdf.set_draw_color(*rgb(0))
+        # Legend
+        if len(vals) > 1 and ycol:
+            self.fpdf.drawText()
+            x1 = cw
+            y1 = ly + 34
+            for x in xrange(len(vals) - 1, -1, -1):
+                txt = "     %s" % ycol[x]
+                wth = (len(txt) + 1) * self.fpdf.cwth
+                x1 -= wth
+                self.fpdf.drawText(txt, x=x1, y=y1, h=5, w=wth, border="TLRB")
+                self.fpdf.set_line_width(1)
+                self.fpdf.set_draw_color(*rgb(clrs[x]))
+                self.fpdf.line(x1+2, y1+2, x1+10, y1+2)
+                self.fpdf.set_line_width(0)
+                self.fpdf.set_draw_color(0)
+        self.fpdf.set_line_width(dw)
 
     def doExit(self):
         if self.df.pag == 0:

=== modified file 'gen/gl3130_rne.py'
--- gen/gl3130_rne.py	2017-02-25 14:03:05 +0000
+++ gen/gl3130_rne.py	2017-07-24 08:29:42 +0000
@@ -21,10 +21,9 @@
 """
 
 from operator import itemgetter
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog, rgb
 from tartanFunctions import askQuestion, copyList, dateDiff, doPrinter
 from tartanFunctions import getModName, getPeriods, mthendDate, showError
-from tartanFunctions import simpleBarChart
 from tartanWork import mthnam
 
 class gl3130:
@@ -91,15 +90,15 @@
         if f == (None, None, None):
             return "Invalid Financial Period"
         self.cper = w
-        self.sper = f[0].work / 100
-        self.eper = f[1].work / 100
+        self.sper = int(f[0].work / 100)
+        self.eper = int(f[1].work / 100)
         self.df.loadEntry(frt, pag, p+1, data=self.eper)
 
     def doEPer(self, frt, pag, r, c, p, i, w):
         if w < self.sper or w > self.eper:
             return "Period Not In Financial Period"
         self.rper = w
-        self.rperd = "%s %s" % (mthnam[w % 100][1], w / 100)
+        self.rperd = "%s %s" % (mthnam[w % 100][1], int(w / 100))
 
     def doAccs(self):
         self.doButtons("disabled", "hide")
@@ -205,7 +204,7 @@
         self.cg = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, butt=but, tend=((self.doChgEnd,"n"),),
             txit=(self.doChgExit,))
-        for x in range(4):
+        for x in xrange(4):
             self.cg.loadEntry("T", 0, x, data=self.chg[x])
         self.cg.focusField("T", 0, 1, clr=False)
         self.opts["mf"].startLoop()
@@ -470,28 +469,28 @@
             deps = {}
             self.deps = []
             for dep in dps:
-                if not dep[1] in deps:
+                if dep[1] not in deps:
                     deps[dep[1]] = []
                     self.deps.append(dep[1])
                 deps[dep[1]].append(dep[0])
             # Monthly increments
             datas[bch[0]] = {}
             sm = self.sper % 100
-            sy = (self.sper / 100) - 3
-            for x in range(12):
+            sy = int(self.sper / 100) - 3
+            for x in xrange(12):
                 mth = mthnam[sm][0]
-                if not mth in datas[bch[0]]:
+                if mth not in datas[bch[0]]:
                     datas[bch[0]][mth] = {}
-                    if not mth in tots:
+                    if mth not in tots:
                         tots[mth] = {}
                     # Annual increments
-                    for y in range(4):
+                    for y in xrange(4):
                         yr = sy + y
                         curdt = (yr * 100) + sm
                         if curdt > self.rper:
                             continue
                         datas[bch[0]][mth][yr] = {}
-                        if not yr in tots[mth]:
+                        if yr not in tots[mth]:
                             tots[mth][yr] = {}
                         tot = 0
                         # Departments
@@ -502,17 +501,17 @@
                                 ("glt_acno", "=", 101098),
                                 ("glt_curdt", "=", curdt)], limit=1)
                             if amt[0]:
-                                amt = int(round(0 - amt[0], 0))
+                                amt = int(0 - int(amt[0]))
                             else:
                                 amt = 0
                             datas[bch[0]][mth][yr][dep] = amt
-                            if not dep in tots[mth][yr]:
+                            if dep not in tots[mth][yr]:
                                 tots[mth][yr][dep] = amt
                             else:
                                 tots[mth][yr][dep] += amt
                             tot += amt
                         datas[bch[0]][mth][yr]["Totals"] = tot
-                        if not "Totals" in tots[mth][yr]:
+                        if "Totals" not in tots[mth][yr]:
                             tots[mth][yr]["Totals"] = tot
                         else:
                             tots[mth][yr]["Totals"] += tot
@@ -558,13 +557,13 @@
         # Monthly increments
         ln = 3
         sm = self.sper % 100
-        sy = (self.sper / 100) - 2
-        for x in range(12):
+        sy = int(self.sper / 100) - 2
+        for x in xrange(12):
             mth = mthnam[sm][0]
             xx = self.fpdf.get_x()
             yy = self.fpdf.get_y()
             # Annual increments
-            for y in range(3):
+            for y in xrange(3):
                 yr = sy + y
                 curdt = (yr * 100) + sm
                 if curdt > self.rper:
@@ -612,11 +611,11 @@
                 sy += 1
         # Year to Date
         sm = self.sper % 100
-        sy = (self.sper / 100) - 2
+        sy = int(self.sper / 100) - 2
         cm = self.rper % 100
-        cy = self.rper / 100
+        cy = int(self.rper / 100)
         self.fpdf.drawText()
-        for x in range(3):
+        for x in xrange(3):
             txt = "YTD %s" % sy
             self.fpdf.drawText(txt, w=11*self.fpdf.cwth, h=4,
                 align="C", border="TLRB", ln=0)
@@ -662,7 +661,7 @@
         self.fpdf.setValues("gl3130", size, font="courier")
         # Form
         mth = mthnam[self.rper % 100][0]
-        yr = self.rper / 100
+        yr = int(self.rper / 100)
         rnks = {}
         for dep in self.deps:
             rnks[dep] = {}
@@ -672,10 +671,10 @@
                     srt.append([b, datas[b][mth][yr][dep]])
             srt = sorted(srt, key=itemgetter(1), reverse=True)
             p = 1
-            for x in range(len(srt)):
+            for x in xrange(len(srt)):
                 rnks[dep][srt[x][0]] = p
                 p += 1
-        for x in range(2):
+        for x in xrange(2):
             deps = []
             tots = {}
             if not x:
@@ -693,7 +692,7 @@
                     h=4, font="B", border="TLRNB", ln=0)
                 self.fpdf.setFont("")
                 for num, dep in enumerate(self.deps[seq:end]):
-                    if not dep in deps:
+                    if dep not in deps:
                         deps.append(dep)
                     if num == 6:
                         l = 1
@@ -702,7 +701,7 @@
                     if dep == "":
                         self.fpdf.drawText("", w=22*self.fpdf.cwth, h=4, ln=l)
                     else:
-                        if not dep in tots:
+                        if dep not in tots:
                             tots[dep] = [0, 0]
                         if dep in datas[bch[0]][mth][yr]:
                             rnk = CCD(rnks[dep][bch[0]], "UI", 2).disp
@@ -793,17 +792,14 @@
                 ost,pur,sls,inc,adv,cst,wag,stt,npr = self.getVals(
                     coy, (self.sper, self.rper))
                 # Calculate estimated closing stock
-                stk = ost
-                stk = float(ASD(stk) + ASD(pur))
                 avg = self.sql.getRec(tables="genqrp", cols=["gqp_rate",
                     "gqp_allow"], where=[("gqp_bcod", "=", bcd),
                     ("gqp_dcod", "=", dep)], limit=1)
-                slc = int(round(sls * (100 - avg[0]) / 100, 0))
-                stk = float(ASD(stk) - ASD(slc))
-                stk = float(ASD(stk) - ASD(inc))
-                stk = int(float(ASD(stk) - ASD(adv)))
+                per = float(ASD(100.0) - ASD(avg[0]))
+                slc = int(round(sls * per / 100.0, 0))
+                stk = ost + pur - slc - inc - adv
                 alw = int(round(slc * avg[1] / mths, 0))
-                dif = int(alw - stk)
+                dif = alw - stk
                 if not sls:
                     per = 0
                 else:
@@ -813,7 +809,7 @@
                 if sls and cst and dep in deps:
                     prf = sls + cst + inc + adv - ost - pur
                     if prf <= sls:
-                        if not dep in self.dat2[bnm][1]:
+                        if dep not in self.dat2[bnm][1]:
                             self.dat2[bnm][1][dep] = [prf, sls]
                         else:
                             self.dat2[bnm][1][dep][0] += prf
@@ -821,7 +817,7 @@
                 # Net Profit
                 if not cst:
                     npr = float(ASD(npr) + ASD(stk))
-                if not dep in self.dat3[bnm][1]:
+                if dep not in self.dat3[bnm][1]:
                     self.dat3[bnm][1][dep] = [npr, sls]
                 else:
                     self.dat3[bnm][1][dep][0] += npr
@@ -839,7 +835,7 @@
             for ac in acs:
                 acc.append(ac[1])
                 if ac[2]:
-                    for x in range(ac[1] + 1, ac[2] + 1):
+                    for x in xrange(ac[1] + 1, ac[2] + 1):
                         acc.append(x)
             whr = [("glt_cono", "=", coy)]
             if len(acc) == 1:
@@ -861,10 +857,10 @@
             rec = self.sql.getRec(tables=tab, cols=col, where=whr, limit=1)
             if rec[0] is None:
                 amt = 0
+            elif grp[0] in (3, 4, 5, 6, 8):
+                amt = (0 - int(rec[0]))
             else:
                 amt = int(rec[0])
-            if grp[0] in (3, 4, 5, 6, 8):
-                amt = (0 - amt)
             val.append(amt)
         tab.append("genmst")
         whr = [
@@ -888,24 +884,24 @@
         self.col2 = (
             ("UI",   3, "Dcd"),
             ("NA",  30, "Department"),
-            ("CI",   9, "Open-Stk"),
-            ("CI",   9, "Purchase"),
-            ("CI",   9, "Sls-Sell"),
-            ("CI",   9, "Sls-Cost"),
-            ("CI",   9, "Incent"),
-            ("CI",   9, "Advert"),
-            ("CI",   9, "Est-Stck"),
-            ("CI",   9, "St-Count"),
-            ("CI",   9, "Settlmts"),
-            ("CI",   9, "St-Allow"),
-            ("CI",   9, "St-Diff"),
-            ("CI",   9, "Tot-Wags"),
+            ("CI",  10, "Open-Stk"),
+            ("CI",  10, "Purchase"),
+            ("CI",  10, "Sls-Sell"),
+            ("CI",  10, "Sls-Cost"),
+            ("CI",  10, "Incent"),
+            ("CI",  10, "Advert"),
+            ("CI",  10, "Est-Stck"),
+            ("CI",  10, "St-Count"),
+            ("CI",  10, "Settlmts"),
+            ("CI",  10, "St-Allow"),
+            ("CI",  10, "St-Diff"),
+            ("CI",  10, "Tot-Wags"),
             ("UD", 5.2, "%tage"))
         lbch = None
         tbch = ["", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         self.fpdf.def_orientation = "L"
         txt = "Generating Stock Report"
-        self.fpdf.setValues("gl3130", 160, font="courier")
+        self.fpdf.setValues("gl3130", 172, font="courier")
         pb = ProgressBar(self.opts["mf"].body, mxs=len(self.dat1), typ=txt)
         for num, dat in enumerate(self.dat1):
             pb.displayProgress(num)
@@ -940,12 +936,12 @@
         self.doTotal(tbch)
 
     def doGProfits(self):
-        bchs = self.dat2.keys()
+        bchs = list(self.dat2.keys())
         bchs.sort(key=str.lower)
         dpss = []
         for bch in bchs:
-            for dep in self.dat2[bch][1].keys():
-                if not dep in dpss:
+            for dep in self.dat2[bch][1]:
+                if dep not in dpss:
                     dpss.append(dep)
         if not dpss:
             return
@@ -1017,7 +1013,7 @@
                             else:
                                 t = t.disp + "%"
                             self.dat4[dep[0]][2][b.strip()] = gp
-                        if not dep[1] in tots:
+                        if dep[1] not in tots:
                             tots[dep[1]] = [0, 0]
                         tots[dep[1]][0] += val[0]
                         tots[dep[1]][1] += val[1]
@@ -1044,22 +1040,22 @@
             xcol = []
             vals = []
             tgt = self.dat4[self.dep][1]
-            keys = self.dat4[self.dep][2].keys()
+            keys = list(self.dat4[self.dep][2].keys())
             keys.sort()
             for bch in keys:
                 xcol.append(bch)
                 vals.append(self.dat4[self.dep][2][bch])
             self.fpdf.add_page()
-            simpleBarChart(self.fpdf, None, xcol, vals, tgt)
+            self.doBarChart(xcol, vals, tgt)
         pb.closeProgress()
 
     def doNProfits(self):
-        bchs = self.dat3.keys()
+        bchs = list(self.dat3.keys())
         bchs.sort(key=str.lower)
         dpss = []
         for bch in bchs:
-            for dep in self.dat3[bch][1].keys():
-                if not dep in dpss:
+            for dep in self.dat3[bch][1]:
+                if dep not in dpss:
                     dpss.append(dep)
         tab = ["genqrc"]
         col = ["gqc_dcod", "gqc_name"]
@@ -1123,7 +1119,7 @@
                             else:
                                 t = t.disp + "%"
                             self.dat5[dep[0]][1][b.strip()] = gp
-                        if not dep[1] in tots:
+                        if dep[1] not in tots:
                             tots[dep[1]] = [0, 0]
                         tots[dep[1]][0] += val[0]
                         tots[dep[1]][1] += val[1]
@@ -1175,7 +1171,7 @@
             self.fpdf.setFont(font[0], "B", font[1])
             self.fpdf.drawText("Branch", w=13*self.fpdf.cwth, h=5,
                 border="TLRB", fill=True, ln=0)
-            for x in range(7):
+            for x in xrange(7):
                 if x == 6:
                     l = 1
                 else:
@@ -1293,7 +1289,7 @@
             else:
                 txt = "Average GP%"
             self.fpdf.drawText(txt, w=w, h=5, border=b, fill=f, ln=0)
-            keys = data.keys()
+            keys = list(data.keys())
             keys.sort()
             for dep in keys:
                 w = 12 * self.fpdf.cwth
@@ -1325,7 +1321,7 @@
             else:
                 txt = "Average NP%"
             self.fpdf.drawText(txt, w=w, h=5, border=b, fill=f, ln=0)
-            keys = data.keys()
+            keys = list(data.keys())
             keys.sort()
             for dep in keys:
                 w = 12 * self.fpdf.cwth
@@ -1348,6 +1344,90 @@
                 self.fpdf.drawText(txt, w=w, h=5, align="C", border=b, fill=f)
         self.fpdf.setFont(font[0], "", font[1])
 
+    def doBarChart(self, xcol=[], vals=[], tgt=0, fill=False):
+        if not vals:
+            return
+        # Blank Line and Initial line width
+        self.fpdf.drawText()
+        dw = self.fpdf.line_width
+        # Minimum and Maximum Values
+        mins = None
+        maxs = None
+        for val in vals:
+            if mins is None or val < mins:
+                mins = val
+            if maxs is None or val > maxs:
+                maxs = val
+        if mins > 0:
+            mins = 0
+        vi = 1
+        while True:
+            if int(maxs / vi) <= 20:
+                break
+            vi = vi * 10
+        # Chart Variables
+        mins = int(mins / vi) * vi
+        maxs = (int(maxs / vi) + 1) * vi
+        lm = 30                                        # Left margin
+        cw = int(self.fpdf.w * .95) - lm               # Chart width
+        sy = int(self.fpdf.get_y()) + 1                # Initial y value
+        ch = float(ASD((self.fpdf.h * .7)) - ASD(sy))  # Chart height
+        vb = int((maxs - mins) / vi)                   # Vertical blocks
+        vd = float(ch / vb)                            # Depth of blocks
+        ly = sy + ch                                   # Last y value
+        cl = ["#ff0000", "#0000ff", "#000000"]         # Line colours
+        # Horizontal Lines
+        ny = sy
+        zy = sy
+        for z in xrange(vb + 1):
+            num = maxs - (z * vi)
+            if num:
+                self.fpdf.set_line_width(0)
+            else:
+                self.fpdf.set_line_width(1)
+            if not tgt or tgt and num != tgt:
+                self.fpdf.drawText(num, x=lm-8, y=ny-2, w=3, align="R")
+            self.fpdf.line(lm-3, ny, lm+cw+2, ny)
+            if not num:
+                zy = ny
+            ny += vd
+        # Vertical Lines
+        self.fpdf.set_line_width(1)
+        self.fpdf.line(lm, sy, lm, ly)
+        self.fpdf.set_draw_color(*rgb(cl[1]))
+        if fill:
+            self.fpdf.set_fill_color(*rgb(cl[1]))
+        if len(vals) > 10:
+            w = 8
+        else:
+            w = 10
+        hw = int(cw / len(xcol))
+        hh = float(ch / (maxs - mins))
+        for num, tab in enumerate(xcol):
+            txt = "%12s" % tab
+            x = lm+10+(num*hw)
+            h = (0 - hh * vals[num])
+            self.fpdf.rect(x, zy, w, h, "FD")
+            x = lm+(num*hw)
+            y = ly+self.fpdf.get_string_width(txt)
+            self.fpdf.rotate(55, x=x, y=y)
+            self.fpdf.drawText(txt=txt, x=x, y=y)
+            self.fpdf.rotate(0)
+        # Target Line
+        if tgt:
+            w = self.fpdf.cwth * 8
+            self.fpdf.set_text_color(*rgb(cl[0]))
+            self.fpdf.set_draw_color(*rgb(cl[0]))
+            y1 = zy - (hh * tgt)
+            self.fpdf.drawText("Target",
+                x=lm-w, y=y1-2, w=w, align="L")
+            self.fpdf.drawText("%s%s" % (tgt, "%"),
+                x=lm-w, y=y1+2, w=w, align="C")
+            self.fpdf.line(lm, y1, lm+cw, y1)
+            self.fpdf.set_text_color(*rgb(cl[2]))
+            self.fpdf.set_draw_color(*rgb(cl[2]))
+        self.fpdf.set_line_width(dw)
+
     def doButtons(self, state, frame=None):
         self.df.setWidget(self.df.B0, state=state)
         self.df.setWidget(self.df.B1, state=state)

=== modified file 'gen/gl4010.py'
--- gen/gl4010.py	2017-02-25 14:03:05 +0000
+++ gen/gl4010.py	2017-07-24 08:30:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Interrogation.
@@ -36,14 +34,14 @@
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.i_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.i_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         df = self.e_per - self.i_per - 87
         if df > 12:
             self.d_per = df - 12
-            yr = self.i_per / 100
-            mt = self.i_per % 100
-            for _ in range(self.d_per):
+            yr = int(self.i_per / 100)
+            mt = int(self.i_per % 100)
+            for _ in xrange(self.d_per):
                 mt += 1
                 if mt > 12:
                     mt -= 12
@@ -59,14 +57,14 @@
             if (s, e, f) == (None, None, None):
                 return
             self.s_lyr = s.work
-            self.i_pyr = s.work / 100
-            self.e_pyr = e.work / 100
+            self.i_pyr = int(s.work / 100)
+            self.e_pyr = int(e.work / 100)
             df = self.e_pyr - self.i_pyr - 87
             if df > 12:
                 self.d_pyr = df - 12
-                yr = self.i_pyr / 100
+                yr = int(self.i_pyr / 100)
                 mt = self.i_pyr % 100
-                for _ in range(self.d_pyr):
+                for _ in xrange(self.d_pyr):
                     mt += 1
                     if mt > 12:
                         mt -= 12
@@ -114,7 +112,7 @@
         self.df = TartanDialog(self.opts["mf"], title=self.tit, tags=tag,
             eflds=fld, butt=but, tend=tnd, txit=txt)
         mon = self.s_per % 100
-        yer = self.s_per / 100
+        yer = int(self.s_per / 100)
         for x in xrange(14):
             if x == 0:
                 txt = "Opening Balance"
@@ -170,9 +168,9 @@
         adl = []
         if self.d_per:
             # Current period more than 12 months
-            sy = sy = self.i_per / 100
+            sy = sy = int(self.i_per / 100)
             sm = self.i_per % 100
-            for _ in range(self.d_per):
+            for _ in xrange(self.d_per):
                 adc.append(sm)
                 sm += 1
                 if sm > 12:
@@ -180,9 +178,9 @@
                     sm = 1
         elif self.d_pyr:
             # Previous period more than 12 months
-            sy = sy = self.i_pyr / 100
+            sy = sy = int(self.i_pyr / 100)
             sm = self.i_pyr % 100
-            for _ in range(self.d_pyr):
+            for _ in xrange(self.d_pyr):
                 adl.append(sm)
                 sm += 1
                 if sm > 12:
@@ -200,7 +198,7 @@
         yre = self.e_per % 100
         if gt:
             for x in xrange(len(gt)):
-                cyr = gt[x][1] / 100
+                cyr = int(gt[x][1] / 100)
                 mon = gt[x][1] % 100
                 if adc and cyr == sy and mon in adc:
                     col = 1
@@ -220,7 +218,7 @@
                 bud[13] = float(ASD(bud[13]) + ASD(float(gb[x][1])))
         if self.opts["period"][0] and gl:
             for x in xrange(len(gl)):
-                cyr = gl[x][0] / 100
+                cyr = int(gl[x][0] / 100)
                 mon = gl[x][0] % 100
                 if adl and cyr == sy and mon in adl:
                     col = 1
@@ -406,7 +404,7 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repeml=self.pr.repeml)
+                pdfnam=pdfnam, header=self.tit, repeml=self.pr.repeml)
         else:
             trn = self.getTrans()
             if trn:

=== modified file 'gen/gl4020.py'
--- gen/gl4020.py	2017-02-25 14:03:05 +0000
+++ gen/gl4020.py	2017-06-28 15:20:04 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Financial Statement Viewer.
@@ -53,8 +51,8 @@
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         if self.opts["period"][0]:
             self.s_lyr, e_lyr, fin = getPeriods(self.opts["mf"],
                 self.opts["conum"], (self.opts["period"][0] - 1))
@@ -550,7 +548,7 @@
         self.var = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
 
     def accumData(self):
-        if not self.s_desc in self.trans:
+        if self.s_desc not in self.trans:
             exists = False
             self.trans[self.s_desc] = {}
         else:
@@ -564,7 +562,7 @@
             self.var[1] = float(ASD(self.var[1]) - ASD(self.o_cyr))
             self.var[13] = float(ASD(self.var[13]) - ASD(self.o_cyr))
             if not exists:
-                trans = [0, 0, self.opts["period"][1][0] / 100,
+                trans = [0, 0, int(self.opts["period"][1][0] / 100),
                     self.opts["period"][1][0], 4, "O/Balance", "B/Fwd",
                     self.o_cyr, 0, "Opening Balance", "", "", 0, 0, 0]
                 self.trans[self.s_desc][1] = [trans]
@@ -590,13 +588,13 @@
             self.bud[13] = float(ASD(self.bud[13]) + ASD(bud))
             self.var[mth] = float(ASD(self.var[mth]) + ASD(bud) - ASD(cyr))
             self.var[13] = float(ASD(self.var[13]) + ASD(bud) - ASD(cyr))
-            y = curdt / 100
+            y = int(curdt / 100)
             m = (curdt % 100) + 1
             if m > 12:
                 y += 1
                 m -= 12
             curdt = (y * 100) + m
-            if not mth in self.trans[self.s_desc]:
+            if mth not in self.trans[self.s_desc]:
                 self.trans[self.s_desc][mth] = []
             if trn:
                 self.trans[self.s_desc][mth].extend(trn)
@@ -687,7 +685,7 @@
         lyr = copyList(self.lyr)
         bud = copyList(self.bud)
         var = copyList(self.var)
-        if not self.s_type == "L":
+        if self.s_type != "L":
             self.s_acno = 0
         self.allFields.append([self.s_type, self.s_desc, mth, lyr, bud, var,
             self.stanam, self.s_norm])
@@ -868,7 +866,7 @@
         glc = self.sql.gentrn_col
         des = self.data[row][0][0][0]
         try:
-            trans = self.trans[des][(col / 3) + 1]
+            trans = self.trans[des][int(col / 3) + 1]
             if not trans:
                 raise Exception
             if not trans[0]:

=== modified file 'gen/gl6010.py'
--- gen/gl6010.py	2017-02-25 14:03:05 +0000
+++ gen/gl6010.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Key Change.
@@ -73,7 +71,7 @@
             if not chk:
                 self.tables.remove(tab)
                 continue
-            if not tab[0] in tabs:
+            if tab[0] not in tabs:
                 tabs.append(tab[0])
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:

=== modified file 'gen/gl6020.py'
--- gen/gl6020.py	2017-03-25 15:17:51 +0000
+++ gen/gl6020.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Copy Accounts From One Company to Another.
@@ -128,7 +126,7 @@
                 self.sql.insRec("ctlynd", data=ynd)
             mxp = self.sql.getRec(tables="ctlynd", cols=["max(cye_period)"],
                 where=[("cye_cono", "=", self.oldco)], limit=1)
-            for p in range(1, mxp[0]):
+            for p in xrange(1, mxp[0]):
                 pr = getPeriods(self.opts["mf"], self.oldco, p)
                 per = (p, (pr[0].work, pr[0].disp), (pr[1].work, pr[1].disp))
                 callModule(self.opts["mf"], None, "msy010",

=== modified file 'gen/gl6030.py'
--- gen/gl6030.py	2017-02-25 14:03:05 +0000
+++ gen/gl6030.py	2017-06-28 15:20:27 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Check Integration Control Balances.
@@ -32,6 +30,13 @@
             return
         check = False
         self.tabs = ["genbal", "gentrn"]
+        assctl = gc.getCtl("assctl", self.opts["conum"], error=False)
+        if assctl and assctl["cta_glint"] == "Y":
+            check = True
+            self.arint = "Y"
+            self.tabs.extend(["assgrp", "asstrn"])
+        else:
+            self.arint = "N"
         bkmctl = gc.getCtl("bkmctl", self.opts["conum"], error=False)
         if bkmctl and bkmctl["cbk_glint"] == "Y" and "bkm_ctl" in ctlctl:
             check = True
@@ -77,6 +82,26 @@
         else:
             self.mlint = "N"
             self.mem_ctl = None
+        rcactl = gc.getCtl("rcactl", self.opts["conum"], error=False)
+        if rcactl and rcactl["cte_glint"] == "Y":
+            check = True
+            self.rcint = "Y"
+            self.own_ctl = ctlctl["rca_own"]
+            self.tnt_ctl = ctlctl["rca_tnt"]
+            self.dep_ctl = ctlctl["rca_dep"]
+            self.tabs.extend(["rcaowt", "rcatnt"])
+        else:
+            self.rcint = "N"
+            self.own_ctl = None
+            self.tnt_ctl = None
+            self.dep_ctl = None
+        rtlctl = gc.getCtl("rtlctl", self.opts["conum"], error=False)
+        if rtlctl and rtlctl["ctr_glint"] == "Y":
+            check = True
+            self.rtint = "Y"
+            self.tabs.extend(["rtlprm", "rtltrn"])
+        else:
+            self.rtint = "N"
         strctl = gc.getCtl("strctl", self.opts["conum"], error=False)
         if strctl and strctl["cts_glint"] == "Y" and "stk_soh" in ctlctl:
             check = True
@@ -86,22 +111,6 @@
         else:
             self.stint = "N"
             self.str_ctl = None
-        assctl = gc.getCtl("assctl", self.opts["conum"], error=False)
-        if not assctl:
-            self.arint = "N"
-        else:
-            self.arint = assctl["cta_glint"]
-            if self.arint == "Y":
-                check = True
-                self.tabs.extend(["assgrp", "asstrn"])
-        rtlctl = gc.getCtl("rtlctl", self.opts["conum"], error=False)
-        if not rtlctl:
-            self.rtint = "N"
-        else:
-            self.rtint = rtlctl["ctr_glint"]
-            if self.rtint == "Y":
-                check = True
-                self.tabs.extend(["rtlprm", "rtltrn"])
         wagctl = gc.getCtl("wagctl", self.opts["conum"], error=False)
         if wagctl and wagctl["ctw_glint"] == "Y" and "wag_slc" in ctlctl:
             check = True
@@ -122,8 +131,8 @@
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
         self.start = self.opts["period"][1][0]
-        self.s_per = self.start / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.start / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         return True
 
     def mainProcess(self):
@@ -144,6 +153,48 @@
 
     def doEnd(self):
         self.df.closeProcess()
+        if self.arint == "Y":
+            self.gar_bal = 0.0
+            grp = self.sql.getRec(tables="assgrp", cols=["asg_assacc",
+                "asg_depacc"], where=[("asg_cono", "=", self.opts["conum"])])
+            if grp:
+                done = []
+                for g in grp:
+                    for acc in g:
+                        if acc in done:
+                            continue
+                        o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
+                            where=[("glo_cono", "=", self.opts["conum"]),
+                            ("glo_acno", "=", acc), ("glo_trdt", "=",
+                            self.start)], limit=1)
+                        if o:
+                            b = CCD(o[0], "SD", 14.2)
+                        else:
+                            b = CCD(0, "SD", 14.2)
+                        self.gar_bal = float(ASD(self.gar_bal) + ASD(b.work))
+                        o = self.sql.getRec(tables="gentrn",
+                            cols=["round(sum(glt_tramt), 2)"],
+                            where=[("glt_cono", "=", self.opts["conum"]),
+                            ("glt_acno", "=", acc), ("glt_curdt", ">=",
+                            self.s_per), ("glt_curdt", "<=",
+                            self.opts["period"])], limit=1)
+                        if o and o[0]:
+                            b = CCD(float(o[0]), "SD", 14.2)
+                        else:
+                            b = CCD(0, "SD", 14.2)
+                        self.gar_bal = float(ASD(self.gar_bal) + ASD(b.work))
+                        done.append(acc)
+            o = self.sql.getRec(tables="asstrn",
+                cols=["round(sum(ast_amt1), 2)"], where=[("ast_cono", "=",
+                self.opts["conum"]), ("ast_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                self.ass_bal = o[0]
+            else:
+                self.ass_bal = 0.00
+        else:
+            self.gar_bal = 0.00
+            self.ass_bal = 0.00
         if self.bkint == "Y":
             self.gbk_bal = 0.0
             o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
@@ -299,79 +350,101 @@
         else:
             self.gml_bal = 0.00
             self.mem_bal = 0.00
-        if self.stint == "Y":
-            self.gst_bal = 0.0
-            o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
-                where=[("glo_cono", "=", self.opts["conum"]), ("glo_acno", "=",
-                self.str_ctl), ("glo_trdt", "=", self.start)], limit=1)
-            if o:
-                b = CCD(o[0], "SD", 14.2)
-            else:
-                b = CCD(0, "SD", 14.2)
-            self.gst_bal = float(ASD(self.gst_bal) + ASD(b.work))
-            o = self.sql.getRec(tables="gentrn",
-                cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "=",
-                self.opts["conum"]), ("glt_acno", "=", self.str_ctl),
-                ("glt_curdt", ">=", self.s_per), ("glt_curdt", "<=",
-                self.opts["period"])], limit=1)
-            if o and o[0]:
-                b = CCD(float(o[0]), "SD", 14.2)
-            else:
-                b = CCD(0, "SD", 14.2)
-            self.gst_bal = float(ASD(self.gst_bal) + ASD(b.work))
-            o = self.sql.getRec(tables="strtrn",
-                cols=["round(sum(stt_cost), 2)"], where=[("stt_cono", "=",
-                self.opts["conum"]), ("stt_curdt", "<=", self.opts["period"])],
-                limit=1)
-            if o and o[0]:
-                self.str_bal = o[0]
-            else:
-                self.str_bal = 0.00
-        else:
-            self.gst_bal = 0.00
-            self.str_bal = 0.00
-        if self.arint == "Y":
-            self.gar_bal = 0.0
-            grp = self.sql.getRec(tables="assgrp", cols=["asg_assacc",
-                "asg_depacc"], where=[("asg_cono", "=", self.opts["conum"])])
-            if grp:
-                done = []
-                for g in grp:
-                    for acc in g:
-                        if acc in done:
-                            continue
-                        o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
-                            where=[("glo_cono", "=", self.opts["conum"]),
-                            ("glo_acno", "=", acc), ("glo_trdt", "=",
-                            self.start)], limit=1)
-                        if o:
-                            b = CCD(o[0], "SD", 14.2)
-                        else:
-                            b = CCD(0, "SD", 14.2)
-                        self.gar_bal = float(ASD(self.gar_bal) + ASD(b.work))
-                        o = self.sql.getRec(tables="gentrn",
-                            cols=["round(sum(glt_tramt), 2)"],
-                            where=[("glt_cono", "=", self.opts["conum"]),
-                            ("glt_acno", "=", acc), ("glt_curdt", ">=",
-                            self.s_per), ("glt_curdt", "<=",
-                            self.opts["period"])], limit=1)
-                        if o and o[0]:
-                            b = CCD(float(o[0]), "SD", 14.2)
-                        else:
-                            b = CCD(0, "SD", 14.2)
-                        self.gar_bal = float(ASD(self.gar_bal) + ASD(b.work))
-                        done.append(acc)
-            o = self.sql.getRec(tables="asstrn",
-                cols=["round(sum(ast_amt1), 2)"], where=[("ast_cono", "=",
-                self.opts["conum"]), ("ast_curdt", "<=", self.opts["period"])],
-                limit=1)
-            if o and o[0]:
-                self.ass_bal = o[0]
-            else:
-                self.ass_bal = 0.00
-        else:
-            self.gar_bal = 0.00
-            self.ass_bal = 0.00
+        if self.rcint == "Y":
+            self.grc_own = 0.00
+            o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
+                where=[("glo_cono", "=", self.opts["conum"]),
+                ("glo_acno", "=", self.own_ctl), ("glo_trdt", "=",
+                self.start)], limit=1)
+            if o:
+                b = CCD(o[0], "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_own = float(ASD(self.grc_own) + ASD(b.work))
+            o = self.sql.getRec(tables="gentrn",
+                cols=["round(sum(glt_tramt), 2)"],
+                where=[("glt_cono", "=", self.opts["conum"]),
+                ("glt_acno", "=", self.own_ctl), ("glt_curdt", ">=",
+                self.s_per), ("glt_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                b = CCD(float(o[0]), "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_own = float(ASD(self.grc_own) + ASD(b.work))
+            o = self.sql.getRec(tables="rcaowt",
+                cols=["round(sum(rot_tramt), 2)"], where=[("rot_cono", "=",
+                self.opts["conum"]), ("rot_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                self.rct_own = o[0]
+            else:
+                self.rct_own = 0.00
+            self.grc_tnt = 0.00
+            o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
+                where=[("glo_cono", "=", self.opts["conum"]),
+                ("glo_acno", "=", self.tnt_ctl), ("glo_trdt", "=",
+                self.start)], limit=1)
+            if o:
+                b = CCD(o[0], "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_tnt = float(ASD(self.grc_tnt) + ASD(b.work))
+            o = self.sql.getRec(tables="gentrn",
+                cols=["round(sum(glt_tramt), 2)"],
+                where=[("glt_cono", "=", self.opts["conum"]),
+                ("glt_acno", "=", self.tnt_ctl), ("glt_curdt", ">=",
+                self.s_per), ("glt_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                b = CCD(float(o[0]), "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_tnt = float(ASD(self.grc_tnt) + ASD(b.work))
+            o = self.sql.getRec(tables="rcatnt",
+                cols=["round(sum(rtu_tramt), 2)"], where=[("rtu_cono", "=",
+                self.opts["conum"]), ("rtu_curdt", "<=", self.opts["period"]),
+                ("rtu_mtyp", "<>", 2)], limit=1)
+            if o and o[0]:
+                self.rct_tnt = o[0]
+            else:
+                self.rct_tnt = 0.00
+            self.grc_dep = 0.00
+            o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
+                where=[("glo_cono", "=", self.opts["conum"]),
+                ("glo_acno", "=", self.dep_ctl), ("glo_trdt", "=",
+                self.start)], limit=1)
+            if o:
+                b = CCD(o[0], "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_dep = float(ASD(self.grc_dep) + ASD(b.work))
+            o = self.sql.getRec(tables="gentrn",
+                cols=["round(sum(glt_tramt), 2)"],
+                where=[("glt_cono", "=", self.opts["conum"]),
+                ("glt_acno", "=", self.dep_ctl), ("glt_curdt", ">=",
+                self.s_per), ("glt_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                b = CCD(float(o[0]), "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.grc_dep = float(ASD(self.grc_dep) + ASD(b.work))
+            o = self.sql.getRec(tables="rcatnt",
+                cols=["round(sum(rtu_tramt), 2)"], where=[("rtu_cono", "=",
+                self.opts["conum"]), ("rtu_curdt", "<=", self.opts["period"]),
+                ("rtu_mtyp", "=", 2)], limit=1)
+            if o and o[0]:
+                self.rct_dep = o[0]
+            else:
+                self.rct_dep = 0.00
+        else:
+            self.grc_own = 0.00
+            self.grc_tnt = 0.00
+            self.grc_dep = 0.00
+            self.rct_own = 0.00
+            self.rct_tnt = 0.00
+            self.rct_dep = 0.00
         if self.rtint == "Y":
             self.grt_bal = 0.0
             prm = self.sql.getRec(tables="rtlprm", cols=["rtp_rtlacc"],
@@ -413,6 +486,37 @@
         else:
             self.grt_bal = 0.00
             self.rtl_bal = 0.00
+        if self.stint == "Y":
+            self.gst_bal = 0.0
+            o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
+                where=[("glo_cono", "=", self.opts["conum"]), ("glo_acno", "=",
+                self.str_ctl), ("glo_trdt", "=", self.start)], limit=1)
+            if o:
+                b = CCD(o[0], "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.gst_bal = float(ASD(self.gst_bal) + ASD(b.work))
+            o = self.sql.getRec(tables="gentrn",
+                cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "=",
+                self.opts["conum"]), ("glt_acno", "=", self.str_ctl),
+                ("glt_curdt", ">=", self.s_per), ("glt_curdt", "<=",
+                self.opts["period"])], limit=1)
+            if o and o[0]:
+                b = CCD(float(o[0]), "SD", 14.2)
+            else:
+                b = CCD(0, "SD", 14.2)
+            self.gst_bal = float(ASD(self.gst_bal) + ASD(b.work))
+            o = self.sql.getRec(tables="strtrn",
+                cols=["round(sum(stt_cost), 2)"], where=[("stt_cono", "=",
+                self.opts["conum"]), ("stt_curdt", "<=", self.opts["period"])],
+                limit=1)
+            if o and o[0]:
+                self.str_bal = o[0]
+            else:
+                self.str_bal = 0.00
+        else:
+            self.gst_bal = 0.00
+            self.str_bal = 0.00
         if self.wgint == "Y":
             self.gsl_bal = 0.0
             o = self.sql.getRec(tables="genbal", cols=["glo_cyr"],
@@ -450,6 +554,14 @@
         self.pgnum = 0
         self.pglin = 999
         self.pageHeading(head)
+        if self.arint == "Y":
+            des = "Assets Register"
+            a1 = CCD(self.gar_bal, "SD", 20.2)
+            a2 = CCD(self.ass_bal, "SD", 20.2)
+            a = float(ASD(a1.work) - ASD(a2.work))
+            a3 = CCD(a, "SD", 20.2)
+            self.fpdf.drawText("%-20s %s %s %s" %
+                (des, a1.disp, a2.disp, a3.disp))
         if self.bkint == "Y":
             des = "Bookings Ledger"
             a1 = CCD(self.gbk_bal, "SD", 20.2)
@@ -490,6 +602,36 @@
             a3 = CCD(a, "SD", 20.2)
             self.fpdf.drawText("%-20s %s %s %s" %
                 (des, a1.disp, a2.disp, a3.disp))
+        if self.rcint == "Y":
+            des = "Rental Owners"
+            a1 = CCD(self.grc_own, "SD", 20.2)
+            a2 = CCD(self.rct_own, "SD", 20.2)
+            a = float(ASD(a1.work) - ASD(a2.work))
+            a3 = CCD(a, "SD", 20.2)
+            self.fpdf.drawText("%-20s %s %s %s" %
+                (des, a1.disp, a2.disp, a3.disp))
+            des = "Rental Tenants"
+            a1 = CCD(self.grc_tnt, "SD", 20.2)
+            a2 = CCD(self.rct_tnt, "SD", 20.2)
+            a = float(ASD(a1.work) - ASD(a2.work))
+            a3 = CCD(a, "SD", 20.2)
+            self.fpdf.drawText("%-20s %s %s %s" %
+                (des, a1.disp, a2.disp, a3.disp))
+            des = "Rental Deposits"
+            a1 = CCD(self.grc_dep, "SD", 20.2)
+            a2 = CCD(self.rct_dep, "SD", 20.2)
+            a = float(ASD(a1.work) - ASD(a2.work))
+            a3 = CCD(a, "SD", 20.2)
+            self.fpdf.drawText("%-20s %s %s %s" %
+                (des, a1.disp, a2.disp, a3.disp))
+        if self.rtint == "Y":
+            des = "Rentals Ledger"
+            a1 = CCD(self.grt_bal, "SD", 20.2)
+            a2 = CCD(self.rtl_bal, "SD", 20.2)
+            a = float(ASD(a1.work) - ASD(a2.work))
+            a3 = CCD(a, "SD", 20.2)
+            self.fpdf.drawText("%-20s %s %s %s" %
+                (des, a1.disp, a2.disp, a3.disp))
         if self.stint == "Y":
             des = "Stores Ledger"
             a1 = CCD(self.gst_bal, "SD", 20.2)
@@ -498,22 +640,6 @@
             a3 = CCD(a, "SD", 20.2)
             self.fpdf.drawText("%-20s %s %s %s" %
                 (des, a1.disp, a2.disp, a3.disp))
-        if self.arint == "Y":
-            des = "Assets Register"
-            a1 = CCD(self.gar_bal, "SD", 20.2)
-            a2 = CCD(self.ass_bal, "SD", 20.2)
-            a = float(ASD(a1.work) - ASD(a2.work))
-            a3 = CCD(a, "SD", 20.2)
-            self.fpdf.drawText("%-20s %s %s %s" %
-                (des, a1.disp, a2.disp, a3.disp))
-        if self.rtint == "Y":
-            des = "Rentals Ledger"
-            a1 = CCD(self.grt_bal, "SD", 20.2)
-            a2 = CCD(self.rtl_bal, "SD", 20.2)
-            a = float(ASD(a1.work) - ASD(a2.work))
-            a3 = CCD(a, "SD", 20.2)
-            self.fpdf.drawText("%-20s %s %s %s" %
-                (des, a1.disp, a2.disp, a3.disp))
         if self.wgint == "Y":
             des = "Staff Loans"
             a1 = CCD(self.gsl_bal, "SD", 20.2)
@@ -526,8 +652,7 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            header=self.tit, repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self, desc=None):
@@ -536,8 +661,8 @@
         self.pgnum += 1
         self.fpdf.drawText(desc)
         self.fpdf.drawText()
-        self.fpdf.drawText("%-49s %-12s %13s %5s" % \
-            ("General Ledger Integrated Controls up to Period ",
+        self.fpdf.drawText("%-47s %-7s %20s %5s" % \
+            ("General Ledger Integrated Controls up to Period",
             self.df.t_disp[0][0][0], "Page", self.pgnum))
         self.fpdf.drawText()
         self.fpdf.drawText("%-24s %-29s %-16s %-20s" % ("Description",

=== modified file 'gen/gl6040.py'
--- gen/gl6040.py	2017-02-25 14:03:05 +0000
+++ gen/gl6040.py	2017-06-28 15:20:53 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Check Intercompany Balances.
@@ -48,7 +46,7 @@
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.s_per = self.opts["period"][1][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
 
     def mainProcess(self):
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
@@ -64,7 +62,7 @@
     def doRepDte(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        self.e_per = w / 100
+        self.e_per = int(w / 100)
 
     def doEnd(self):
         self.printReport()
@@ -131,8 +129,7 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            header=self.tit, repprt=self.df.repprt, repeml=self.df.repeml)
         self.doExit()
 
     def pageHeading(self):

=== modified file 'gen/gl6050.py'
--- gen/gl6050.py	2017-02-25 14:03:05 +0000
+++ gen/gl6050.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Initialise Bank Reconcilition.

=== modified file 'gen/gl6060.py'
--- gen/gl6060.py	2017-02-25 14:03:05 +0000
+++ gen/gl6060.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger - Delete Imported Bank Statements.

=== modified file 'gen/gl6070.py'
--- gen/gl6070.py	2017-02-25 14:03:05 +0000
+++ gen/gl6070.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Merge Accounts into a Control Account.
@@ -79,7 +77,7 @@
             if not chk:
                 self.tables.remove(tab)
                 continue
-            if not tab[0] in tabs:
+            if tab[0] not in tabs:
                 tabs.append(tab[0])
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:

=== modified file 'gen/glc110.py'
--- gen/glc110.py	2017-02-25 14:03:05 +0000
+++ gen/glc110.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Control Accounts Maintenance.
@@ -113,12 +111,12 @@
                 self.glctrl.extend([
                     ("stk_soh", "Stock on Hand"),
                     ("stk_susp", "Stock Reconciliation")])
-            slsctl = gc.getCtl("slsctl", self.opts["conum"], error=False)
-            if slsctl and slsctl["ctv_tills"] == "Y":
-                self.glctrl.extend([
-                    ("pos_cash", "Cash Takings"),
-                    ("pos_card", "Card Takings"),
-                    ("pos_vchr", "Vouchers")])
+            #slsctl = gc.getCtl("slsctl", self.opts["conum"], error=False)
+            #if slsctl and slsctl["ctv_tills"] == "Y":
+            #    self.glctrl.extend([
+            #        ("pos_cash", "Cash Takings"),
+            #        ("pos_card", "Card Takings"),
+            #        ("pos_vchr", "Vouchers")])
         if mod.count("WG") or mod.count("SL"):
             wagctl = gc.getCtl("wagctl", self.opts["conum"], error=False)
             if wagctl and wagctl["ctw_glint"] == "Y":

=== modified file 'gen/glc210.py'
--- gen/glc210.py	2017-02-25 14:03:05 +0000
+++ gen/glc210.py	2017-06-27 09:48:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     General Ledger Intercompany Records Maintenance.

=== modified file 'gen/glc310_rne.py'
--- gen/glc310_rne.py	2017-02-25 14:03:05 +0000
+++ gen/glc310_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Branch Records Maintenance.

=== modified file 'gen/glc410_rne.py'
--- gen/glc410_rne.py	2017-02-25 14:03:05 +0000
+++ gen/glc410_rne.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Department Records Maintenance.

=== modified file 'gen/glc510_rne.py'
--- gen/glc510_rne.py	2017-02-25 14:03:05 +0000
+++ gen/glc510_rne.py	2017-07-24 08:31:02 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Department Records Maintenance.
@@ -129,7 +127,7 @@
             ("ctm_cono=gqd_cono",)], order="gqd_dcod")
         for num, dep in enumerate(deps):
             p = num * 4
-            for x in range(len(dep)):
+            for x in xrange(len(dep)):
                 self.df.loadEntry("C", 0, p+x, data=dep[x])
             self.df.advanceLine(0)
 

=== modified file 'ibt/ib2010.py'
--- ibt/ib2010.py	2017-02-25 14:03:05 +0000
+++ ibt/ib2010.py	2017-06-28 15:35:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Inter Branch Sales Invoices.
@@ -77,7 +75,7 @@
             return "Invalid Date, Not In Financial Period"
         self.trdt = w
         self.trdd = self.pr.t_disp[0][0][1]
-        self.curdt = self.trdt / 100
+        self.curdt = int(self.trdt / 100)
         self.batch = "S%s" % self.curdt
         self.credit = False
 
@@ -242,7 +240,7 @@
         self.df.loadEntry(frt, pag, p+1, data=self.value)
 
     def doAccept(self):
-        if self.edit or self.credit or not self.df.col == 1:
+        if self.edit or self.credit or self.df.col != 1:
             self.opts["mf"].dbm.commitDbase()
             self.df.setWidget(self.df.mstFrame, state="hide")
             if self.credit:

=== modified file 'ibt/ib2020.py'
--- ibt/ib2020.py	2017-02-25 14:03:05 +0000
+++ ibt/ib2020.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Inter Branch Purchases.

=== modified file 'ibt/ib3010.py'
--- ibt/ib3010.py	2017-02-25 14:03:05 +0000
+++ ibt/ib3010.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Reprinting of Sales Documents.

=== modified file 'ibt/ib3020.py'
--- ibt/ib3020.py	2017-02-25 14:03:05 +0000
+++ ibt/ib3020.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Purchase Journal Listing.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, SplashScreen, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, SplashScreen
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName, showError
 
 class ib3020:
@@ -30,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        ibtctl = gc.getCtl("ibtctl", self.opts["conum"])
+        if not ibtctl:
+            return
+        self.fromad = ibtctl["cbt_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -145,7 +148,7 @@
             self.printReport(recs)
             if self.reprint == "N" and self.preview == "N":
                 self.opts["mf"].dbm.commitDbase()
-            keys = self.deptot.keys()
+            keys = list(self.deptot.keys())
             keys.sort()
             self.pglin = 999
             tots = 0
@@ -166,8 +169,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doTotHead(self):
@@ -269,7 +272,7 @@
 
     def branchTotal(self, fullpg=False):
         totamt = CCD(self.totamt, "CD", 15.2)
-        if not self.branch in self.deptot:
+        if self.branch not in self.deptot:
             self.deptot[self.branch] = [self.bname, 0]
         self.deptot[self.branch][1] = float(
             ASD(self.deptot[self.branch][1]) + ASD(totamt.work))

=== modified file 'ibt/ib3030.py'
--- ibt/ib3030.py	2017-02-25 14:03:05 +0000
+++ ibt/ib3030.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Inter Branch Transfer Sales Report.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import ASD, RepPrt, Sql, TartanDialog
+from TartanClasses import ASD, GetCtl, RepPrt, Sql, TartanDialog
 
 class ib3030:
     def __init__(self, **opts):
@@ -27,6 +25,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        ibtctl = gc.getCtl("ibtctl", self.opts["conum"])
+        if not ibtctl:
+            return
+        self.fromad = ibtctl["cbt_emadd"]
         return True
 
     def mainProcess(self):
@@ -105,9 +108,9 @@
         val = None
         for num, dat in enumerate(recs):
             b, n, d, t, c, q, p, v, ct = dat
-            if not b in old:
+            if b not in old:
                 old[b] = {}
-            if not n in old[b]:
+            if n not in old[b]:
                 old[b][n] = [0, 0, 0, 0, 0, 0, 0, 0, 0]
             if t in (1, 2):
                 # IBT Invoice
@@ -125,9 +128,9 @@
                     old[b][n][7] = float(ASD(old[b][n][7]) + ASD(val))
                 old[b][n][4] = float(ASD(old[b][n][4]) + ASD(v))
                 old[b][n][6] = float(ASD(old[b][n][6]) + ASD(v))
-                if not ct == 4:
+                if ct != 4:
                     old[b][n][7] = float(ASD(old[b][n][7]) - ASD(v))
-                    if not q == qty:
+                    if q != qty:
                         sb = round(qty * p, 2)
                         df = float(ASD(v) - ASD(sb))
                         old[b][n][8] = float(ASD(old[b][n][8]) + ASD(df))
@@ -135,9 +138,9 @@
                 # Transport Invoice
                 old[b][n][5] = float(ASD(old[b][n][5]) + ASD(v))
                 old[b][n][6] = float(ASD(old[b][n][6]) + ASD(v))
-                if not ct == 4:
+                if ct != 4:
                     old[b][n][7] = float(ASD(old[b][n][7]) - ASD(v))
-                    if not q == qty:
+                    if q != qty:
                         sb = round(qty * p, 2)
                         df = float(ASD(v) - ASD(sb))
                         old[b][n][8] = float(ASD(old[b][n][8]) + ASD(df))
@@ -159,10 +162,10 @@
         sdy = [["a", "Branch Code", "Y"]]
         tot = ["d", "e", "f", "g", "h", "i", "j", "k"]
         data = []
-        bkey = old.keys()
+        bkey = list(old.keys())
         bkey.sort()
         for k1 in bkey:
-            nkey = old[k1].keys()
+            nkey = list(old[k1].keys())
             nkey.sort()
             for k2 in nkey:
                 data.append([k1, k2] + old[k1][k2])
@@ -173,7 +176,7 @@
         RepPrt(self.opts["mf"], conum=self.opts["conum"], ttype="D",
             conam=self.opts["conam"], name=__name__, tables=data, heads=hds,
             cols=col, stots=sdy, gtots=tot, repprt=self.df.repprt,
-            repeml=self.df.repeml, pbar="P", summ=summ)
+            repeml=self.df.repeml, fromad=self.fromad, pbar="P", summ=summ)
         self.closeProcess()
 
     def doExit(self):

=== modified file 'ibt/ib3040.py'
--- ibt/ib3040.py	2017-02-25 14:03:05 +0000
+++ ibt/ib3040.py	2017-06-28 15:35:50 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Branch Transfer Statements.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, getSingleRecords, showError
 
 class ib3040:
@@ -29,11 +28,16 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        ibtctl = gc.getCtl("ibtctl", self.opts["conum"])
+        if not ibtctl:
+            return
+        self.fromad = ibtctl["cbt_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def mainProcess(self):
@@ -83,8 +87,8 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                    repeml=self.df.repeml)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.focusField("T", 0, 1)
 

=== modified file 'ibt/ibc110.py'
--- ibt/ibc110.py	2017-02-25 14:03:05 +0000
+++ ibt/ibc110.py	2017-06-27 09:48:16 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Branch Transfers Control File Maintenance.
@@ -32,7 +30,7 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "branch_transfer", 1]
+            self.acc = [self.opts["conum"], "branch_transfer", 1, ""]
         else:
             self.new = False
             acc = self.sql.getRec(tables="ctlmst", cols=["ctm_name"],
@@ -69,7 +67,9 @@
                 self.acc[1],"N",self.doTplNam,tpl,None,None),
             (("T",0,1,0),"IUI",3,"Creditor's Company","",
                 self.acc[2],"N",self.doCrsCoy,ctm,None,None),
-            (("T",0,1,0),"ONA",30,""))
+            (("T",0,1,0),"ONA",30,""),
+            (("T",0,2,0),"ITX",50,"Email Address","",
+                self.acc[3],"N",None,None,None,None))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -78,9 +78,13 @@
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
             butt=but, tend=tnd, txit=txt, focus=False)
         if not self.new:
+            p = 0
             for n, f in enumerate(self.acc[1:]):
-                self.df.loadEntry("T", 0, n, data=f)
-            self.df.loadEntry("T", 0, n+1, data=self.nam)
+                self.df.loadEntry("T", 0, p, data=f)
+                if n == 1:
+                    self.df.loadEntry("T", 0, n+1, data=self.nam)
+                    p += 1
+                p += 1
         self.df.focusField("T", 0, 1, clr=False)
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -98,7 +102,9 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
-        for x in xrange(0, len(self.df.t_work[0][0]) - 1):
+        for x in xrange(0, len(self.df.t_work[0][0])):
+            if x == 2:
+                continue
             data.append(self.df.t_work[0][0][x])
         if self.new:
             self.sql.insRec("ibtctl", data=data)

=== modified file 'lon/ln1010.py'
--- lon/ln1010.py	2017-02-25 14:03:05 +0000
+++ lon/ln1010.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loan Accounts Maintenance.
@@ -117,7 +115,7 @@
                 self.opts["conum"]), ("lm1_name", "=", w)], limit=1)
             if chk:
                 return "An Account With This Name Already Exists"
-            for seq in range(1, 100):
+            for seq in xrange(1, 100):
                 self.acno = genAccNum(w, seq)
                 chk = self.sql.getRec(tables="lonmf1", where=[("lm1_cono",
                     "=", self.opts["conum"]), ("lm1_acno", "=", self.acno)],

=== modified file 'lon/ln2010.py'
--- lon/ln2010.py	2017-02-25 14:03:05 +0000
+++ lon/ln2010.py	2017-06-28 15:54:42 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Loans's Ledger Data Capture.
@@ -136,7 +134,7 @@
             (("C",1,0,10),"OUD",12.2,"Repay-Amt"),
             (("C",1,0,11),"INA",30,"Details","Loan Details",
                 "","N",self.doTrnDet,None,None,None)]
-        if self.opts["rtn"] == 3 and self.glint == "Y":  # J/E and G/L
+        if self.opts["rtn"] == 3 and self.glint == "Y":
             fld.extend([
                 (("T",2,0,0),"OSD",13.2,"Unallocated Balance"),
                 [("C",2,0,0),"IUI",3,"Coy","Company Number",
@@ -230,7 +228,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -288,7 +286,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.opts["rtn"] == 1:

=== modified file 'lon/ln2020.py'
--- lon/ln2020.py	2017-02-25 14:03:05 +0000
+++ lon/ln2020.py	2017-06-28 15:38:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Loans Raise Interest.
@@ -49,8 +47,8 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        yr = self.sysdtw / 10000
-        mt = (self.sysdtw / 100 % 100) - 1
+        yr = int(self.sysdtw / 10000)
+        mt = (int(self.sysdtw / 100) % 100) - 1
         self.lme = mthendDate((yr * 10000) + (mt * 100) + 1)
         return True
 
@@ -69,7 +67,7 @@
         self.trdate = w
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if not w == mthendDate(w):
+        if w != mthendDate(w):
             return "Invalid Date, Not a Month End"
 
     def endPage0(self):
@@ -80,9 +78,9 @@
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs))
         for num, lonmf2 in enumerate(recs):
             p.displayProgress(num)
-            batch = "L%s" % (self.trdate / 100)
+            batch = "L%s" % int(self.trdate / 100)
             LoanInterest("L", self.opts["mf"].dbm, lonmf2, update="Y",
-                tdate=self.trdate, batch=batch, curdt=self.trdate / 100,
+                tdate=self.trdate, batch=batch, curdt=int(self.trdate / 100),
                 refno=True, glctl=self.glctl, capnm=self.opts["capnm"])
         p.closeProgress()
         self.sql.updRec("lonctl", cols=["cln_last"], data=[self.trdate],

=== modified file 'lon/ln2020_rne.py'
--- lon/ln2020_rne.py	2017-02-25 14:03:05 +0000
+++ lon/ln2020_rne.py	2017-07-24 08:31:10 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Loans Raise Interest.
@@ -32,8 +30,8 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        yr = self.sysdtw / 10000
-        mt = (self.sysdtw / 100 % 100) - 1
+        yr = int(self.sysdtw / 10000)
+        mt = (int(self.sysdtw / 100) % 100) - 1
         self.lme = mthendDate((yr * 10000) + (mt * 100) + 1)
         return True
 
@@ -55,7 +53,7 @@
         self.trdate = w
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if not w == mthendDate(w):
+        if w != mthendDate(w):
             return "Invalid Date, Not a Month End"
 
     def doAllCoy(self, frt, pag, r, c, p, i, w):
@@ -67,14 +65,14 @@
             for rec in recs:
                 cono = rec[self.sql.ctlmst_col.index("ctm_cono")]
                 mods = rec[self.sql.ctlmst_col.index("ctm_modules")]
-                for x in range(0, len(mods), 2):
+                for x in xrange(0, len(mods), 2):
                     if mods[x:x+2] == "LN":
                         self.coys.append(cono)
                         break
 
     def endPage0(self):
         self.df.closeProcess()
-        batch = "L%s" % (self.trdate / 100)
+        batch = "L%s" % int(self.trdate / 100)
         p1 = ProgressBar(self.opts["mf"].body, typ="Interest on Loans",
             mxs=len(self.coys))
         for n1, coy in enumerate(self.coys):
@@ -89,8 +87,9 @@
             for n2, lonmf2 in enumerate(recs):
                 p2.displayProgress(n2)
                 LoanInterest("L", self.opts["mf"].dbm, lonmf2, update="Y",
-                    tdate=self.trdate, batch=batch, curdt=self.trdate / 100,
-                    refno=True, glctl=self.glctl, capnm=self.opts["capnm"])
+                    tdate=self.trdate, batch=batch,
+                    curdt=int(self.trdate / 100), refno=True,
+                    glctl=self.glctl, capnm=self.opts["capnm"])
             self.sql.updRec("lonctl", cols=["cln_last"], data=[self.trdate],
                 where=[("cln_cono", "=", coy)])
             p2.closeProgress()

=== modified file 'lon/ln2030.py'
--- lon/ln2030.py	2017-02-25 14:03:05 +0000
+++ lon/ln2030.py	2017-06-28 15:39:47 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     New Loan Rate Capture.
@@ -147,7 +145,7 @@
         if w <= self.lastd:
             return "Invalid Date, Before Last Interest Raise Date"
         self.sdate = w
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
         self.chgrte = False
         if self.allrte == "N":
             chk = self.sql.getRec(tables="lonrte", where=[("lrt_cono", "=",

=== modified file 'lon/ln3010.py'
--- lon/ln3010.py	2017-02-25 14:03:05 +0000
+++ lon/ln3010.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import lntrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "lontrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
+            return
+        self.fromad = lonctl["cln_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -151,8 +155,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         else:
             showError(self.opts["mf"].body, "Batch Errors",
                 "No Batch Transactions")

=== modified file 'lon/ln3020.py'
--- lon/ln3020.py	2017-02-25 14:03:05 +0000
+++ lon/ln3020.py	2017-06-28 15:40:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Transaction Audit Trail.
@@ -35,6 +33,7 @@
         lonctl = gc.getCtl("lonctl", self.opts["conum"])
         if not lonctl:
             return
+        self.fromad = lonctl["cln_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -45,8 +44,8 @@
             "Trans-Date", "Remarks", "Debits", "Credits"]
         self.forms = [("UI", 2), ("NA", 7), ("UA", 7), ("UI", 2),
             ("Na", 9), ("D1", 10), ("NA", 30), ("SD", 13.2), ("SD", 13.2)]
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         self.gqt = [0,0,0,0,0]
         self.gam = [0,0,0,0,0]
         self.prtrtp = copyList(lntrtp)
@@ -250,8 +249,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         col = self.sql.lontrn_col

=== modified file 'lon/ln3030.py'
--- lon/ln3030.py	2017-02-25 14:03:05 +0000
+++ lon/ln3030.py	2017-06-28 15:40:41 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Balances Listing.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, LoanInterest, MyFpdf, ProgressBar, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, LoanInterest, MyFpdf, ProgressBar
+from TartanClasses import Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName, mthendDate, showError
 
 class ln3030:
@@ -30,8 +28,13 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
+            return
+        self.fromad = lonctl["cln_emadd"]
         t = time.localtime()
-        self.curdt = ((t[0] * 10000) + (t[1] * 100) + t[2]) / 100
+        self.curdt = int(((t[0] * 10000) + (t[1] * 100) + t[2]) / 100)
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
         return True
@@ -156,8 +159,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'lon/ln3040.py'
--- lon/ln3040.py	2017-02-25 14:03:05 +0000
+++ lon/ln3040.py	2017-06-28 15:41:34 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Statements.
@@ -37,11 +35,12 @@
         self.capf = lonctl["cln_capf"]
         self.lint = lonctl["cln_last"]
         self.stpl = lonctl["cln_tplnam"]
+        self.fromad = lonctl["cln_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.sysdtw / 100
-        self.sper = self.opts["period"][1][0] / 100
-        self.eper = self.opts["period"][2][0] / 100
+        self.curdt = int(self.sysdtw / 100)
+        self.sper = int(self.opts["period"][1][0] / 100)
+        self.eper = int(self.opts["period"][2][0] / 100)
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "lonmf1",
             "lonmf2", "lontrn", "tplmst"], prog=__name__)
         if self.sql.error:
@@ -254,14 +253,14 @@
                 if dbal:
                     trn[ltc.index("lnt_tramt")] = dbal
                     trn[ltc.index("lnt_desc")] = ddes % (
-                        CCD(capd[0] / 100, "D2", 7).disp,
-                        CCD(capd[1] / 100, "D2", 7).disp)
+                        CCD(int(capd[0] / 100), "D2", 7).disp,
+                        CCD(int(capd[1] / 100), "D2", 7).disp)
                     trns.append(copyList(trn))
                 if cbal:
                     trn[ltc.index("lnt_tramt")] = cbal
                     trn[ltc.index("lnt_desc")] = cdes % (
-                        CCD(capd[0] / 100, "D2", 7).disp,
-                        CCD(capd[1] / 100, "D2", 7).disp)
+                        CCD(int(capd[0] / 100), "D2", 7).disp,
+                        CCD(int(capd[1] / 100), "D2", 7).disp)
                     trns.append(copyList(trn))
             trns = sorted(trns, key=itemgetter(5))
         else:
@@ -316,8 +315,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.date.disp),
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.date.disp),
+            repprt=self.df.repprt, fromad=self.fromad, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -367,7 +366,7 @@
         tdc = self.form.sql.tpldet_col
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "lm1_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acno

=== modified file 'lon/ln3050.py'
--- lon/ln3050.py	2017-02-25 14:03:05 +0000
+++ lon/ln3050.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loan's Ledger Notes Listing.
@@ -23,13 +21,14 @@
             self.mainProcess()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, "lonmf1", prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         lonctl = gc.getCtl("lonctl", self.opts["conum"])
         if not lonctl:
             return
-        self.sql = Sql(self.opts["mf"].dbm, "lonmf1", prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = lonctl["cln_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "LON")
         if not self.notes.data:
@@ -82,6 +81,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'lon/ln4010.py'
--- lon/ln4010.py	2017-02-25 14:03:05 +0000
+++ lon/ln4010.py	2017-06-28 15:42:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Interrogation.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, LoanInterest, NotesCreate, MyFpdf, SChoice
-from TartanClasses import SelectChoice, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, LoanInterest, NotesCreate, MyFpdf
+from TartanClasses import SChoice, SelectChoice, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter
 from tartanWork import lntrtp
 
@@ -31,6 +29,10 @@
             "lontrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -129,7 +131,7 @@
         self.df.loadEntry("T", 1, 0, data=start)
         # Raise Interest
         LoanInterest("L", self.opts["mf"].dbm, lonmf2, update="Y",
-            tdate=self.sysdtw, batch="Pending", curdt=self.sysdtw / 100)
+            tdate=self.sysdtw, batch="Pending", curdt=int(self.sysdtw / 100))
         # Get Balances
         self.lon = 0.0
         self.imt = 0.0
@@ -195,7 +197,7 @@
         data = []
         bals = 0
         fini = False
-        curdt = self.opts["period"][1][0] / 100
+        curdt = int(self.opts["period"][1][0] / 100)
         for rec in recs:
             if self.history == "N":
                 if rec[6] < curdt:
@@ -269,19 +271,19 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.lnt:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.lnt:
                 self.pageHeading()
@@ -289,7 +291,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%-5s %-20s %-25s %s" % ("", "",
@@ -322,7 +324,7 @@
             det = CCD(rec[self.sql.lontrn_col.index("lnt_desc")], "NA", 30)
             if self.history == "N":
                 cdt = rec[self.sql.lontrn_col.index("lnt_curdt")]
-                if cdt < (self.opts["period"][1][0] / 100):
+                if cdt < int(self.opts["period"][1][0] / 100):
                     bals = float(ASD(bals) + ASD(amt.work))
                     continue
                 if not fini:

=== modified file 'lon/ln6010.py'
--- lon/ln6010.py	2017-02-25 14:03:05 +0000
+++ lon/ln6010.py	2017-07-24 08:33:04 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Loans's Ledger Account Code Change.
@@ -121,7 +119,7 @@
     def doProcess(self, focus=True):
         for tab in self.tables:
             if tab[0] == "ctlnot":
-                for seq in range(1, 100):
+                for seq in xrange(1, 100):
                     oldnot = "%7s%02i" % (self.oldacc, seq)
                     newnot = "%7s%02i" % (self.newacc, seq)
                     whr = [

=== modified file 'lon/lnc110.py'
--- lon/lnc110.py	2017-02-25 14:03:05 +0000
+++ lon/lnc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Loans Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", "D", "A", "A", 0, 0, 0,
-                "statement_loan"]
+                "statement_loan", ""]
         else:
             self.new = False
         if self.genleg:
@@ -114,7 +112,9 @@
             (("T",0,seq + 5,0),"Id1",10.0,"Last Interest Date","",
                 self.acc[7],"N",None,None,None,("efld",)),
             (("T",0,seq + 6,0),"INA",20,"Statement Template","",
-                self.acc[8],"N",self.doTplNam,tpm,None,("efld",))])
+                self.acc[8],"N",self.doTplNam,tpm,None,("efld",)),
+            (("T",0,seq + 7,0),"ITX",50,"Email Address","",
+                self.acc[9],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -139,7 +139,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 7):
+            for x in xrange(1, 7):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk6"
 
@@ -171,7 +171,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 7:
                 if x in (1, 3, 5):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'mem/ml1010.py'
--- mem/ml1010.py	2017-02-25 14:03:05 +0000
+++ mem/ml1010.py	2017-06-28 15:58:54 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Membership Maintenance.
@@ -56,17 +54,18 @@
         self.logo = memctl["mcm_logo"]
         self.cftpl = memctl["mcm_cftpl"]
         self.cbtpl = memctl["mcm_cbtpl"]
-        yy = self.lme / 10000
-        mm = ((self.lme / 100) % 100) + 1
+        self.fromad = memctl["mcm_emadd"]
+        yy = int(self.lme / 10000)
+        mm = (int(self.lme / 100) % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
         self.tme = mthendDate((yy*10000) + (mm*100) + 1)
-        if self.tme / 100 == self.opts["period"][2][0] / 100:
+        if int(self.tme / 100) == int(self.opts["period"][2][0] / 100):
             self.ynd = True
         else:
             self.ynd = False
-        self.curdt = self.tme / 100
+        self.curdt = int(self.tme / 100)
         mm += 1
         while mm > 12:
             yy += 1
@@ -166,7 +165,7 @@
             "where": [("mlm_cono", "=", self.opts["conum"])],
             "order": "mlm_surname, mlm_names"}
         data = []
-        keys = countries.keys()
+        keys = list(countries.keys())
         keys.sort()
         for key in keys:
             data.append((key, countries[key][1]))
@@ -570,7 +569,7 @@
                     "transack c where c.tr_mstsq=? order by c.tr_date desc, "\
                     "c.tr_time desc", (data[0],)), limit=1)
                 if data:
-                    dt = (data[0] * 10000) + (data[1] / 100)
+                    dt = (data[0] * 10000) + int(data[1] / 100)
                     self.df.loadEntry("T", 1, 21, data=dt)
                 else:
                     self.df.loadEntry("T", 1, 21, data=0)
@@ -770,7 +769,7 @@
         batch = "PROFORM"
         self.refno += 1
         refno = "PF%07i" % self.refno
-        curdt = trdt / 100
+        curdt = int(trdt / 100)
         # VAT Rate and Amount
         vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
         if vrte is None:
@@ -840,7 +839,7 @@
     def doID(self, frt, pag, r, c, p, i, w):
         if not w and self.nation == "ZA":
             return "Invalid Identity Number 1"
-        if w and self.dob % 1000000 != w / 10000000:
+        if w and self.dob % 1000000 != int(w / 10000000):
             return "Invalid Identity Number 2"
         if w and not luhnFunc(w):
             return "Invalid Identity Number 3"
@@ -893,7 +892,7 @@
             "=", self.opts["conum"]), ("mlm_memno", "=", w)], limit=1)
         if not acc:
             return "Invalid Proposer"
-        if not acc[3] == "A":
+        if acc[3] != "A":
             return "Invalid Proposer, Not Active"
         self.df.loadEntry(frt, pag, p+1, data="%s %s %s" % (acc[0],
             acc[1], acc[2]))
@@ -914,7 +913,7 @@
             "=", self.opts["conum"]), ("mlm_memno", "=", w)], limit=1)
         if not acc:
             return "Invalid Seconder"
-        if not acc[3] == "A":
+        if acc[3] != "A":
             return "Invalid Seconder, Not Active"
         self.df.loadEntry(frt, pag, p+1, data="%s %s %s" % (acc[0],
             acc[1], acc[2]))
@@ -1141,7 +1140,7 @@
                         self.df.selPage(self.df.tags[pag - 1][0])
                     self.df.focusField(frt, pag, (pos+1), err=mes)
                     return
-            if self.idnum and self.dob % 1000000 != self.idnum / 10000000:
+            if self.idnum and self.dob % 1000000 != int(self.idnum / 10000000):
                 self.df.selPage("Personal")
                 self.df.focusField("T", 1, 7, err="Invalid Identity Number")
                 return
@@ -1581,7 +1580,7 @@
                 RepPrt(self.opts["mf"], conum=self.opts["conum"],
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["mlt_type",
-                    mltrtp], gtots=gtots, prtdia=prtdia)
+                    mltrtp], gtots=gtots, prtdia=prtdia, fromad=self.fromad)
             elif self.ss.selection[0] == "S":
                 tit = ("Print Options",)
                 fld = []
@@ -1787,9 +1786,11 @@
 
     def doSetButtons(self, normal, disabled):
         for but in normal:
-            exec "self.df.setWidget(self.df.B%s, state='normal')" % but
+            wid = getattr(self.df, "B%s" % but)
+            self.df.setWidget(wid, state="normal")
         for but in disabled:
-            exec "self.df.setWidget(self.df.B%s, state='disabled')" % but
+            wid = getattr(self.df, "B%s" % but)
+            self.df.setWidget(wid, state="disabled")
 
     def doExit(self, widget=None):
         if self.new or self.edit:

=== modified file 'mem/ml2010.py'
--- mem/ml2010.py	2017-02-25 14:03:05 +0000
+++ mem/ml2010.py	2017-06-28 15:59:36 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Members Ledger Data Capture (Invoices, Payments and Journals).
@@ -196,7 +194,7 @@
             return "Invalid Date, Not in Financial Period"
         if w > mthendDate(self.bh.curdt * 100):
             return "Invalid Date, After Batch Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -265,7 +263,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         self.amt = self.trnamt
@@ -294,7 +292,8 @@
             state = self.df.disableButtonsTags()
             self.opts["mf"].updateStatus("Choose an Ageing Option")
             for x in xrange(0, 4):
-                exec "self.df.setWidget(self.df.B%s, 'normal')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, "normal")
             self.df.setWidget(self.df.B0, "focus")
             self.ageloop = True
             self.opts["mf"].startLoop()
@@ -342,7 +341,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for x in xrange(0, 4):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"], system="mem", agetyp=atype,
             agekey=[self.opts["conum"], self.memno, self.opts["rtn"],
@@ -442,7 +442,7 @@
 
     def updateTables2(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.opts["rtn"] == 1:                          # Invoices

=== modified file 'mem/ml2020.py'
--- mem/ml2020.py	2017-02-25 14:03:05 +0000
+++ mem/ml2020.py	2017-06-28 16:00:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Members Ledger Receipts Data Capture.
@@ -149,7 +147,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -172,7 +170,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         if self.glint == "Y":
@@ -257,7 +255,8 @@
         state = self.df.disableButtonsTags()
         self.opts["mf"].updateStatus("Choose an Ageing Option")
         for x in xrange(0, 5):
-            exec "self.df.setWidget(self.df.B%s, 'normal')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "normal")
         self.df.setWidget(self.df.B0, "focus")
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
@@ -314,7 +313,8 @@
     def doAgeing(self, atype):
         # Disable All Ageing Buttons
         for x in xrange(0, 4):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, "disabled")
         self.opts["mf"].updateStatus("Select Transaction to Allocate Against")
         age = AgeAll(self.opts["mf"], system="mem", agetyp=atype,
             agekey=[self.opts["conum"], self.memno, self.opts["rtn"],

=== modified file 'mem/ml3010.py'
--- mem/ml3010.py	2017-02-25 14:03:05 +0000
+++ mem/ml3010.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Member's Ledger Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import mltrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "memtrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        memctl = gc.getCtl("memctl", self.opts["conum"])
+        if not memctl:
+            return
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -151,8 +155,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'mem/ml3020.py'
--- mem/ml3020.py	2017-02-25 14:03:05 +0000
+++ mem/ml3020.py	2017-06-28 16:00:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Member's Ledger Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 from tartanWork import mltrtp
 
@@ -40,22 +39,27 @@
                 self.whr.append(("mlt_batch", "=", self.batch))
                 self.processRecords()
             else:
-                self.sper = self.opts["period"][1][0] / 100
-                self.eper = self.opts["period"][2][0] / 100
+                self.sper = int(self.opts["period"][1][0] / 100)
+                self.eper = int(self.opts["period"][2][0] / 100)
                 self.mainProcess()
                 self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Member's Ledger Audit Trail (%s)" % __name__)
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "memmst", "memtrn"],
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        memctl = gc.getCtl("memctl", self.opts["conum"])
+        if not memctl:
+            return
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
             t[1], t[2], t[3], t[4], __name__)
+        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Member's Ledger Audit Trail (%s)" % __name__)
         self.head = ("%03u %-30s %s" % (self.opts["conum"],
             self.opts["conam"], "%s"))
         self.colsh = ["TP", "BatchNo", "Mem-No", "Name", "Reference",
@@ -264,7 +268,7 @@
                 continue
             memno, trdt, trtp, refno, batch, debit, credit, taxamt, \
                 detail, taxind, name = vals
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -302,8 +306,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
-                repeml=self.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.repprt,
+                fromad=self.fromad, repeml=self.repeml)
 
     def getValues(self, data):
         memno = CCD(data[0], "UI", 6)

=== modified file 'mem/ml3030.py'
--- mem/ml3030.py	2017-02-25 14:03:05 +0000
+++ mem/ml3030.py	2017-06-28 16:00:50 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Age Analysis.
@@ -34,6 +32,7 @@
         memctl = gc.getCtl("memctl", self.opts["conum"])
         if not memctl:
             return
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -85,7 +84,7 @@
         r4s = (("Number","N"),("Surname","M"))
         fld = (
             (("T",0,0,0),"Id2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCutOff,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doCutOff,None,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Status","",
                 "B","Y",self.doStat,None,None,None),
             (("T",0,2,0),("IRB",r2s),0,"Category","",
@@ -313,9 +312,9 @@
         if self.fpdf.page:
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         acc = CCD(data[0], "UI", 6)
@@ -330,7 +329,7 @@
             return
         if self.credit == "N" and bal.work < 0:
             return
-        if self.onlycr == "Y" and not bal.work < 0:
+        if self.onlycr == "Y" and bal.work >= 0:
             return
         cur = CCD(ages[0], "SD", 13.2)
         d30 = CCD(ages[1], "SD", 13.2)

=== modified file 'mem/ml3040.py'
--- mem/ml3040.py	2017-02-25 14:03:05 +0000
+++ mem/ml3040.py	2017-06-28 16:01:51 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Statements.
@@ -45,6 +43,7 @@
         self.ldays = memctl["mcm_ldays"]
         self.lme = memctl["mcm_lme"]
         self.stpl = memctl["mcm_sttpl"]
+        self.fromad = memctl["mcm_emadd"]
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "memmst",
             "memtrn", "memadd", "memcat", "memctc", "memctp", "memctk",
             "memkon", "memlnk", "tplmst"], prog=__name__)
@@ -52,8 +51,8 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        yy = self.lme / 10000
-        mm = ((self.lme / 100) % 100) + 1
+        yy = int(self.lme / 10000)
+        mm = (int(self.lme / 100) % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
@@ -235,7 +234,7 @@
                     self.pro = True
         self.datew = w
         self.dated = self.df.t_disp[pag][0][p]
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
 
     def doSort(self, frt, pag, r, c, p, i, w):
         self.sort = w
@@ -251,7 +250,7 @@
             self.mes = self.sql.getRec(tables="ctlmes", cols=["mss_detail"],
                 where=[("mss_system", "=", "MEM"), ("mss_message", "=", 1)],
                 limit=1)
-            self.curdt = self.opts["args"][1] / 100
+            self.curdt = int(self.opts["args"][1] / 100)
             self.dated = CCD(self.opts["args"][1], "D1", 10).disp
             self.pro = False
             self.repprt = self.opts["args"][2]
@@ -322,7 +321,7 @@
             elif self.repeml[1] == "N" or self.emadd:
                 self.repeml[2] = self.emadd
                 self.doPrint()
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.opts["mf"].closeLoop()
 
     def doLoadStatic(self):
@@ -455,7 +454,7 @@
         batch = "PROFORM"
         self.refno += 1
         refno = "PF%07i" % self.refno
-        curdt = trdt / 100
+        curdt = int(trdt / 100)
         # VAT Rate and Amount
         vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
         if vrte is None:
@@ -504,7 +503,7 @@
         if self.current == "Y":
             amt = 0
             bal = 0
-            cdt = self.opts["period"][2][0] / 100
+            cdt = int(self.opts["period"][2][0] / 100)
             trn = copy.deepcopy(mlt)
             mlt = []
             while trn:
@@ -525,7 +524,7 @@
                 rec[mlc.index("mlt_taxind")] = ""
                 rec[mlc.index("mlt_batind")] = ""
                 mlt.insert(0, rec)
-        if not len(mlt) > self.form.maxlines:
+        if len(mlt) <= self.form.maxlines:
             self.doBody(mlc, mlt, tdc)
         else:
             amt = 0
@@ -620,7 +619,7 @@
                 tdc.index("tpd_text")] = nad
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "mlm_memno_C00":
                 nl[tdc.index("tpd_text")] = self.memno
@@ -725,8 +724,8 @@
             key, ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.repprt, repeml=self.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.dated),
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])

=== modified file 'mem/ml3050.py'
--- mem/ml3050.py	2017-02-25 14:03:05 +0000
+++ mem/ml3050.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Notes Listing.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import CCD, NotesPrint, ProgressBar, RepPrt, Sql
+from TartanClasses import CCD, GetCtl, NotesPrint, ProgressBar, RepPrt, Sql
 from tartanFunctions import textFormat
 
 class ml3050:
@@ -26,6 +24,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "memmst", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        memctl = gc.getCtl("memctl", self.opts["conum"])
+        if not memctl:
+            return
+        self.fromad = memctl["mcm_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "MEM")
         if not self.notes.data:
@@ -67,6 +70,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'mem/ml3060.py'
--- mem/ml3060.py	2017-02-25 14:03:05 +0000
+++ mem/ml3060.py	2017-06-28 16:02:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Category Changes.
@@ -50,6 +48,7 @@
         memctl = gc.getCtl("memctl", self.opts["conum"])
         if not memctl:
             return
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -275,8 +274,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
-                repeml=self.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.repprt,
+                fromad=self.fromad, repeml=self.repeml)
 
     def getValues(self, data):
         key = data[self.sql.chglog_col.index("chg_key")]
@@ -304,7 +303,7 @@
         else:
             act = "Unknown"
         dte = data[self.sql.chglog_col.index("chg_dte")]
-        dte = CCD(dte / 1000000, "D1", 10)
+        dte = CCD(int(dte / 1000000), "D1", 10)
         usr = CCD(data[self.sql.chglog_col.index("chg_usr")], "NA", 20)
         old = CCD(data[self.sql.chglog_col.index("chg_old")], "d1", 10)
         new = CCD(data[self.sql.chglog_col.index("chg_new")], "d1", 10)

=== modified file 'mem/ml3070.py'
--- mem/ml3070.py	2017-02-25 14:03:05 +0000
+++ mem/ml3070.py	2017-06-28 16:03:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Master Report.
@@ -41,6 +39,7 @@
         if not memctl:
             return
         self.ldays = memctl["mcm_ldays"]
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.sysdt = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.colsd = {
@@ -322,8 +321,8 @@
                             d2[2], d2[0], "y"))
             RepPrt(self.opts["mf"], name=__name__, heads=head, tables=data,
                 cols=colsh, opts=self.getDes(), conum=self.opts["conum"],
-                conam=self.opts["conam"], ttype="D", pbar="P",
-                repprt=self.df.repprt, repeml=self.df.repeml)
+                conam=self.opts["conam"], ttype="D", repprt=self.df.repprt,
+                repeml=self.df.repeml, fromad=self.fromad, pbar="P")
 
     def doChooseFields(self):
         tit = ("Available Fields",)
@@ -742,12 +741,12 @@
 
     def raiseExtraTrans(self):
         self.tme = mthendDate(self.repdt)
-        if self.tme / 100 == self.opts["period"][2][0] / 100:
+        if int(self.tme / 100) == int(self.opts["period"][2][0] / 100):
             self.ynd = True
         else:
             self.ynd = False
-        yy = self.tme / 10000
-        mm = (self.tme / 100 % 100) + 1
+        yy = int(self.tme / 10000)
+        mm = (int(self.tme / 100) % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
@@ -854,7 +853,7 @@
         batch = "PROFORM"
         self.refno += 1
         refno = "PF%07i" % self.refno
-        curdt = trdt / 100
+        curdt = int(trdt / 100)
         # VAT Rate and Amount
         vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
         if vrte is None:

=== modified file 'mem/ml3080.py'
--- mem/ml3080.py	2017-02-25 14:03:05 +0000
+++ mem/ml3080.py	2017-06-28 16:03:22 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Suspension Report.
@@ -52,7 +50,8 @@
                 self.sqa = Sql(self.dba, prog=__name__)
             except:
                 self.acs = "N"
-        self.s_per = self.opts["period"][1][0] / 100
+        self.fromad = memctl["mcm_emadd"]
+        self.s_per = int(self.opts["period"][1][0] / 100)
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
@@ -152,7 +151,7 @@
         rep = RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=name, tables=data,
             heads=head, cols=cols, gtots=("e", "f", "g"), ttype="D",
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            repprt=self.df.repprt, repeml=self.df.repeml, fromad=self.fromad)
         if not rep.xits:
             ask = askChoice(self.opts["mf"].body, "Suspend Members",
                 "Select Members to Suspend", butt=(("All","A"), ("Some","S"),

=== modified file 'mem/ml3090.py'
--- mem/ml3090.py	2017-02-25 14:03:05 +0000
+++ mem/ml3090.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Update Request Email.

=== modified file 'mem/ml3100.py'
--- mem/ml3100.py	2017-02-25 14:03:05 +0000
+++ mem/ml3100.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Birthday Report.
@@ -31,6 +29,7 @@
         memctl = mc.getCtl("memctl", self.opts["conum"])
         if not memctl:
             return
+        self.fromad = memctl["mcm_emadd"]
         t = time.localtime()
         self.frdt = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.todt = self.frdt
@@ -144,7 +143,8 @@
             ["d", "DM", 5, "Birthday", "y"]]
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=name, tables=recs, heads=head,
-            cols=cols, ttype="D", repprt=self.df.repprt, repeml=self.df.repeml)
+            cols=cols, ttype="D", repprt=self.df.repprt,
+            repeml=self.df.repeml, fromad=self.fromad)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'mem/ml3110.py'
--- mem/ml3110.py	2017-02-25 14:03:05 +0000
+++ mem/ml3110.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Print Labels.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import TartanLabel, ProgressBar, Sql, TartanDialog
+from TartanClasses import GetCtl, TartanLabel, ProgressBar, Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName, showError
 from tartanWork import labels
 
@@ -30,6 +28,10 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        memctl = gc.getCtl("memctl", self.opts["conum"])
+        if not memctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -51,7 +53,7 @@
         lab = {
             "stype": "C",
             "head": ("Codes",),
-            "data": labels.keys()}
+            "data": list(labels.keys())}
         r1s = (
             ("All", "Z"),
             ("Active", "A"),
@@ -181,7 +183,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, mlm):

=== modified file 'mem/ml3120.py'
--- mem/ml3120.py	2017-02-25 14:03:05 +0000
+++ mem/ml3120.py	2017-06-28 16:04:49 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Member's Status Summary.
@@ -51,7 +49,7 @@
 
     def doStartPer(self, frt, pag, r, c, p, i, w):
         self.sdate = (w * 100) + 1
-        y = w / 100
+        y = int(w / 100)
         m = (w % 100) + 11
         if m > 12:
             y += 1
@@ -70,10 +68,10 @@
             "between", self.sdate, self.edate)], group="mls_status, date")
         num = 1
         lookup = {}
-        mth = (self.sdate / 100) % 100
-        end = (self.edate / 100) % 100
+        mth = int(self.sdate / 100) % 100
+        end = int(self.edate / 100) % 100
         lookup[mth] = num
-        while not mth == end:
+        while mth != end:
             mth += 1
             if mth > 12:
                 mth = 1
@@ -86,8 +84,8 @@
         for s in self.desc:
             achart.append([s] + self.desc[s])
         CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],
-            [self.sdate/100, self.edate/100], [[self.opts["conam"],
-            "Status Summary"], "Count"], achart, achart)
+            [int(self.sdate / 100), int(self.edate / 100)],
+            [[self.opts["conam"], "Status Summary"], "Count"], achart, achart)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'mem/ml6010.py'
--- mem/ml6010.py	2017-02-25 14:03:05 +0000
+++ mem/ml6010.py	2017-06-28 16:04:59 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Members Ledger Change Transaction Allocations.
@@ -31,7 +29,7 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         return True
 
     def dataHeader(self):
@@ -76,7 +74,8 @@
         self.df.loadEntry(frt, pag, p+1, data=name)
         self.opts["mf"].updateStatus("Select Routine")
         for b in xrange(2):
-            exec "self.df.setWidget(self.df.B%s, 'normal')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "normal")
         self.df.setWidget(self.df.B0, "focus")
         self.opts["mf"].startLoop()
         if self.key in ("normal", "history"):
@@ -103,7 +102,8 @@
     def doReAge(self):
         self.opts["mf"].updateStatus("")
         for b in xrange(2):
-            exec "self.df.setWidget(self.df.B%s, 'disabled')" % b
+            wid = getattr(self.df, "B%s" % b)
+            self.df.setWidget(wid, "disabled")
         col = ["mlt_trdt","mlt_refno","mlt_type","mlt_tramt","paid","balance"]
         whr = [
             ("mlt_cono", "=", self.opts["conum"]),

=== modified file 'mem/ml6020.py'
--- mem/ml6020.py	2017-02-25 14:03:05 +0000
+++ mem/ml6020.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Members Ledger Synchronise Access Control System.
@@ -26,7 +24,7 @@
             else:
                 self.doDialog()
                 self.opts["mf"].startLoop()
-                if not self.start is None:
+                if self.start is not None:
                     self.mainProcess()
 
     def setVariables(self):

=== modified file 'mem/ml6030.py'
--- mem/ml6030.py	2017-02-25 14:03:05 +0000
+++ mem/ml6030.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Export Access Control.
@@ -25,7 +23,7 @@
     def setVariables(self):
         mc = GetCtl(self.opts["mf"])
         memctl = mc.getCtl("memctl", self.opts["conum"])
-        if not memctl or not memctl["mcm_acs"] == "Y":
+        if not memctl or memctl["mcm_acs"] != "Y":
             return
         self.sql = Sql(self.opts["mf"].dbm, ["memmst"], prog=__name__)
         if self.sql.error:
@@ -40,7 +38,7 @@
                 acs = "N"
         else:
             acs = memctl["mcm_acs"]
-        if not acs == "Y":
+        if acs != "Y":
             return
         try:
             if self.opts["mf"].window:

=== modified file 'mem/mlc110.py'
--- mem/mlc110.py	2017-02-25 14:03:05 +0000
+++ mem/mlc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,8 +41,8 @@
         if not self.acc:
             self.new = True
             phd = os.path.join(self.opts["mf"].rcdic["prgdir"], "img")
-            self.acc = [self.opts["conum"], "N", 15, 0, phd, "N", "", "", "",
-                "", "", "", "member_cards", "", "statement_member"]
+            self.acc = [self.opts["conum"], "N", 15, 0, phd, "N", "", "",
+                "", "", "", "", "member_cards", "", "statement_member", ""]
         else:
             self.new = False
         if self.genleg:
@@ -140,7 +138,9 @@
             (("T",0,seq + 11,0),"INA",20,"Card Back Template","",
                 self.acc[13],"N",self.doCTpl,tpc,None,None),
             (("T",0,seq + 12,0),"INA",20,"Statement Template","",
-                self.acc[14],"N",self.doSTpl,tps,None,("notblank",))])
+                self.acc[14],"N",self.doSTpl,tps,None,("notblank",)),
+            (("T",0,seq + 13,0),"ITX",50,"Email Address","",
+                self.acc[15],"N",None,None,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
@@ -163,7 +163,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 5):
+            for x in xrange(1, 5):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk4"
 
@@ -185,7 +185,7 @@
     def doAccess(self, frt, pag, r, c, p, i, w):
         self.acs = w
         if self.acs == "N":
-            for x in range(1, 6):
+            for x in xrange(1, 6):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk5"
 
@@ -228,7 +228,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 5:
                 if x in (1, 3):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'mem/mlc210.py'
--- mem/mlc210.py	2017-02-25 14:03:05 +0000
+++ mem/mlc210.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Category Maintenance.

=== modified file 'mem/mlc310.py'
--- mem/mlc310.py	2017-02-25 14:03:05 +0000
+++ mem/mlc310.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Messages File Maintenance.

=== modified file 'mem/mlc410.py'
--- mem/mlc410.py	2017-02-25 14:03:05 +0000
+++ mem/mlc410.py	2017-06-27 09:48:17 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Contacts Maintenance.

=== modified file 'mem/mlm010.py'
--- mem/mlm010.py	2017-02-25 14:03:05 +0000
+++ mem/mlm010.py	2017-06-28 16:07:43 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Members Ledger Month End Routine.
@@ -35,9 +33,9 @@
         self.glint = memctl["mcm_glint"]
         self.ldays = memctl["mcm_ldays"]
         self.lme = memctl["mcm_lme"]
-        self.lmd = memctl["mcm_lme"] / 100
-        yr = self.lme / 10000
-        mth = ((self.lme / 100) % 100) + 1
+        self.lmd = int(memctl["mcm_lme"] / 100)
+        yr = int(self.lme / 10000)
+        mth = (int(self.lme / 100) % 100) + 1
         if mth > 12:
             yr += 1
             mth = 1
@@ -101,7 +99,7 @@
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Month-End Date, Out of Financial Period"
 
-        if w / 100 == self.opts["period"][2][0] / 100:
+        if int(w / 100) == int(self.opts["period"][2][0] / 100):
             ok = askQuestion(self.opts["mf"].body, "Year End",
                 "Is this the Financial Year End?", default="yes")
             if ok == "yes":
@@ -113,14 +111,14 @@
         if dateDiff(self.lme, w, "months") != 1:
             return "There Seems to be a Missing Month End"
         self.tme = w
-        self.curdt = w / 100
-        yy = self.curdt / 100
+        self.curdt = int(w / 100)
+        yy = int(self.curdt / 100)
         mm = (self.curdt % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
         self.nxtdt = (yy * 10000) + (mm * 100) + 1
-        self.nxtcd = self.nxtdt / 100
+        self.nxtcd = int(self.nxtdt / 100)
         self.batch = "M%06s" % self.curdt
         chk = self.sql.getRec(tables="memtrn", cols=["count(*)"],
             where=[("mlt_cono", "=", self.opts["conum"]), ("mlt_type", "=", 1),
@@ -347,7 +345,7 @@
     def doUpdateTables(self, ctyp, code, desc, glac, trdt, amt):
         self.refnum += 1
         ref = CCD("A%08i" % self.refnum, "Na", 9).work
-        curdt = trdt / 100
+        curdt = int(trdt / 100)
         # VAT Rate and Amount
         vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
         if vrte is None:

=== modified file 'men/bwlmen.py'
--- men/bwlmen.py	2017-02-25 14:03:05 +0000
+++ men/bwlmen.py	2017-07-18 09:16:29 +0000
@@ -29,8 +29,7 @@
 systems = [
     ["ms", "Control Routines"],
     ["bc", "Bowling Clubs"],
-    ["rp", "Reporting Tools"],
-    ["td", "Telephone Directory"]]
+    ["rp", "Reporting Tools"]]
 
 # Control Routines
 msmen = [
@@ -53,53 +52,43 @@
     ["PNNY","mm_ms","ms1010",5,"Club Master Record"],
     ["PNNN","mm_ms","ms3030",3,"Email Log Report"],
     ["PYNN","mm_uy","bm1010",3,"Bulk Mail/SMS Utility"],
-    ["PNNY","mm_uy","pm1010",0,"Password Manager"],
     ["PNNY","mm_uy","rp1010",2,"Report Generator"],
-    ["PNNN","mm_uy","tp1010",5,"Template Manager"],
     ["F","mm_hp","doAbout",0,"About"],
     ["F","mm_hp","doManual",0,"Manual"],
     ["F","mm_hp","doQuick",0,"Quick Start Guide"]]
 
 # Bowling Clubs
 bcmen = [
-    ["CM","mm_bc","bc_fm","File Maintenance"],
-    ["CM","mm_bc","bc_ti","Tabs Draw"],
-    ["CM","mm_bc","bc_ls","League Selections"],
-    ["CM","mm_bc","bc_cc","Club Competitions"],
+    ["CM","mm_bc","bc_ti","Tabs"],
+    ["CM","mm_bc","bc_ls","League"],
+    ["CM","mm_bc","bc_cc","Competitions"],
     ["CM","mm_bc","bc_tb","Toolbox"]]
 bcmod = [
-    ["PYNY","bc_fm","bcc110",0,"Control Record"],
-    ["PYNN","bc_fm","bcc210",0,"Club Records"],
-    ["PYNY","bc_fm","bc1010",0,"Tabs Maintenance"],
-    ["PYNN","bc_fm","bc1020",0,"League Formats"],
-    ["PYNN","bc_fm","bc1030",0,"Side's Maintenance"],
-    ["PYNN","bc_fm","bc1040",0,"Competition Types"],
-    ["PYNN","bc_ti","bc2010",0,"Draw"],
-    ["PYNN","bc_ti","bc3010",0,"Reprint Draw"],
-    ["PYNN","bc_ti","bc3020",0,"Draws Summary"],
-    ["PYNN","bc_ls","bc2020",0,"Capture Selections"],
-    ["PYNN","bc_ls","bc3030",0,"Assessment Forms"],
-    ["PYNN","bc_ls","bc3040",0,"Declaration Forms"],
-    ["PYNN","bc_ls","bc2030",0,"Capture Assessments"],
-    ["PYNN","bc_ls","bc3050",0,"Match Assessment Report"],
-    ["PYNN","bc_ls","bc3060",0,"Assessment Summary"],
-    ["PYNN","bc_cc","bc2040",0,"Capture Entries"],
-    ["PYNN","bc_cc","bc3070",0,"List Entries"],
-    ["PYNN","bc_cc","bc3080",0,"Competition Format"],
-    ["PYNN","bc_cc","bc2050",0,"Competiton Draw"],
-    ["PYNN","bc_cc","bc3090",0,"Draw Summary"],
-    ["PYNN","bc_cc","bc2060",0,"Change Draw"],
-    ["PYNN","bc_cc","bc2070",0,"Capture Game Results"],
-    ["PYNN","bc_cc","bc3100",0,"Match Results Report"],
-    ["PYNN","bc_cc","bc3110",0,"Contact Request Forms"],
+    ["PYNY","bc_ti","bcc110",5,"Control Record"],
+    ["PYNY","bc_ti","bc1010",3,"Tabs Maintenance"],
+    ["PYNN","bc_ti","bc2010",2,"Tabs-In Draw"],
+    ["PYNN","bc_ti","bc3010",1,"Reprint Draw"],
+    ["PYNN","bc_ti","bc3020",1,"Draws Summary"],
+    ["PYNN","bc_ls","bcc210",3,"Club Records"],
+    ["PYNN","bc_ls","bc1020",3,"League Formats"],
+    ["PYNN","bc_ls","bc1030",3,"Side's Maintenance"],
+    ["PYNN","bc_ls","bc2020",2,"Capture Selections"],
+    ["PYNN","bc_ls","bc3030",1,"Assessment Forms"],
+    ["PYNN","bc_ls","bc3040",1,"Declaration Forms"],
+    ["PYNN","bc_ls","bc2030",2,"Capture Assessments"],
+    ["PYNN","bc_ls","bc3050",1,"Match Assessment Report"],
+    ["PYNN","bc_ls","bc3060",1,"Assessment Summary"],
+    ["PYNN","bc_cc","bc1040",3,"Competition Types"],
+    ["PYNN","bc_cc","bc2040",2,"Capture Entries"],
+    ["PYNN","bc_cc","bc3070",1,"List Entries"],
+    ["PYNN","bc_cc","bc3080",1,"Competition Format"],
+    ["PYNN","bc_cc","bc2050",2,"Competiton Draw"],
+    ["PYNN","bc_cc","bc3090",1,"Draw Summary"],
+    ["PYNN","bc_cc","bc2060",2,"Change Draw"],
+    ["PYNN","bc_cc","bc2070",2,"Capture Game Results"],
+    ["PYNN","bc_cc","bc3100",1,"Match Results Report"],
+    ["PYNN","bc_cc","bc3110",1,"Contact Request Forms"],
     ["PYNN","bc_tb","bc6010",3,"Change Tab Numbers"],
-    ["PYNN","bc_tb","bc6020",0,"Merge Duplicate Visitors"],
-    ["PYNN","bc_tb","bc6030",0,"Clear History"]]
-
-# Telephone Directory
-tdmen = [
-    ["CM","mm_uy","td_mm","Telephone Directory"]]
-tdmod = [
-    ["PNNY","td_mm","tdc110",0,"Directory Groups"],
-    ["PNNY","td_mm","td1010",0,"Directory Entries"]]
+    ["PYNN","bc_tb","bc6020",3,"Delete Visitors' Tabs"],
+    ["PYNN","bc_tb","bc6030",3,"Clear History"]]
 # End

=== modified file 'men/stdmen.py'
--- men/stdmen.py	2017-03-25 15:17:51 +0000
+++ men/stdmen.py	2017-06-23 16:45:51 +0000
@@ -58,8 +58,8 @@
     ["MM","mm_bk","Bookings Manager"],
     ["MM","mm_ln","Loan's Ledger"],
     ["MM","mm_ml","Member's Ledger"],
-    ["MM","mm_rt","Rental's Ledger"],
-    ["MM","mm_rc","Rental's Ledger"],
+    ["MM","mm_rt","Rental(B) Ledger"],
+    ["MM","mm_rc","Rental(E) Ledger"],
     ["MM","mm_wg","Salaries & Wages"],
     ["MM","mm_sl","Staff Loans"],
     ["MM","mm_bc","Bowling Clubs"],
@@ -476,39 +476,38 @@
 
 # Bowling Clubs
 bcmen = [
-    ["CM","mm_bc","bc_fm","File Maintenance"],
-    ["CM","mm_bc","bc_ti","Tabs Draw"],
-    ["CM","mm_bc","bc_ls","League Selections"],
-    ["CM","mm_bc","bc_cc","Club Competitions"],
+    ["CM","mm_bc","bc_ti","Tabs"],
+    ["CM","mm_bc","bc_ls","League"],
+    ["CM","mm_bc","bc_cc","Competitions"],
     ["CM","mm_bc","bc_tb","Toolbox"]]
 bcmod = [
-    ["PYNY","bc_fm","bcc110",0,"Control Record"],
-    ["PYNN","bc_fm","bcc210",0,"Club's Records"],
-    ["PYNY","bc_fm","bc1010",0,"Tabs Maintenance"],
-    ["PYNN","bc_fm","bc1020",0,"League Formats"],
-    ["PYNN","bc_fm","bc1030",0,"Side's Maintenance"],
-    ["PYNN","bc_fm","bc1040",0,"Competition Types"],
-    ["PYNN","bc_ti","bc2010",0,"Draw"],
-    ["PYNN","bc_ti","bc3010",0,"Reprint Draw"],
-    ["PYNN","bc_ti","bc3020",0,"Draws Summary"],
-    ["PYNN","bc_ls","bc2020",0,"Capture Selections"],
-    ["PYNN","bc_ls","bc3030",0,"Assessment Forms"],
-    ["PYNN","bc_ls","bc3040",0,"Declaration Forms"],
-    ["PYNN","bc_ls","bc2030",0,"Capture Assessments"],
-    ["PYNN","bc_ls","bc3050",0,"Match Assessment Report"],
-    ["PYNN","bc_ls","bc3060",0,"Assessment Summary"],
-    ["PYNN","bc_cc","bc2040",0,"Capture Entries"],
-    ["PYNN","bc_cc","bc3070",0,"List Entries"],
-    ["PYNN","bc_cc","bc3080",0,"Competition Format"],
-    ["PYNN","bc_cc","bc2050",0,"Competiton Draw"],
-    ["PYNN","bc_cc","bc3090",0,"Draw Summary"],
-    ["PYNN","bc_cc","bc2060",0,"Change Draw"],
-    ["PYNN","bc_cc","bc2070",0,"Capture Game Results"],
-    ["PYNN","bc_cc","bc3100",0,"Match Results Report"],
-    ["PYNN","bc_cc","bc3110",0,"Contact Request Forms"],
+    ["PYNY","bc_ti","bcc110",5,"Control Record"],
+    ["PYNY","bc_ti","bc1010",3,"Tabs Maintenance"],
+    ["PYNN","bc_ti","bc2010",2,"Tabs-In Draw"],
+    ["PYNN","bc_ti","bc3010",1,"Reprint Draw"],
+    ["PYNN","bc_ti","bc3020",1,"Draws Summary"],
+    ["PYNN","bc_ls","bcc210",3,"Club's Records"],
+    ["PYNN","bc_ls","bc1020",3,"League Formats"],
+    ["PYNN","bc_ls","bc1030",3,"Side's Maintenance"],
+    ["PYNN","bc_ls","bc2020",2,"Capture Selections"],
+    ["PYNN","bc_ls","bc3030",1,"Assessment Forms"],
+    ["PYNN","bc_ls","bc3040",1,"Declaration Forms"],
+    ["PYNN","bc_ls","bc2030",2,"Capture Assessments"],
+    ["PYNN","bc_ls","bc3050",1,"Match Assessment Report"],
+    ["PYNN","bc_ls","bc3060",1,"Assessment Summary"],
+    ["PYNN","bc_cc","bc1040",3,"Competition Types"],
+    ["PYNN","bc_cc","bc2040",2,"Capture Entries"],
+    ["PYNN","bc_cc","bc3070",1,"List Entries"],
+    ["PYNN","bc_cc","bc3080",1,"Competition Format"],
+    ["PYNN","bc_cc","bc2050",2,"Competiton Draw"],
+    ["PYNN","bc_cc","bc3090",1,"Draw Summary"],
+    ["PYNN","bc_cc","bc2060",2,"Change Draw"],
+    ["PYNN","bc_cc","bc2070",2,"Capture Game Results"],
+    ["PYNN","bc_cc","bc3100",1,"Match Results Report"],
+    ["PYNN","bc_cc","bc3110",1,"Contact Request Forms"],
     ["PYNN","bc_tb","bc6010",3,"Change Tab Numbers"],
-    ["PYNN","bc_tb","bc6020",0,"Merge Duplicate Visitors"],
-    ["PYNN","bc_tb","bc6030",0,"Clear History"]]
+    ["PYNN","bc_tb","bc6020",3,"Delete Visitors' Tabs"],
+    ["PYNN","bc_tb","bc6030",3,"Clear History"]]
 
 # Telephone Directory
 tdmen = [

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2017-03-25 15:17:51 +0000
+++ mst/ms0000.py	2017-08-24 07:49:09 +0000
@@ -19,14 +19,14 @@
 if ppath:
     if os.path.basename(ppath) == "library.zip":
         ppath = os.path.normpath(os.path.dirname(ppath))
-    if not ppath in os.environ["PATH"].split(os.pathsep):
-        envpath = u"%s%s%s" % (os.environ["PATH"], os.pathsep, ppath)
-        os.environ["PATH"] = envpath
+    if ppath not in os.environ["PATH"].split(os.pathsep):
+        epath = u"%s%s%s" % (os.environ["PATH"], os.pathsep, ppath)
+        os.environ["PATH"] = epath
         if sys.platform == "win32":
             try:
-                import _winreg as winreg
+                import winreg
                 key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, "Environment")
-                winreg.SetValueEx(key, "PATH", 0, winreg.REG_EXPAND_SZ, envpath)
+                winreg.SetValueEx(key, "PATH", 0, winreg.REG_EXPAND_SZ, epath)
             except:
                 pass
 # Ubuntu Unity uses the Global Menu which breaks Tartan's Menu
@@ -38,17 +38,17 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2]))
 else:
-    VERSION = (5, 3, 0)
+    VERSION = (5, 3, 1)
 if __name__ == "__main__":
     # Run Tartan
     try:
         opts, args = getopt.getopt(
             sys.argv[1:],
             "b:c:de:f:hilm:nop:q:R:r:s:t:u:vxy:z", [
-            "bpwd=", "conum=", "debug", "exclude=", "finper=", "help",
-            "image", "loader", "menu=", "nocheck", "output", "program=",
-            "query=", "rcfdir=", "rcfile=", "script=", "sysmod=", "tcode=",
-            "user=", "version", "xdisplay", "yndfinal=", "zerobar"])
+                "bpwd=", "conum=", "debug", "exclude=", "finper=", "help",
+                "image", "loader", "menu=", "nocheck", "output", "program=",
+                "query=", "rcfdir=", "rcfile=", "script=", "sysmod=", "tcode=",
+                "user=", "version", "xdisplay", "yndfinal=", "zerobar"])
     except:
         opts, args = [("-h", "")], []
     import msc000

=== modified file 'mst/ms1010.py'
--- mst/ms1010.py	2017-02-25 14:03:05 +0000
+++ mst/ms1010.py	2017-06-28 16:09:31 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Create and maintain company records.
@@ -161,7 +159,7 @@
     def doCoyNum(self, frt, pag, r, c, p, i, w):
         if w == 0:
             return "Invalid Company Number"
-        elif not w == 1:
+        elif w != 1:
             chk = self.sql.getRec(tables="ctlmst", where=[("ctm_cono", "=", 1)],
                 limit=1)
             if not chk:
@@ -270,12 +268,7 @@
                     return "Invalid Code"
 
     def doSys(self, frt, pag, r, c, p, i, w):
-        if self.sys[i] == "RT" and w == "Y":
-            self.df.loadEntry(frt, pag, p+1, data="N")
-            return "sk1"
-        elif self.sys[i] == "RC" and w == "Y":
-            self.df.loadEntry(frt, pag, p-1, data="N")
-        elif self.sys[i] == "SL" and w == "Y":
+        if self.sys[i] == "SL" and w == "Y":
             self.df.loadEntry(frt, pag, p-1, data="Y")
 
     def doLogo(self, frt, pag, r, c, p, i, w):
@@ -340,7 +333,7 @@
                             "%03i" % self.opts["conum"],
                             self.sql.ctlmst_col[num], dte, self.opts["capnm"],
                             str(dat), str(data[num]), 0])
-            if not mods == "BC":
+            if mods != "BC":
                 # Not Only Bowls System
                 fin = self.sql.getRec(tables="ctlynd", cols=["count(*)"],
                     where=[("cye_cono", "=", self.opts["conum"])], limit=1)
@@ -375,8 +368,8 @@
         self.opts["mf"].head.configure(text=self.tit[0])
 
     def doStartPer(self, frt, pag, r, c, p, i, w):
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29
@@ -386,7 +379,7 @@
             d = w % 100
         self.s0 = (y*10000) + (m*100) + d
         self.s1 = w
-        y = (w / 10000) + 1
+        y = int(w / 10000) + 1
         m -= 1
         if not m:
             m = 12
@@ -396,8 +389,8 @@
     def doEndPer(self, frt, pag, r, c, p, i, w):
         if w <= self.s1:
             return "Invalid End Period"
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29

=== modified file 'mst/ms1010_oth.py'
--- mst/ms1010_oth.py	2017-02-25 14:03:05 +0000
+++ mst/ms1010_oth.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Bowl's Clubs and Sectional Competitions Master Record Maintenance.

=== modified file 'mst/ms1010_rne.py'
--- mst/ms1010_rne.py	2017-03-25 15:17:51 +0000
+++ mst/ms1010_rne.py	2017-06-28 16:10:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Create and maintain company records.
@@ -149,7 +147,7 @@
     def doCoyNum(self, frt, pag, r, c, p, i, w):
         if w == 0:
             return "Invalid Company Number"
-        elif not w == 1:
+        elif w != 1:
             chk = self.sql.getRec(tables="ctlmst", where=[("ctm_cono", "=", 1)],
                 limit=1)
             if not chk:
@@ -337,7 +335,7 @@
 
     def doFinPeriod(self):
         tit = ("Initial Financial Period",)
-        if self.new and not self.opts["conum"] == 1:
+        if self.new and self.opts["conum"] != 1:
             self.bye = self.sql.getRec(tables="ctlynd", cols=["cye_start",
                 "cye_end"], where=[("cye_cono", "=", 1),
                 ("cye_period", "=", 1)], limit=1)
@@ -362,8 +360,8 @@
         self.opts["mf"].head.configure(text=self.tit[0])
 
     def doStartPer(self, frt, pag, r, c, p, i, w):
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29
@@ -373,7 +371,7 @@
             d = w % 100
         self.s0 = (y*10000) + (m*100) + d
         self.s1 = w
-        y = (w / 10000) + 1
+        y = int(w / 10000) + 1
         m -= 1
         if not m:
             m = 12
@@ -384,8 +382,8 @@
     def doEndPer(self, frt, pag, r, c, p, i, w):
         if w <= self.s1:
             return "Invalid End Period"
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29

=== modified file 'mst/ms1020.py'
--- mst/ms1020.py	2017-02-25 14:03:05 +0000
+++ mst/ms1020.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Create and maintain department records.

=== modified file 'mst/ms1030.py'
--- mst/ms1030.py	2017-02-25 14:03:05 +0000
+++ mst/ms1030.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Module Passwords Maintenance.

=== modified file 'mst/ms1040.py'
--- mst/ms1040.py	2017-02-25 14:03:05 +0000
+++ mst/ms1040.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Value Added Tax Records Maintenance.
@@ -149,7 +147,7 @@
         if not w:
             yes = askQuestion(self.opts["mf"].body, "Zero Rate",
                 "Are You Sure That This Rate is Correct?", default="no")
-            if not yes == "yes":
+            if yes != "yes":
                 return "Invalid Rate"
 
     def doDelete(self):
@@ -236,13 +234,17 @@
 
     def doExit(self, widget=None):
         chks = ""
-        recs = self.sql.getRec(tables="ctlvmf", cols=["vtm_code", "vtm_desc"],
-            where=[("vtm_cono", "=", self.opts["conum"])])
+        recs = self.sql.getRec(tables="ctlvmf", where=[("vtm_cono", "=",
+            self.opts["conum"])])
         for rec in recs:
             rte = self.sql.getRec(tables="ctlvrf", where=[("vtr_cono",
-            "=", self.opts["conum"]), ("vtr_code", "=", rec[0])])
+            "=", self.opts["conum"]), ("vtr_code", "=", rec[1])])
             if not rte:
-                chks = "%s\n%s %s" % (chks, rec[0], rec[1])
+                if rec[3] == "N":
+                    self.sql.insRec("ctlvrf", data=[rec[0], rec[1], 0, 0])
+                    self.opts["mf"].dbm.commitDbase()
+                    continue
+                chks = "%s\n%s %s" % (chks, rec[0], rec[2])
         if chks:
             showError(self.opts["mf"].body, "Missing Rate Record", "The "\
                 "following VAT Codes do not have Rate Records:\n%s" % chks)

=== modified file 'mst/ms3010.py'
--- mst/ms3010.py	2017-02-25 14:03:05 +0000
+++ mst/ms3010.py	2017-06-28 16:14:43 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Value Added Tax Report.
@@ -162,7 +160,7 @@
             where=[("cye_cono", "=", self.opts["conum"])])
         self.start = 0
         for c in chk:
-            if self.eper >= c[0] / 100 and self.eper <= c[1] / 100:
+            if self.eper >= int(c[0] / 100) and int(self.eper <= c[1] / 100):
                 self.start = c[0]
         if not self.start:
             return "Invalid Ending Period"
@@ -198,11 +196,8 @@
         else:
             self.df.setWidget(self.df.topEntry[0][8][3][0], state="show")
             self.df.setWidget(self.df.topEntry[0][8][4][0], state="show")
-        if self.sper or not\
-           self.cat in ("A", "B") or \
-           self.code or \
-           self.system or \
-           self.totsonly == "Y":
+        if self.sper or self.cat not in ("A", "B") or self.code or \
+                                self.system or self.totsonly == "Y":
             self.flag = "N"
             return "sk2"
 
@@ -395,8 +390,8 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
                 repeml=self.df.repeml)
 
     def getValues1(self, data):
@@ -589,7 +584,8 @@
         o = self.sql.getRec(tables="gentrn",
             cols=["round(sum(glt_tramt), 2)"], where=[("glt_cono", "=",
             self.opts["conum"]), ("glt_acno", "=", self.convat), ("glt_curdt",
-            ">=", self.start / 100), ("glt_curdt", "<=", self.eper)], limit=1)
+            ">=", int(self.start / 100)), ("glt_curdt", "<=", self.eper)],
+            limit=1)
         if o and o[0]:
             b = CCD(float(o[0]), "SD", 13.2)
         else:

=== modified file 'mst/ms3020.py'
--- mst/ms3020.py	2017-02-25 14:03:05 +0000
+++ mst/ms3020.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Module Passwords Listing.
@@ -33,7 +31,7 @@
     def mainProcess(self):
         tit = ("Module Passwords Listing",)
         data = [["ALL", "All Systems"]]
-        syss = finsys.keys()
+        syss = list(finsys.keys())
         syss.sort()
         for s in syss:
             data.append((s, finsys[s][0]))

=== modified file 'mst/ms3030.py'
--- mst/ms3030.py	2017-02-25 14:03:05 +0000
+++ mst/ms3030.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Email Log.

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2017-03-25 15:17:51 +0000
+++ mst/msc000.py	2017-07-27 12:02:08 +0000
@@ -1,7 +1,5 @@
 """
 SYNOPSIS
-    These are various classes used in TARTAN.
-
     This file is part of Tartan Systems (TARTAN).
 
 AUTHOR
@@ -11,16 +9,16 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-import cStringIO, fpdf, getpass, gc, glob, os, sys, time, urllib2
+import cStringIO, fpdf, getpass, gc, glob, os, platform, sys, time
 from TartanClasses import AboutTartan, CCD, Dbase, DBCreate, FileDialog
 from TartanClasses import GetCtl, GUI, MainFrame, MkWindow, PwdConfirm
 from TartanClasses import ScrollText, SelectChoice, SplashScreen, Sql
 from TartanClasses import TarBckRes, TartanConfig, TartanDialog, TartanMenu
 from TartanClasses import TartanUser
-from tartanFunctions import askQuestion, b64Convert, dateDiff, ftpDownload
-from tartanFunctions import getPeriods, getPrgPath, copyList, loadRcFile
-from tartanFunctions import parsePrg, projectDate, runModule, sendMail
-from tartanFunctions import showError, showException
+from tartanFunctions import askQuestion, b64Convert, copyList, dateDiff
+from tartanFunctions import ftpDownload, getPeriods, getPrgPath
+from tartanFunctions import internetConnect, loadRcFile, parsePrg, projectDate
+from tartanFunctions import runModule, sendMail, showError, showException
 
 class msc000:
     def __init__(self, version, opts, args):
@@ -133,14 +131,19 @@
                 try:
                     if not os.path.exists(self.stdout):
                         sys.stdout = open(self.stdout, "w")
+                        os.chmod(self.stdout, 0777)
                         break
                 except:
                     pass
         if self.script:
-            __import__(self.script)
+            if os.sep in self.script or self.script.count(".py"):
+                import imp
+                imp.load_source(os.path.basename(self.script), self.script)
+            else:
+                __import__(self.script)
             self.doExit(dbm=False)
         if self.help:
-            print """
+            print("""
 Usage:      python ms0000.py [options]
 
 Options:
@@ -167,71 +170,73 @@
             -v, --version           Display Version Details
             -x, --xdisplay          Do not have a mainframe with -ptarBck
             -z, --zerobar           Do not have a progressbar with -ptarBck
-"""
+""")
             self.doExit(dbm=False)
         if not self.version and not self.xdisplay:
             nodisp = ("tarBck", "tarUpd", "ml6030")
-            if not self.query and not self.program in nodisp:
-                print "xdisplay False but program not in %s" % str(nodisp)
+            if not self.query and self.program not in nodisp:
+                print("xdisplay False but program not in %s" % str(nodisp))
                 self.doExit(dbm=False)
             elif not self.user:
-                print "xdisplay False but No User Name"
+                print("xdisplay False but No User Name")
                 self.doExit(dbm=False)
         if not self.version and self.xdisplay and not GUI:
-            print "Tkinter/ttk not Available or Installed"
+            print("Tkinter/ttk not Available or Installed")
             self.doExit(dbm=False)
         if self.version:
-            print "%-16sVersion: %s" % ("Tartan", self.current[1])
-            print "%-16sVersion: %s" % ("Python", sys.version.split()[0])
+            nm = platform.uname()
+            print("%-16s: %s, %s, %s" % ("O/System", nm[0], nm[2], nm[4]))
+            print("%-16s: %s" % ("Tartan", self.current[1]))
+            print("%-16s: %s" % ("Python", sys.version.split()[0]))
             if self.xdisplay:
                 from TartanClasses import tk
                 from PIL import VERSION
-                print "%-16sVersion: %s" % ("Tcl/Tk",
-                        tk.Tcl().eval("info patchlevel"))
-                print "%-16sVersion: %s" % ("PIL", VERSION)
+                print("%-16s: %s" % ("Tcl/Tk",
+                        tk.Tcl().eval("info patchlevel")))
+                print("%-16s: %s" % ("PIL", VERSION))
             try:
                 import fdb
-                print "%-16sVersion: %s" % ("FDB", fdb.__version__)
+                print("%-16s: %s" % ("FDB", fdb.__version__))
             except:
                 pass
             try:
                 import MySQLdb
-                print "%-16sVersion: %s" % ("MySQLdb", MySQLdb.__version__)
+                print("%-16s: %s" % ("MySQLdb", MySQLdb.__version__))
             except:
                 try:
                     import pymysql
-                    print "%-16sVersion: %s" % ("Pymysql", pymysql.__version__)
+                    print("%-16s: %s" % ("Pymysql", pymysql.__version__))
                 except:
                     pass
             try:
                 import psycopg2
-                print "%-16sVersion: %s" % ("Psycopg2",
-                        psycopg2.__version__.split()[0])
+                print("%-16s: %s" % ("Psycopg2",
+                        psycopg2.__version__.split()[0]))
             except:
                 pass
             try:
                 import pychart.version
-                print "%-16sVersion: %s" % ("Pychart", pychart.version.version)
+                print("%-16s: %s" % ("Pychart", pychart.version.version))
             except:
                 pass
             try:
                 import sqlite3
-                print "%-16sVersion: %s" % ("Pysqlite", sqlite3.version)
-                print "%-16sVersion: %s" % ("Sqlite3", sqlite3.sqlite_version)
+                print("%-16s: %s" % ("Pysqlite", sqlite3.version))
+                print("%-16s: %s" % ("Sqlite3", sqlite3.sqlite_version))
             except:
                 pass
             try:
-                print "%-16sVersion: %s" % ("Fpdf", fpdf.__version__)
+                print("%-16s: %s" % ("Fpdf", fpdf.__version__))
             except:
                 pass
             try:
                 import xlrd
-                print "%-16sVersion: %s" % ("Xlrd", xlrd.info.__VERSION__)
+                print("%-16s: %s" % ("Xlrd", xlrd.info.__VERSION__))
             except:
                 pass
             try:
                 import xlwt
-                print "%-16sVersion: %s" % ("Xlwt", xlwt.__VERSION__)
+                print("%-16s: %s" % ("Xlwt", xlwt.__VERSION__))
             except:
                 pass
             self.doExit(dbm=False)
@@ -259,8 +264,7 @@
                 self.doExit(dbm=False)
             icon = os.path.join(getPrgPath(), "img", "tartan.png")
             scrn = MkWindow(tk=True, icon=icon).newwin
-            dialog = FileDialog(**{"parent": scrn,
-                "initd": self.rcfdir})
+            dialog = FileDialog(**{"parent": scrn, "initd": self.rcfdir})
             self.rcfile = dialog.askopenfilename()
             scrn.destroy()
             if not self.rcfile:
@@ -304,7 +308,7 @@
             self.doExit(dbm=False)
         self.mf.dbm = self.db
         err = self.db.checkDbase()
-        if not err in (True, False):
+        if err not in (True, False):
             self.doExit()
         elif err is False:
             ok = askQuestion(self.mf.window, "Database",
@@ -343,7 +347,7 @@
             self.userReadCheck(user=self.user["name"], pwd=self.user["pwd"])
         if not self.user:
             self.doExit()
-        if not self.program or not self.program == "tarUpd":
+        if not self.program or self.program != "tarUpd":
             # Check tartan version
             self.db.openDbase()
             self.doVersionCheck()
@@ -362,7 +366,7 @@
                     showError(self.mf.body, "Data Base Error",
                         "\nDbCommand Error: %s\n" % err)
                 else:
-                    print "Data Base Error", "DbCommand Error: %s\n" % err
+                    print("Data Base Error", "DbCommand Error: %s\n" % err)
             self.doExit()
         if self.program:
             mods = copyList(self.usrmod)
@@ -414,8 +418,8 @@
         for s in stdmen.systems:
             self.sss[s[0]] = s[1]
             try:
-                exec "self.men.extend(stdmen.%2smen)" % s[0]
-                exec "self.mod.extend(stdmen.%2smod)" % s[0]
+                self.men.extend(getattr(stdmen, "%2smen" % s[0]))
+                self.mod.extend(getattr(stdmen, "%2smod" % s[0]))
             except:
                 pass
         t = time.localtime()
@@ -545,7 +549,7 @@
                     ("mpw_prg", "=", "")])
                 if tmp:
                     for s in tmp:
-                        if not s in nos:
+                        if s not in nos:
                             nos.append(s[0])
                 # All modules excluded for the user - nop
                 nop = sql.getRec(tables="ctlpwm", cols=["mpw_sys", "mpw_prg"],
@@ -636,7 +640,7 @@
     def execCommand(self, typ, prg, tit="", rtn=None, menu=True, password=True):
         if menu:
             self.tarmen.closeMenu()
-        if not prg in ("sysUpd", "sysEnd"):
+        if prg not in ("sysUpd", "sysEnd"):
             if prg == "tarUpd":
                 vtype = "upd"
             else:
@@ -655,7 +659,7 @@
         else:
             dbopend = False
         if password and self.getCtlSys(["sys_pwmust"]) == "Y" and not \
-                self.user["pwd"] and not prg in ("chgPwd", "chgUsr", "sysEnd"):
+                self.user["pwd"] and prg not in ("chgPwd", "chgUsr", "sysEnd"):
             showError(self.mf.window, "Missing Password",
                 """Passwords are Enforced.
 
@@ -728,7 +732,7 @@
                             self.getCompany(prg=prg, period=False)
                         if not self.conum:
                             error = True
-                    if mcoy and not self.conum == mcoy:
+                    if mcoy and self.conum != mcoy:
                         showError(self.mf.body, "Company Error",
                             "This Company, Module Combination "\
                             "is Not Allowed for This User")
@@ -753,12 +757,12 @@
                     self.tracer.runfunc(self.doRunModule, prg, **popt)
                 else:
                     self.doRunModule(prg, **popt)
-        try:
-            # Rollback any uncommitted transactions
-            self.db.rollbackDbase()
-        except:
-            pass
         if dbopend:
+            try:
+                # Rollback any uncommitted transactions
+                self.db.rollbackDbase()
+            except:
+                pass
             # Close the database
             self.db.closeDbase()
         if menu:
@@ -818,7 +822,7 @@
         mod = prg[:2].upper()
         if mod in ("BM", "CA", "MS", "RP", "TD"):
             return
-        for x in range(0, len(self.modul), 2):
+        for x in xrange(0, len(self.modul), 2):
             if self.modul[x:x + 2] == mod:
                 return
         return "System (%s) Not Enabled for Company %s" % (mod, self.conum)
@@ -1152,7 +1156,7 @@
         self.new = w
 
     def doNewP2(self, frt, pag, r, c, p, i, w):
-        if not w == self.new:
+        if w != self.new:
             return "Invalid New Password"
         self.pwd = b64Convert("encode", w)
 
@@ -1186,7 +1190,7 @@
     def tarUsr(self):
         sss = []
         prg = {}
-        keys = self.sss.keys()
+        keys = list(self.sss.keys())
         keys.sort()
         for s in keys:
             sm = []
@@ -1220,13 +1224,15 @@
         self.updtyp = w
         sql = Sql(self.db, "ctlmst", prog="msc000")
         chk = sql.getRec(tables="ctlmst", cols=["ctm_modules"],
-            where=[("ctm_cono", "=", 1)], limit=1)
-        if chk == ["BC"]:
-            self.upgsys = "Bwlclb"
-        elif chk == ["SC"]:
-            self.upgsys = "Seccmp"
-        else:
-            self.upgsys = "Tartan"
+            group="ctm_modules")
+        self.upgsys = ""
+        for mod in chk:
+            if mod == ["BC"] and self.upgsys is not "Tartan":
+                self.upgsys = "Bwlclb"
+            elif mod == ["SC"] and self.upgsys is not "Tartan":
+                self.upgsys = "Seccmp"
+            else:
+                self.upgsys = "Tartan"
         if self.updtyp == "I":
             err = self.doSysChkUpgrade()
             if err:
@@ -1236,13 +1242,18 @@
                 self.su.loadEntry("T", 0, 1, data=self.current[1])
                 self.su.loadEntry("T", 0, 2, data=self.nvtxt)
                 return
+        self.su.setWidget(self.su.mstFrame, "hide")
         if sys.platform == "win32":
             ftype = [("Upgrade Files", "%s_5.*.exe" % self.upgsys)]
         else:
             ftype = [("Upgrade Files", "%s_5.*.tgz" % self.upgsys)]
-        dialog = FileDialog(**{"title": "Select Upgrade File",
-            "initd": self.rcdic["upgdir"], "ftype": ftype})
+        dialog = FileDialog(**{
+            "parent": self.mf.body,
+            "title": "Select Upgrade File",
+            "initd": self.rcdic["upgdir"],
+            "ftype": ftype})
         self.updfle = dialog.askopenfilename()
+        self.su.setWidget(self.su.mstFrame, "show")
         if not self.updfle:
             return "Invalid File"
         self.su.loadEntry("T", 0, 1, data=self.current[1])
@@ -1270,9 +1281,9 @@
             if err or not self.email:
                 self.email = "info@tartan.co.za"
             flenam = cStringIO.StringIO()
-            error = ftpDownload("192.168.1.250", "current", word=self.email,
-                dest=flenam, close=False)
-            if error:
+            err = ftpDownload("tartan.co.za", "current",
+                word=self.email, dest=flenam)
+            if err:
                 raise Exception
             v = flenam.getvalue()
             flenam.close()
@@ -1311,7 +1322,7 @@
                                  or
 
   1) If you are running Windows the downloaded file will be in your
-     'C:\Tartan\upg' directory. The file's name will be something like
+     'C:\\Tartan\\upg' directory. The file's name will be something like
      '%s_5.x.x.exe'.
   2) Restart Tartan.
   3) Execute the 'Update File Formats' routine on the 'System' menu.
@@ -1322,14 +1333,15 @@
         try:
             if self.updtyp == "I":
                 if sys.platform == "win32":
-                    ext = "exe"
+                    nam = self.upgsys + "_%s.%s.%s_upd" % self.newver + ".exe"
+                    if not ftpDownload("tartan.co.za", nam, check=True):
+                        nam = self.upgsys + "_%s.%s.%s" % self.newver + ".exe"
                 else:
-                    ext = "tgz"
-                nam = self.upgsys + "_%s.%s.%s" % self.newver + ".%s" % ext
+                    nam = self.upgsys + "_%s.%s.%s" % self.newver + ".tgz"
                 fle = os.path.join(self.mf.rcdic["upgdir"], nam)
-                error = ftpDownload("192.168.1.250", nam, word=self.email,
-                    dest=fle)
-                if error:
+                err = ftpDownload("tartan.co.za", nam, word=self.email,
+                    dest=fle, close=True)
+                if err:
                     raise Exception
             else:
                 fle = self.updfle
@@ -1358,7 +1370,7 @@
                     "Have You Backed Up the Database?", default="no")
             else:
                 ok = raw_input("Have You Backed Up the Database? (yes/no) ")
-            if not ok == "yes":
+            if ok != "yes":
                 return
         else:
             if self.xdisplay:
@@ -1385,11 +1397,9 @@
     def doAskRegister(self):
         if not self.xdisplay:
             return
-        try:
-            urllib2.urlopen("http://tartan.co.za", timeout=5)
-        except:
+        if not internetConnect():
             return
-        tit = ("User Registration",)
+        tit = ("Registration to Receive Notification of Updates",)
         r1s = (("Yes","Y"), ("Not-Now","N"), ("Never","X"))
         fld = (
             (("T",0,0,0),("IRB",r1s),0,"Register","",
@@ -1424,7 +1434,7 @@
             nam = "Unknown"
             eml = coy[1]
         mes = "%s - %s - %s" % (coy[0], nam, eml)
-        svr = ["smtp.gmail.com", 587, 1, 1, "tartansys@gmail.com", "tarpwd99"]
+        svr = ["smtp.gmail.com", 587, 1, 1, "tartansys@gmail.com", "tarpwd01"]
         ok = sendMail(svr, eml, "register@tartan.co.za", mes)
         if ok or self.newreg == "X":
             sql = Sql(self.db, "ctlsys", prog="msc000")
@@ -1581,14 +1591,15 @@
             exe, cmd = parsePrg(self.rcdic["vwr"])
             cmd.append(pdf)
             os.spawnv(os.P_NOWAIT, exe, tuple(cmd))
-        else:
+        elif internetConnect():
             try:
                 import webbrowser
                 web = "http://tartan.co.za/cgi-bin/simple_web.py/%s" % doc
-                urllib2.urlopen(urllib2.Request(web))
                 webbrowser.open(web)
             except:
                 showError(self.mf.window, "Error", "Browser Not Found.")
+        else:
+            showError(self.mf.window, "Error", "No Internet Connection.")
 
     def doHousekeeping(self):
         fles = []
@@ -1631,12 +1642,12 @@
                         if self.xdisplay:
                             ScrollText(title="Trace Output", mess=mess)
                         else:
-                            print "Trace Output: ", mess
+                            print("Trace Output: ", mess)
                     else:
                         if self.xdisplay:
                             ScrollText(title="Standard Output", mess=mess)
                         else:
-                            print "Standard Output: ", mess
+                            print("Standard Output: ", mess)
                 # Housekeeping
                 for pid in xrange(1000):
                     try:
@@ -1754,7 +1765,7 @@
                             self.mf.head.configure(text="SQL Query")
                             ScrollText(scrn=self.mf.body, mess=mess)
                         else:
-                            print mess
+                            print(mess)
                     else:
                         sq.sqlRec(line)
             except:

=== modified file 'mst/msc110.py'
--- mst/msc110.py	2017-02-25 14:03:05 +0000
+++ mst/msc110.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     System Control Record Maintenance.

=== modified file 'mst/msy010.py'
--- mst/msy010.py	2017-02-25 14:03:05 +0000
+++ mst/msy010.py	2017-06-28 16:17:06 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Financial Year End routine.
@@ -76,14 +74,14 @@
         self.c_per = int(self.opts["period"][0])
         self.start = self.opts["period"][1][0]
         self.end = self.opts["period"][2][0]
-        self.cur = self.opts["period"][2][0] / 100
+        self.cur = int(self.opts["period"][2][0] / 100)
         self.l_per = self.sql.getRec(tables="ctlynd", cols=["max(cye_period)"],
             where=[("cye_cono", "=", self.opts["conum"])], limit=1)[0]
         self.last, self.oldf = self.sql.getRec(tables="ctlynd",
             cols=["cye_last", "cye_final"], where=[("cye_cono", "=",
             self.opts["conum"]), ("cye_period", "=", self.opts["period"][0])],
             limit=1)[:2]
-        if self.oldf == "Y" and not "args" in self.opts:
+        if self.oldf == "Y" and "args" not in self.opts:
             cf = PwdConfirm(self.opts["mf"], conum=0, system="MST",
                 code="YearEnd")
             if cf.pwd and cf.flag == "ok":
@@ -114,7 +112,7 @@
         if w <= self.start:
             return "Invalid Year End Date"
         self.end = w
-        self.cur = w / 100
+        self.cur = int(w / 100)
 
     def doFinal(self, frt, pag, r, c, p, i, w):
         if w == "Y":
@@ -155,25 +153,25 @@
         self.final = w
 
     def doEnd(self):
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.df.closeProcess()
             pb = ProgressBar(self.opts["mf"].body,
                 typ=("G", "Processing Periods"))
         for per in xrange(0, self.c_per + 1):
-            if not "args" in self.opts:
+            if "args" not in self.opts:
                 pb.displayProgress()
             chk = self.sql.getRec(tables="ctlynd", cols=["cye_final"],
                 where=[("cye_cono", "=", self.opts["conum"]), ("cye_period",
                 "=", per)], limit=1)
-            if self.oldf == "Y" or not chk[0] == "Y":
+            if self.oldf == "Y" or chk[0] != "Y":
                 self.retinc = 0
                 self.doYearEnd(per)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             pb.closeProgress()
         if self.years:
             self.doDropYears()
         self.opts["mf"].dbm.commitDbase()
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             self.doExit()
 
     def doYearEnd(self, per):
@@ -184,14 +182,14 @@
             start_c = self.start
             end_c = self.end
             if (per + 1) > self.l_per:
-                newy = end_c / 10000
-                newm = ((end_c / 100) % 100) + 1
+                newy = int(end_c / 10000)
+                newm = (int(end_c / 100) % 100) + 1
                 if newm > 12:
                     newy += 1
                     newm -= 12
                 news = (newy * 10000) + (newm * 100) + 1
-                newy = (end_c / 10000) + 1
-                newm = (end_c / 100) % 100
+                newy = int(end_c / 10000) + 1
+                newm = int(end_c / 100) % 100
                 newe = (newy * 10000) + (newm * 100) + 1
                 newe = mthendDate(newe)
                 self.sql.insRec("ctlynd", data=[self.opts["conum"], (per + 1),
@@ -209,11 +207,11 @@
                 return
             start_c = s.work
             end_c = e.work
-        sp = start_c / 100
-        ep = end_c / 100
+        sp = int(start_c / 100)
+        ep = int(end_c / 100)
         s, e, f = getPeriods(self.opts["mf"], self.opts["conum"], (per + 1))
         start_n = s.work
-        if not "GL" in self.mod:
+        if "GL" not in self.mod:
             return
         self.sql.delRec("genbal", where=[("glo_cono", "=", self.opts["conum"]),
             ("glo_trdt", "=", start_n)])
@@ -295,14 +293,15 @@
             ["wagtf2", "wt2_date", []]]
         ynds = self.sql.getRec(tables="ctlynd", where=[("cye_cono", "=",
             self.opts["conum"])], order="cye_period")
-        if not len(ynds) > self.years:
+        if len(ynds) <= self.years:
             return
         last = ynds[len(ynds) - (self.years + 1)]
         sdate = last[self.sql.ctlynd_col.index("cye_start")]
         edate = last[self.sql.ctlynd_col.index("cye_end")]
         elong = (edate * 1000000) + 999999
-        emldt = "%04i-%02i-99 99:99" % ((edate / 10000), ((edate / 100) % 100))
-        ecurdt = edate / 100
+        emldt = "%04i-%02i-99 99:99" % (int(edate / 10000),
+            (int(edate / 100) % 100))
+        ecurdt = int(edate / 100)
         count = 0
         for ynd in ynds:
             if ynd[1] < last[1]:
@@ -323,14 +322,14 @@
                 tabs.append(tab[0])
             if len(tab) > 3:
                 tabs.append(tab[3])
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             pb = ProgressBar(self.opts["mf"].body, typ=("G",
                 "Dropping Periods Older Than %s Years" % self.years))
         sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         for tab in TABLES:
-            if not "args" in self.opts:
+            if "args" not in self.opts:
                 pb.displayProgress()
-            if not tab[0] in ourtab:
+            if tab[0] not in ourtab:
                 continue
             if tab[0] == "chglog":
                 key = "%03i%s" % (self.opts["conum"], "%")
@@ -392,7 +391,7 @@
                     whrt.append((tab[1], "<=", ecurdt))
                     recs = sql.getRec(tables=tab[0], where=whrt)
                     for num, rec in enumerate(recs):
-                        if not "args" in self.opts and not num % 10:
+                        if "args" not in self.opts and not num % 10:
                             pb.displayProgress()
                         sql.delRec(tab[0], where=[("dcm_cono", "=", rec[0]),
                             ("dcm_num", "=", rec[1])])
@@ -408,7 +407,7 @@
                     whrt.append((tab[1], "<=", edate))
                     recs = sql.getRec(tables=tab[0], where=whrt)
                     for num, rec in enumerate(recs):
-                        if not "args" in self.opts and not num % 10:
+                        if "args" not in self.opts and not num % 10:
                             pb.displayProgress()
                         sql.delRec(tab[0], where=[("ibm_cono", "=", rec[0]),
                             ("ibm_docno", "=", rec[1])])
@@ -421,7 +420,7 @@
                     whrt.append((tab[1], "<=", edate))
                     recs = sql.getRec(tables=tab[0], where=whrt)
                     for num, rec in enumerate(recs):
-                        if not "args" in self.opts and not num % 10:
+                        if "args" not in self.opts and not num % 10:
                             pb.displayProgress()
                         sql.delRec(tab[0], where=[("si1_cono", "=", rec[0]),
                             ("si1_rtn", "=", rec[1]), ("si1_docno", "=",
@@ -436,7 +435,7 @@
                     whrt.append((tab[1], "<=", edate))
                     recs = sql.getRec(tables=tab[0], where=whrt)
                     for num, rec in enumerate(recs):
-                        if not "args" in self.opts and not num % 10:
+                        if "args" not in self.opts and not num % 10:
                             pb.displayProgress()
                         sql.delRec(tab[0], where=[("pom_cono", "=", rec[0]),
                             ("pom_ordno", "=", rec[1])])
@@ -451,7 +450,7 @@
             else:
                 recs = sql.getRec(tables=tab[3], where=whrm)
                 for num, rec in enumerate(recs):
-                    if not "args" in self.opts and not num % 10:
+                    if "args" not in self.opts and not num % 10:
                         pb.displayProgress()
                     whr = copyList(whrt)
                     for k in keyt:
@@ -536,7 +535,7 @@
                     elif tab[0] == "crstrn" and bals[0]:
                         for num, trn in enumerate(trns):
                             # Delete Ageing
-                            if not "args" in self.opts and not num % 10:
+                            if "args" not in self.opts and not num % 10:
                                 pb.displayProgress()
                             typ = trn[sql.crstrn_col.index("crt_type")]
                             ref = trn[sql.crstrn_col.index("crt_ref1")]
@@ -562,7 +561,7 @@
                     elif tab[0] == "drstrn" and bals[0]:
                         for num, trn in enumerate(trns):
                             # Delete Ageing
-                            if not "args" in self.opts and not num % 10:
+                            if "args" not in self.opts and not num % 10:
                                 pb.displayProgress()
                             typ = trn[sql.drstrn_col.index("drt_type")]
                             ref = trn[sql.drstrn_col.index("drt_ref1")]
@@ -584,7 +583,7 @@
                     elif tab[0] == "memtrn" and bals[0]:
                         for num, trn in enumerate(trns):
                             # Delete Ageing
-                            if not "args" in self.opts and not num % 10:
+                            if "args" not in self.opts and not num % 10:
                                 pb.displayProgress()
                             typ = trn[sql.memtrn_col.index("mlt_type")]
                             ref = trn[sql.memtrn_col.index("mlt_refno")]
@@ -644,7 +643,7 @@
                                 "Brought Forward", 0, "", "", "", 0, 0, 0,
                                 "", self.opts["capnm"], self.sysdtw, 0])
                             sql.insRec(tab[0], data=data)
-        if not "args" in self.opts:
+        if "args" not in self.opts:
             pb.closeProgress()
 
     def doExit(self, widget=None):
@@ -658,9 +657,9 @@
     try:
         opts, args = getopt.getopt(sys.argv[1:],"c:p:f:r:")
     except:
-        print
-        print "Usage: -c conum -p period -f final -r rcfile"
-        print
+        print()
+        print("Usage: -c conum -p period -f final -r rcfile")
+        print()
         sys.exit()
     coy = 1
     num = None
@@ -687,7 +686,7 @@
             ex = msy010(**{"mf": mf, "conum": coy, "period": per,
             "capnm": "paul", "args": fin})
         else:
-            print "Invalid Period %s for Company %s" % (num, coy)
+            print("Invalid Period %s for Company %s" % (num, coy))
         mf.dbm.closeDbase()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'mst/msy020.py'
--- mst/msy020.py	2017-02-25 14:03:05 +0000
+++ mst/msy020.py	2017-06-28 16:18:27 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Change Financial Year End.
@@ -49,16 +47,16 @@
         return True
 
     def getEndDate(self, date):
-        yr = (date / 10000) + 1
-        mt = ((date / 100) % 100) - 1
+        yr = int(date / 10000) + 1
+        mt = (int(date / 100) % 100) - 1
         if not mt:
             yr -= 1
             mt = 12
         return mthendDate(((yr * 10000) + (mt * 100) + 1))
 
     def getStartDate(self, date):
-        yr = date / 10000
-        mt = ((date / 100) % 100) + 1
+        yr = int(date / 10000)
+        mt = (int(date / 100) % 100) + 1
         if mt > 12:
             yr += 1
             mt = 1
@@ -83,8 +81,8 @@
             self.df.loadEntry("T", 0, 0, data=self.s_per)
 
     def doStartPer(self, frt, pag, r, c, p, i, w):
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29
@@ -98,10 +96,10 @@
     def doEndPer(self, frt, pag, r, c, p, i, w):
         if w <= self.s_per:
             return "Invalid Date, Before Start"
-        if (w / 100) - (self.s_per / 100) - 87 > 15:
+        if int(w / 100) - int(self.s_per / 100) - 87 > 15:
             return "Invalid Date, More than 15 Months"
-        y = (w / 10000) - 1
-        m = (w % 10000) / 100
+        y = int(w / 10000) - 1
+        m = int((w % 10000) / 100)
         if m == 2:
             if not y % 4:
                 d = 29

=== modified file 'rca/rc1010.py'
--- rca/rc1010.py	2017-02-25 14:03:05 +0000
+++ rca/rc1010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental System Owners Maintenance.

=== modified file 'rca/rc1020.py'
--- rca/rc1020.py	2017-02-25 14:03:05 +0000
+++ rca/rc1020.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental System Premises Maintenance.

=== modified file 'rca/rc1030.py'
--- rca/rc1030.py	2017-02-25 14:03:05 +0000
+++ rca/rc1030.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental System Tenants Maintenance.

=== modified file 'rca/rc2010.py'
--- rca/rc2010.py	2017-02-25 14:03:05 +0000
+++ rca/rc2010.py	2017-06-28 18:49:53 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rentals Data Capture Screen and Execution.
@@ -42,8 +40,8 @@
             return
         self.glint = rcactl["cte_glint"]
         lme = rcactl["cte_lme"]
-        yr = lme / 10000
-        mt = lme / 100 % 100
+        yr = int(lme / 10000)
+        mt = int(lme / 100) % 100
         self.lme = (yr * 10000) + (mt * 100) + 1
         if mt == 12:
             yr += 1
@@ -291,7 +289,7 @@
         self.df.colf[1][2][8]["data"] = data
 
     def doOwnTyp(self, frt, pag, r, c, p, i, w):
-        if not w in (2, 3, 4):
+        if w not in (2, 3, 4):
             return "Invalid Transaction Type"
         self.trntyp = w
 
@@ -569,7 +567,7 @@
         self.df.loadEntry("T", 2, 3, data=bal[0])
 
     def updateTables(self):
-        curdt = self.trndat / 100
+        curdt = int(self.trndat / 100)
         amt = self.trnamt
         vat = self.trnvat
         if self.trntyp in (1, 4):

=== modified file 'rca/rc3010.py'
--- rca/rc3010.py	2017-02-25 14:03:05 +0000
+++ rca/rc3010.py	2017-06-28 18:50:08 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Owners Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, copyList, showError
 from tartanWork import rttrtp
 
@@ -30,11 +29,16 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.totind = "N"
         return True
 
@@ -243,9 +247,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3020.py'
--- rca/rc3020.py	2017-02-25 14:03:05 +0000
+++ rca/rc3020.py	2017-06-28 18:50:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Tenants Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, copyList, showError
 from tartanWork import rttrtp, rcmvtp
 
@@ -30,11 +29,16 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.totind = "N"
         return True
 
@@ -246,9 +250,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3030.py'
--- rca/rc3030.py	2017-02-25 14:03:05 +0000
+++ rca/rc3030.py	2017-06-28 18:50:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Owners Master Listing.
@@ -34,6 +32,7 @@
         rcactl = gc.getCtl("rcactl", self.opts["conum"])
         if not rcactl:
             return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -46,7 +45,7 @@
         r1s = (("Yes","Y"),("No","N"))
         fld = (
             (("T",0,0,0),"Id2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCutOff,None,None,None),
+                int(self.sysdtw / 100),"Y",self.doCutOff,None,None,None),
             (("T",0,1,0),("IRB",r1s),0,"Totals Only","",
                 "Y","Y",self.doTots,None,None,None),
             (("T",0,2,0),("IRB",r1s),0,"Ignore Zero Balances",
@@ -118,9 +117,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3040.py'
--- rca/rc3040.py	2017-02-25 14:03:05 +0000
+++ rca/rc3040.py	2017-06-28 18:51:30 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Tenants Master Listing.
@@ -14,7 +12,8 @@
 """
 
 import copy, time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, copyList, showError
 from tartanWork import mthnam
 
@@ -30,6 +29,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -128,9 +132,9 @@
             prds = CCD(dat[con.index("rcc_period")], "UI", 3)
             stat = CCD(dat[con.index("rcc_status")], "UA", 1)
             if self.styp != "X":
-                curdt = self.date / 100
+                curdt = int(self.date / 100)
                 if self.months:
-                    yy = curdt / 100
+                    yy = int(curdt / 100)
                     mm = (curdt % 100) + self.months
                     while mm > 12:
                         yy += 1
@@ -144,8 +148,8 @@
                     mths = 6 * prds.work
                 else:
                     mths = 12 * prds.work
-                yy = strt.work / 10000
-                mm = ((strt.work % 10000) / 100) + mths - 1
+                yy = int(strt.work / 10000)
+                mm = (int(strt.work % 10000) / 100) + mths - 1
                 while mm < 1:
                     yy -= 1
                     mm += 12
@@ -159,7 +163,7 @@
                     else:
                         chkmth[2][2] = 28
                 exdt = CCD(((yy*10000)+(mm*100)+chkmth[mm][2]), "D1", 10)
-                if self.styp == "E" and (exdt.work / 100) > curdt:
+                if self.styp == "E" and int(exdt.work / 100) > curdt:
                     continue
             else:
                 exdt = CCD(0, "d1", 10)
@@ -231,9 +235,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'rca/rc3050.py'
--- rca/rc3050.py	2017-02-25 14:03:05 +0000
+++ rca/rc3050.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Owners Statements.
@@ -48,15 +46,16 @@
                 self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rcaowm",
+            "rcaowt", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         rcactl = gc.getCtl("rcactl", self.opts["conum"])
         if not rcactl:
             return
         self.stpl = rcactl["cte_tplown"]
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rcaowm",
-            "rcaowt", "tplmst"], prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
@@ -231,7 +230,7 @@
             if d in self.form.newdic:
                 dat = rom[omc.index(col)]
                 self.form.newdic[d][tdc.index("tpd_text")] = dat
-        if not len(rtt) > self.form.maxlines:
+        if len(rtt) <= self.form.maxlines:
             self.doBody(otc, rtt, tdc)
         else:
             bal = 0
@@ -264,8 +263,8 @@
             key, ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.repprt, repeml=self.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.dated),
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -311,7 +310,7 @@
         tdc = self.form.sql.tpldet_col
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "rom_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acc

=== modified file 'rca/rc3060.py'
--- rca/rc3060.py	2017-02-25 14:03:05 +0000
+++ rca/rc3060.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Tenants Statements.
@@ -50,15 +48,16 @@
                 self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rcatnm",
+            "rcatnt", "rcaprm", "rcacon", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         rcactl = gc.getCtl("rcactl", self.opts["conum"])
         if not rcactl:
             return
         self.stpl = rcactl["cte_tpltnt"]
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rcatnm",
-            "rcatnt", "rcaprm", "rcacon", "tplmst"], prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
@@ -198,7 +197,7 @@
             dps, dep, sta = acc[-1:][0]
         else:
             dps, dep, sta = 0, 0.0, ""
-        if not sta == "C":
+        if sta != "C":
             dep = 0.0
             dos = 0.0
         else:
@@ -287,7 +286,7 @@
             if d in self.form.newkey:
                 dat = prm[prc.index(col)]
                 self.form.newdic[d][tdc.index("tpd_text")] = dat
-        if not len(rtt) > self.form.maxlines:
+        if len(rtt) <= self.form.maxlines:
             self.doBody(ttc, rtt, tdc)
         else:
             bal = 0
@@ -317,8 +316,8 @@
             key, ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.repprt, repeml=self.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.dated),
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
@@ -369,7 +368,7 @@
         tdc = self.form.sql.tpldet_col
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "rtn_acno_C00":
                 nl[tdc.index("tpd_text")] = self.acc

=== modified file 'rca/rc3070.py'
--- rca/rc3070.py	2017-02-25 14:03:05 +0000
+++ rca/rc3070.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Owners Notes Listing.
@@ -30,6 +28,7 @@
         rcactl = gc.getCtl("rcactl", self.opts["conum"])
         if not rcactl:
             return
+        self.fromad = rcactl["cte_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "RCA")
         if not self.notes.data:
@@ -75,6 +74,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rca/rc3080.py'
--- rca/rc3080.py	2017-02-25 14:03:05 +0000
+++ rca/rc3080.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Tenants Notes Listing.
@@ -30,6 +28,7 @@
         rcactl = gc.getCtl("rcactl", self.opts["conum"])
         if not rcactl:
             return
+        self.fromad = rcactl["cte_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "RCA")
         if not self.notes.data:
@@ -80,6 +79,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rca/rc3090.py'
--- rca/rc3090.py	2017-02-25 14:03:05 +0000
+++ rca/rc3090.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rentals Ledger Deposit Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, ProgressBar, RepPrt, Sql, TartanDialog
+from TartanClasses import ASD, GetCtl, ProgressBar, RepPrt, Sql, TartanDialog
 from tartanFunctions import getDeposit, showError
 
 class rc3090:
@@ -29,6 +27,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
@@ -109,7 +112,8 @@
                 ["gg", "SD", 13.2, "Admin",  "y"]]
             RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
                 cols=cols, gtots=["dd", "ee", "ff", "gg"], ttype="D",
-                repprt=self.df.repprt, repeml=self.df.repeml)
+                repprt=self.df.repprt, repeml=self.df.repeml,
+                fromad=self.fromad)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'rca/rc4010.py'
--- rca/rc4010.py	2017-02-25 14:03:05 +0000
+++ rca/rc4010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Owners Interrogation.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, NotesCreate, SChoice, Sql
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, NotesCreate, SChoice, Sql
 from TartanClasses import SRec, TartanDialog
 from tartanFunctions import getModName, doPrinter
 from tartanWork import rttrtp
@@ -31,6 +29,10 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -201,19 +203,19 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -221,7 +223,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rca/rc4020.py'
--- rca/rc4020.py	2017-02-25 14:03:05 +0000
+++ rca/rc4020.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Tenants Interrogation.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, NotesCreate, SChoice, Sql
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, NotesCreate, SChoice, Sql
 from TartanClasses import SRec, TartanDialog
 from tartanFunctions import doPrinter, getDeposit, getModName
 from tartanWork import rcmvtp, rctrtp
@@ -31,6 +29,10 @@
             "rcatnt"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -304,19 +306,19 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "D":
             recs = getDeposit(self.opts["mf"], self.opts["conum"], self.depdtw,
                 self.owner, self.code, self.acno)
@@ -326,7 +328,7 @@
                 self.printDeposit(recs)
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -334,7 +336,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rca/rc6010.py'
--- rca/rc6010.py	2017-02-25 14:03:05 +0000
+++ rca/rc6010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     CSV File Imports.

=== modified file 'rca/rc6020.py'
--- rca/rc6020.py	2017-02-25 14:03:05 +0000
+++ rca/rc6020.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     CSV File Imports.

=== modified file 'rca/rc6030.py'
--- rca/rc6030.py	2017-02-25 14:03:05 +0000
+++ rca/rc6030.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rentals Missing Masterfile Records.
@@ -56,9 +54,9 @@
                     whr.append((w, "=", r[n]))
                 acc = self.sql.getRec(tables=c[1][0], where=whr, limit=1)
                 if not acc:
-                    if not c[1][0] in miss:
+                    if c[1][0] not in miss:
                         miss[c[1][0]] = [r]
-                    elif not r in miss[c[1][0]]:
+                    elif r not in miss[c[1][0]]:
                         miss[c[1][0]].append(r)
         missing = ""
         for key in (("rcaowm", "Owner"), ("rcaprm", "Premises")):

=== modified file 'rca/rcc110.py'
--- rca/rcc110.py	2017-02-25 14:03:05 +0000
+++ rca/rcc110.py	2017-07-24 08:34:38 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", 0, 0, "statement_owner",
-                "statement_tenant"]
+                "statement_tenant", ""]
         else:
             self.new = False
         if self.genleg:
@@ -133,7 +131,9 @@
             (("T",0,seq + 1,0),"INA",20,"Owner Template","",
                 self.acc[4],"N",self.doTplNam,tpm,None,None),
             (("T",0,seq + 2,0),"INA",20,"Tenant Template","",
-                self.acc[5],"N",self.doTplNam,tpm,None,None)])
+                self.acc[5],"N",self.doTplNam,tpm,None,None),
+            (("T",0,seq + 3,0),"ITX",50,"Email Address","",
+                self.acc[6],"N",None,None,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
@@ -156,7 +156,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 16):
+            for x in xrange(1, 16):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk15"
 
@@ -201,7 +201,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 16:
                 if x in (1, 3, 5, 7, 9, 11, 13):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'rca/rcc210.py'
--- rca/rcc210.py	2017-02-25 14:03:05 +0000
+++ rca/rcc210.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Messages File Maintenance.

=== modified file 'rca/rcc220.py'
--- rca/rcc220.py	2017-02-25 14:03:05 +0000
+++ rca/rcc220.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Messages Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, textFormat, doPrinter, showError
 
 class rcc220:
@@ -28,6 +26,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "ctlmes", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rcactl = gc.getCtl("rcactl", self.opts["conum"])
+        if not rcactl:
+            return
+        self.fromad = rcactl["cte_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -98,8 +101,8 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, 0,
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                repprt=self.df.repprt,
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=self.tit,
+                repprt=self.df.repprt, fromad=self.fromad,
                 repeml=self.df.repeml)
 
     def pageHeading(self):

=== modified file 'rca/rcc310.py'
--- rca/rcc310.py	2017-02-25 14:03:05 +0000
+++ rca/rcc310.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Interest File Maintenance.

=== modified file 'rca/rcm010.py'
--- rca/rcm010.py	2017-02-25 14:03:05 +0000
+++ rca/rcm010.py	2017-06-28 18:54:01 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Month End Routine.
@@ -81,14 +79,14 @@
         if w <= self.lme:
             return "Invalid Month-End Date"
         self.tme = w
-        self.curdt = w / 100
-        yy = self.curdt / 100
+        self.curdt = int(w / 100)
+        yy = int(self.curdt / 100)
         mm = (self.curdt % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
         self.nxtdt = (yy * 10000) + (mm * 100) + 1
-        self.nxtcd = self.nxtdt / 100
+        self.nxtcd = int(self.nxtdt / 100)
         self.batch = "R%06s" % self.nxtcd
         chk = self.sql.getRec(tables="rcatnt", cols=["count(*)"],
             where=[("rtu_cono", "=", self.opts["conum"]), ("rtu_type", "=", 1),
@@ -143,8 +141,8 @@
                 else:
                     mths = 12 * self.pers
 
-                yy = strt / 10000
-                mm = ((strt % 10000) / 100) + mths - 1
+                yy = int(strt / 10000)
+                mm = int((strt % 10000) / 100) + mths - 1
                 while mm < 1:
                     yy -= 1
                     mm += 12
@@ -158,7 +156,7 @@
                     else:
                         chkmth[2][2] = 28
                 self.exdt = (yy * 10000) + (mm * 100) + chkmth[mm][2]
-                if (self.exdt / 100) <= self.curdt:
+                if int(self.exdt / 100) <= self.curdt:
                     self.sql.updRec("rcacon", cols=["rcc_status"], data=["X"],
                         where=[("rcc_cono", "=", self.con[0]), ("rcc_owner",
                         "=", self.con[1]), ("rcc_code", "=", self.con[2]),

=== modified file 'rtl/rt1010.py'
--- rtl/rt1010.py	2017-02-25 14:03:05 +0000
+++ rtl/rt1010.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental System Masterfile Maintenance.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import GetCtl, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, Sql, TartanDialog
+from tartanFunctions import projectDate
 
 class rt1010:
     def __init__(self, **opts):
@@ -62,7 +61,7 @@
             (("T",0,1,0),"INA",7,"Account Code","",
                 "","N",self.doAccount,acc,None,("notblank",)),
             (("T",0,2,0),"INA",30,"Tenant Name","",
-                "","N",self.doName,None,self.doDelete,("notblank",)),
+                "","N",None,None,self.doDelete,("notblank",)),
             (("T",0,3,0),"INA",30,"Address Line 1","",
                 "","N",None,None,None,("efld",)),
             (("T",0,4,0),"INA",30,"Address Line 2","",
@@ -72,23 +71,23 @@
             (("T",0,6,0),"INA",4,"Postal Code","",
                 "","N",None,None,None,("efld",)),
             (("T",0,7,0),"INA",20,"Telephone Number","",
-                "","N",self.doTelno,None,None,("efld",)),
+                "","N",None,None,None,("efld",)),
             (("T",0,8,0),"ITX",50,"E-Mail Address","",
-                "","N",self.doEmail,None,None,("email",)),
+                "","N",None,None,None,("email",)),
             (("T",0,9,0),"IUA",1,"VAT Indicator","",
-                self.taxdf,"N",self.doVatInd,None,None,("notblank",)),
+                self.taxdf,"N",None,None,None,("notblank",)),
             (("T",0,10,0),"INA",10,"VAT Number","",
                 "","N",self.doVatNum,None,None,("efld",)),
             (("T",0,11,0),("IRB",r1s),0,"Payment Frequency","",
-                "M","N",self.doPayInd,None,None,None),
+                "M","N",None,None,None,None),
             (("T",0,12,0),"ID1",10,"Start Date","",
                 "","N",self.doStart,None,None,("notzero",)),
             (("T",0,13,0),"IUI",3,"Number of Periods","",
-                "","N",self.doPeriod,None,None,("notzero",)),
+                "","N",None,None,None,("notzero",)),
             (("T",0,14,0),"IUD",12.2,"Rental Amount","",
                 "","N",self.doAmount,None,None,("notzero",)),
             (("T",0,15,0),("IRB",r2s),0,"Status","",
-                "","N",self.doStatus,None,None,None))
+                "","N",None,None,None,None))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,2),("T",0,0)),
             ("Cancel",None,self.doCancel,0,("T",0,2),("T",0,0)),
@@ -97,6 +96,9 @@
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
             butt=but, tend=tnd, txit=txt)
+        if "args" in self.opts:
+            self.df.doKeyPressed("T", 0, 0, data=self.opts["args"][0])
+            self.df.doKeyPressed("T", 0, 1, data=self.opts["args"][1])
 
     def doPremises(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="rtlprm", cols=["rtp_desc"],
@@ -105,6 +107,25 @@
         if not acc:
             return "Invalid Premises"
         self.code = w
+        col = ["rtc_payind", "rtc_start", "rtc_period"]
+        whr = [
+            ("rtc_cono", "=", self.opts["conum"]),
+            ("rtc_code", "=", self.code),
+            ("rtc_status", "=", "C")]
+        chk = self.sql.getRec(tables="rtlcon", cols=col, where=whr,
+            order="rtc_start desc")
+        if not chk:
+            self.end = 0
+            return
+        freq, start, period = chk[0]
+        if freq == "M":
+            self.end = CCD(projectDate(start, period, "months"), "D1", 10)
+        elif freq == "3":
+            self.end = CCD(projectDate(start, period * 3, "months"), "D1", 10)
+        elif freq == "6":
+            self.end = CCD(projectDate(start, period * 6, "months"), "D1", 10)
+        else:
+            self.end = CCD(projectDate(start, period, "years"), "D1", 10)
 
     def doAccount(self, frt, pag, r, c, p, i, w):
         self.acno = w
@@ -140,38 +161,18 @@
             else:
                 self.trn = False
 
-    def doName(self, frt, pag, r, c, p, i, w):
-        pass
-
-    def doTelno(self, frt, pag, r, c, p, i, w):
-        pass
-
-    def doEmail(self, frt, pag, r, c, p, i, w):
-        pass
-
-    def doVatInd(self, frt, pag, r, c, p, i, w):
-        pass
-
     def doVatNum(self, frt, pag, r, c, p, i, w):
         if self.new == "n" and self.trn:
             return "sk1"
 
     def doStart(self, frt, pag, r, c, p, i, w):
-        pass
-
-    def doPeriod(self, frt, pag, r, c, p, i, w):
-        pass
-
-    def doPayInd(self, frt, pag, r, c, p, i, w):
-        pass
+        if self.new == "y" and self.end and w < self.end.work:
+            return "Premises Already Let till %s" % self.end.disp
 
     def doAmount(self, frt, pag, r, c, p, i, w):
         if self.new == "y":
             self.df.loadEntry(frt, pag, p+1, data="C")
 
-    def doStatus(self, frt, pag, r, c, p, i, w):
-        pass
-
     def doDelete(self):
         if self.trn:
             return "Transactions Exist, Not Deleted"
@@ -220,8 +221,11 @@
                         "%03i%-7s%-7s%03i" % (self.opts["conum"], self.code,
                         self.acno, self.cnum), self.sql.rtlcon_col[num], dte,
                         self.opts["capnm"], str(dat), str(datc[num]), 0])
-        self.opts["mf"].dbm.commitDbase()
-        self.df.focusField("T", 0, 1)
+        if "args" in self.opts:
+            self.doExit()
+        else:
+            self.opts["mf"].dbm.commitDbase()
+            self.df.focusField("T", 0, 1)
 
     def doAccept(self, widget=None):
         frt, pag, col, mes = self.df.doCheckFields()

=== modified file 'rtl/rt2010.py'
--- rtl/rt2010.py	2017-02-25 14:03:05 +0000
+++ rtl/rt2010.py	2017-06-29 06:27:26 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rentals Data Capture Screen and Execution.
@@ -96,7 +94,7 @@
             "tables": ("rtlmst",),
             "cols": (
                 ("rtm_acno", "", 0, "Acc-Num"),
-                ("rtm_name", "", 0, "Description", "Y")),
+                ("rtm_name", "", 0, "Name", "Y")),
             "where": [("rtm_cono", "=", self.opts["conum"])],
             "whera": [["C", "rtm_code", 0, 1]]}
         con = {
@@ -212,7 +210,7 @@
     def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trndat = w
 
@@ -267,7 +265,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         self.amt = self.trnamt
@@ -378,7 +376,7 @@
 
     def updateTables2(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trndat / 100
+            self.curdt = int(self.trndat / 100)
         else:
             self.curdt = self.bh.curdt
         # General Ledger Transaction (Source)

=== modified file 'rtl/rt3010.py'
--- rtl/rt3010.py	2017-02-25 14:03:05 +0000
+++ rtl/rt3010.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import rttrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "rtltrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
+        if not rtlctl:
+            return
+        self.fromad = rtlctl["ctr_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -156,8 +160,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rtl/rt3020.py'
--- rtl/rt3020.py	2017-02-25 14:03:05 +0000
+++ rtl/rt3020.py	2017-06-29 06:28:06 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rental's Ledger Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, doPrinter, getModName, copyList
 from tartanFunctions import showError
 from tartanWork import rttrtp
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
+        if not rtlctl:
+            return
+        self.fromad = rtlctl["ctr_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -43,8 +47,8 @@
         self.forms = [("UI", 2, False, False, True), ("Na", 7), ("NA", 7),
             ("NA", 7), ("NA", 30), ("Na", 9), ("D1", 10), ("SD", 13.2),
             ("SD", 13.2), ("SD", 13.2), ("UA", 1), ("NA", 30)]
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.gqt = [0] * (len(rttrtp) + 1)
         self.gdr = [0] * (len(rttrtp) + 1)
         self.gcr = [0] * (len(rttrtp) + 1)
@@ -239,7 +243,7 @@
                 continue
             code, acno, trdt, trtp, refno, batch, debit, credit, taxamt, \
                 detail, taxind, name = vals
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -277,9 +281,9 @@
             self.typeTotal()
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         code = CCD(data[0], "NA", 7)

=== modified file 'rtl/rt3030.py'
--- rtl/rt3030.py	2017-02-25 14:03:05 +0000
+++ rtl/rt3030.py	2017-06-29 06:28:58 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Master Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, copyList, showError
 from tartanWork import mthnam
 
@@ -30,6 +29,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
+        if not rtlctl:
+            return
+        self.fromad = rtlctl["ctr_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -136,9 +140,9 @@
             prds = CCD(dat[con.index("rtc_period")], "UI", 3)
             stat = CCD(dat[con.index("rtc_status")], "UA", 1)
             if self.styp != "X":
-                curdt = self.date / 100
+                curdt = int(self.date / 100)
                 if self.months:
-                    yy = curdt / 100
+                    yy = int(curdt / 100)
                     mm = (curdt % 100) + self.months
                     while mm > 12:
                         yy += 1
@@ -152,8 +156,8 @@
                     mths = 6 * prds.work
                 else:
                     mths = 12 * prds.work
-                yy = strt.work / 10000
-                mm = ((strt.work % 10000) / 100) + mths - 1
+                yy = int(strt.work / 10000)
+                mm = (int(strt.work % 10000) / 100) + mths - 1
                 while mm < 1:
                     yy -= 1
                     mm += 12
@@ -167,7 +171,7 @@
                     else:
                         chkmth[2][2] = 28
                 exdt = CCD(((yy*10000)+(mm*100)+chkmth[mm][2]), "D1", 10)
-                if self.styp == "E" and (exdt.work / 100) > curdt:
+                if self.styp == "E" and int(exdt.work / 100) > curdt:
                     continue
             else:
                 exdt = CCD(0, "d1", 10)
@@ -227,9 +231,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'rtl/rt3040.py'
--- rtl/rt3040.py	2017-02-25 14:03:05 +0000
+++ rtl/rt3040.py	2017-06-29 06:29:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Tenants Statements.
@@ -27,15 +25,16 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rtlmst",
+            "rtltrn", "rtlprm", "rtlcon", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
         gc = GetCtl(self.opts["mf"])
         rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
         if not rtlctl:
             return
         self.stpl = rtlctl["ctr_tplnam"]
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "rtlmst",
-            "rtltrn", "rtlprm", "rtlcon", "tplmst"], prog=__name__)
-        if self.sql.error:
-            return
+        self.fromad = rtlctl["ctr_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.trtypes = []
@@ -110,7 +109,7 @@
     def doDat(self, frt, pag, r, c, p, i, w):
         self.datew = w
         self.dated = self.df.t_disp[pag][0][p]
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
 
     def doEnd(self):
         self.df.closeProcess()
@@ -237,7 +236,7 @@
             trans.append(trn)
         rtc.extend(["line_debit", "line_credit"])
         self.doHeader(rtm, rmc, prm, prc, tdc)
-        if not len(trans) > self.form.maxlines:
+        if len(trans) <= self.form.maxlines:
             self.doBody(rtc, trans, tdc)
         else:
             bal = 0
@@ -282,7 +281,7 @@
                 tdc.index("tpd_text")] = nad
         for key in self.form.newkey:
             nl = copyList(self.form.newdic[key])
-            if not nl[tdc.index("tpd_place")] == "A":
+            if nl[tdc.index("tpd_place")] != "A":
                 continue
             if nl[tdc.index("tpd_detseq")] == "rtm_code_C00":
                 nl[tdc.index("tpd_text")] = self.code
@@ -371,8 +370,8 @@
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            header="%s Statement at %s" % (self.opts["conam"], self.dated),
+            fromad=self.fromad, repprt=self.df.repprt, repeml=self.df.repeml)
         if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])

=== modified file 'rtl/rt3050.py'
--- rtl/rt3050.py	2017-02-25 14:03:05 +0000
+++ rtl/rt3050.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Notes Listing.
@@ -30,6 +28,7 @@
         rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
         if not rtlctl:
             return
+        self.fromad = rtlctl["ctr_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "RTL")
         if not self.notes.data:
@@ -74,6 +73,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rtl/rt4010.py'
--- rtl/rt4010.py	2017-02-25 14:03:05 +0000
+++ rtl/rt4010.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Interrogation.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, NotesCreate, SChoice, Sql
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, NotesCreate, SChoice, Sql
 from TartanClasses import SRec, TartanDialog
 from tartanFunctions import getModName, doPrinter
 from tartanWork import rttrtp
@@ -31,6 +29,10 @@
             "rtltrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        rtlctl = gc.getCtl("rtlctl", self.opts["conum"])
+        if not rtlctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -257,19 +259,19 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -277,7 +279,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rtl/rt6010.py'
--- rtl/rt6010.py	2017-02-25 14:03:05 +0000
+++ rtl/rt6010.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Rentals's Ledger Key Change.

=== modified file 'rtl/rtc110.py'
--- rtl/rtc110.py	2017-02-25 14:03:05 +0000
+++ rtl/rtc110.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental Control File Maintenance.
@@ -32,7 +30,7 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "N", 0, "statement_rental"]
+            self.acc = [self.opts["conum"], "N", 0, "statement_rental", ""]
         else:
             self.new = False
         return True
@@ -58,7 +56,9 @@
             (("T",0,1,0),"ID1",10,"Last Month End","",
                 self.acc[2],"N",None,None,None,("efld",)),
             (("T",0,2,0),"INA",20,"Statement Template","",
-                self.acc[3],"N",self.doTplNam,tpm,None,None))
+                self.acc[3],"N",self.doTplNam,tpm,None,None),
+            (("T",0,3,0),"ITX",50,"Email Address","",
+                self.acc[4],"N",None,None,None,None))
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)

=== modified file 'rtl/rtc210.py'
--- rtl/rtc210.py	2017-02-25 14:03:05 +0000
+++ rtl/rtc210.py	2017-06-27 09:48:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rental System Premises Maintenance.

=== modified file 'rtl/rtm010.py'
--- rtl/rtm010.py	2017-02-25 14:03:05 +0000
+++ rtl/rtm010.py	2017-06-29 06:30:46 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Rentals Ledger Month End Routine.
@@ -65,14 +63,14 @@
         if w <= self.lme:
             return "Invalid Month-End Date"
         self.tme = w
-        self.curdt = w / 100
-        yy = self.curdt / 100
+        self.curdt = int(w / 100)
+        yy = int(self.curdt / 100)
         mm = (self.curdt % 100) + 1
         while mm > 12:
             yy += 1
             mm -= 12
         self.nxtdt = (yy * 10000) + (mm * 100) + 1
-        self.nxtcd = self.nxtdt / 100
+        self.nxtcd = int(self.nxtdt / 100)
         self.batch = "R%06s" % self.nxtcd
         chk = self.sql.getRec(tables="rtltrn", cols=["count(*)"],
             where=[("rtt_cono", "=", self.opts["conum"]), ("rtt_type", "=", 1),
@@ -125,14 +123,14 @@
                     mths = 6 * self.pers
                 else:
                     mths = 12 * self.pers
-                yy = strt / 10000
-                mm = ((strt % 10000) / 100) + mths - 1
+                yy = int(strt / 10000)
+                mm = (int(strt % 10000) / 100) + mths - 1
                 while mm > 12:
                     yy += 1
                     mm -= 12
                 dd = strt % 100
                 self.exdt = (yy * 10000) + (mm * 100) + dd
-                if (self.exdt / 100) <= self.curdt:
+                if int(self.exdt / 100) <= self.curdt:
                     self.sql.updRec("rtlcon", cols=["rtc_status"], data=["X"],
                         where=[("rtc_cono", "=", self.rec[0]), ("rtc_code",
                         "=", self.rec[1]), ("rtc_acno", "=", self.rec[2]),
@@ -143,7 +141,7 @@
                         (self.rec[1], self.rec[2], self.rec[8]))
                     if ok == "no":
                         continue
-                    self.doExpiredContract()
+                    self.doRenewContract()
                 self.doRaiseRental(num)
         self.sql.updRec("rtlctl", cols=["ctr_lme"], data=[self.tme],
             where=[("ctr_cono", "=", self.opts["conum"])])
@@ -152,7 +150,7 @@
             "Saved, There Is No Going Back Without Restoring From Backup!")
         self.opts["mf"].closeLoop()
 
-    def doExpiredContract(self):
+    def doRenewContract(self):
         tit = ("Renew Rental Contract", )
         r1s = (
             ("Monthly","M"),
@@ -171,14 +169,14 @@
                 self.pers,"N",None,None,None,("notzero",)),
             (("T",0,6,0),"IUD",12.2,"Rental Amount","",
                 self.amnt,"N",None,None,None,("notzero",)))
-        tnd = ((self.doExpireEnd,"y"), )
+        tnd = ((self.doRenewEnd,"y"), )
         txt = (self.doLoadFocus, )
         self.na = TartanDialog(self.opts["mf"], tops=True, title=tit,
             eflds=self.fld, tend=tnd, txit=txt, focus=False)
         self.doLoadFocus()
         self.opts["mf"].startLoop()
 
-    def doExpireEnd(self):
+    def doRenewEnd(self):
         dat = self.rec[:3]
         dat.append(self.rec[3] + 1)
         for x in xrange(3, len(self.na.t_work[0][0])):

=== modified file 'scp/sc1010.py'
--- scp/sc1010.py	2017-02-25 14:03:05 +0000
+++ scp/sc1010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Sectional Competition Player's Maintenance.

=== modified file 'scp/sc2010.py'
--- scp/sc2010.py	2017-02-25 14:03:05 +0000
+++ scp/sc2010.py	2017-06-27 09:48:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     District Competition Entries.
@@ -220,7 +218,7 @@
             self.opts["conum"]), ("scm_scod", "=", self.scod)], limit=1)
         if not chk:
             return "Invalid Player Code"
-        if self.tsex in ("M", "F") and not chk[2] == self.tsex:
+        if self.tsex in ("M", "F") and chk[2] != self.tsex:
             return "Invalid Gender"
         self.df.loadEntry(frt, pag, p+1, data=self.getName(chk))
         if i == 0:
@@ -238,7 +236,7 @@
                     self.df.loadEntry(frt, pag, p+3, data=self.getName(ptr))
             else:
                 self.newent = True
-            if not self.tsiz == 2:
+            if self.tsiz != 2:
                 self.pcod = 0
                 return "sk3"
 

=== modified file 'scp/sc2020.py'
--- scp/sc2020.py	2017-02-25 14:03:05 +0000
+++ scp/sc2020.py	2017-08-07 11:00:26 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     District Competition Draw.
@@ -15,6 +13,12 @@
     Number of Rounds            = X
     Number of First Round Games = N - (P / 2)
 
+    Formulas for Round Robin Tournaments:
+
+    N = Number of entries.
+
+    Number of games             = (N x (N - 1)) / 2
+
     This file is part of Tartan Systems (TARTAN).
 
 AUTHOR
@@ -24,15 +28,15 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-import os, time, random
-from TartanClasses import CCD, MyFpdf, TartanDialog, Sql
-from tartanFunctions import askChoice, doDrawTable, doPrinter, getModName
-from tartanFunctions import copyList, showError
+import copy, os, random, time
+from TartanClasses import ASD, CCD, MyFpdf, TartanDialog, Sql
+from tartanFunctions import askChoice, askQuestion, doDrawTable, doPrinter
+from tartanFunctions import getModName, copyList, showError
 
 class sc2020:
     def __init__(self, **opts):
         self.opts = opts
-        if not "test" in opts:
+        if "test" not in opts:
             self.opts["test"] = None
         if self.setVariables():
             self.mainProcess()
@@ -78,7 +82,7 @@
             (("T",0,4,0),"IUI",2,"Number of Sections","",
                 0,"N",self.doNumSec,None,None,("notzero",)),
             (("T",0,5,0),("IRB",r2s),0,"Sub-Sections","",
-                "Y","N",self.doSubSec,None,None,None),
+                "N","N",self.doSubSec,None,None,None),
             (("T",0,6,0),("IRB",r3s),0,"Possible Qualifiers","",
                 "S","N",self.doQuaSec,None,None,None),
             (("T",0,7,0),("IRB",r2s),0,"Closed-Up","",
@@ -114,7 +118,7 @@
         if self.ctyp == "P":
             if self.numsec < 3:
                 return "No Playoff Grid Available (Less than 3 Sections)"
-            if not self.state > 2:
+            if self.state <= 2:
                 showError(self.opts["mf"].window, "Invalid Type",
                     "Main not Completed or All results Not yet Entered")
                 return "Main Not Completed"
@@ -148,7 +152,7 @@
                 self.sql.insRec("scpent", data=[self.opts["conum"], self.ccod,
                     ent[x][0], 0])
             self.opts["mf"].dbm.commitDbase()
-        if self.state == 3 and self.quasec == "M":
+        if self.state == 3 and self.quasec == "M" and self.numsec > 2:
             # Playoff records for 1st round of ctyp="P" and no "P" records
             chk = self.sql.getRec(tables="scpgme", cols=["count(*)"],
                 where=[("scg_cono", "=", self.opts["conum"]), ("scg_ccod", "=",
@@ -231,14 +235,14 @@
     def doNumEnt(self, frt, pag, r, c, p, i, w):
         if w:
             self.entsec = w
-            self.numsec = self.totskp / self.entsec
+            self.numsec = int(self.totskp / self.entsec)
             if self.totskp % self.entsec:
                 self.numsec += 1
             self.df.loadEntry(frt, pag, p+1, data=self.numsec)
 
     def doNumSec(self, frt, pag, r, c, p, i, w):
         self.numsec = w                         # Number of sections
-        self.entsec = self.totskp / w           # Entries per section
+        self.entsec = int(self.totskp / w)      # Entries per section
         if self.totskp % self.numsec:
             self.entsec += 1
         if self.entsec % 2:
@@ -249,8 +253,8 @@
         if self.fmat == "R":
             if self.entsec not in (4, 6, 8):
                 return "ff5|Entries/Section Must be 4, 6 or 8"
-            if (self.numsec * self.entsec) - self.totskp > self.numsec:
-                return "ff5|Number of Byes Exceeds the Number of Sections"
+            #if ((self.numsec * self.entsec) - self.totskp) > self.numsec:
+            #    return "ff5|Number of Byes Exceeds the Number of Sections"
         else:
             if self.entsec < 3:
                 return "ff5|Too Few Entries/Section (<3)"
@@ -273,7 +277,7 @@
             return "sk1"
 
     def doSubSec(self, frt, pag, r, c, p, i, w):
-        if w == "Y" and not self.numsec == 2 and (self.numsec % 2):
+        if w == "Y" and self.numsec != 2 and (self.numsec % 2):
             return "ff5|Uneven Number of Sections"
         self.subsec = w
         if self.subsec == "Y":
@@ -300,7 +304,13 @@
     def doEnd(self):
         self.df.closeProcess()
         self.playoff = False
+        self.quit = False
         self.populateGames()
+        if not self.quit:
+            self.doEnder()
+        self.opts["mf"].closeLoop()
+
+    def doEnder(self):
         if not self.reprint and self.ctyp == "M" and self.clup == "N":
             recs = self.sql.getRec(tables="scpgme", cols=["scg_snum",
                 "scg_subs", "count(*)"], where=self.gwhr,
@@ -368,7 +378,6 @@
                 self.opts["mf"].dbm.commitDbase()
             else:
                 self.opts["mf"].dbm.commitDbase(ask=True)
-        self.opts["mf"].closeLoop()
 
     def getTotalSkips(self):
         if self.ctyp == "M":
@@ -425,7 +434,7 @@
         if not self.quit:
             if self.subsec == "Y":
                 for x in xrange(0, self.numsec, 2):
-                    self.rsecnum = (x / 2) + 1
+                    self.rsecnum = int(x / 2) + 1
                     if self.rsecnum == 1:
                         self.rnum = self.xtra
                     else:
@@ -456,7 +465,7 @@
         else:
             add = False
             byes = 0
-        bent = self.totskp / self.numsec
+        bent = int(self.totskp / self.numsec)
         for x in xrange(self.numsec):
             sections[x + 1] = []
             sectot[x + 1] = 0
@@ -514,7 +523,7 @@
             random.shuffle(skips)
             while skips:
                 skip = skips.pop(0)
-                if not skip[0] in self.seeds:
+                if skip[0] not in self.seeds:
                     for sec in sections:
                         if secqty[sec][1] == secqty[sec][0]:
                             continue
@@ -527,7 +536,7 @@
         # Create Game Records (scpgme) and Split into Sub-Sections
         for sec in sections:
             if self.subsec == "Y":
-                snum = sec / 2
+                snum = int(sec / 2)
                 if sec % 2:
                     snum += 1
                     ssec = "A"
@@ -649,7 +658,7 @@
             return "Invalid Seed, Already Seeded"
         nam = chk[0] + ", " + chk[1][0]
         self.sp.loadEntry(frt, pag, p+1, data=nam)
-        if ((p + 1) / 2) == self.seednum:
+        if int((p + 1) / 2) == self.seednum:
             return "nd"
 
     def doSeedEnd(self):
@@ -713,7 +722,7 @@
             self.opts["mf"].closeLoop()
 
     def doMatchExit(self, widget=None):
-        if not self.md.col == 1:
+        if self.md.col != 1:
             self.md.focusField(self.md.frt, self.md.pag, self.md.col - 2)
 
     def doMatchQuit(self, widget=None):
@@ -785,7 +794,7 @@
             self.opts["mf"].closeLoop()
 
     def doSecExit(self, widget=None):
-        if not self.sd.col == 1:
+        if self.sd.col != 1:
             self.sd.focusField(self.sd.frt, self.sd.pag, self.sd.col - 2)
 
     def doSecQuit(self, widget=None):
@@ -809,8 +818,8 @@
         while pwrs < entsec:
             pwrs = pwrs * 2
         byes = pwrs - tot
-        frg = tot - (pwrs / 2)
-        prs = (frg + byes) / 4
+        frg = tot - int(pwrs / 2)
+        prs = int((frg + byes) / 4)
         grps = [0, 0]
         # Create shadow players for byes in groups
         data = [self.opts["conum"], self.ccod, ctyp, sec, sub, 1, "M", 0, 0, 0,
@@ -912,7 +921,7 @@
                 temp.append(c[0])
             random.shuffle(temp)
             for p1 in sseed:
-                if not p1 in temp:
+                if p1 not in temp:
                     continue
                 for x in xrange(len(temp)):
                     if temp[x] in sseed:
@@ -951,7 +960,7 @@
                     p1 = [1, 3, 4, 2]
                 elif prs == 8:
                     p1 = [1, 5, 7, 3, 4, 8, 6, 2]
-                tot = len(skips) / prs
+                tot = int(len(skips) / prs)
                 p2 = [tot] * prs
                 if len(skips) % prs:
                     p2[0] += 1
@@ -974,7 +983,7 @@
                     p1 = [1, 3, 4, 2]
                 elif byes == 8:
                     p1 = [1, 5, 7, 3, 4, 8, 6, 2]
-                tot = len(skips) / prs
+                tot = int(len(skips) / prs)
                 p2 = [tot] * prs
                 if len(skips) % prs:
                     p2[0] += 1
@@ -1082,7 +1091,7 @@
             else:
                 txt, bdr = self.getSkip(skip[0], skip[2], 1)
                 self.fpdf.drawText(txt, w=(cwth * nm), border=bdr)
-                self.drawLink(cwth, l1, l2, x + (cwth * nm), y + (chgt / 2),
+                self.drawLink(cwth, l1, l2, x + (cwth * nm), y + int(chgt / 2),
                     y + (chgt * 1.5))
             x = self.fpdf.get_x()
             y = self.fpdf.get_y()
@@ -1098,12 +1107,12 @@
                 self.fpdf.drawText(txt, x + (cwth * n2), w=(cwth * nm),
                     border=bdr)
             if not last or last == "up":
-                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + (chgt / 2),
+                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + int(chgt / 2),
                     y + (chgt * 2.5))
                 rnds.append([x+(cwth*nx), y+(chgt*2)])
                 last = "down"
             else:
-                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + (chgt/2),
+                self.drawLink(cwth, l1, l2, x + (cwth * nx), y + int(chgt / 2),
                     y - (chgt * 1.5))
                 if self.rnds == 2:
                     rnds.append([x + (cwth * nx), y + (chgt * 2)])
@@ -1115,10 +1124,10 @@
             else:
                 txt, bdr = self.getSkip(skip[1], 0, 1)
                 self.fpdf.drawText(txt, w=(cwth*nm), border=bdr)
-                self.fpdf.line(x+(cwth*nm), y+(chgt/2), x+(cwth*n1),
-                    y+(chgt/2))
-                self.fpdf.line(x+(cwth*n1), y+(chgt/2), x+(cwth*n1),
-                    y-(chgt/2))
+                self.fpdf.line(x+(cwth*nm), y+int(chgt/2), x+(cwth*n1),
+                    y+int(chgt/2))
+                self.fpdf.line(x+(cwth*n1), y+int(chgt/2), x+(cwth*n1),
+                    y-int(chgt/2))
             self.fpdf.drawText("")
             lasty = self.fpdf.get_y()
         inc = 4
@@ -1136,7 +1145,7 @@
                 self.fpdf.drawText(txt, x+(cwth*(l1+l2)), y, w=(cwth*nm),
                     border=bdr)
                 inc1 = inc + .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc1))
+                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+int(chgt/2),y+(chgt*inc1))
                 bb.append([x+(cwth*n2), y+(chgt*(4 * (aa + 1)))])
                 x = rnds[rnd+1][0]
                 y = rnds[rnd+1][1]
@@ -1147,7 +1156,7 @@
                 self.fpdf.drawText(txt, x+(cwth*(l1+l2)), y, w=(cwth*nm),
                     border=bdr)
                 inc1 -= 1
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y-(chgt*inc1))
+                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+int(chgt/2),y-(chgt*inc1))
                 cnt += 1
             inc = inc * 2
             rnds = bb
@@ -1170,7 +1179,7 @@
             # Last Round
             if grp == 1:
                 inc += .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc))
+                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+int(chgt/2),y+(chgt*inc))
             else:
                 x1 = x + (cwth*(l1+l2+nm))
                 y1 = y - (chgt*inc)
@@ -1179,7 +1188,7 @@
                     self.fpdf.drawText(txt,x1+(cwth*(l1+l2)), y1, w=(cwth*nm),
                         border=bdr)
                 inc = 0 - inc + .5
-                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+(chgt/2),y+(chgt*inc))
+                self.drawLink(cwth,l1,l2,x+(cwth*n2),y+int(chgt/2),y+(chgt*inc))
         if grp == 1 and len(skips) == 16:
             self.fpdf.add_page()
             self.fpdf.drawText()
@@ -1295,23 +1304,32 @@
         whr = copyList(self.where)
         recs = self.sql.getRec(tables="scpgme", cols=["scg_scod"], where=whr)
         byes = self.entsec - len(recs)
+        if byes == 2:
+            byes = 0
+            entsec = len(recs)
+            rnds = self.rnds - 1
+        else:
+            entsec = self.entsec
+            rnds = self.rnds
         skps = []
         for rec in recs:
             skps.append(rec[0])
         random.shuffle(skps)
         data = [self.opts["conum"], self.ccod, "M", sec, sub, 1, "M", 0, 0, 0,
             0, 0, 0, 0, 0, 0]
-        for _ in xrange(byes):
-            self.byenum += 1
-            data[7] = self.byenum
-            skps.append(self.byenum)
-            self.sql.insRec("scpgme", data=data)
+        if byes == 1:
+            rnds = rnds
+            for _ in xrange(byes):
+                self.byenum += 1
+                data[7] = self.byenum
+                skps.append(self.byenum)
+                self.sql.insRec("scpgme", data=data)
         # Allocate Opponents
-        count = self.entsec
-        grps = [0+i for i in xrange(self.entsec)]
-        half = count / 2
+        count = entsec
+        grps = [0+i for i in xrange(entsec)]
+        half = int(count / 2)
         schedule = []
-        for _ in xrange(self.rnds):
+        for _ in xrange(rnds):
             pairings = []
             for i in xrange(half):
                 pairings.append([grps[i], grps[count-i-1]])
@@ -1352,78 +1370,167 @@
                 where=whr)
 
     def allocateRinks(self):
-        if self.subsec == "Y":
-            if self.entsec == 4:
-                rinka = [2, 3]
-                rinkb = [4, 5]
-            elif self.entsec == 6:
-                rinka = [1, 2, 3]
-                rinkb = [4, 5, 6]
-            subs = ("A", "B")
-            nsub = "A"
-        else:
-            if self.entsec == 4:
-                rinks = [3, 4]
-            elif self.entsec == 6:
-                rinks = [2, 3, 4]
-            else:
-                rinks = [2, 3, 4, 5]
-            subs = ("", )
-        for sec in xrange(1, self.numsec + 1):
-            skpdic = {}
-            for sub in subs:
-                for rnd in xrange(1, self.rnds + 1):
-                    if self.subsec == "Y":
-                        if nsub == "A":
-                            rnks = copyList(rinka)
-                            nsub = "B"
-                        else:
-                            rnks = copyList(rinkb)
-                            nsub = "A"
+        def doShuffle():
+            rnks = self.rinks[:]
+            ends = self.rinke[:]
+            random.shuffle(rnks)
+            random.shuffle(ends)
+            rnks.extend(ends)
+            return rnks
+
+        clubs = {}
+        secs = self.sql.getRec(tables="scpsec", cols=["scs_snum", "scs_rnum",
+            "scs_club"], where=[("scs_cono", "=", self.opts["conum"]),
+            ("scs_ccod", "=", self.ccod), ("scs_rnum", "<=", self.rnds)],
+            order="scs_club")
+        for sec, rnd, clb in secs:
+            if clb not in clubs:
+                clubs[clb] = {}
+            day = self.sql.getRec(tables="scprnd", cols=["scr_date"],
+                where=[("scr_cono", "=", self.opts["conum"]), ("scr_ccod",
+                "=", self.ccod), ("scr_rnum", "=", rnd)], limit=1)[0]
+            if day not in clubs[clb]:
+                clubs[clb][day] = {}
+            if sec not in clubs[clb][day]:
+                clubs[clb][day][sec] = {}
+            if rnd not in clubs[clb][day][sec]:
+                clubs[clb][day][sec][rnd] = []
+        for club in clubs:
+            for day in clubs[club]:
+                rnds = {}
+                for sec in clubs[club][day]:
+                    for rnd in clubs[club][day][sec]:
+                        if rnd > self.rnds:
+                            continue
+                        if rnd not in rnds:
+                            rnds[rnd] = []
+                        hist = []
+                        skps = self.sql.getRec(tables="scpgme",
+                            cols=["scg_scod", "scg_ocod"], where=[
+                            ("scg_cono", "=", self.opts["conum"]),
+                            ("scg_ccod", "=", self.ccod),
+                            ("scg_snum", "=", sec),
+                            ("scg_rnum", "=", rnd)])
+                        for skp in skps:
+                            if skp[0] in hist:
+                                continue
+                            if skp[0] > 900000 or skp[1] > 900000:
+                                continue
+                            #clubs[club][day][sec][rnd].append(skp)
+                            if skp not in rnds[rnd]:
+                                rnds[rnd].append(skp)
+                            hist.extend(skp)
+                self.again = True
+                while self.again:
+                    self.getRinks(club, day)
+                    for x in xrange(5000):
+                        clash = 0
+                        draws = []
+                        rhist = {}
+                        least = [999, []]
+                        for rnd in rnds:
+                            allrk = []
+                            arink = []
+                            for pair in rnds[rnd]:
+                                done = False
+                                if pair[0] not in rhist:
+                                    rhist[pair[0]] = []
+                                if pair[1] not in rhist:
+                                    rhist[pair[1]] = []
+                                rnks = doShuffle()
+                                for rnk in rnks:
+                                    if rnk in arink:
+                                        continue
+                                    if rnk in rhist[pair[0]]:
+                                        continue
+                                    if rnk in rhist[pair[1]]:
+                                        continue
+                                    allrk.append(pair + [rnk])
+                                    rhist[pair[0]].append(rnk)
+                                    rhist[pair[1]].append(rnk)
+                                    arink.append(rnk)
+                                    done = True
+                                    break
+                                if not done:
+                                    for rnk in rnks:
+                                        if rnk not in arink:
+                                            allrk.append(pair + [rnk])
+                                            rhist[pair[0]].append(rnk)
+                                            rhist[pair[1]].append(rnk)
+                                            arink.append(rnk)
+                                            clash += 1
+                                            break
+                            draws.extend(allrk)
+                        if clash < least[0]:
+                            least = [clash, copy.deepcopy(draws)]
+                    if least[0]:
+                        ok = askQuestion(self.opts["mf"].body, "Rinks Error",
+                            """There are Insufficient Rinks to Avoid Clashes (%s).
+
+Do you want to Re-Allocate Rinks for %s on %s?""" % (least[0], self.club[1], self.day[1]), default="no")
+                        if ok == "no":
+                            self.again = False
                     else:
-                        rnks = copyList(rinks)
-                    finis = []
+                        self.again = False
+                for tm in least[1]:
                     where = [
                         ("scg_cono", "=", self.opts["conum"]),
-                        ("scg_ccod", "=", self.ccod),
-                        ("scg_snum", "=", sec),
-                        ("scg_subs", "=", sub),
-                        ("scg_rnum", "=", rnd)]
-                    recs = self.sql.getRec(tables="scpgme", where=where,
-                        order="scg_group")
-                    qty = len(rnks) + 1
-                    for rec in recs:
-                        one = rec[7]
-                        two = rec[8]
-                        if one in finis or two in finis:
-                            continue
-                        done = False
-                        for q in xrange(qty):
-                            for rk in rnks:
-                                if not one in skpdic:
-                                    skpdic[one] = {}
-                                if not rk in skpdic[one]:
-                                    skpdic[one][rk] = 0
-                                if not two in skpdic:
-                                    skpdic[two] = {}
-                                if not rk in skpdic[two]:
-                                    skpdic[two][rk] = 0
-                                tot = skpdic[one][rk] + skpdic[two][rk]
-                                if tot <= q:
-                                    for skp in (one, two):
-                                        whr = copyList(where)
-                                        whr.append(("scg_scod", "=", skp))
-                                        self.sql.updRec("scpgme",
-                                            cols=["scg_rink"], data=[rk],
-                                            where=whr)
-                                    finis.extend([one, two])
-                                    skpdic[one][rk] += 1
-                                    skpdic[two][rk] += 1
-                                    rnks.remove(rk)
-                                    done = True
-                                    break
-                            if done:
-                                break
+                        ("scg_ccod", "=", self.ccod)]
+                    whr = where[:]
+                    whr.append(("scg_scod", "=", tm[0]))
+                    whr.append(("scg_ocod", "=", tm[1]))
+                    self.sql.updRec("scpgme", cols=["scg_rink"], data=[tm[2]],
+                        where=whr)
+                    whr = where[:]
+                    whr.append(("scg_scod", "=", tm[1]))
+                    whr.append(("scg_ocod", "=", tm[0]))
+                    self.sql.updRec("scpgme", cols=["scg_rink"], data=[tm[2]],
+                        where=whr)
+
+    def getRinks(self, club, day):
+        self.club = [club, self.sql.getRec(tables="scpclb", cols=["scc_name"],
+            where=[("scc_club", "=", club)], limit=1)[0]]
+        self.day = [day, CCD(day, "D1", 10).disp]
+        tit = ("{:^22}\n{:^22}".format(
+            "Rinks for %s" % self.club[1], self.day[1]))
+        fld = (
+            (("T",0,0,0),"IUA",20,"Greens","",
+                "A","N",self.doGreen,None,None,("notblank",)),)
+        self.df.setWidget(self.df.mstFrame, state="hide")
+        self.rk = TartanDialog(self.opts["mf"], title=tit, tops=True,
+            eflds=fld, tend=((self.doRnkEnd,"n"),), rxit=(self.doRnkExit,))
+        self.opts["mf"].startLoop()
+        self.df.setWidget(self.df.mstFrame, state="show")
+
+    def doGreen(self, frt, pag, r, c, p, i, w):
+        grns = w.split(",")
+        self.rnks = []
+        for grn in grns:
+            if grn in ("A", "B", "C", "D"):
+                for rnk in xrange(1, 7):
+                    self.rnks.append("%s%s" % (grn, rnk))
+            else:
+                for rnk in grn[1:]:
+                    self.rnks.append("%s%s" % (grn[0], rnk))
+
+    def doRnkEnd(self):
+        self.rinks = []
+        self.rinke = []
+        for rnk in self.rnks:
+            if rnk[1] == "1":
+                self.rinke.append(rnk)
+            elif rnk[1] == "6" and not self.rnks.count("7"):
+                self.rinke.append(rnk)
+            elif rnk[1] == "7":
+                self.rinke.append(rnk)
+            else:
+                self.rinks.append(rnk)
+        self.rk.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def doRnkExit(self):
+        self.rk.closeProcess()
+        self.opts["mf"].closeLoop()
 
     def printRoundRobin(self, sec, sub):
         self.printHeading(sec, sub)
@@ -1441,7 +1548,7 @@
             fill=1)
         self.fpdf.drawText("VENUE", w=38, border="TLRB", align="C", fill=1)
         self.fpdf.setFont(size=10)
-        y = self.fpdf.get_y()
+        y1 = self.fpdf.get_y()
         whr = copyList(self.where)
         whr.append(("scg_rnum", "=", 1))
         plrs = self.sql.getRec(tables="scpgme", where=whr, order="scg_group")
@@ -1451,6 +1558,7 @@
             txt, bdr = self.getSkip(p[7],0,0)
             self.fpdf.drawText(txt, w=45, border=bdr, ln=0)
             self.fpdf.drawText(self.getClub(mem=p[7]), w=40, border="TLRB")
+        y2 = self.fpdf.get_y()
         # Draw Forms
         rnds = self.sql.getRec(tables=["scprnd", "scpsec"], cols=["scr_rnum",
             "scr_date", "scr_time", "scs_name"], where=[("scs_cono", "=",
@@ -1458,7 +1566,7 @@
             "=", sec), ("scr_cono=scs_cono",), ("scr_ccod=scs_ccod",),
             ("scs_rnum=scr_rnum",)], order="scr_rnum, scr_date")
         for r in rnds:
-            self.fpdf.set_xy(x, y)
+            self.fpdf.set_xy(x, y1)
             txt = self.getRndTxt(r[0])[0]
             self.fpdf.drawText(txt, w=10, border="TLRB", ln=0, align="C")
             date = CCD(r[1], "D1", 10).disp
@@ -1466,8 +1574,8 @@
             dt = "%s %s" % (date, time)
             self.fpdf.drawText(dt, w=32, border="TLRB", ln=0, align="C")
             self.fpdf.drawText(r[3], w=38, border="TLRB")
-            y = self.fpdf.get_y()
-        self.fpdf.set_xy(x, y)
+            y1 = self.fpdf.get_y()
+        self.fpdf.set_xy(x, y2)
         self.fpdf.drawText()
         self.printBoxes(sec, sub)
         if self.subsec == "Y":
@@ -1652,13 +1760,21 @@
         # ad = additional depth
         # qt = number of rows
         # ft = font size
+        whr = copyList(self.gwhr)
+        whr.extend([("scg_snum", "=", sec), ("scg_subs", "=", sub)])
+        skps = self.sql.getRec(tables="scpgme", cols=["max(scg_rnum)"],
+            where=whr, limit=1)
+        if skps[0] < self.rnds:
+            rnds = skps[0] - 1
+        else:
+            rnds = self.rnds
         h = 1.5
-        if self.rnds == 3:
+        if rnds == 3:
             ld = 5
             ad = 10
             qt = 2
             ft = 10
-        elif self.rnds == 5:
+        elif rnds == 5:
             ld = 4
             ad = 13
             qt = 3
@@ -1695,9 +1811,9 @@
         x = ox
         y = oy + 4.5
         w = [5, 5, 5, 7, 7, 6, 5]
-        for z in xrange(1, self.rnds + 2):
+        for z in xrange(1, rnds + 2):
             row = [x, y, []]
-            if z == (self.rnds + 1):
+            if z == (rnds + 1):
                 row[2].append((w[0]+w[1]+w[2], h, 0.8, "Totals", True))
                 for l in xrange(3, 7):
                     row[2].append((w[l], h, 0, ""))
@@ -1715,7 +1831,7 @@
         nskp = {}   # {group: [scod, name, club,
                     #       {rnum: ocod, ogrp, rink, sfor, sagt, pnts}]}
         for skp in skps:
-            if not skp[0] in nskp:
+            if skp[0] not in nskp:
                 if skp[1] > 900000:
                     mem = ["", "", ""]
                 else:
@@ -1747,41 +1863,46 @@
                 self.fpdf.drawText(skp[1], x=x+(cw*10), y=y, w=30, h=(ld*h))
                 self.fpdf.drawText(skp[2], x=x+(cw*10), w=30, h=(ld*h))
                 self.fpdf.drawText(h=(ld*h))
-                for rnd in xrange(1, self.rnds + 1):
+                for rnd in xrange(1, rnds + 1):
                     self.fpdf.drawText(rnd, x=x, w=(cw*5), h=(ld*h),
                         ln=0, align="C")
                     cd = po[skp[3][rnd][1]]
                     self.fpdf.drawText(cd, w=(cw*5), h=(ld*h),
                         ln=0, align="C")
                     if skp[0] > 900000 or skp[3][rnd][0] > 900000:
-                        txt = ["Bye", "Bye", "0 ", 0.0]
+                        txt = ["Bye", "Bye", "", ""]
                     elif self.scores:
-                        txt = [skp[3][rnd][3], skp[3][rnd][4], skp[3][rnd][5]]
-                        tot[0] += skp[3][rnd][3]
-                        tot[1] += skp[3][rnd][4]
-                        tot[2] += (skp[3][rnd][3] - skp[3][rnd][4])
-                        tot[3] += skp[3][rnd][5]
+                        f = skp[3][rnd][3]
+                        a = skp[3][rnd][4]
+                        n = (f - a)
+                        p = skp[3][rnd][5]
+                        txt = [f, a, n, p]
+                        tot[0] += f
+                        tot[1] += a
+                        tot[2] += n
+                        tot[3] = float(ASD(tot[3]) + ASD(p))
                     else:
                         txt = ["", "", "", ""]
                     self.fpdf.drawText(skp[3][rnd][2], w=(cw*5), h=(ld*h),
                         ln=0, align="C")
+                    tx = self.fpdf.get_x()
                     self.fpdf.drawText(txt[0], w=(cw*7), h=(ld*h),
                         ln=0, align="C")
                     self.fpdf.drawText(txt[1], w=(cw*7), h=(ld*h),
-                        ln=0, align="R")
+                        ln=0, align="C")
                     self.fpdf.drawText(txt[2], w=(cw*6), h=(ld*h),
                         ln=0, align="C")
                     self.fpdf.drawText(txt[3], w=(cw*5), h=(ld*h),
-                        align="C")
+                        align="R")
                 if self.scores:
-                    self.fpdf.drawText("", x=x, w=(cw*15), h=(ld*h),
-                        ln=0, align="C")
-                    self.fpdf.drawText(tot[0], w=(cw*10), h=(ld*h),
-                        ln=0, align="C")
-                    self.fpdf.drawText(tot[1], w=(cw*10), h=(ld*h),
-                        ln=0, align="C")
-                    self.fpdf.drawText(tot[2], w=(cw*5), h=(ld*h),
-                        align="C")
+                    self.fpdf.drawText(tot[0], x=tx, w=(cw*7), h=(ld*h),
+                        ln=0, align="C")
+                    self.fpdf.drawText(tot[1], w=(cw*7), h=(ld*h),
+                        ln=0, align="C")
+                    self.fpdf.drawText(tot[2], w=(cw*6), h=(ld*h),
+                        ln=0, align="C")
+                    self.fpdf.drawText(tot[3], w=(cw*5), h=(ld*h),
+                        align="R")
                 x = x + (cw * 41)
                 sk += 1
             oy += ld * (ad + 1)
@@ -1816,7 +1937,7 @@
             byen = 900000
             pair = 0
             self.two = False
-            nsec = [secs[:len(secs) / 2], secs[len(secs) / 2:]]
+            nsec = [secs[:int(len(secs) / 2)], secs[int(len(secs) / 2):]]
             data = [self.opts["conum"], self.ccod, "P", 1, "", 1, "S", 0, 0, 0,
                 0, 0, 0, 0, 0, 0]
         for grp in xrange(1, 3):
@@ -1846,7 +1967,7 @@
                         skips.append(["%s" % skp[0], "%s" % skp[1], 0, 1])
             else:
                 # Allocate to pair groups
-                bye = byes / 2
+                bye = int(byes / 2)
                 qty = len(nsec[grp - 1])
                 if self.subsec == "Y" and qty % 2:
                     if grp == 1:
@@ -1975,9 +2096,9 @@
     try:
         opts, args = getopt.getopt(sys.argv[1:],"r:")
     except:
-        print
-        print "Usage: -r rcfile"
-        print
+        print()
+        print("Usage: -r rcfile")
+        print()
         sys.exit()
     rcdic = loadRcFile(opts[0][1])
     dbm = Dbase(rcdic)

=== modified file 'scp/sc2030.py'
--- scp/sc2030.py	2017-02-25 14:03:05 +0000
+++ scp/sc2030.py	2017-06-29 06:40:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Sectional Competition Capture Match Results.
@@ -20,7 +18,7 @@
 class sc2030:
     def __init__(self, **opts):
         self.opts = opts
-        if not "test" in opts:
+        if "test" not in opts:
             self.opts["test"] = None
         if self.setVariables():
             if self.opts["test"]:
@@ -220,7 +218,7 @@
             self.ccod, self.rnum, impfle = self.opts["test"]
             err = self.doCmpCod("T", 0, 0, 0, 0, 0, self.ccod)
             if err:
-                print err
+                print(err)
                 return
             impdlg = False
         else:
@@ -282,7 +280,7 @@
             else:
                 self.ierr = False
                 if self.ssub == "Y":
-                    secs = self.nsec / 2
+                    secs = int(self.nsec / 2)
                 else:
                     secs = self.nsec
                 for self.snum in xrange(1, secs + 1):
@@ -588,7 +586,7 @@
                 nums[scod][self.sql.scpgme_col.index("scg_sagt")] = 0
                 nums[scod][self.sql.scpgme_col.index("scg_seed")] = 0
                 nums[scod][self.sql.scpgme_col.index("scg_pair")] = 0
-                if not scod in byes:
+                if scod not in byes:
                     if sfor > sagt:
                         nums[scod][self.sql.scpgme_col.index("scg_scod")] = scod
                     else:
@@ -616,7 +614,7 @@
                 if not lsec:
                     lsec = snum
                 subs = one[self.sql.scpgme_col.index("scg_subs")]
-                if not group == one[self.sql.scpgme_col.index("scg_group")]:
+                if group != one[self.sql.scpgme_col.index("scg_group")]:
                     group = one[self.sql.scpgme_col.index("scg_group")]
                     pair = 1
                 else:
@@ -747,7 +745,7 @@
 
     def getSubs(self, sec):
         if self.ssub == "Y":
-            snum = (sec + 1) / 2
+            snum = int((sec + 1) / 2)
             if sec % 2:
                 subs = "A"
             else:
@@ -764,18 +762,19 @@
     try:
         opts, args = getopt.getopt(sys.argv[1:],"r:")
     except:
-        print
-        print "Usage: -r rcfile"
-        print
+        print()
+        print("Usage: -r rcfile")
+        print()
         sys.exit()
+    print(sys.argv)
     rcdic = loadRcFile(opts[0][1])
     dbm = Dbase(rcdic)
     if not dbm.err:
         mf = MainFrame(rcdic=rcdic)
         mf.dbm = dbm
         mf.dbm.openDbase()
-        if len(sys.argv) > 1:
-            test = (int(sys.argv[1]), int(sys.argv[2]), sys.argv[3])
+        if len(sys.argv) > 3:
+            test = (int(sys.argv[3]), int(sys.argv[4]), sys.argv[5])
         else:
             test = None
         sc2030(**{"mf": mf, "conum":1, "conam": "Bowls Association",

=== modified file 'scp/sc3010.py'
--- scp/sc3010.py	2017-02-25 14:03:05 +0000
+++ scp/sc3010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     List of Entered Players.

=== modified file 'scp/scc210.py'
--- scp/scc210.py	2017-02-25 14:03:05 +0000
+++ scp/scc210.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Clubs's Maintenance.

=== modified file 'sls/si2010.py'
--- sls/si2010.py	2017-02-25 14:03:05 +0000
+++ sls/si2010.py	2017-06-29 06:42:35 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Sales Invoicing Data Capture.
@@ -131,7 +129,7 @@
             return "Invalid Date, Not In Financial Period"
         self.trdt = w
         self.trdd = self.pr.t_disp[0][0][1]
-        self.curdt = self.trdt / 100
+        self.curdt = int(self.trdt / 100)
         self.batch = "S%s" % self.curdt
 
     def doDelNote(self, frt, pag, r, c, p, i, w):
@@ -1338,7 +1336,7 @@
 
     def doReprntType(self, frt, pag, r, c, p, i, w):
         self.dtyp = w
-        if self.delnos == "Y" and not self.dtyp == "I":
+        if self.delnos == "Y" and self.dtyp != "I":
             self.rp.loadEntry(frt, pag, p+1, data="N")
             return "sk1"
 

=== modified file 'sls/si2020.py'
--- sls/si2020.py	2017-02-25 14:03:05 +0000
+++ sls/si2020.py	2017-06-29 08:54:03 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Sales Invoicing Point of Sale Terminal
@@ -27,7 +25,7 @@
             self.doLevel()
             if self.level:
                 self.doDrawScreens()
-                self.doLoagGrps(0)
+                self.doLoadGrps(0)
                 self.opts["mf"].startLoop()
                 self.opts["mf"].setThemeFont()
                 self.opts["mf"].createChildren()
@@ -108,7 +106,7 @@
         ####################################################################
         t = time.localtime()
         self.trdt = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.curdt = self.trdt / 100
+        self.curdt = int(self.trdt / 100)
         self.batch = "S%s" % self.curdt
         # Load Groups and Items
         self.grps = self.sql.getRec(tables="strgrp", where=[("gpm_cono",
@@ -245,7 +243,7 @@
             """)
         # Set Styles
         self.style = ttk.Style()
-        if not "RoundedFrame" in self.style.element_names():
+        if "RoundedFrame" not in self.style.element_names():
             self.style.element_create("RoundedFrame",
                 "image", "frameBorder", border=16, sticky="nsew")
             self.style.layout("RoundedFrame",
@@ -393,12 +391,12 @@
         b.grid(column=1, row=5, sticky="nsew")
         b = self.doButton(self.itmf, "Undo", self.doUndo, True, "C")
         b.grid(column=2, row=5, sticky="nsew")
-        b = self.doButton(self.itmf, "Groups", (self.doLoagGrps, 0), True, "C")
+        b = self.doButton(self.itmf, "Groups", (self.doLoadGrps, 0), True, "C")
         b.grid(column=3, row=5, sticky="nsew")
         self.opts["mf"].window.deiconify()
         self.opts["mf"].window.update()
 
-    def doLoagGrps(self, page):
+    def doLoadGrps(self, page):
         try:
             self.itmf.grid_forget()
         except:
@@ -407,13 +405,17 @@
         groups = self.glist[self.page]
         for x in xrange(0, len(groups), 4):
             y = int(x / 4)
-            exec "self.GR%sC%s.set(self.doWrap(groups[x][1]))" % (y,0)
+            w = getattr(self, "GR%sC%s" % (y, 0))
+            w.set(self.doWrap(groups[x][1]))
             if (len(groups) - x) > 1:
-                exec "self.GR%sC%s.set(self.doWrap(groups[x+1][1]))" % (y,1)
+                w = getattr(self, "GR%sC%s" % (y, 1))
+                w.set(self.doWrap(groups[x+1][1]))
             if (len(groups) - x) > 2:
-                exec "self.GR%sC%s.set(self.doWrap(groups[x+2][1]))" % (y,2)
+                w = getattr(self, "GR%sC%s" % (y, 2))
+                w.set(self.doWrap(groups[x+2][1]))
             if (len(groups) - x) > 3:
-                exec "self.GR%sC%s.set(self.doWrap(groups[x+3][1]))" % (y,3)
+                w = getattr(self, "GR%sC%s" % (y, 3))
+                w.set(self.doWrap(groups[x+3][1]))
         self.grpf.grid(column=0, row=0, sticky="nw")
         self.opts["mf"].window.update()
         self.grppag = True
@@ -444,13 +446,17 @@
         items = self.ilist[self.page]
         for x in xrange(0, len(items), 4):
             y = int(x / 4)
-            exec "self.IR%sC%s.set(self.doWrap(items[x][1]))" % (y,0)
+            w = getattr(self, "IR%sC%s" % (y, 0))
+            w.set(self.doWrap(items[x][1]))
             if (len(items) - x) > 1:
-                exec "self.IR%sC%s.set(self.doWrap(items[x+1][1]))" % (y,1)
+                w = getattr(self, "IR%sC%s" % (y, 1))
+                w.set(self.doWrap(items[x+1][1]))
             if (len(items) - x) > 2:
-                exec "self.IR%sC%s.set(self.doWrap(items[x+2][1]))" % (y,2)
+                w = getattr(self, "IR%sC%s" % (y, 2))
+                w.set(self.doWrap(items[x+2][1]))
             if (len(items) - x) > 3:
-                exec "self.IR%sC%s.set(self.doWrap(items[x+3][1]))" % (y,3)
+                w = getattr(self, "IR%sC%s" % (y, 3))
+                w.set(self.doWrap(items[x+3][1]))
         self.itmf.grid(column=0, row=0, sticky="nw")
         self.grppag = False
         self.itmpag = True
@@ -463,9 +469,7 @@
         return newt
 
     def doCode(self, args):
-        b = getattr(self, "IR%sC%s" % args)
-        butt = b.get()
-        if not butt:
+        if not getattr(self, "IR%sC%s" % args).get():
             return
         self.code = self.ilist[self.page][(args[0] * 4) + args[1]][0]
         strmf1 = self.sql.getRec(tables="strmf1", where=[("st1_cono",
@@ -480,7 +484,7 @@
         self.totqty += qty.work
         self.doCalSell(qty.work)
         excl = CCD(qty.work * self.rrp, "SD", 12.2)
-        rate = 1 + (vatrte / 100)
+        rate = 1 + (vatrte / 100.0)
         incl = CCD(round(excl.work * rate, 2), "SD", 12.2)
         self.totval = float(ASD(self.totval.work) + ASD(incl.work))
         self.totval = CCD(self.totval, "SD", 12.2)
@@ -542,7 +546,7 @@
         if payf:
             self.payf.destroy()
         self.doClearBodyLines()
-        self.doLoagGrps(0)
+        self.doLoadGrps(0)
         if payf:
             self.opts["mf"].closeLoop()
 
@@ -666,7 +670,7 @@
         pass
 
     def doEntry(self, char, event=None):
-        if not self.ttype == "I" or not self.ptype == "cash":
+        if self.ttype != "I" or self.ptype != "cash":
             return
         amt = self.pay.get() + char
         self.pay.delete(0, "end")
@@ -674,7 +678,7 @@
 
     def doExit(self, event=None):
         self.payf.destroy()
-        self.doLoagGrps(0)
+        self.doLoadGrps(0)
         self.opts["mf"].closeLoop()
 
     def doClear(self, event=None):
@@ -682,7 +686,7 @@
         self.chg.delete(0, "end")
 
     def doCalc(self, event=None):
-        if not self.ttype == "I" or not self.ptype == "cash":
+        if self.ttype != "I" or self.ptype != "cash":
             return
         # Display Change
         self.paid = CCD(self.pay.get(), "SD", 12.2)
@@ -842,7 +846,7 @@
                 self.sql.insRec("ctlvtf", data=[self.opts["conum"], vcd, "O",
                     self.curdt, "D", rtn, self.batch, ref1, self.trdt, acno,
                     name, sel, vat, 0, self.opts["capnm"], self.trdt, 0])
-        if not self.ptype == "account":
+        if self.ptype != "account":
             if self.stgl == "Y":
                 if self.ptype == "cash":
                     glac = self.cash
@@ -941,7 +945,7 @@
         self.totqty = 0
         self.totval = CCD(0, "SD", 12.2)
         self.row = 0
-        self.doLoagGrps(0)
+        self.doLoadGrps(0)
 
     def doLogout(self):
         if self.row:
@@ -960,7 +964,7 @@
         if self.grppag:
             self.doClearGroups()
             self.page -= 1
-            self.doLoagGrps(self.page)
+            self.doLoadGrps(self.page)
         else:
             self.doClearItems()
             self.page -= 1
@@ -972,7 +976,7 @@
                 return
             self.doClearGroups()
             self.page += 1
-            self.doLoagGrps(self.page)
+            self.doLoadGrps(self.page)
         else:
             if self.page == len(self.ilist) - 1:
                 return
@@ -996,11 +1000,11 @@
     def doClearGroups(self, event=None):
         for x in xrange(5):
             for y in xrange(4):
-                exec "self.GR%sC%s.set('')" % (x, y)
+                getattr(self, "GR%sC%s" % (x, y)).set('')
 
     def doClearItems(self, event=None):
         for x in xrange(5):
             for y in xrange(4):
-                exec "self.IR%sC%s.set('')" % (x, y)
+                getattr(self, "IR%sC%s" % (x, y)).set('')
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'sls/si3010.py'
--- sls/si3010.py	2017-02-25 14:03:05 +0000
+++ sls/si3010.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Sales Orders Outstanding Report.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 
 class si3010:
@@ -29,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -97,8 +101,8 @@
     def doOrd1(self, frt, pag, r, c, p, i, w):
         if w:
             acc = self.sql.getRec(tables="slsiv1", where=[("si1_cono", "=",
-                self.opts["conum"]), ("si1_rtn", "=", self.otype), ("si1_docno", "=",
-                w), ("si1_invno", "=", "")], limit=1)
+                self.opts["conum"]), ("si1_rtn", "=", self.otype),
+                ("si1_docno", "=", w), ("si1_invno", "=", "")], limit=1)
             if not acc:
                 return "This is Not an Outstanding Order"
         self.ord1 = w
@@ -108,8 +112,8 @@
             if w < self.ord1:
                 return "Invalid Last Order < First Order"
             acc = self.sql.getRec(tables="slsiv1", where=[("si1_cono", "=",
-                self.opts["conum"]), ("si1_rtn", "=", self.otype), ("si1_docno", "=",
-                w), ("si1_invno", "=", "")], limit=1)
+                self.opts["conum"]), ("si1_rtn", "=", self.otype),
+                ("si1_docno", "=", w), ("si1_invno", "=", "")], limit=1)
             if not acc:
                 return "This is Not an Outstanding Order"
             self.ord2 = w
@@ -203,15 +207,15 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         col = self.sql.slsiv1_col
         self.odr = CCD(data[col.index("si1_docno")], "Na", 9)
         self.si2 = self.sql.getRec(tables="slsiv2", where=[("si2_cono",
-            "=", self.opts["conum"]), ("si2_rtn", "=", self.otype), ("si2_docno", "=",
-            self.odr.work)], order="si2_seq")
+            "=", self.opts["conum"]), ("si2_rtn", "=", self.otype),
+            ("si2_docno", "=", self.odr.work)], order="si2_seq")
         if not self.si2:
             return
         self.mod = CCD(data[col.index("si1_mode")], "UA", 1)

=== modified file 'sls/si3020.py'
--- sls/si3020.py	2017-02-25 14:03:05 +0000
+++ sls/si3020.py	2017-06-29 06:47:56 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Sales By Product Report.
@@ -35,6 +33,10 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -71,7 +73,7 @@
             "where": [("gpm_cono", "=", self.opts["conum"])]}
         fld = (
             (("T",0,0,0),"ID2",7,"Cut-Off Period","",
-                (self.sysdtw/100),"Y",self.doCut,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doCut,None,None,("efld",)),
             (("T",0,1,0),"IUA",1,"Location","",
                 "","Y",self.doLoc,loc,None,("efld",)),
             (("T",0,2,0),"IUA",3,"Product Group","",
@@ -194,9 +196,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         self.grp = CCD(data[0], "UA", 3)

=== modified file 'sls/si3030.py'
--- sls/si3030.py	2017-02-25 14:03:05 +0000
+++ sls/si3030.py	2017-06-29 06:48:43 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Period Sales By Product Report
@@ -35,6 +33,10 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -58,7 +60,7 @@
             "where": [("gpm_cono", "=", self.opts["conum"])]}
         fld = (
             (("T",0,0,0),"ID2",7,"Period","",
-                (self.sysdtw/100),"Y",self.doPer,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doPer,None,None,("efld",)),
             (("T",0,1,0),"IUA",1,"Location","",
                 "","Y",self.doLoc,loc,None,("efld",)),
             (("T",0,2,0),"IUA",3,"Product Group","",
@@ -69,8 +71,8 @@
             tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
 
     def doPer(self, frt, pag, r, c, p, i, w):
-        if w < (self.opts["period"][1][0]/100) or \
-                w > (self.opts["period"][2][0]/100):
+        if w < int(self.opts["period"][1][0] / 100) or \
+                w > int(self.opts["period"][2][0] / 100):
             return "Invalid Period"
         self.per = w
         if self.locs == "N":
@@ -180,9 +182,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3040.py'
--- sls/si3040.py	2017-02-25 14:03:05 +0000
+++ sls/si3040.py	2017-06-29 06:49:03 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Product Sales History Report.
@@ -37,6 +35,10 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i) %6s" % (t[0],
@@ -76,7 +78,7 @@
         r2s = (("Yes","Y"),("No","N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Cut-Off Period","",
-                self.sysdtw/100,"Y",self.doCut,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doCut,None,None,("efld",)),
             (("T",0,1,0),("IRB",r1s),0,"Type","",
                 "V","Y",self.doType,None,None,None),
             (("T",0,2,0),"IUA",1,"Location","",
@@ -231,7 +233,7 @@
         self.grandTotal()
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
+            header=self.tit, repprt=self.df.repprt, fromad=self.fromad,
             repeml=self.df.repeml)
         if self.df.repprt[1] == "X" or not self.tipe:
             return

=== modified file 'sls/si3050.py'
--- sls/si3050.py	2017-02-25 14:03:05 +0000
+++ sls/si3050.py	2017-07-06 12:49:37 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Sales By Customer By Product Report.
@@ -31,6 +29,10 @@
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
@@ -79,9 +81,9 @@
         r1s = (("Yes","Y"),("No","N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Start Period","",
-                (self.sysdtw/100),"Y",self.doSdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doSdate,None,None,("efld",)),
             (("T",0,1,0),"ID2",7,"End Period","",
-                (self.sysdtw/100),"Y",self.doEdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doEdate,None,None,("efld",)),
             (("T",0,2,0),"IUI",3,"Chain Store","",
                 "","Y",self.doDrsChn,chm,None,None),
             (("T",0,3,0),"INA",7,"Account Number","",
@@ -241,9 +243,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3060.py'
--- sls/si3060.py	2017-02-25 14:03:05 +0000
+++ sls/si3060.py	2017-06-29 06:49:57 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Sales By Salesman Report.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class si3060:
@@ -29,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -48,9 +52,9 @@
             "where": [("rpm_cono", "=", self.opts["conum"])]}
         fld = (
             (("T",0,0,0),"ID2",7,"Start Period","",
-                (self.sysdtw/100),"Y",self.doSdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doSdate,None,None,("efld",)),
             (("T",0,1,0),"ID2",7,"End Period","",
-                (self.sysdtw/100),"Y",self.doEdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doEdate,None,None,("efld",)),
             (("T",0,2,0),"INa",3,"Salesman","",
                 "","Y",self.doRep,rpm,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
@@ -151,9 +155,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3070.py'
--- sls/si3070.py	2017-02-25 14:03:05 +0000
+++ sls/si3070.py	2017-06-29 06:50:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salesmen Sales History Report.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, CCD, CreateChart, MyFpdf, ProgressBar
-from TartanClasses import Sql, TartanDialog
+from TartanClasses import ASD, Balances, CCD, CreateChart, GetCtl, MyFpdf
+from TartanClasses import ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import mthnam
 
@@ -30,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "ctlrep", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        slsctl = gc.getCtl("slsctl", self.opts["conum"])
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -49,7 +52,7 @@
             "where": [("rpm_cono", "=", self.opts["conum"])]}
         fld = (
             (("T",0,0,0),"ID2",7,"Ending Period","",
-                (self.sysdtw/100),"Y",self.doDat,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doDat,None,None,("efld",)),
             (("T",0,1,0),"INa",3,"First Rep Code",
                 "First Rep Code","","Y",self.doRep1,rep,None,None),
             (("T",0,2,0),"INa",3,"Last Rep Code",
@@ -61,7 +64,7 @@
 
     def doDat(self, frt, pag, r, c, p, i, w):
         self.end = w
-        yr = w / 100 - 1
+        yr = int(w / 100) - 1
         mth = (w % 100) + 1
         if mth > 12:
             yr = yr + 1
@@ -164,9 +167,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
             CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],
                 [self.start, self.end], [self.tit, "Values"], None, self.mchart)
 

=== modified file 'sls/si3080.py'
--- sls/si3080.py	2017-02-25 14:03:05 +0000
+++ sls/si3080.py	2017-07-01 11:57:24 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Reprinting of Sales Documents.
@@ -142,7 +140,8 @@
             recs = self.sql.getRec(tables=tab, cols=col, where=[("si1_cono",
                 "=", self.opts["conum"]), ("si1_rtn", "=", self.typ),
                 ("si1_invno", "<>", "cancel"), ("drm_cono=si1_cono",),
-                ("drm_chain=si1_chain",), ("drm_acno=si1_acno",)])
+                ("drm_chain=si1_chain",), ("drm_acno=si1_acno",)],
+                order="si1_docno")
             recs = getSingleRecords(self.opts["mf"], tab, col, dic=dic,
                 where=recs, ttype="D")
             iv1 = []

=== modified file 'sls/sic110.py'
--- sls/sic110.py	2017-02-25 14:03:05 +0000
+++ sls/sic110.py	2017-06-27 09:48:11 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Sales Invoicing Control File Maintenance.
@@ -32,7 +30,7 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "Y", "Y", "sales_document", "N"]
+            self.acc = [self.opts["conum"], "Y", "Y", "sales_document", ""]
         else:
             self.new = False
         return True
@@ -59,7 +57,7 @@
                 self.acc[2],"N",None,None,None,None),
             (("T",0,2,0),"INA",20,"Invoice Template","",
                 self.acc[3],"N",self.doTplNam,tpl,None,None),
-            (("T",0,3,0),("IRB",r1s),0,"Point of Sale Tills","",
+            (("T",0,3,0),"ITX",50,"Email Address","",
                 self.acc[4],"N",None,None,None,None))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2017-03-25 15:17:51 +0000
+++ std/TartanClasses.py	2017-08-24 07:40:38 +0000
@@ -14,7 +14,7 @@
 # Standard Python modules
 #========================================================
 import calendar, csv, functools, glob, gzip, os, re, shutil, sys
-import tarfile, textwrap, threading, time, urllib2, webbrowser
+import tarfile, textwrap, threading, time, webbrowser
 #========================================================
 # TARTAN Standard Functions and Variables e.g. showError
 #========================================================
@@ -37,9 +37,10 @@
     import fpdf
     if not fpdf.fpdf.Image:
         raise Exception
-except:
-    print "Missing fpdf or python-imaging module"
-    sys.exit()
+except Exception as e:
+    print(e)
+    print("Missing fpdf or python-imaging module")
+    os._exit(1)
 #========================================================
 # Excel import and export modules
 #========================================================
@@ -144,11 +145,13 @@
         "logout": os.path.join(imgdir, "quit.png"),
         "maintain": os.path.join(imgdir, "edit.png"),
         "manual": os.path.join(imgdir, "edit.png"),
+        "members": os.path.join(imgdir, "teams.png"),
         "modify": os.path.join(imgdir, "convert.png"),
         "movements": os.path.join(imgdir, "question.png"),
         "none": os.path.join(imgdir, "no.png"),
         "notes": os.path.join(imgdir, "edit.png"),
         "payment": os.path.join(imgdir, "greencash.png"),
+        "recipe": os.path.join(imgdir, "entries.png"),
         "reprint": os.path.join(imgdir, "print.png"),
         "re-sequence": os.path.join(imgdir, "reorder.png"),
         "reset": os.path.join(imgdir, "clear.png"),
@@ -236,11 +239,11 @@
         if x < 0:
             x = 0
         elif x + w_width + 32 > s_width:
-            x = max(0, (s_width - w_width) / 2)
+            x = max(0, int((s_width - w_width) / 2))
         if y < 0:
             y = 0
         elif y + w_height + 32 > s_height:
-            y = max(0, (s_height - w_height) / 2)
+            y = max(0, int((s_height - w_height) / 2))
         return w_width, x, y
 
     def getGeometry(window):
@@ -260,7 +263,7 @@
         if window.winfo_class().lower() == "tk":
             parent = None
         if parent:
-            if not parent.winfo_class().lower() in ("tk", "toplevel"):
+            if parent.winfo_class().lower() not in ("tk", "toplevel"):
                 parent = parent.winfo_toplevel()
             ww, wx, wy = getWindowXY(window, parent=parent, size=size)
         else:
@@ -275,7 +278,7 @@
                 wx = window.winfo_screenwidth() - ww
                 wy = 0
             else:
-                wx = (window.winfo_screenwidth() - ww) / 2
+                wx = int((window.winfo_screenwidth() - ww) / 2)
                 wy = 0
         if size:
             window.geometry("%sx%s+%s+%s" % (size[0], size[1], wx, wy))
@@ -352,7 +355,7 @@
             self.rows = {}
 
         def addButton(self, text, cmd, row=0, spn=1):
-            if not row in self.rows:
+            if row not in self.rows:
                 self.rows[row] = 0
             text, pos = getUnderline(widget=self, text=text)
             but = MyButton(self, cmd=cmd, text=text, underline=pos)
@@ -382,7 +385,7 @@
             kwargs["width"] = -1
             if "image" in kwargs:
                 img = False
-            if not "underline" in kwargs:
+            if "underline" not in kwargs:
                 kwargs["underline"] = -1
             kwargs["takefocus"] = False
             ttk.Button.__init__(self, parent, **kwargs)
@@ -402,7 +405,7 @@
                 self.bind("<Return>", self.execButCmd)
                 self.bind("<KP_Enter>", self.execButCmd)
                 self.bind("<ButtonRelease-1>", self.execButCmd)
-                if "underline" in kwargs and not kwargs["underline"] == -1:
+                if "underline" in kwargs and kwargs["underline"] != -1:
                     self.bind("<Alt_L><%s>" % kwargs["text"]
                         [kwargs["underline"]].upper(), self.execButCmd)
                     self.bind("<Alt_L><%s>" % kwargs["text"]
@@ -495,8 +498,8 @@
             if self._fdate:
                 date = CCD(self._fdate, "D1", 10)
                 if not date.err:
-                    year = date.work / 10000
-                    month = date.work / 100 % 100
+                    year = int(date.work / 10000)
+                    month = int(date.work / 100) % 100
                     day = date.work % 100
             if not year:
                 year = self.datetime.now().year
@@ -606,8 +609,8 @@
                 self.selected = projectDate(self.selected, -7)
             else:
                 self.selected = projectDate(self.selected, 7)
-            self._idate = self.datetime(self.selected / 10000,
-                self.selected / 100 % 100, self.selected % 100)
+            self._idate = self.datetime(int(self.selected / 10000),
+                int(self.selected / 100) % 100, self.selected % 100)
             self._build_calendar()
 
         def _quit(self, event=None):
@@ -619,7 +622,7 @@
 
     class MyCheckButton(ttk.Checkbutton):
         def __init__(self, parent, **kwargs):
-            if not "style" in kwargs:
+            if "style" not in kwargs:
                 kwargs["style"] = "MyCheckbutton.TCheckbutton"
             ttk.Checkbutton.__init__(self, parent, **kwargs)
             self.configure(onvalue="Y", offvalue="N")
@@ -835,7 +838,7 @@
             # Save and disable buttons
             frm = [self.frame.winfo_toplevel()]
             self.butsve = []
-            for x in range(10):
+            for x in xrange(10):
                 try:
                     for ch in frm[x].winfo_children():
                         if ch.winfo_class() == "TFrame":
@@ -898,8 +901,8 @@
                         self.dflt = b
             self.frame.update_idletasks()
             if self.geom:
-                x = int(self.frame.winfo_screenwidth()) / 2 - 200
-                y = int(self.frame.winfo_screenheight()) / 2 - 150
+                x = int(int(self.frame.winfo_screenwidth()) / 2) - 200
+                y = int(int(self.frame.winfo_screenheight()) / 2) - 150
                 w = self.frame.winfo_reqwidth()
                 h = self.frame.winfo_reqheight()
                 self.parent.geometry("%dx%d+%d+%d" % (w, h, x, y))
@@ -946,7 +949,7 @@
     class MyRadioButton(ttk.Radiobutton):
         def __init__(self, parent, cmd=None, **kwargs):
             self.parent = parent
-            if not "style" in kwargs:
+            if "style" not in kwargs:
                 kwargs["style"] = "MyRadiobutton.TRadiobutton"
             ttk.Radiobutton.__init__(self, parent, **kwargs)
             self.event_add("<<myradio>>", "<F5>", "<Escape>")
@@ -961,7 +964,7 @@
 
         def goLeft(self, event):
             childs = self.parent.winfo_children()
-            for x in range(0, len(childs)):
+            for x in xrange(0, len(childs)):
                 if childs[x].winfo_class() == "TRadiobutton":
                     break
             if self.focus_get() == childs[x]:
@@ -972,7 +975,7 @@
 
         def goRight(self, event):
             childs = self.parent.winfo_children()
-            for x in range(len(childs) - 1, -1, -1):
+            for x in xrange(len(childs) - 1, -1, -1):
                 if childs[x].winfo_class() == "TRadiobutton":
                     break
             if self.focus_get() == childs[x]:
@@ -1070,11 +1073,11 @@
         minc = Minimum columns to show
         """
         def __init__(self, **opts):
-            if not "icon" in opts:
+            if "icon" not in opts:
                 opts["icon"] = None
-            if not "chgt" in opts:
+            if "chgt" not in opts:
                 opts["chgt"] = 1
-            if not "loop" in opts:
+            if "loop" not in opts:
                 opts["loop"] = True
             self.opts = opts
             self.drawGrid()
@@ -1130,7 +1133,7 @@
                 else:
                     tw = int(col[1])
                 txt = "X" * tw
-                for _ in range(1, self.opts["chgt"]):
+                for _ in xrange(1, self.opts["chgt"]):
                     txt += "\n"
                 lab = MyLabel(self.window, text=txt, font=bold)
                 self.window.update_idletasks()
@@ -1218,7 +1221,7 @@
                     y2 = y1 + (ch * 2)
                 rect = self.cv1.create_rectangle(x1, y1, x2, y2, width=2,
                     fill=self.nbg)
-                text = self.cv1.create_text(x1 + 10, y1 + (ch / 2),
+                text = self.cv1.create_text(x1 + 10, y1 + int(ch / 2),
                     text=lab[0], anchor="w", font=bold, fill=self.nfg)
                 x1 = x2
             # Column headings
@@ -1234,7 +1237,7 @@
                         fill=self.nbg)
                     txt = "{:^%i}" % cc
                     txt = txt.format(col[0])
-                    text = self.cv3.create_text(x1 + 10, y1 + (ch / 2),
+                    text = self.cv3.create_text(x1 + 10, y1 + int(ch / 2),
                         text=txt, font=bold, fill=self.nfg, anchor="w")
                     x1 = x2
                 x1 = 0
@@ -1245,7 +1248,7 @@
                 y2 = y1 + ch
                 rect = self.cv3.create_rectangle(x1, y1, x2, y2, width=2,
                     fill=self.nbg)
-                text = self.cv3.create_text(x1 + 10, y1 + (ch / 2),
+                text = self.cv3.create_text(x1 + 10, y1 + int(ch / 2),
                     text=col[0], anchor="w", font=bold, fill=self.nfg)
                 x1 = x2
             y1 = 0
@@ -1266,7 +1269,7 @@
                         tfill, rfill = None, None
                     rect = self.cv2.create_rectangle(x1, y1, x2, y2, width=2,
                         fill=rfill)
-                    text = self.cv2.create_text(x1 + 10, y1 + (ch / 2),
+                    text = self.cv2.create_text(x1 + 10, y1 + int(ch / 2),
                         text=txt, font=bold, fill=tfill, anchor="w")
                     x1 = x2
                 x1 = 0
@@ -1304,7 +1307,7 @@
                         txt = cdat[0]
                     if self.opts["chgt"] == 2 and not txt.count("\n"):
                         txt = "\n%s" % t
-                    text = self.cv4.create_text(x1 + 10, y1 + (ch / 2),
+                    text = self.cv4.create_text(x1 + 10, y1 + int(ch / 2),
                         text=txt, anchor="w", font=bold, fill=tfill)
                     if "cmds" in self.opts:
                         for cmd in self.opts["cmds"]:
@@ -1398,7 +1401,7 @@
         * This frame only allows vertical scrolling
         """
         def __init__(self, parent, *args, **kw):
-            if not "height" in kw:
+            if "height" not in kw:
                 kw["height"] = 200
             MyFrame.__init__(self, parent, *args, **kw)
             # create a canvas object and a vertical scrollbar for scrolling it
@@ -1441,7 +1444,7 @@
 def rgb(col):
     # RGB color tuple
     if type(col) == int:
-        return (col / 65536), (col / 256 % 256), (col % 256)
+        return int(col / 65536), int(col / 256) % 256, col % 256
     if col[0] == "#":
         col = col.replace("#", "")
         col = (col[0:2], col[2:4], col[4:6])
@@ -1449,7 +1452,7 @@
 #=========================================================
 
 class MainFrame:
-    def __init__(self, title=None, rcdic=None, xdisplay=True):
+    def __init__(self, title=None, rcdic=None, xdisplay=True, resiz=False):
         if not rcdic:
             self.rcdic = loadRcFile()
         else:
@@ -1464,13 +1467,13 @@
             self.dbm = None
             if xdisplay:
                 if not GUI:
-                    print "Missing Tkinter and/or ttk modules"
+                    print("Missing Tkinter and/or ttk modules")
                     sys.exit()
                 if not title:
                     title = "Tartan Systems - (%s P Malherbe)" % u"\u00A9"
                 icon = os.path.join(self.rcdic["prgdir"], "img", "tartan.png")
                 self.window = MkWindow(tk=True, title=title, icon=icon,
-                        resiz=False).newwin
+                    resiz=resiz).newwin
                 self.setThemeFont()
                 self.createChildren()
             else:
@@ -1488,7 +1491,7 @@
             ("TkHeadingFont", self.rcdic["dft"], self.rcdic["dfs"], "normal"))
         for font in fonts:
             nf = tkfont.nametofont(font[0])
-            if not len(font) == 4:
+            if len(font) != 4:
                 nf.configure(family=font[1], size=font[2])
             else:
                 nf.configure(family=font[1], size=font[2], weight=font[3])
@@ -1517,7 +1520,8 @@
             self.style.configure("MyCheckbutton.TCheckbutton")
             self.style.map("MyCheckbutton.TCheckbutton",
                 foreground=[
-                    ("focus", "white")],
+                    ("focus", "white"),
+                    ("disabled", "black")],
                 background=[
                     ("focus", "gray")],
                 indicatorbackground=[
@@ -1533,7 +1537,8 @@
             self.style.configure("MyRadiobutton.TRadiobutton")
             self.style.map("MyRadiobutton.TRadiobutton",
                 foreground=[
-                    ("focus", "white")],
+                    ("focus", "white"),
+                    ("disabled", "black")],
                 background=[
                     ("focus", "gray")],
                 indicatorbackground=[
@@ -1854,7 +1859,7 @@
         # Create a list of menus and a dictionary of modules
         menus = []
         for m in self.mod:
-            if not self.lvl is None and m[3] > self.lvl:
+            if self.lvl is not None and m[3] > self.lvl:
                 continue
             if m[1] not in menus:
                 menus.append(m[1])
@@ -1880,20 +1885,21 @@
             bg = self.mf.rcdic["nbg"]
         style = ttk.Style()
         style.configure("MLabel.TLabel", foreground=fg, background=bg)
+
         self.mf.head.configure(text="Tartan Systems Menu (%s)" % self.usr,
             style="MLabel.TLabel")
         self.menubar = MyFrame(self.mf.body)
         labs = {}
-        buts = []
-        mwth = 0
+        mens = {}
+        buts = {}
         column = 0
         font = tkfont.Font(font=(self.mf.rcdic["mft"], self.mf.rcdic["mfs"]))
         for m in self.menus:
             if m[0] == "MM":
-                if not "mbar" in labs:
+                if "mbar" not in labs:
                     labs["mbar"] = []
                 m[2], pos = getUnderline(blist=labs["mbar"], text=m[2])
-                if not m[2][pos] in labs["mbar"]:
+                if m[2][pos] not in labs["mbar"]:
                     labs["mbar"].append(m[2][pos])
                 m[2] = m[2].split()
                 nm = m[2][0].split("'")[0]
@@ -1903,39 +1909,37 @@
                     m[2] = "%s\n%s" % tuple(m[2])
                 else:
                     m[2] = "%s\n%s %s" % tuple(m[2])
-                exec "%s = MyMenuButton(self.menubar, bg=bg, fg=fg, "\
-                    "menu=m[1], text=m[2], underline=pos)" % nm
-                exec "%s = tk.Menu(%s, fg='black', bg='white', "\
-                    "activeforeground=fg, activebackground=bg, "\
-                    "font=font, tearoff=False)" % (m[1], nm)
-                exec "%s['menu'] = %s" % (nm, m[1])
-                exec "mwth += %s.winfo_reqwidth()" % nm
-                buts.append(nm)
+                buts[nm] = MyMenuButton(self.menubar, bg=bg, fg=fg,
+                    menu=m[1], text=m[2], underline=pos)
+                mens[m[1]] = tk.Menu(buts[nm], fg="black", bg="white",
+                    activeforeground=fg, activebackground=bg,
+                    font=font, tearoff=False)
+                buts[nm]["menu"] = mens[m[1]]
                 column += 1
             elif m[0] == "CM":
-                if not m[1] in labs:
+                if m[1] not in labs:
                     labs[m[1]] = []
-                exec "%s = tk.Menu(%s, fg='black', bg='white', "\
-                    "activeforeground=fg, activebackground=bg, "\
-                    "font=font, tearoff=False)" % (m[2], m[1])
+                mens[m[2]] = tk.Menu(mens[m[1]], fg="black", bg="white",
+                    activeforeground=fg, activebackground=bg,
+                    font=font, tearoff=False)
                 m[3], pos = getUnderline(blist=labs[m[1]], text=m[3])
-                if not m[3][pos] in labs[m[1]]:
+                if m[3][pos] not in labs[m[1]]:
                     labs[m[1]].append(m[3][pos])
-                exec '%s.add("cascade", label="%s", menu=%s, font=font, '\
-                    'underline=pos)' % (m[1], m[3], m[2])
+                mens[m[1]].add("cascade", label=m[3], menu=mens[m[2]],
+                    font=font, underline=pos)
         for m in self.mod:
             if m[3] > self.lvl:
                 continue
-            if not m[1] in labs:
+            if m[1] not in labs:
                 labs[m[1]] = []
             if m[0][0] == "P" and len(m) == 6:
                 rtn = int(m[5])
             else:
                 rtn = None
             if m[4] == "Quit":
-                exec "%s.add_separator()" % m[1]
+                mens[m[1]].add_separator()
             m[4], pos = getUnderline(blist=labs[m[1]], text=m[4])
-            if not m[4][pos] in labs[m[1]]:
+            if m[4][pos] not in labs[m[1]]:
                 labs[m[1]].append(m[4][pos])
             cmd = (self.menubar.register(self.cmd), m[0], m[2], m[4], rtn)
             stk = m[2].lower().split()[0]
@@ -1948,12 +1952,12 @@
             if image:
                 image = image.resize((20, 20), 0)
                 setattr(self, "image%s" % stk, ImageTk.PhotoImage(image))
-                exec '%s.add("command", label="%s", command=cmd, font=font, '\
-                    'underline=pos, image=self.image%s, compound="left")' \
-                    % (m[1], m[4], stk)
+                mens[m[1]].add("command", label=m[4], command=cmd, font=font,
+                    underline=pos, image=getattr(self, "image%s" % stk),
+                    compound="left")
             else:
-                exec '%s.add("command", label="%s", command=cmd, font=font, '\
-                    'underline=pos)' % (m[1], m[4])
+                mens[m[1]].add("command", label=m[4], command=cmd, font=font,
+                    underline=pos)
         # Calculate optimal font to show all items
         self.menubar.update_idletasks()
         while self.menubar.winfo_reqwidth() > self.mf.geo[0]:
@@ -1961,7 +1965,7 @@
             self.mf.setThemeFont()
             font = tkfont.Font(font="TkMenuFont")
             for but in buts:
-                exec "%s.configure(font=font)" % but
+                buts[but].configure(font=font)
             self.menubar.update_idletasks()
         self.menubar.pack(anchor="nw", fill="x", expand="yes")
         iwth = self.mf.body.winfo_reqwidth()
@@ -1976,8 +1980,8 @@
             self.image.ilist = [self.tkimg]
         else:
             self.image.config(bg=self.mf.rcdic["nbg"])
-            self.image.create_text(iwth/2, (ihgt/2)-60, text="Tartan Systems",
-                font=("Helvetica", 60), fill="white")
+            self.image.create_text(int(iwth / 2), int(ihgt / 2) - 60,
+                text="Tartan Systems", font=("Helvetica", 60), fill="white")
         self.image.pack(fill="both", expand="yes")
         self.mf.updateStatus("Select an Option from the Menu")
         if self.mf.window.state() == "withdrawn":
@@ -2000,19 +2004,19 @@
                     self.ftype.append(tuple(typ))
             else:
                 setattr(self, opt, opts[opt])
-        if not "parent" in opts:
+        if "parent" not in opts:
             self.parent = None
             self.root = tk.Toplevel()
             self.root.withdraw()
         else:
             self.root = self.parent.winfo_toplevel()
-        if not "title" in opts:
+        if "title" not in opts:
             self.title = "Select ...."
-        if not "initd" in opts:
+        if "initd" not in opts:
             self.initd = "."
-        if not "ftype" in opts:
+        if "ftype" not in opts:
             self.ftype = []
-        if not "multi" in opts:
+        if "multi" not in opts:
             self.multi = False
 
     def setgeometry(self, styp):
@@ -2025,8 +2029,8 @@
                 w0 = int(self.parent.winfo_reqwidth() * .8)
                 h0 = int(self.parent.winfo_reqheight() * .8)
                 x, y = self.parent.winfo_rootx(), self.parent.winfo_rooty()
-                x = x + ((self.parent.winfo_reqwidth() - w0) / 2)
-                y = y + ((self.parent.winfo_reqheight() - h0) / 2)
+                x = x + (int(self.parent.winfo_reqwidth() - w0) / 2)
+                y = y + (int(self.parent.winfo_reqheight() - h0) / 2)
                 w = self.root.winfo_screenwidth()
                 h = self.root.winfo_screenheight()
                 self.root.tk.call("wm", "geometry",
@@ -2035,8 +2039,8 @@
             else:
                 w = self.root.winfo_screenwidth()
                 h = self.root.winfo_screenheight()
-                w0, h0 = w / 3, h / 3
-                x, y = w / 2 - w0 / 2, h / 3 - h0 / 2
+                w0, h0 = int(w / 3), int(h / 3)
+                x, y = int(w / 2) - int(w0 / 2), int(h / 3) - int(h0 / 2)
                 self.root.tk.call("wm", "geometry",
                     ".%s" % dialog,
                     "%dx%d+%d+%d" % (w0, h0, x, y))
@@ -2092,8 +2096,8 @@
             sh = int(self.window.winfo_screenheight())
             rootsize = tuple(int(_) for _ in self.window.geometry().
                 split('+')[0].split('x'))
-            x = sw / 2 - rootsize[0] / 2
-            y = sh / 2 - rootsize[1] / 2
+            x = int(sw / 2) - int(rootsize[0] / 2)
+            y = int(sh / 2) - int(rootsize[1] / 2)
             self.window.geometry("%dx%d+%d+%d" % (rootsize + (x, y)))
             self.window.deiconify()
         self.refreshSplash()
@@ -2154,11 +2158,14 @@
                 self.dbf = "?"
             elif self.dbase == "MySQL":
                 try:
-                    import MySQLdb as engine
+                    import MySQLdbs as engine
                     self.dbmod = "MySQLdb"
                 except:
-                    import pymysql as engine
-                    self.dbmod = "pymysql"
+                    try:
+                        import pymysql as engine
+                        self.dbmod = "pymysql"
+                    except:
+                        raise Exception
                 self.dbf = "%s"
             elif self.dbase == "PgSQL":
                 self.dbmod = "psycopg2"
@@ -2167,7 +2174,7 @@
             elif self.dbase == "SQLite":
                 self.dbmod = "sqlite3"
                 from sqlite3 import dbapi2 as engine
-                if engine.sqlite_version.split(".")[1] < 8:
+                if int(engine.sqlite_version.split(".")[1]) < 8:
                     self.mrecs = False
                 self.dbf = "?"
             else:
@@ -2226,7 +2233,7 @@
             self.flt = "float"
             self.ser = "integer primary key"
             self.blb = "blob"
-        if not "prgdir" in self.rcdic:
+        if "prgdir" not in self.rcdic:
             self.prgdir = getPrgPath()
         self.csvdir = os.path.join(self.prgdir, "csv")
 
@@ -2234,9 +2241,12 @@
         "Check to see if a database exists"
         exists = False
         if self.dbase == "FBird":
-            err = self.openDbase(err=False)
-            if self.db:
-                exists = True
+            if os.path.exists(self.dbdsn):
+                err = self.openDbase(err=False)
+                if self.db:
+                    exists = True
+            else:
+                err = None
         elif self.dbase == "MySQL":
             err = self.openDbase(dbname="mysql", err=False)
             if self.db:
@@ -2270,12 +2280,12 @@
         "Create a database if it does not exist"
         try:
             err = self.checkDbase()
-            if not err in (True, False):
+            if err not in (True, False):
                 raise Exception(err)
             elif err is True:
                 raise Exception("Database Already Exists")
             if self.dbase == "FBird":
-                if not self.dbhost == "localhost":
+                if self.dbhost != "localhost":
                     dsn = "%s:%s" % (self.dbhost, self.dbdsn)
                 else:
                     dsn = self.dbdsn
@@ -2289,7 +2299,7 @@
                 self.db.commit()
                 self.closeDbase()
             elif self.dbase == "PgSQL":
-                self.openDbase(dbname="postgres", levl=0)
+                self.openDbase(dbname="postgres", auto=True)
                 self.cu.execute("Create database %s template template0 "
                     "encoding 'utf-8'" % self.dbname)
                 self.cu.execute("Select * from pg_catalog.pg_group "
@@ -2314,14 +2324,14 @@
         except:
             showException(self.screen, self.wrkdir, "Database %s" % self.dbname)
 
-    def openDbase(self, dbname=None, dbuser=None, dbpwd=None, levl=1, err=True):
+    def openDbase(self, dbname=None, dbuser=None, dbpwd=None, auto=False, err=True):
         """
         Open a database using the following:
 
         dbname - The name of the database to open if not self.dbname
         dbuser - The user of the database to open if not self.dbuser
         dbpwd  - The pwd  of the database to open if not self.dbpwd
-        levl   - The isolation level for postgresql
+        auto   - The isolation level for postgresql
         err    - Whether or not to exit on an error
         """
         if not dbname:
@@ -2338,14 +2348,25 @@
                     self.dbport = 3306
                 else:
                     self.dbport = int(self.dbport)
-                if not self.dbpwd:
-                    self.db = self.engine.connect(host=self.dbhost,
-                        port=self.dbport, db=dbname, user=self.dbuser,
-                        init_command="set autocommit=0")
+                if self.dbmod == "connector":
+                    if not self.dbpwd:
+                        self.db = self.engine.connect(host=self.dbhost,
+                            port=self.dbport, database=dbname,
+                            user=self.dbuser, buffered=True, autocommit=False)
+                    else:
+                        self.db = self.engine.connect(host=self.dbhost,
+                            port=self.dbport, database=dbname,
+                            user=self.dbuser, passwd=self.dbpwd,
+                            buffered=True, autocommit=False)
                 else:
-                    self.db = self.engine.connect(host=self.dbhost,
-                        port=self.dbport, db=dbname, user=self.dbuser,
-                        passwd=self.dbpwd, init_command="set autocommit=0")
+                    if not self.dbpwd:
+                        self.db = self.engine.connect(host=self.dbhost,
+                            port=self.dbport, db=dbname, user=self.dbuser,
+                            init_command="set autocommit=0")
+                    else:
+                        self.db = self.engine.connect(host=self.dbhost,
+                            port=self.dbport, db=dbname, user=self.dbuser,
+                            passwd=self.dbpwd, init_command="set autocommit=0")
             elif self.dbase == "PgSQL":
                 dsn = "host=%s dbname=%s" % (self.dbhost, dbname)
                 if not int(self.dbport):
@@ -2361,17 +2382,17 @@
                 self.db.text_factory = str
             self.cu = self.db.cursor()
             if self.dbase == "PgSQL" and self.dbmod == "psycopg2":
-                self.setIsolationLevel(levl)
                 try:
-                    # Typecast the numeric datatype to be Float and not Decimal
+                    # Typecast the numeric datatype as Float not Decimal
                     pgx = self.engine.extensions
                     NUM = pgx.new_type(pgx.DECIMAL.values, "NUM",
                         lambda d, c: float(d) if d is not None else None)
                     pgx.register_type(NUM, self.db)
                 except:
-                    pass
+                    raise Exception
+            self.setAutoCommit(auto)
             self.dbopen = True
-        except Exception, e:
+        except Exception as e:
             self.db = self.cu = None
             self.dbopen = False
             mess = "Database: %s" % dbname
@@ -2404,32 +2425,20 @@
     def rollbackDbase(self):
         self.db.rollback()
 
-    def vacuumDbase(self, table=None):
-        """
-        table - A table to vacuum or None for all
-        """
-        try:
-            self.db.commit()
-        except:
+    def setAutoCommit(self, auto=False):
+        if self.dbase == "FBird":
             pass
-        self.setIsolationLevel(0)
-        if table:
-            self.cu.execute("Vacuum %s" % table)
-        else:
-            self.cu.execute("Vacuum")
-        self.setIsolationLevel(1)
-
-    def setIsolationLevel(self, levl):
-        if self.dbase != "PgSQL":
-            return
-        if "pgdb" in sys.modules:
-            if levl == 1:
-                sets = "READ COMMITTED"
+        elif self.dbase == "MySQL":
+            self.db.autocommit(auto)
+            #self.cu.execute("show variables like 'autocommit'")
+            #print(auto, self.cu.fetchall())
+        elif self.dbase == "PgSQL":
+            self.db.autocommit = auto
+        elif self.dbase == "SQLite":
+            if auto:
+                self.db.isolation_level = None
             else:
-                sets = "READ UNCOMMITTED"
-            self.cu.execute("Set transaction isolation level %s" % sets)
-        else:
-            self.db.set_isolation_level(levl)
+                self.db.isolation_level = ""
 
     def closeDbase(self):
         try:
@@ -2454,7 +2463,7 @@
                 self.cu.execute("Drop database %s" % self.dbname)
                 self.closeDbase()
             elif self.dbase == "PgSQL":
-                self.openDbase(dbname="postgres", levl=0)
+                self.openDbase(dbname="postgres", auto=True)
                 self.cu.execute("Drop database %s" % self.dbname)
                 self.cu.execute("Drop group %s" % self.dbname)
                 self.closeDbase()
@@ -2586,17 +2595,13 @@
                 self.cu.execute("Grant ALL on %s_%s_seq to group %s" %
                     (table, sequence, self.dbname))
         # Populate table
-        if not table in ("ftable", "ffield"):
+        if table not in ("ftable", "ffield"):
             self.populateTable(table)
 
     def populateTable(self, table):
         # Populate ftable and ffield tables
-        qry = "Select * from ftable where ft_tabl= '%s'" % table
-        self.cu.execute(qry)
-        if self.cu.fetchall:
-            qry = "Delete from ftable where ft_tabl = '%s'" % table
-            self.cu.execute(qry)
-            qry = "Delete from ffield where ff_tabl = '%s'" % table
+        for tab in (("ftable", "ft_tabl"), ("ffield", "ff_tabl")):
+            qry = "Delete from %s where %s = '%s'" % (tab[0], tab[1], table)
             self.cu.execute(qry)
         fld = open(os.path.join(self.csvdir, "%s_fld.csv" % table), "r")
         fd = []
@@ -2776,7 +2781,7 @@
                 nfld = "%s, %s" % (nfld, nam)
                 nfmt = "%s, %s" % (nfmt, self.dbm.dbf)
         # Format data
-        if not type(data[0]) in (list, tuple):
+        if type(data[0]) not in (list, tuple):
             # Single row
             data = [data]
         else:
@@ -2785,7 +2790,7 @@
         ndat = []
         for onum, odat in enumerate(data):
             tdat = list(copyList(odat))
-            if not len(tdat) == len(col):
+            if len(tdat) != len(col):
                 showError(None, "insRec Error",
                     """Data and CSV Formats Differ
 
@@ -2848,22 +2853,26 @@
                                     ok = True
             # Insert records
             for seq, nam in enumerate(col):
+                # Check if seq field
+                if seq in nrem:
+                    continue
                 # Check for None in data
-                if seq in nrem:
-                    continue
                 if tdat[seq] is None:
                     if dic[nam][2][1].lower() in ("a", "m", "x"):
                         tdat[seq] = ""
                     else:
                         tdat[seq] = 0
+                # Check for reformat of data
                 if dofmt:
                     fd = CCD(tdat[seq], dic[nam][2], dic[nam][3])
                     if not fd.err:
                         tdat[seq] = fd.work
+                # Check if multiple records insert
                 if self.dbm.mrecs:
                     ndat.append(tdat[seq])
             if not self.dbm.mrecs:
                 # Single record insert
+                # Remove seq fields
                 nrem.sort(reverse=True)
                 for seq in nrem:
                     del tdat[seq]
@@ -2976,8 +2985,8 @@
                     if asschk:
                         col = col + " as " + ts1[1]
                 if tabchk:
-                    print "tables %s missing in sql class in module %s" % \
-                        (tabchk, self.prog)
+                    print("tables %s missing in sql class in module %s" % \
+                        (tabchk, self.prog))
             # Continue building the get statement
             get = "%s %s," % (get, col)
             if asschk:
@@ -3050,7 +3059,7 @@
             sys.exit()
         if not cols:
             cols = getattr(self, "%s_col" % table)
-        if not len(data) == len(cols):
+        if len(data) != len(cols):
             showError(None, "updRec Error",
                 "Length of data not equal to length of cols (%s)" % table)
             sys.exit()
@@ -3085,7 +3094,7 @@
             # Delete where the data matches
             if not cols:
                 cols = getattr(self, "%s_col" % table)
-            if not len(data) == len(cols):
+            if len(data) != len(cols):
                 showError(None, "delRec Error",
                     "Length of data not equal to length of cols")
                 sys.exit()
@@ -3127,7 +3136,7 @@
                     whr = "%s %s" % (whr, c)
                     flag = "f"
                 elif flag == "f":
-                    if c.lower() == "ilike" and not self.dbm.dbase == "PgSQL":
+                    if c.lower() == "ilike" and self.dbm.dbase != "PgSQL":
                         c = "like"
                     whr = "%s %s" % (whr, c)
                     if c.lower() == "between":
@@ -3245,8 +3254,7 @@
         #=======================================================================
         # Work around for previous format error
         #=======================================================================
-        elif not types[0] == "T" and not types[1].upper() == "A" \
-                and data == "None":
+        elif types[0] != "T" and types[1].upper() != "A" and data == "None":
             self.data = "0"
         #=======================================================================
         elif types[1].lower() in ("a", "v", "x"):
@@ -3395,7 +3403,7 @@
                 self.disp = "%04i-%02i-%02i" % (yy, mm, dd)
                 if len(self.disp) < self.size:
                     self.disp = self.disp + (
-                        " " * (int(self.size/1) - len(self.disp)))
+                        " " * (int(self.size / 1) - len(self.disp)))
             except:
                 self.err = "Invalid Date (D1-3)"
 
@@ -3421,7 +3429,7 @@
                     self.disp = "%04i-%02i" % (yy, mm)
                     if len(self.disp) < self.size:
                         self.disp = self.disp + \
-                            (" " * (int(self.size/1) - len(self.disp)))
+                            (" " * (int(self.size / 1) - len(self.disp)))
             except:
                 self.err = "Invalid Current Date (D2-2)"
 
@@ -3502,7 +3510,7 @@
             self.disp = "%04i-%02i-%02i %02i:%02i" % (yy, mm, dd, hh, tt)
             if len(self.disp) < self.size:
                 self.disp = self.disp + (" " *
-                        (int(self.size/1) - len(self.disp)))
+                        (int(self.size / 1) - len(self.disp)))
         except:
             self.err = "Invalid Date (DT)"
 
@@ -3519,13 +3527,13 @@
             if len(tim) < 1:
                 raise Exception
             tim = int(tim)
-            hh = tim / 100
+            hh = int(tim / 100)
             mm = tim % 100
             self.work = (hh*100)+mm
             self.disp = "%02i:%02i" % (hh, mm)
             if len(self.disp) < self.size:
                 self.disp = self.disp + (" " *
-                        (int(self.size/1)-len(self.disp)))
+                        (int(self.size / 1) - len(self.disp)))
         except:
             self.err = "Invalid Time (%s)" % self.types
 
@@ -3555,7 +3563,7 @@
             if self.types == "CI":
                 self.data = "{:,}".format(self.work)
             s = self.data.find("-")
-            if not s == -1:
+            if s != -1:
                 self.data = self.data.replace("-", "")
                 self.data = self.data + "-"
             else:
@@ -3590,7 +3598,7 @@
                 self.data = "-" + self.data
             self.work = long(self.data)
             s = self.data.find("-")
-            if not s == -1:
+            if s != -1:
                 self.data = self.data.replace("-", "")
                 self.data = self.data + "-"
             else:
@@ -3742,7 +3750,7 @@
         if self.tab:
             chk = self.doCheckTables(self.tab)
             if chk:
-                print "Csv File for Table %s Does Not Exist" % chk
+                print("Csv File for Table %s Does Not Exist" % chk)
                 return
         if self.doCreate():
             if self.ver:
@@ -3812,7 +3820,7 @@
         self.setVariables()
         if self.put == "i":
             err = self.dbm.checkDbase()
-            if not err in (True, False):
+            if err not in (True, False):
                 os._exit(1)
             elif err is True:
                 answer = askQuestion(self.spl, "Drop Database?",
@@ -3825,7 +3833,7 @@
                     return
             else:
                 self.dbm.createDbase()
-        self.dbm.openDbase(dbuser=self.usr, dbpwd=self.pwd, levl=0)
+        self.dbm.openDbase(dbuser=self.usr, dbpwd=self.pwd, auto=True)
         if self.spl:
             sp = SplashScreen(self.spl,
                 "Creating Format and Data Tables\n\nPlease Wait...")
@@ -4282,32 +4290,36 @@
     def setVariables(self):
         self.first = []             # the first field details
                                     # i.e. (frt, page, row, col)
-        self.last = [[0,0]]         # last position visited by frt/page
+        self.last = [[0,0]]         # last position visited by frt by page
         self.skip = [[]]            # columns skipped by frame 'sk'
         self.topq = [0]             # top number of columns by page
         self.colq = [0]             # col number of columns by page
         self.topf = [[]]            # eflds tops data by page
         self.colf = [[]]            # eflds cols data by page
-        self.topLabel = [{}]        # dic of top label fields by page/col
-        self.topEntry = [{}]        # dic of top entry fields by page/col
-        self.topCompl = [{}]        # dic of top entry compl widget by page/col
-        self.topListl = [{}]        # dic of top entry compl list by page/col
-        self.colLabel = [{}]        # dic of col label fields by page/row
-        self.colEntry = [{}]        # dic of col entry fields by page/col
-        self.colCompl = [{}]        # dic of col entry compl widget by page/col
-        self.colListl = [{}]        # dic of col entry compl list by page/col
-        self.t_work = []            # list of arrays of top work by page/0/idx
-        self.t_disp = []            # list of arrays of top disp by page/0/idx
-        self.c_work = []            # list of arrays of col work by page/row/idx
-        self.c_disp = []            # list of arrays of col disp by page/row/idx
+        self.topLabel = [{}]        # dic of top label fields by page by col
+        self.topEntry = [{}]        # dic of top entry fields by page by col
+        self.topCompl = [{}]        # dic of top entry widget by page by col
+        self.topListl = [{}]        # dic of top entry list by page by col
+        self.colLabel = [{}]        # dic of col label fields by page by row
+        self.colEntry = [{}]        # dic of col entry fields by page by col
+        self.colCompl = [{}]        # dic of col entry widget by page by col
+        self.colListl = [{}]        # dic of col entry list by page by col
+        self.t_work = []            # list of arrays of top work by page by
+                                    # row 0 by idx
+        self.t_disp = []            # list of arrays of top disp by page by
+                                    # row 0 by idx
+        self.c_work = []            # list of arrays of col work by page by
+                                    # row by idx
+        self.c_disp = []            # list of arrays of col disp by page by
+                                    # row by idx
         self.tsiz = [[0,0,0]]       # largest label, entry field and also the
                                     # maximum width by top page
         self.pag = None             # Clearing for doKeys() problem
         self.pgs = 0                # Last page number
         self.topz = False           # Whether or not there is a top page 0
         self.colz = False           # Whether or not there is a col page 0
-        self.topv = [[]]            # top validators by page/col
-        self.colv = [[]]            # col validators by page/col
+        self.topv = [[]]            # top validators by page by col
+        self.colv = [[]]            # col validators by page by col
         self.rpad = 3               # Default padding between Radiobuttons
         self.has_focus = []         # List of widgets which can focus
         self.hidden = {}            # Hidden widgets
@@ -4334,7 +4346,7 @@
             except:
                 pass
         if self.view or self.mail:
-            if self.eflds and not tuple(self.eflds[0][0][:2]) == ("T", 0):
+            if self.eflds and tuple(self.eflds[0][0][:2]) != ("T", 0):
                 showError(self.master, "View or Mail Option",
                     "These Options Require a (T)op Zero Page")
                 sys.exit()
@@ -4532,9 +4544,9 @@
             if col[0][0] == "T":
                 if col[0][1] == 0:
                     self.topz = True
-                if not pos or not col[0][1] == pos[0]:
+                if not pos or col[0][1] != pos[0]:
                     pos = [col[0][1], 0]
-                if not col[0][2] in (pos[1], pos[1] + 1):
+                if col[0][2] not in (pos[1], pos[1] + 1):
                     showError(self.master, "Field Details",
                         "This Row, %s, is Not Sequential" % str(col[0]))
                     sys.exit()
@@ -4642,7 +4654,7 @@
                     self.tsiz[p][2] = wid*1
                 row = x[0][2]
         #=======================================================================
-        if not self.butt is None:
+        if self.butt is not None:
             self.bsiz = 0
             self.brow = 0
             for but in self.butt:
@@ -4677,9 +4689,7 @@
                 if self.mail and self.mail[0].lower() in ("b", "y"):
                     self.repeml[2] = ""
                     self.loadEntry(frt, pag, p+3, data="")
-                    return "sk4"
-                else:
-                    return "sk3"
+                return "nd"
         elif self.mail and self.mail[1].lower() == "y":
             self.topf[pag][-1][4] = "Print Emailed Document"
 
@@ -4728,7 +4738,7 @@
                 ("Continue", self.setCont),
                 ("Quit", self.setQuit))
             self.diag = SimpleDialog(parent=self.window, cols=cols, butt=buts,
-                titl=title, conf=True)
+                title=title, conf=True)
             self.window.mainloop()
             if not self.diag.data:
                 return "rf"
@@ -4834,7 +4844,7 @@
             index = event.widget.index("@%d,%d" % (event.x, event.y))
         else:
             index = page
-        if not index in self.normaltags:
+        if index not in self.normaltags:
             return
         self.selPage(index=index)
 
@@ -4847,7 +4857,7 @@
                     found = True
                     break
             if not found:
-                print "Invalid Notebook Tag %s" % label
+                print("Invalid Notebook Tag %s" % label)
                 return
         elif index is None:
             index = page - 1
@@ -4919,7 +4929,7 @@
         bg = "white"
         if not typ:
             fg = "black"
-        elif (typ == "C" and total > 0) or (not typ == "C" and total < 0):
+        elif (typ == "C" and total > 0) or (typ != "C" and total < 0):
             fg = "red"
         else:
             fg = "blue"
@@ -4932,7 +4942,7 @@
     def drawTopFlds(self, frame, col, fld, nxt=None):
         pag = fld[0][1]
         row = fld[0][2]
-        if not row == self.lrow:
+        if row != self.lrow:
             self.ttabl = MyFrame(frame)
             self.ttabl.grid(column=0, row=row, sticky="w")
             self.acc = 0
@@ -4971,7 +4981,7 @@
         else:
             cr = fld[7]                         # Enter Key
             f1 = fld[8]                         # F1 Key
-        if not dsc == self.acc:
+        if dsc != self.acc:
             lpad = dsc - self.acc
         else:
             lpad = 0
@@ -5174,13 +5184,13 @@
                 self.colEntry[pag][seq].set_max_length(siz)
 
     def drawButtons(self):
-        rows = len(self.butt) / 6
+        rows = int(len(self.butt) / 6)
         if len(self.butt) % 6:
             rows += 1
         for but in self.butt:
             if len(but) > 7 and but[7] > rows:
                 rows = but[7]
-        cols = len(self.butt) / rows
+        cols = int(len(self.butt) / rows)
         if len(self.butt) % rows:
             cols += 1
         bbox = MyButtonBox(self.mstFrame)
@@ -5196,7 +5206,7 @@
                 else:
                     spn = 1
             else:
-                row = num / cols
+                row = int(num / cols)
                 spn = 1
             butts = bbox.addButton(but[0], cmd, row=row, spn=spn)
             binds = butts.bind()
@@ -5215,7 +5225,7 @@
             opts = self.colf[self.pag][self.idx][8]
         rs = self.selectItem(self.pag, opts)
         self.focusField(self.frt, self.pag, self.col)
-        if not rs is None:
+        if rs is not None:
             self.loadEntry(self.frt, self.pag, self.pos, data=rs)
             self.doInvoke(None, rs)
 
@@ -5225,7 +5235,7 @@
         rs = self.selectItem(self.pag, opts)
         self.enableButtonsTags(state=state)
         self.focusField(self.frt, self.pag, self.col)
-        if not rs is None:
+        if rs is not None:
             self.doInvoke(None, rs)
 
     def selectItem(self, pag, opts):
@@ -5256,27 +5266,27 @@
             if type(self.rs) == str:
                 return self.rs
         elif opts["stype"] == "R":
-            if not "screen" in opts:
+            if "screen" not in opts:
                 opts["screen"] = self.mstFrame
             self.rs = self.selRecord(pag, opts)
         elif opts["stype"] == "S":
-            if not "screen" in opts:
+            if "screen" not in opts:
                 opts["screen"] = self.mstFrame
-            if not "title" in opts:
+            if "title" not in opts:
                 opts["title"] = None
-            if not "head" in opts:
+            if "head" not in opts:
                 opts["head"] = None
-            if not "where" in opts:
+            if "where" not in opts:
                 opts["where"] = None
-            if not "group" in opts:
+            if "group" not in opts:
                 opts["group"] = None
-            if not "order" in opts:
+            if "order" not in opts:
                 opts["order"] = None
-            if not "selcol" in opts:
+            if "selcol" not in opts:
                 opts["selcol"] = None
-            if not "ttype" in opts:
+            if "ttype" not in opts:
                 opts["ttype"] = None
-            if not "dic" in opts:
+            if "dic" not in opts:
                 opts["dic"] = None
             return getSingleRecords(self.mf, opts["tables"], opts["cols"],
                 opts["title"], opts["head"], opts["where"], opts["group"],
@@ -5401,15 +5411,15 @@
         return where
 
     def selFile(self, opts):
-        if not "parent" in opts:
+        if "parent" not in opts:
             opts["parent"] = self.mf.body
         if opts["types"] == "dir":
             dialog = FileDialog(**opts)
             sel = dialog.askdirectory()
         else:
-            if not "initd" in opts:
+            if "initd" not in opts:
                 opts["initd"] = None
-            if not "multi" in opts:
+            if "multi" not in opts:
                 opts["multi"] = False
             dialog = FileDialog(**opts)
             sel = dialog.askopenfilename()
@@ -5512,7 +5522,7 @@
         self.pos = self.col - 1
         self.checkButtonsTags(self.frt, self.pag, self.col)
         if self.frt == "T":
-            self.row = self.pos / self.topq[self.pag]
+            self.row = int(self.pos / self.topq[self.pag])
             self.idx = self.pos
             flds = self.topf[self.pag][self.idx]
             fldd = self.topEntry[self.pag][self.pos]
@@ -5538,7 +5548,7 @@
                 dflt = ""   # Clear zero (0) fields
             #===================================================================
         else:
-            self.row = self.pos / self.colq[self.pag]
+            self.row = int(self.pos / self.colq[self.pag])
             self.idx = self.pos % self.colq[self.pag]
             flds = self.colf[self.pag][self.idx]
             fldd = self.colEntry[self.pag][self.pos]
@@ -5554,8 +5564,8 @@
                     self.clearLine(self.pag, self.row)
                 work = ""
             else:
-                work = self.c_work[self.pag][self.pos / self.colq[
-                    self.pag]][self.idx]
+                work = self.c_work[self.pag][int(self.pos / self.colq[
+                    self.pag])][self.idx]
             if work:
                 dflt = work
             elif len(flds) == 4:
@@ -5563,7 +5573,7 @@
             elif flds[5] not in ("r","i","p"):
                 dflt = flds[5]
             elif self.col > self.colq[self.pag]:
-                dflt = self.c_work[self.pag][(self.pos / self.colq[
+                dflt = self.c_work[self.pag][int(self.pos / self.colq[
                     self.pag]) - 1][self.idx]
                 if not dflt or flds[5] == "r":
                     # Repeat previous value
@@ -5576,7 +5586,7 @@
                         dflt = ""
                 elif flds[5] == "p":
                     # Increment previous period
-                    y = dflt / 100
+                    y = int(dflt / 100)
                     m = (dflt % 100) + 1
                     if m > 12:
                         y += 1
@@ -5616,7 +5626,7 @@
             self.esc = False
             text = flds[4][:-7]
             cnt = sufx.rfind(",")
-            if not cnt == -1:
+            if cnt != -1:
                 sufx = "%s or%s" % (sufx[:cnt], sufx[cnt+1:])
         else:
             self.esc = True
@@ -5628,7 +5638,7 @@
                     sufx = sufx + " or <Esc> to Exit"
             else:
                 sufx = sufx + " or <Esc> to Back Up"
-        if err and not err == "ok":
+        if err and err != "ok":
             if self.mf.rcdic["errs"] == "M":
                 flenam = os.path.join(self.mf.rcdic["prgdir"], "snd",
                     "ding.wav")
@@ -5693,7 +5703,7 @@
             if type(ok) in (list, tuple):
                 self.focusField(ok[0], ok[1], ok[2])
                 return
-            if ok and not ok == "ok":
+            if ok and ok != "ok":
                 showError(self.master, "Deletion Error", ok)
             if self.frt == "C":
                 col = (self.row * self.colq[self.pag]) + 1
@@ -5747,8 +5757,8 @@
         if last[0] == "T":
             wrk = self.t_work[last[1]][0][last[2]]
         else:
-            row = last[2] / self.colq[last[1]]
-            idx = last[2] % self.colq[last[1]]
+            row = int(last[2] / self.colq[last[1]])
+            idx = int(last[2] % self.colq[last[1]])
             wrk = self.c_work[last[1]][row][idx]
         self.loadEntry(last[0], last[1], last[2], data=wrk)
         self.focusField(frt, pag, self.col, clr=self.doGetClrFlag(flds))
@@ -5850,7 +5860,7 @@
         """
         if frt == "T":
             fld = self.topEntry[pag][pos]
-            if not data is None:
+            if data is not None:
                 if type(self.topf[pag][pos][1]) in (list, tuple):
                     if self.topf[pag][pos][1][0][1:] == "CB":
                         d = CCD(data, "CB", 0)
@@ -5887,9 +5897,9 @@
                 fld.configure(state=state)
         else:
             fld = self.colEntry[pag][pos]
-            row = pos / self.colq[pag]
-            idx = pos % self.colq[pag]
-            if not data is None:
+            row = int(pos / self.colq[pag])
+            idx = int(pos % self.colq[pag])
+            if data is not None:
                 d = CCD(data, self.colf[pag][idx][1],
                     self.colf[pag][idx][2][1])
                 if d.err or (d.work == 0 and not zero):
@@ -5910,7 +5920,7 @@
                 fld.insert(0, disp.rstrip())
             fld.update_idletasks()
             fld.configure(state=state)
-        if not data is None:
+        if data is not None:
             return d
 
     def getEntry(self, frt, pag, pos, wid=True, txt=True, cr=False):
@@ -5951,11 +5961,11 @@
             self.frt, self.pag, self.col, cmd = fldd
             self.pos = self.col - 1
             if self.frt == "T":
-                self.row = self.pos / self.topq[self.pag]
+                self.row = int(self.pos / self.topq[self.pag])
                 self.idx = self.pos
             else:
-                self.row = self.pos / self.colq[self.pag]
-                self.idx = self.pos % self.colq[self.pag]
+                self.row = int(self.pos / self.colq[self.pag])
+                self.idx = int(self.pos % self.colq[self.pag])
         elif self.frt == "T" and len(self.topf[self.pag][self.idx]) > 4:
             cmd = self.topf[self.pag][self.idx][7]
         elif self.frt == "C" and len(self.colf[self.pag][self.idx]) > 4:
@@ -6016,7 +6026,7 @@
             ok = ("ok",)
         if ok[0] == "no":
             if flds[1][0] in ("O", "OCB", "ORB"):
-                print "Invalid Output Data %s for (%s)" % (ok[1:], flds)
+                print("Invalid Output Data %s for (%s)" % (ok[1:], flds))
                 sys.exit()
             else:
                 self.focusField(frt, pag, self.col, err=ok[1])
@@ -6031,7 +6041,7 @@
             elif flds[1][1:] in ("TV", "Tv"):
                 self.doTextView(frt, pag, fldd, "disable")
             else:
-                if not flds[1][1] == "H":
+                if flds[1][1] != "H":
                     self.loadEntry(frt, pag, self.pos, data=fld.work)
                 self.doEntryField(frt, pag, self.idx, fldd, False, "disable")
             if frt == "T":
@@ -6248,7 +6258,7 @@
                 self.nb.select(self.pag - 1)
             vwr.configure(state="normal")
             self.has_focus.append(vwr)
-            if not data is None:
+            if data is not None:
                 self.loadEntry(frt, pag, self.pos, data=data)
                 vwr.tag_add("sel", "1.0", "end")
             vwr.focus_set()
@@ -6274,7 +6284,7 @@
         if act == "focus":
             wid.configure(state="normal")
             self.has_focus.append(wid)
-            if not data is None:
+            if data is not None:
                 self.loadEntry(frt, pag, self.pos, data=data)
             if aut and self.mf.rcdic["acnf"] in ("I", "L"):
                 wid.clist = []
@@ -6416,14 +6426,15 @@
             else:
                 return ("no", "Invalid %s, Not Found" % des)
         elif val[0] == "email":
-            eml = wrk.split(",")
-            for e in eml:
-                if len(val) == 2:
-                    no = self.doCheckEmail(e, val[1])
-                else:
-                    no = self.doCheckEmail(e, True)
-                if no:
-                    return ("no", "Invalid %s, %s" % (des, no))
+            if wrk:
+                eml = wrk.split(",")
+                for e in eml:
+                    if len(val) == 2:
+                        no = self.doCheckEmail(e, val[1])
+                    else:
+                        no = self.doCheckEmail(e, True)
+                    if no:
+                        return ("no", "Invalid %s, %s" % (des, no))
             return ("ok", )
         elif val[0] == "chars":
             if len(wrk) > val[1]:
@@ -6439,7 +6450,7 @@
                 return
             return "Address is empty"
         by_at_sign = address.split("@")
-        if not len(by_at_sign) == 2:
+        if len(by_at_sign) != 2:
             return "Address must have one and only one @"
         name, hostname = by_at_sign
         if not name:
@@ -6526,7 +6537,7 @@
                   "d"         = Same as "y" but Enter defaults to Y
         """
         self.mf.updateStatus("")
-        if not self.frt == frt or not pag == self.pag:
+        if self.frt != frt or pag != self.pag:
             self.frt = frt
             self.pag = pag
         self.checkButtonsTags(frt, pag, 0)
@@ -6616,7 +6627,7 @@
 
     def checkYesNo(self, event):
         self.answer = event.keysym.lower()
-        if not self.answer.lower() in ("y", "n", "return", "kp_enter"):
+        if self.answer.lower() not in ("y", "n", "return", "kp_enter"):
             return
         self.mf.closeLoop()
 
@@ -6624,9 +6635,9 @@
         if self.butt:
             if col == 0:
                 pass
-            elif frt == "T" and self.topq[pag] and not col == self.topq[pag]:
+            elif frt == "T" and self.topq[pag] and col != self.topq[pag]:
                 col = col % self.topq[pag]
-            elif frt == "C" and self.colq[pag] and not col == self.colq[pag]:
+            elif frt == "C" and self.colq[pag] and col != self.colq[pag]:
                 col = col % self.colq[pag]
             for num, but in enumerate(self.butt):
                 if but[3] == 2:
@@ -6652,7 +6663,7 @@
                     elif tuple(but[5]) == (frt, pag, col):
                         state = "disabled"
                 if state:
-                    exec "self.B%s.configure(state='%s')" % (num, state)
+                    getattr(self, "B%s" % num).configure(state=state)
         if self.tags:
             first = None
             for num, tag in enumerate(self.tags):
@@ -6702,7 +6713,7 @@
         self.nb.tab(num, compound="right", image=self.nbeimg)
         setattr(self, "eimage%s" % num, self.nbeimg)
         self.nb.update_idletasks()
-        if not num in self.normaltags:
+        if num not in self.normaltags:
             self.normaltags.append(num)
 
     def disableButtonsTags(self, tags=True):
@@ -6760,12 +6771,22 @@
                 wid.update_idletasks()
                 geom = wid.winfo_manager()
                 info = self.getInfo(wid, geom)
-                exec "wid.%s_forget()" % geom
+                if geom == "grid":
+                    wid.grid_forget()
+                elif geom == "pack":
+                    wid.pack_forget()
+                elif geom == "place":
+                    wid.place_forget()
                 self.hidden[wid] = (geom, info)
             except:
                 pass
         elif state == "show" and wid in self.hidden:
-            exec "wid.%s(self.hidden[wid][1])" % self.hidden[wid][0]
+            if self.hidden[wid][0] == "grid":
+                wid.grid(self.hidden[wid][1])
+            elif self.hidden[wid][0] == "pack":
+                wid.pack(self.hidden[wid][1])
+            elif self.hidden[wid][0] == "place":
+                wid.place(self.hidden[wid][1])
             del self.hidden[wid]
         try:
             wid.winfo_toplevel().update_idletasks()
@@ -6777,7 +6798,7 @@
         root = wid.winfo_toplevel()
         words = root.splitlist(str(root.tk.call(geom, "info", wid)))
         dict = {}
-        for i in range(0, len(words), 2):
+        for i in xrange(0, len(words), 2):
             key = words[i][1:]
             value = words[i+1]
             if str(value)[:1] == ".":
@@ -6966,7 +6987,7 @@
             for col in cols:
                 if col.count("("):
                     continue
-                if not col in chk:
+                if col not in chk:
                     chk.append(col)
             self.group = ""
             for col in chk:
@@ -7042,7 +7063,7 @@
                 self.data = data
             else:
                 self.data = list(self.data)
-            if self.head and not len(self.head) == len(self.data[0]):
+            if self.head and len(self.head) != len(self.data[0]):
                 self.head = list(self.head)
                 self.head.insert(0, "")
             size = [0] * len(self.data[0])
@@ -7077,7 +7098,7 @@
                     cols.append([str(n), desc, siz, "CB", srch])
                 else:
                     cols.append([str(n), desc, siz, typ, srch])
-                if not self.mode.upper() == "M":
+                if self.mode.upper() != "M":
                     if type(c) == tuple or type(c) == list:
                         if len(c) > 3:
                             srch = c[4].upper()
@@ -7315,16 +7336,18 @@
 
     def doButton(self, button):
         self.button = None
-        if button in self.butt:
-            self.closeProcess()
         if len(button) == 3 and button[2] is True:
             self.selection = [self.iids[self.tree.focus()]]
             self.selection.extend(self.data[self.selection[0]])
             self.button = button[1]
-        elif type(button[1]) in (list, tuple):
-            button[1][0](button[1][1])
+            self.closeProcess()
         else:
-            button[1]()
+            if button in self.butt:
+                self.closeProcess()
+            if type(button[1]) in (list, tuple):
+                button[1][0](button[1][1])
+            else:
+                button[1]()
 
     def buildTree(self):
         if self.chek:
@@ -7362,7 +7385,7 @@
                 else:
                     text = str(col)
                     anchor = "w"
-                if not self.mode == "none" and self.sort:
+                if self.mode != "none" and self.sort:
                     self.tree.heading(nam, text=text, anchor=anchor,
                         command=lambda c=nam: self.doSort(c, False))
                 else:
@@ -7521,7 +7544,7 @@
         if direction and direction == "Up":
             children.reverse()
         for child in children:
-            if start and not child == start:
+            if start and child != start:
                 continue
             start = None
             text = self.tree.item(child, "values")[self.srch]
@@ -7627,7 +7650,7 @@
                 fcol.append((seq, num))
                 scol.append(col)
                 seq += 1
-        diag = SimpleDialog(parent=self.window, cols=scol, titl=title)
+        diag = SimpleDialog(parent=self.window, cols=scol, title=title)
         self.window.mainloop()
         for b in self.buttons:
             b.configure(state="normal")
@@ -7648,7 +7671,7 @@
             matches = []
             for col in fcol:
                 matches.append(ldic["flt%s" % col[0]].search(str(dat[col[1]])))
-            if not None in matches:
+            if None not in matches:
                 newdata.append(dat)
         if not newdata:
             self.doExit()
@@ -7735,7 +7758,7 @@
         for but in self.butt:
             b = bbox.addButton(but[0], but[1])
             pos = b.cget("underline")
-            if not pos == -1:
+            if pos != -1:
                 self.binds.append(b.cget("text")[pos])
         self.text = MyText(self.frame, font=self.font, width=self.width,
             height=self.height)
@@ -7833,7 +7856,7 @@
             self.pbframe = MyFrame(self.inn.pbframe, padding=2)
             self.pbframe.pack(fill="x", expand="yes")
         else:
-            self.pbframe = MyFrame(self.scrn, padding=2)
+            self.pbframe = MyFrame(self.scrn, padding=2, relief="ridge")
             self.pbframe.place(anchor="center", relx=0.5, rely=0.5)
         self.txtlab = MyLabel(self.pbframe, text=text, anchor="c", width=60,
             borderwidth=2, relief="raised")
@@ -8249,7 +8272,7 @@
             butt=but, tend=tnd, txit=txt, clicks=self.doClick)
 
     def doRcFile(self, frt, pag, r, c, p, i, w):
-        if self.level < 3 and not w == self.rcfile:
+        if self.level < 3 and w != self.rcfile:
             return "Invalid File"
         self.rcfile = w
         self.edit = True
@@ -8280,10 +8303,13 @@
 
     def doPrg(self, frt, pag, r, c, p, i, w):
         if sys.platform == "win32":
-            tst1 = os.path.normpath(os.path.join(w, "ms0000.py"))
-            tst2 = os.path.normpath(os.path.join(w, "ms0000.exe"))
-            if not os.path.isfile(tst1) and not os.path.isfile(tst2):
-                return "Missing %s or %s" % (tst1, tst2)
+            found = False
+            for tst in ("py", "exe", "exe.manifest"):
+                nam = os.path.normpath(os.path.join(w, "ms0000.%s" % tst))
+                if os.path.isfile(nam):
+                    found = True
+            if not found:
+                return "Missing ms0000"
 
     def doConvrt(self, frt, pag, r, c, p, i, w):
         if w and not os.path.isfile(w):
@@ -8298,7 +8324,7 @@
             w, h, f = getFontSize(tk)
         else:
             geo = w.lower().split("x")
-            if not len(geo) == 2:
+            if len(geo) != 2:
                 return "Invalid Geometry"
             sw = int(self.mf.window.winfo_screenwidth() * .9)
             sh = int(self.mf.window.winfo_screenheight() * .9)
@@ -8344,9 +8370,9 @@
 
     def doScheme(self, frt, pag, r, c, p, i, w):
         if w in ("R", "G", "B"):
-            for x in range(3):
+            for x in xrange(3):
                 idx = (x * 3) + 1
-                for y in range(2):
+                for y in xrange(2):
                     self.df.doKeyPressed(frt, pag, p+idx+y,
                         data=self.color[w][x][y])
             return "ff16"
@@ -8510,7 +8536,7 @@
             cc.append(["vwr", os.path.normpath(self.df.t_work[2][0][4])])
         else:
             cc.append(["vwr", ""])
-        if self.df.t_work[2][0][4]:
+        if self.df.t_work[2][0][5]:
             cc.append(["prn", os.path.normpath(self.df.t_work[2][0][5])])
         else:
             cc.append(["prn", ""])
@@ -8596,10 +8622,10 @@
         self.aft = []
         self.fft = []
         for font in fonts:
-            if not font in self.aft:
+            if font not in self.aft:
                 self.aft.append(font)
             ft = tkfont.Font(font=(font, 10, "normal"))
-            if ft.metrics()["fixed"] and not font in self.fft:
+            if ft.metrics()["fixed"] and font not in self.fft:
                 self.fft.append(font)
         sp.closeSplash()
 
@@ -8668,7 +8694,7 @@
         self.data = []
         for rec in recs:
             bal = rec[get.index("balance")]
-            if not self.agetyp == "H" and not bal:
+            if self.agetyp != "H" and not bal:
                 continue
             dat = []
             for c in col:
@@ -8948,7 +8974,7 @@
                         if not s:
                             self.start = self.curdt
                         else:
-                            self.start = s.work / 100
+                            self.start = int(s.work / 100)
                     else:
                         self.start = period[1]
                 else:
@@ -9384,8 +9410,8 @@
         t = str(self.sysdt)
         t = (int(t[0:4]),int(t[4:6]), int(t[6:8]),0,0,0,0,0,0)
         self.curdt = ((t[0] * 100) + t[1])
-        self.s_per = self.per[1][0] / 100
-        self.e_per = self.per[2][0] / 100
+        self.s_per = int(self.per[1][0] / 100)
+        self.e_per = int(self.per[2][0] / 100)
         self.bankctl = False
         if self.sys == "ASS":
             self.ttp = copyList(tartanWork.artrtp)
@@ -9534,7 +9560,7 @@
 
     def doQty(self, frt, pag, r, c, p, i, w):
         if not self.new:
-            if not w == self.bat[self.sql.ctlbat_col.index("btm_trno")]:
+            if w != self.bat[self.sql.ctlbat_col.index("btm_trno")]:
                 cf = PwdConfirm(self.mf, conum=self.conum, system="MST",
                     code="ChgBatch")
                 if cf.flag == "no":
@@ -9542,7 +9568,7 @@
 
     def doVal(self, frt, pag, r, c, p, i, w):
         if not self.new:
-            if not w == self.bat[self.sql.ctlbat_col.index("btm_trval")]:
+            if w != self.bat[self.sql.ctlbat_col.index("btm_trval")]:
                 cf = PwdConfirm(self.mf, conum=self.conum, system="MST",
                     code="ChgBatch")
                 if cf.flag == "no":
@@ -9581,7 +9607,7 @@
             return "nd"
 
     def doCtl(self, frt, pag, r, c, p, i, w):
-        if not w[:4] == "bank":
+        if w[:4] != "bank":
             self.acc = None
             self.ctl = ""
         else:
@@ -9657,7 +9683,7 @@
                 whr.append(("glt_type", "=", self.rtn))
             whr.extend([("glt_batch", "=", self.batno), ("glt_curdt",
                 "between", self.s_per, self.e_per)])
-            if not self.rtn == 4:
+            if self.rtn != 4:
                 whr.append(("glt_batind", "=", "N"))
         elif self.sys == "LON":
             tab = "lontrn"
@@ -9929,14 +9955,14 @@
             "gendtm", "gendtt", "genmst", "genrpt", "gentrn"], prog=__name__)
         if self.sql.error:
             return
-        self.i_per = self.period[1][0] / 100
-        self.e_per = self.period[2][0] / 100
+        self.i_per = int(self.period[1][0] / 100)
+        self.e_per = int(self.period[2][0] / 100)
         df = self.e_per - self.i_per - 87
         if df > 12:
             self.d_per = df - 12
-            yr = self.i_per / 100
+            yr = int(self.i_per / 100)
             mt = self.i_per % 100
-            for _ in range(self.d_per):
+            for _ in xrange(self.d_per):
                 mt += 1
                 if mt > 12:
                     mt -= 12
@@ -9948,14 +9974,14 @@
         if self.period[0]:
             self.s_lyr, e_lyr, fin = getPeriods(self.mf, self.conum,
                 (self.period[0] - 1))
-            self.i_pyr = self.s_lyr.work / 100
-            self.e_pyr = e_lyr.work / 100
+            self.i_pyr = int(self.s_lyr.work / 100)
+            self.e_pyr = int(e_lyr.work / 100)
             df = self.e_pyr - self.i_pyr - 87
             if df > 12:
                 self.d_pyr = df - 12
-                yr = self.i_pyr / 100
+                yr = int(self.i_pyr / 100)
                 mt = self.i_pyr % 100
-                for _ in range(self.d_pyr):
+                for _ in xrange(self.d_pyr):
                     mt += 1
                     if mt > 12:
                         mt -= 12
@@ -10394,11 +10420,11 @@
             self.val[4] = float(ASD(self.val[4]) + ASD(o_cyr))
             self.mth[0] = float(ASD(self.mth[0]) + ASD(o_cyr))
             self.mth[13] = float(ASD(self.mth[13]) + ASD(o_cyr))
-        if self.d_pyr and not self.vcode in ("B", "C", "X"):
+        if self.d_pyr and self.vcode not in ("B", "C", "X"):
             # Previous Financial period exceeds 12 months
-            cy = (self.i_pyr / 100) - 100
+            cy = int(self.i_pyr / 100) - 100
             cm = (self.i_pyr % 100) - 100
-            for _ in range(self.d_pyr):
+            for _ in xrange(self.d_pyr):
                 curdt = (cy * 100) + cm
                 lyr, cyr, bud = self.getMbal(curdt)
                 self.val[1] = float(ASD(self.val[1]) + ASD(lyr))
@@ -10411,9 +10437,9 @@
                     cy += 1
         if self.d_per:
             # Current Financial period exceeds 12 months
-            cy = self.i_per / 100
+            cy = int(self.i_per / 100)
             cm = self.i_per % 100
-            for _ in range(self.d_per):
+            for _ in xrange(self.d_per):
                 curdt = (cy * 100) + cm
                 lyr, cyr, bud = self.getMbal(curdt)
                 if self.vcode == "B":
@@ -10469,7 +10495,7 @@
                     cut = True
                 else:
                     break
-            y = curdt / 100
+            y = int(curdt / 100)
             m = curdt % 100
             m += 1
             if m > 12:
@@ -10621,7 +10647,7 @@
         else:
             val = copyList(self.val)
             mth = copyList(self.mth)
-        if not self.s_type == "L":
+        if self.s_type != "L":
             self.s_acno = 0
         self.allFields.append([self.s_type, self.atype, self.s_high,
             self.s_ffeed, self.s_acno, self.s_desc, self.count, self.lines,
@@ -10652,7 +10678,7 @@
             if curdt == self.curdt:
                 break
             else:
-                y = curdt / 100
+                y = int(curdt / 100)
                 m = curdt % 100
                 m += 1
                 if m > 12:
@@ -11050,7 +11076,7 @@
                         self.lcap = nxt
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        if not self.refno == "Pending":
+        if self.refno != "Pending":
             refs = self.sql.getRec(tables="lontrn", cols=["lnt_refno"],
                 where=[("lnt_cono", "=", self.cono), ("lnt_batch", "=",
                 self.batch), ("lnt_type", "=", self.inttp)])
@@ -11078,9 +11104,9 @@
             ("lnt_type", "<>", self.inttp),
             ("lnt_trdt", "<=", self.tdate)],
             limit=1)[0]
-        for mth in range(self.pmths):
-            yy = self.start / 10000
-            mm = self.start / 100 % 100
+        for mth in xrange(self.pmths):
+            yy = int(self.start / 10000)
+            mm = int(self.start / 100) % 100
             dd = self.start % 100
             mm += (mth + 1)
             while mm > 12:
@@ -11124,8 +11150,9 @@
                     # Loans Transaction
                     self.sql.insRec("lontrn", data=[self.cono, self.acno,
                         self.loan, self.batch, self.inttp, date, self.refno,
-                        ita, date / 100, desc, "", self.capnm, self.sysdtw, 0])
-                    if not self.refno == "Pending":
+                        ita, int(date / 100), desc, "", self.capnm,
+                        self.sysdtw, 0])
+                    if self.refno != "Pending":
                         self.refno += 1
                     if self.glctl:
                         # General Ledger
@@ -11138,7 +11165,7 @@
                         for val in vals:
                             whr = [("glt_cono", "=", self.cono),
                                 ("glt_acno", "=", val[0]),
-                                ("glt_curdt", "=", date / 100),
+                                ("glt_curdt", "=", int(date / 100)),
                                 ("glt_trdt", "=", date),
                                 ("glt_type", "=", 4),
                                 ("glt_refno", "=", self.refno),
@@ -11152,10 +11179,10 @@
                                 self.sql.updRec("gentrn", cols=["glt_tramt"],
                                     data=[tramt], where=whr)
                             else:
-                                data = [self.cono, val[0], date / 100, date,
-                                    4, self.refno, self.batch, val[1], 0.00,
-                                    "Interest on Loans", "", "", 0, self.capnm,
-                                    self.sysdtw, 0]
+                                data = [self.cono, val[0], int(date / 100),
+                                    date, 4, self.refno, self.batch, val[1],
+                                    0.00, "Interest on Loans", "", "", 0,
+                                    self.capnm, self.sysdtw, 0]
                                 self.sql.insRec("gentrn", data=data)
                 self.cap = float(ASD(self.cap) - ASD(amt))
             else:
@@ -11223,7 +11250,7 @@
                     "=", self.loan), ("wlt_trdt", ">", self.lint)],
                     group="wlt_curdt, wlt_type", order="wlt_curdt")
             for trn in trns:
-                if not trn[0] in bals:
+                if trn[0] not in bals:
                     bals[trn[0]] = [0, 0]
                 if trn[1] == self.inttp:
                     bals[trn[0]][1] = trn[2]
@@ -11272,7 +11299,7 @@
                             self.raiseInterest(start, rate[0], lr[1], lr[2])
                             start = projectDate(rate[0], 1, typ="days")
                         lr = rate
-                    for x in range(len(rates) - 1, -1, -1):
+                    for x in xrange(len(rates) - 1, -1, -1):
                         rate = rates[x]
                         if rate[0] <= endd:
                             break
@@ -11287,11 +11314,11 @@
                 # Monthly
                 while start < self.ncap[0]:
                     endd = mthendDate(start)
-                    for x in range(len(rates) - 1, -1, -1):
+                    for x in xrange(len(rates) - 1, -1, -1):
                         rate = rates[x]
                         if rate[0] <= endd:
                             break
-                    curdt = endd / 100
+                    curdt = int(endd / 100)
                     if curdt in bals:
                         self.cap = float(ASD(self.cap) + ASD(bals[curdt][0]))
                         self.rin = float(ASD(self.rin) + ASD(bals[curdt][1]))
@@ -11339,25 +11366,27 @@
             # Loans Transaction
             if self.sys == "L":
                 data = [self.cono, self.acno, self.loan, self.batch,
-                    self.inttp, tdte, self.refno, rin, tdte / 100,
+                    self.inttp, tdte, self.refno, rin, int(tdte / 100),
                     desc, "", self.capnm, self.sysdtw, 0]
                 self.sql.insRec("lontrn", data=data)
             else:
                 data = [self.cono, self.acno, self.loan, self.batch,
                     self.inttp, tdte, self.refno, rin, cap.work, 0,
-                    rte, tdte / 100, desc, "", self.capnm, self.sysdtw, 0]
+                    rte, int(tdte / 100), desc, "", self.capnm,
+                    self.sysdtw, 0]
                 self.sql.insRec("wagltf", data=data)
-            if not self.refno == "Pending":
+            if self.refno != "Pending":
                 self.refno += 1
             if self.glctl:
                 # General Ledger
                 iti = float(ASD(0) - ASD(rin))
                 vals = ((self.glctl[0], rin), (ctl, iti))
                 for val in vals:
-                    whr = [("glt_cono", "=", self.cono), ("glt_acno", "=",
-                        val[0]), ("glt_curdt", "=", tdte / 100), ("glt_trdt",
-                        "=", tdte), ("glt_type", "=", 4), ("glt_refno", "=",
-                        self.refno), ("glt_batch", "=", self.batch)]
+                    whr = [("glt_cono", "=", self.cono), ("glt_acno",
+                        "=", val[0]), ("glt_curdt", "=", int(tdte / 100)),
+                        ("glt_trdt", "=", tdte), ("glt_type", "=", 4),
+                        ("glt_refno", "=", self.refno), ("glt_batch",
+                        "=", self.batch)]
                     data = self.sql.getRec(tables="gentrn", where=whr, limit=1)
                     if data:
                         tramt = data[self.sql.gentrn_col.index("glt_tramt")]
@@ -11366,9 +11395,9 @@
                             data=[tramt], where=whr)
                     else:
                         self.sql.insRec("gentrn", data=[self.cono, val[0],
-                            tdte / 100, tdte, 4, self.refno, self.batch, val[1],
-                            0.00, "Interest on Loans", "", "", 0, self.capnm,
-                            self.sysdtw, 0])
+                            int(tdte / 100), tdte, 4, self.refno, self.batch,
+                            val[1], 0.00, "Interest on Loans", "", "", 0,
+                            self.capnm, self.sysdtw, 0])
 
 class PrintOrder:
     """
@@ -11400,10 +11429,15 @@
             self.doProcess()
 
     def setVariables(self):
-        self.sql = Sql(self.mf.dbm, ["ctlmst", "ctlmes", "crsmst", "strpom",
-            "strpot"], prog=__name__)
+        self.sql = Sql(self.mf.dbm, ["ctlmst", "ctlmes", "crsmst", "strctl",
+            "strpom", "strpot"], prog=__name__)
         if self.sql.error:
-            return False
+            return
+        gc = GetCtl(self.mf)
+        strctl = gc.getCtl("strctl", self.conum)
+        if not strctl:
+            return
+        self.fromad = strctl["cts_emadd"]
         if self.repeml:
             self.emadd = self.repeml[2]
         else:
@@ -11524,20 +11558,20 @@
                     page = self.doCfwd(page)
                     count = self.doHeader(page, tdc)
                 if n == 0 and len(des) == 1:
-                    include = copyList(self.form.body)
+                    incl = copyList(self.form.body)
                 elif n == 0:
-                    include = ("pot_group", "pot_code")
+                    incl = ("pot_group", "pot_code")
                 elif n + 1 == len(des):
-                    include = copyList(self.form.body)
-                    include.remove("pot_group")
-                    include.remove("pot_code")
+                    incl = copyList(self.form.body)
+                    incl.remove("pot_group")
+                    incl.remove("pot_code")
                 else:
-                    include = []
+                    incl = []
                 for code in self.form.body:
                     seq = "%s_C%02i" % (code, count)
                     if code == "pot_desc":
                         data = l
-                    elif code in include:
+                    elif code in incl:
                         data = ldic[code].work
                     else:
                         data = "BLANK"
@@ -11606,8 +11640,8 @@
                 for doc in self.docs:
                     head += " %s" % doc[0]
         self.form.output(pdfnam, "F")
-        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            repprt=self.repprt, repeml=self.repeml)
+        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, header=head,
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
@@ -11644,7 +11678,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             line = self.form.newdic[key]
-            if not line[tdc.index("tpd_place")] == "A":
+            if line[tdc.index("tpd_place")] != "A":
                 continue
             nl = copyList(line)
             if nl[tdc.index("tpd_detseq")] == "page_number_C00":
@@ -11716,6 +11750,11 @@
             "slsiv2"], prog=__name__)
         if self.sql.error:
             return False
+        gc = GetCtl(self.mf)
+        slsctl = gc.getCtl("slsctl", self.conum)
+        if not slsctl:
+            return
+        self.fromad = slsctl["ctv_emadd"]
         if self.repeml:
             self.emadd = self.repeml[2]
         else:
@@ -11854,26 +11893,26 @@
                     page = self.doCfwd(page)
                     count = self.doHeader(page, tdc)
                 if n == 0 and len(des) == 1:
-                    include = copyList(self.form.body)
+                    incl = copyList(self.form.body)
                     if self.ttype == "D" and self.dvals.lower() == "n":
-                        include.remove("si2_price")
-                        include.remove("line_value")
+                        incl.remove("si2_price")
+                        incl.remove("line_value")
                 elif n == 0:
-                    include = ("si2_group", "si2_code")
+                    incl = ("si2_group", "si2_code")
                 elif n + 1 == len(des):
-                    include = copyList(self.form.body)
-                    include.remove("si2_group")
-                    include.remove("si2_code")
+                    incl = copyList(self.form.body)
+                    incl.remove("si2_group")
+                    incl.remove("si2_code")
                     if self.ttype == "D" and self.dvals.lower() == "n":
-                        include.remove("si2_price")
-                        include.remove("line_value")
+                        incl.remove("si2_price")
+                        incl.remove("line_value")
                 else:
-                    include = []
+                    incl = []
                 for code in self.form.body:
                     seq = "%s_C%02i" % (code, count)
                     if code == "si2_desc":
                         data = l
-                    elif code in include:
+                    elif code in incl:
                         data = ldic[code].work
                     else:
                         data = "BLANK"
@@ -11965,8 +12004,8 @@
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
                 "%s_all" % self.conum, ext="pdf")
         self.form.output(pdfnam, "F")
-        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            repprt=self.repprt, repeml=self.repeml)
+        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, header=head,
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
@@ -12017,7 +12056,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             line = self.form.newdic[key]
-            if not line[tdc.index("tpd_place")] == "A":
+            if line[tdc.index("tpd_place")] != "A":
                 continue
             nl = copyList(line)
             if nl[tdc.index("tpd_detseq")] == "page_number_C00":
@@ -12100,6 +12139,11 @@
             prog=__name__)
         if self.sql.error:
             return False
+        gc = GetCtl(self.mf)
+        bkmctl = gc.getCtl("bkmctl", self.conum)
+        if not bkmctl:
+            return
+        self.fromad = bkmctl["cbk_emadd"]
         if self.repeml:
             self.emadd = self.repeml[2]
         else:
@@ -12207,7 +12251,7 @@
                 count = self.doHeader(page, tdc)
             ldic = {}
             for cod in self.form.body:
-                if not cod == "line_value":
+                if cod != "line_value":
                     ldic[cod] = CCD(item[ttc.index(cod)],
                         self.form.tptp[cod][0][1], self.form.tptp[cod][0][2])
             brt_rbase = item[ttc.index("brt_rbase")]
@@ -12237,10 +12281,10 @@
             if count == self.form.maxlines:
                 page = self.doCfwd(page)
                 count = self.doHeader(page, tdc)
-            include = copyList(self.form.body)
+            incl = copyList(self.form.body)
             for code in self.form.body:
                 seq = "%s_C%02i" % (code, count)
-                if code in include:
+                if code in incl:
                     data = ldic[code].work
                 else:
                     data = "BLANK"
@@ -12317,8 +12361,8 @@
                 for doc in self.docs:
                     head += " %s" % doc.strip()
         self.form.output(pdfnam, "F")
-        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            repprt=self.repprt, repeml=self.repeml)
+        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, header=head,
+            fromad=self.fromad, repprt=self.repprt, repeml=self.repeml)
         if self.repeml[1] == "Y":
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
@@ -12355,7 +12399,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             line = self.form.newdic[key]
-            if not line[tdc.index("tpd_place")] == "A":
+            if line[tdc.index("tpd_place")] != "A":
                 continue
             nl = copyList(line)
             if nl[tdc.index("tpd_detseq")] == "page_number_C00":
@@ -12442,11 +12486,16 @@
             "wagtf2"], prog=__name__)
         if self.sql.error:
             return False
+        gc = GetCtl(self.mf)
+        wagctl = gc.getCtl("wagctl", self.conum)
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         ########################################################################
         # Start date and email details
         ########################################################################
-        y = self.rundt.work / 10000
-        m = (self.rundt.work / 100) % 100
+        y = int(self.rundt.work / 10000)
+        m = int(self.rundt.work / 100) % 100
         if m < 3:
             y = y - 1
         self.start = (y * 10000) + 301
@@ -12598,7 +12647,7 @@
                 tmpdic[t][tdc.index("tpd_text")] = a[2]
             c = "%s_C%02i" % (txt, n)
             tmpdic[c][tdc.index("tpd_text")] = a[3]
-            if not a[1] == "T":
+            if a[1] != "T":
                 amnt = float(ASD(amnt) + ASD(a[3]))
                 if typ == "E":
                     self.total = float(ASD(self.total) + ASD(a[3]))
@@ -12634,7 +12683,8 @@
             ext="pdf")
         self.form.output(self.pdfnam, "F")
         doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam,
-            head=head, repprt=self.repprt, repeml=self.repeml)
+            fromad=self.fromad, header=head, repprt=self.repprt,
+            repeml=self.repeml)
         if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
@@ -12699,40 +12749,43 @@
         rink = None
         data = None
         for rec in recs:
-            if not rink or (rink and not rec[0] == rink):
+            if not rink or (rink and rec[0] != rink):
                 if data:
-                    while not len(data) == 6:
+                    while len(data) != 6:
                         data.append([0, ""])
                     adraw.append(data)
                 rink = rec[0]
                 side = rec[1]
                 pos = 4
                 data = [rec[0], 0]
-            if not rec[1] == side:
-                while not len(data) == 6:
+            if rec[1] != side:
+                while len(data) != 6:
                     data.append([0, ""])
                 adraw.append(data)
                 side = rec[1]
                 pos = 4
                 data = [rec[0], 0]
-            while not pos == rec[2]:
+            while pos != rec[2]:
                 data.append([0, ""])
                 pos -= 1
-            data.append([rec[3], rec[4]])
+            if rec[3] > 900000:
+                data.append([999, rec[4]])
+            else:
+                data.append([rec[3], rec[4]])
             if rec[3] < self.nstart:
                 mem += 1
             else:
                 vis += 1
             pos -= 1
         if data:
-            while not len(data) == 6:
+            while len(data) != 6:
                 data.append([0, ""])
             adraw.append(data)
         self.fpdf = MyFpdf(name=__name__, head=90)
         if self.takings.lower() == "y":
             mem = 0
             vis = 0
-            pages = len(adraw) / 60
+            pages = int(len(adraw) / 60)
             if len(adraw) % 60:
                 pages += 1
             for page in xrange(pages):
@@ -12792,7 +12845,7 @@
                     tabs.append([t[0], adraw[x+1][0], "R",
                         self.position[n]])
             tabs.sort()
-            pages = len(tabs) / 150
+            pages = int(len(tabs) / 150)
             if len(tabs) % 150:
                 pages += 1
             for page in xrange(pages):
@@ -12816,9 +12869,9 @@
             for num in xrange(0, len(adraw), 2):
                 grn = adraw[num][0][0]
                 rnk = int(adraw[num][0][1])
-                if not grn in greens:
+                if grn not in greens:
                     greens[grn] = {}
-                if not rnk in greens[grn]:
+                if rnk not in greens[grn]:
                     greens[grn][rnk] = [[[], [], [], []], [[], [], [], []]]
                 for pos, tab in enumerate(adraw[num][2:]):
                     greens[grn][rnk][0][pos] = tab
@@ -12828,13 +12881,13 @@
                     fmat = (3, 2, 1, 0)
                 for num, tab in enumerate(adraw[num+1][2:]):
                     greens[grn][rnk][1][fmat[num]] = tab
-            keys = greens.keys()
+            keys = list(greens.keys())
             keys.sort()
             for grn in keys:
                 self.pageHeading(htyp="C", grn=grn)
                 if self.empty == "Y":
                     for x in xrange(1, 7):
-                        if not x in greens[grn]:
+                        if x not in greens[grn]:
                             greens[grn][x] = [[[],[],[],[]], [[],[],[],[]]]
                 for rnk in greens[grn]:
                     xaxis = self.fpdf.get_x()
@@ -12955,6 +13008,11 @@
             prog=__name__)
         if self.sql.error:
             return False
+        gc = GetCtl(self.mf)
+        ibtctl = gc.getCtl("ibtctl", self.conum)
+        if not ibtctl:
+            return
+        self.fromad = ibtctl["cbt_emadd"]
         if self.repeml:
             self.emadd = self.repeml[2]
         else:
@@ -13076,19 +13134,19 @@
                     page = self.doCfwd(page)
                     count = self.doHeader(page, tdc)
                 if n == 0 and len(des) == 1:
-                    include = copyList(self.form.body)
+                    incl = copyList(self.form.body)
                 elif n == 0:
-                    include = ["ibt_code"]
+                    incl = ["ibt_code"]
                 elif n + 1 == len(des):
-                    include = copyList(self.form.body)
-                    include.remove("ibt_code")
+                    incl = copyList(self.form.body)
+                    incl.remove("ibt_code")
                 else:
-                    include = []
+                    incl = []
                 for code in self.form.body:
                     seq = "%s_C%02i" % (code, count)
                     if code == "ibt_desc":
                         data = l
-                    elif code in include:
+                    elif code in incl:
                         data = ldic[code].work
                     else:
                         data = "BLANK"
@@ -13156,8 +13214,9 @@
                 "%s_all" % self.conum, ext="pdf")
         if self.form.page:
             self.form.output(pdfnam, "F")
-            doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-                repprt=self.repprt, repeml=self.repeml)
+            doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam,
+                fromad=self.fromad, header=head, repprt=self.repprt,
+                repeml=self.repeml)
         if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
@@ -13188,7 +13247,7 @@
         self.form.add_page()
         for key in self.form.newkey:
             line = self.form.newdic[key]
-            if not line[tdc.index("tpd_place")] == "A":
+            if line[tdc.index("tpd_place")] != "A":
                 continue
             nl = copyList(line)
             if nl[tdc.index("tpd_detseq")] == "page_number_C00":
@@ -13424,8 +13483,11 @@
             infle.close()
         else:
             name = self.mf.rcdic["wrkdir"]
-        dialog = FileDialog(**{"title": "Bank Account Number %s" % self.bankac,
-            "parent": self.mf.body, "initd": name, "ftype": ftype,
+        dialog = FileDialog(**{
+            "parent": self.mf.body,
+            "title": "Bank Account Number %s" % self.bankac,
+            "initd": name,
+            "ftype": ftype,
             "multi": True})
         self.fname = dialog.askopenfilename()
         if not self.fname:
@@ -13544,7 +13606,7 @@
                     self.refno.work, self.payee, self.amount.work])
                 self.doClear()
                 continue
-            if line[:1] == "!" and not line[1:10] == "Type:Bank":
+            if line[:1] == "!" and line[1:10] != "Type:Bank":
                 showError(self.mf.body, "Import Error",
                     "Invalid Type %s" % line)
                 self.trans = []
@@ -13615,7 +13677,7 @@
         data = csv.reader(infle, quoting=csv.QUOTE_MINIMAL)
         err = None
         for dat in data:
-            if not len(dat) == 8:
+            if len(dat) != 8:
                 err = "Number of Fields Error (S/B %s is %s)" % (8, len(dat))
                 break
             if dat[2] in ("BRANCH", "OPEN", "CLOSE"):
@@ -13675,11 +13737,11 @@
                     Conditions: String statement of columns to use for the join
                 e.g. ["L", "gentrn", "glt_cono=glm_cono and glt_acno=glm_acno"]
     heads   :   A list of up to 3 Headings, if heading is a list or tuple then
-                it comprises text and a font size but only for heads[0] if no
-                page numbering.
+                it comprises text, alignment and a font size but only for
+                heads[0] if no page numbering.
                 Examples:
-                    ["Old Mutual Bank Account",]
-                    [("Old Mutual Bank Account", 12),]
+                    ["Old Mutual Bank Account", "L"]
+                    [("Old Mutual Bank Account", 12, "C"),]
     cols    :   A list of lists of columns to be printed, any expression MUST
                 be renamed using the "as" clause, as follows:
                     name - The column or expression name
@@ -13690,7 +13752,6 @@
                          not to display the column or just use it for selection
                          purposes. It defaults to y.
                     chgs - Whether or not the sign must be changed.
-                    just - Whether to justify left or right, defaults to left
                 e.g. [["omb_state",             "NA",  5,   "State", "y"],
                       ["omb_date",              "D1", 10,   "Date",  "y"],
                       ["sum(omb_amt) as value", "SD", 13.2, "Value", "y"]]
@@ -13737,6 +13798,7 @@
                    print and mail parameters eg [("Y","V"), ("Y","N")]
     repprt  :   A list as derived from TartanDialog for print options
     repeml  :   A list as derived from TartanDialog for email options
+    fromad  :   The senders email address or None for the default company one
     lines   :   A number of body lines to Print Between Page Breaks
     margin  :   A number of lines to use as a Bottom Margin for Page Breaks
     pbar    :   Progress Bar Message:
@@ -13757,6 +13819,7 @@
             "cols": [],
             "conam": None,
             "conum": None,
+            "fromad": None,
             "group": None,
             "gtots": [],
             "heads": [],
@@ -13788,15 +13851,30 @@
         if not self.prtdia and not self.repprt:
             self.repprt = ["N", "V", "view"]
         self.fonts = []
+        self.align = []
         if self.heads:
             heads = []
-            for n, h in enumerate(self.heads):
+            for h in self.heads:
                 if type(h) in (tuple, list):
-                    heads.append(h[0])
-                    self.fonts.append(h[1])
+                    font = False
+                    align = False
+                    for i in xrange(0, len(h)):
+                        if not i:
+                            heads.append(h[i])
+                        elif type(h[i]) == int:
+                            self.fonts.append(h[i])
+                            font = True
+                        else:
+                            self.align.append(h[i])
+                            align = True
+                    if not font:
+                        self.fonts.append(None)
+                    if not align:
+                        self.align.append("L")
                 else:
                     heads.append(h)
                     self.fonts.append(None)
+                    self.align.append("L")
             self.heads = heads
             if self.prtdia:
                 self.doPrtDialog()
@@ -13846,7 +13924,8 @@
                 for tab in alltab:
                     tb = self.removeTables(tab)
                     sql = Sql(self.mf.dbm, tb, prog=__name__)
-                    dic = dict(dic.items()+getattr(sql, "%s_dic" % tb).items())
+                    dic = dict(list(dic.items()) + \
+                        list(getattr(sql, "%s_dic" % tb).items()))
                 for n, c in enumerate(self.cols):
                     if type(c) == str:
                         self.cols[n] = [c, dic[c][2], dic[c][3], dic[c][5]]
@@ -13914,7 +13993,7 @@
             nam = c[len(c) - 1]
             if len(c) == 1:
                 func += 1
-                if not func == 1:
+                if func != 1:
                     self.o1 = self.o1 + "," + nam
                 else:
                     self.o1 = self.o1 + nam
@@ -13958,7 +14037,7 @@
                 else:
                     cf = cf + "%s"
                 hf = hf + "%-" + "%d" % fsiz + "s"
-                if not x == len(fn) - 1:
+                if x != (len(fn) - 1):
                     cf = cf + ","
                     hf = hf + " "
                 else:
@@ -13990,7 +14069,7 @@
                             tf = tf + "%-" + "%d" % (ds - 1) + "s "
                             ds = 0
                         tf = tf + "%-" + "%d" % fsiz + "s"
-                        if not c == len(self.gtots) - 1:
+                        if c != (len(self.gtots) - 1):
                             tf = tf + " "
                         cnt += 1
                 if not cnt:
@@ -14112,7 +14191,7 @@
         self.pgnum = 0
         self.pglin = 999
         self.expdatas = []
-        if not self.repprt[2] == "export":
+        if self.repprt[2] != "export":
             self.fpdf = MyFpdf(name=self.name, head=len(self.head4), foot=True)
             for num, font in enumerate(self.fonts):
                 if not font:
@@ -14125,7 +14204,7 @@
                 lpp = self.lines + lin          # lin = Headings
                 if self.margin:
                     lpp = lpp + self.margin
-                if not lpp > self.fpdf.lpp:
+                if lpp <= self.fpdf.lpp:
                     self.fpdf.lpp = lpp
         for x in xrange(0, len(recs)):
             if self.pbar:
@@ -14133,7 +14212,7 @@
                 if pb.quit:
                     break
             if self.ttype == "D" and recs[x] == ["BLANK"]:
-                if not self.repprt[2] == "export":
+                if self.repprt[2] != "export":
                     self.fpdf.drawText()
                     self.pglin += 1
                 else:
@@ -14146,7 +14225,7 @@
             ldic = {}
             for nam in fn:
                 t = self.fd[nam][0]
-                if t == "TX" and not self.repprt[2] == "export":
+                if t == "TX" and self.repprt[2] != "export":
                     t = "NA"
                 s = self.fd[nam][1]
                 if not recs[x][num]:
@@ -14184,12 +14263,12 @@
                 f = ldic[self.stots[sq1][0]].work
                 if not w:
                     w = f
-                if not f == w and st == "n":
+                if f != w and st == "n":
                     st = "y"
                     for sq2 in xrange(0, sq1+1):
                         self.subTotal(self.stots[sq2])
                 setattr(self, "%s_str" % self.stots[sq1][0], f)
-            if not self.repprt[2] == "export" and self.pglin >= self.fpdf.lpp:
+            if self.repprt[2] != "export" and self.pglin >= self.fpdf.lpp:
                 self.pageHeading()
             for gt in self.gtots:
                 gtot = getattr(self, "%s_gtot" % gt)
@@ -14207,7 +14286,7 @@
                         stot = stot + ldic[gt].work
                     setattr(self, "%s_%s_stot" % (gt, idx), stot)
                     idx += 1
-            if not self.repprt[2] == "export":
+            if self.repprt[2] != "export":
                 self.fpdf.drawText(txt=self.h5hf % tuple(fld))
                 self.pglin += 1
             else:
@@ -14232,7 +14311,8 @@
                         self.fpdf.drawText(txt=tail)
                 self.fpdf.output(self.pdfnam)
                 doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam,
-                    head=self.heads[-1], repprt=self.repprt, repeml=self.repeml)
+                    header=self.heads[-1], fromad=self.fromad,
+                    repprt=self.repprt, repeml=self.repeml)
         except:
             pass
 
@@ -14247,17 +14327,17 @@
             self.fpdf.drawText()
             self.pglin += 2
         self.fpdf.setFont(style="B", size=self.fonts[0])
-        self.fpdf.drawText(txt=self.head1)
+        self.fpdf.drawText(txt=self.head1, align=self.align[0])
         self.fpdf.drawText()
         self.pglin += 2
         if self.head2:
             self.fpdf.setFont(style="B", size=self.fonts[1])
-            self.fpdf.drawText(txt=self.head2)
+            self.fpdf.drawText(txt=self.head2, align=self.align[1])
             self.fpdf.drawText()
             self.pglin += 2
         if self.head3:
             self.fpdf.setFont(style="B", size=self.fonts[2])
-            self.fpdf.drawText(txt=self.head3)
+            self.fpdf.drawText(txt=self.head3, align=self.align[2])
             self.fpdf.drawText()
             self.pglin += 2
         if self.opts:
@@ -14291,9 +14371,9 @@
         snum = self.stots.index(col)
         sdet = getattr(self, "%s_str" % col[0])
         self.printTotals("s", snum, sdet)
-        if not self.repprt[2] == "export" and col[2] == "Y":
+        if self.repprt[2] != "export" and col[2] == "Y":
             self.pglin = 999
-        elif not self.tot == "g":
+        elif self.tot != "g":
             if self.repprt[2] == "export":
                 self.expdatas.append(["BLANK", [""]])
             else:
@@ -14317,7 +14397,7 @@
                 self.fpdf.underLine(t="D")
                 self.fpdf.setFont()
                 self.pglin += 2
-        if not self.repprt[2] == "export" and self.stots and self.summ:
+        if self.repprt[2] != "export" and self.stots and self.summ:
             self.printSummary()
 
     def printTotals(self, typ, snum=None, sdet=None):
@@ -14346,7 +14426,7 @@
                     if not j.err:
                         fld.append(j.disp)
                         cld.append(j.work)
-                        if not j.work == 0:
+                        if j.work != 0:
                             flg = "y"
                     else:
                         fld.append("0.00")
@@ -14466,7 +14546,7 @@
                 self.cols.extend(col)
         t = time.localtime()
         self.sysdt = ((t[0] * 10000) + (t[1] * 100) + t[2])
-        self.curdt = self.sysdt / 100
+        self.curdt = int(self.sysdt / 100)
         if not self.head:
             self.head = self.sql.getRec(tables="ftable", cols=["ft_desc"],
                 where=[("ft_tabl", "=", self.tabs[0])], limit=1)[0]
@@ -14486,7 +14566,7 @@
             if self.tabs.count("ctlmst") and c == "ctm_modules":
                 mods = recs[self.cols.index("ctm_modules")]
                 newm = ""
-                for x in range(0, len(mods), 2):
+                for x in xrange(0, len(mods), 2):
                     if not newm:
                         newm = mods[x:x+2]
                     else:
@@ -14701,7 +14781,7 @@
         self.pwd = w
 
     def doUserPwd2(self, frt, pag, r, c, p, i, w):
-        if not w == self.pwd:
+        if w != self.pwd:
             return "Passwords Do Not Match"
         if self.unam == "admin":
             self.cpy = "N"
@@ -14730,7 +14810,7 @@
 
     def doValCoy(self, frt, pag, r, c, p, i, w):
         self.coy = ""
-        if w and not w == "All":
+        if w and w != "All":
             for c in w.replace(" ", "").split(","):
                 try:
                     chk = self.sql.getRec(tables="ctlmst", where=[("ctm_cono",
@@ -14805,7 +14885,7 @@
                 if new[1][3] != "0":
                     new[1] = "%s0" % new[1][:3]
                     new[2] = "Data Capture"
-                if not new in data:
+                if new not in data:
                     data.append(new)
         self.df.colf[pag][2][8]["data"] = data
 
@@ -14830,7 +14910,7 @@
             return "sk1"
 
     def doPw2(self, frt, pag, r, c, p, i, w):
-        if not w == self.pwd:
+        if w != self.pwd:
             return "Passwords do Not Match"
 
     def doSelRet(self, frt, pag, r, c, p, i, w):
@@ -14988,7 +15068,7 @@
             "WAG": ["Salaries and Wages", "wagctl", "ctw_glint"]}
         self.syss = []
         self.sysi = []
-        keys = sysd.keys()
+        keys = list(sysd.keys())
         keys.sort()
         for s in keys:
             det = sysd[s]
@@ -15099,7 +15179,7 @@
         data = data[0].replace("[[", "").replace("]]", "")
         data = data.split("], [")
         data = list(eval(data[0]))
-        if not data[0] == self.ver:
+        if data[0] != self.ver:
             ok = askQuestion(self.mf.window, "Version Error", "The Data "\
                 "to be Restored is Version %s which is Not the Same as "\
                 "this Version of TARTAN, %s.\n\nOnly Matching Versions "\
@@ -15224,11 +15304,11 @@
         # Check if drs or str and slsinv
         if self.slsinv:
             if "drs" in self.syn:
-                if not "str" in self.syn:
+                if "str" not in self.syn:
                     self.syn.append("str")
                 self.syn.append("sls")
             elif "str" in self.syn:
-                if not "drs" in self.syn:
+                if "drs" not in self.syn:
                     self.syn.append("drs")
                 self.syn.append("sls")
         # Check for integrated systems and exit if not all included
@@ -15638,7 +15718,7 @@
                     tots = 0
                 data.append(dat)
         else:
-            y = (self.s_per.work / 100) % 100
+            y = int(self.s_per.work / 100) % 100
             m = self.s_per.work % 100
             for x in xrange(0, 12):
                 data.append(["%s '%02i" % (tartanWork.mthnam[m][0], y)])
@@ -15753,8 +15833,8 @@
         cnv.close()
         if self.fmat == "pdf":
             doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.flenam,
-                head=self.title[0], repprt=self.repprt, repeml=self.repeml)
-            if not self.args or not "chart" in self.args:
+                header=self.title[0], repprt=self.repprt, repeml=self.repeml)
+            if not self.args or "chart" not in self.args:
                 self.dc.focusField("T", 0, 1)
 
     def doChtExit(self):
@@ -15775,9 +15855,12 @@
         self.mf.startLoop()
 
     def setVariables(self):
-        self.dbm = Dbase(self.mf.rcdic)
-        self.dbm.openDbase()
-        self.sql = Sql(self.dbm, ["ctlnot", "ctlpwu"], prog=__name__)
+        if not self.mf.dbm.dbopen:
+            self.mf.dbm.openDbase()
+            self.opened = True
+        else:
+            self.opened = False
+        self.sql = Sql(self.mf.dbm, ["ctlnot", "ctlpwu"], prog=__name__)
         t = time.localtime()
         self.sysdtw = ((t[0] * 10000) + (t[1] * 100) + t[2])
 
@@ -15907,15 +15990,19 @@
         return "nd"
 
     def doNEnd(self, widget=None):
+        self.nf.closeProcess()
         self.sql.updRec("ctlnot", cols=["not_aflag", "not_adate", "not_auser"],
             data=[self.chgflag, self.chgdate, self.chguser], where=[("not_seq",
             "=", self.nseq)])
-        self.dbm.commitDbase()
-        self.dbm.closeDbase()
-        self.doNExit()
+        self.mf.dbm.commitDbase()
+        if self.opened:
+            self.mf.dbm.closeDbase()
+        self.mf.closeLoop()
 
     def doNExit(self, widget=None):
         self.nf.closeProcess()
+        if self.opened and self.mf.dbm.dbopen:
+            self.mf.dbm.closeDbase()
         self.mf.closeLoop()
 
     def doEnd(self, widget=None):
@@ -15924,8 +16011,9 @@
             self.sysdtw, self.user, self.note, self.actflag, self.actdate,
             self.actuser, 0])
         if self.commit:
-            self.dbm.commitDbase()
-        self.dbm.closeDbase()
+            self.mf.dbm.commitDbase()
+        if self.opened:
+            self.mf.dbm.closeDbase()
         self.mf.closeLoop()
 
     def doCancel(self, widget=None):
@@ -15934,6 +16022,8 @@
 
     def doExit(self, widget=None):
         self.df.closeProcess()
+        if self.opened and self.mf.dbm.dbopen:
+            self.mf.dbm.closeDbase()
         self.mf.closeLoop()
 
 class NotesPrint:
@@ -16173,7 +16263,7 @@
                 "%s Column" % self.impcol[num][0],0,"N",
                 self.doImpCol,None,None,("efld",),None,
                 "This is the Column Number in the File Starting with Zero"))
-            if not num == (len(self.impcol) - 1):
+            if num != (len(self.impcol) - 1):
                 pad = " " * (maxs - len(self.impcol[num+1][0]))
                 self.impfld.append((("T", 0, idx, 46),"IUI",3,
                     "%s%s - Column" % (self.impcol[num+1][0], pad),
@@ -16259,7 +16349,7 @@
                             lin.append(d.work)
                         self.impdat.append(lin)
                     except:
-                        if not self.impign == "Y":
+                        if self.impign != "Y":
                             showError(self.mf.body, "Column Error",
                                 "Row %s Column %s, %s is Invalid" %
                                 (num, col[0], dat))
@@ -16294,7 +16384,7 @@
                             else:
                                 raise Exception
                     except:
-                        if not self.impign == "Y":
+                        if self.impign != "Y":
                             showError(self.mf.body, "Column Error",
                                 "Row %s Column %s, %s is Invalid" %
                                 (x, col[0], dat))
@@ -16323,7 +16413,7 @@
                             lin.append(d.work)
                         self.impdat.append(lin)
                     except:
-                        if not self.impign == "Y":
+                        if self.impign != "Y":
                             showError(self.mf.body, "Column Error",
                                 "Row %s, Column %s, %s is Invalid" %
                                 (row, col[0], dat))
@@ -16400,7 +16490,7 @@
             else:
                 self.lpp = int(portrait[0] / self.chgt)
             return
-        # Adjust to heading width
+        # Adjust font to heading width
         if type(head) == int:
             head = "X" * head
         if type(font) == str:
@@ -16440,11 +16530,11 @@
                 if self.def_orientation == "P":
                     self.def_orientation = "L"
                 else:
-                    print "Invalid head length", len(head)
+                    print("Invalid head length", len(head))
                     sys.exit()
 
     def drawText(self, txt="", x=0, y=0, w=0, h=0, font=[], border=0, ln=1, align="", fill=0, ctyp="S"):
-        if not type(txt) in (str, unicode):
+        if type(txt) not in (str, unicode):
             txt = str(txt)
         if x and y:
             self.set_xy(x, y)
@@ -16518,7 +16608,7 @@
                     w = self.width
             if t == "D":
                 self.set_line_width(.5)
-            self.line(x + 1, y + (h / 2), x + w, y + (h / 2))
+            self.line(x + 1, y + int(h / 2), x + w, y + int(h / 2))
             if t == "D":
                 self.set_line_width(0)
             self.set_xy(x, y + h)
@@ -16662,10 +16752,10 @@
 
     def doText(self, x1=0, y1=0, x2=0, y2=0, text="", font="courier", size=10, colour=0, bold=False, italic=False, uline=False, align="", border=0, ln=1, fill=0, *args, **kwargs):
         if text:
-            if not text == str:
+            if text != str:
                 text = str(text)
             font = font.strip().lower()
-            if not self.text_color == rgb(colour):
+            if self.text_color != rgb(colour):
                 self.set_text_color(*rgb(colour))
             style = ""
             if bold:
@@ -16684,7 +16774,7 @@
     def doMultiText(self, x1=0, y1=0, x2=0, y2=0, text="", font="courier", size=10, colour=0, bold=False, italic=False, uline=False, align="", border=0, ln=1, fill=0, *args, **kwargs):
         if text:
             font = font.strip().lower()
-            if not self.text_color == rgb(colour):
+            if self.text_color != rgb(colour):
                 self.set_text_color(*rgb(colour))
             style = ""
             if bold:
@@ -16700,7 +16790,7 @@
 
     def doLine(self, x1=0, y1=0, x2=0, y2=0, font="courier", colour=0, thick=0, *args, **kwargs):
         font = font.strip().lower()
-        if not self.draw_color == rgb(colour):
+        if self.draw_color != rgb(colour):
             self.set_draw_color(*rgb(colour))
         self.setFont(font)
         self.set_line_width(thick)
@@ -16708,7 +16798,7 @@
         self.set_line_width(0)
 
     def doRect(self, x1=0, y1=0, x2=0, y2=0, thick=0, colour=0, *args, **kwargs):
-        if not self.draw_color == rgb(colour):
+        if self.draw_color != rgb(colour):
             self.set_draw_color(*rgb(colour))
         self.set_line_width(thick)
         self.rect(x1, y1, x2-x1, y2-y1)
@@ -16726,7 +16816,7 @@
         self.image(text, x1, y1, w, h, type="", link="")
 
     def doBarcode(self, x1=0, y1=0, x2=0, y2=0, text="", font="interleaved 2of5 nt", size=1, colour=0, *args, **kwargs):
-        if not self.draw_color == rgb(colour):
+        if self.draw_color != rgb(colour):
             self.set_draw_color(*rgb(colour))
         font = font.lower().strip()
         if font == "interleaved 2of5 nt":
@@ -17045,7 +17135,7 @@
                 self.newdic["name_init"][tdc.index("tpd_text")] = dat
 
 class ToolTip(object):
-    def __init__(self, widget, text, font=None, color=True):
+    def __init__(self, widget, text, font=None, color=True, pause=5000):
         self.widget = widget
         self.text = text
         if not font:
@@ -17053,6 +17143,7 @@
         else:
             self.font = font
         self.color = color
+        self.pause = pause
         self.tipwindow = None
         self.x = self.y = 0
         self.widget.bind("<Enter>", self.showTip)
@@ -17075,8 +17166,9 @@
         tw.wm_overrideredirect(1)
         tw.wm_geometry("+%d+%d" % (x, y))
         label = MyLabel(tw, color=self.color, text=self.text, justify="left",
-            relief="solid", borderwidth=2, font=self.font, wraplength=500)
+            relief="solid", borderwidth=2, font=self.font, wraplength=400)
         label.pack(ipadx=1, ipady=2)
+        label.after(self.pause, self.hideTip)
 
     def hideTip(self, event=None):
         tw = self.tipwindow
@@ -17125,7 +17217,6 @@
     def linkAbout(self, *args):
         try:
             web = "http://www.tartan.co.za"
-            urllib2.urlopen(urllib2.Request(web))
             webbrowser.open(web)
             self.exitAbout()
         except:
@@ -17214,10 +17305,10 @@
                 butt=[
                     ('Continue', abcd),
                     ('Cancel', wxyz)]
-    titl    - The widget's title
+    title    - The widget's title
     conf    - Whether or not to ask for confirmation
     """
-    def __init__(self, parent=None, cols=None, butt=None, titl=None, conf=False):
+    def __init__(self, parent=None, cols=None, butt=None, title=None, conf=False):
         self.parent = parent
         if not self.parent:
             self.window = MkWindow(tk=True, remov=False).newwin
@@ -17239,14 +17330,14 @@
                 ("TkHeadingFont", "Courier", 12, "normal"))
             for font in fonts:
                 nf = tkfont.nametofont(font[0])
-                if not len(font) == 4:
+                if len(font) != 4:
                     nf.configure(family=font[1], size=font[2])
                 else:
                     nf.configure(family=font[1], size=font[2], weight=font[3])
                 self.sframe.option_add(font[0], nf)
         self.sframe.place(anchor="center", relx=0.5, rely=0.5)
-        if titl:
-            head = MyLabel(self.sframe, text=titl, color=True, borderwidth=2,
+        if title:
+            head = MyLabel(self.sframe, text=title, color=True, borderwidth=2,
                 anchor="c", padding=0, relief="ridge")
             head.pack(fill="x", expand="yes")
         nframe = MyFrame(self.sframe, padding=2)
@@ -17314,7 +17405,9 @@
     def goNext(self, num, event=None):
         col = self.cols[num]
         if event and event.keysym == "F1":
-            dia = FileDialog(**{"title": "Attachment", "parent": self.sframe,
+            dia = FileDialog(**{
+                "parent": self.sframe,
+                "title": "Attachment",
                 "initd": ".", "multi": True})
             fle = dia.askopenfilename()
             if not fle:
@@ -17335,7 +17428,7 @@
             dat = CCD(self.ents[col[0]].get(), typ, siz)
         if dat.err:
             self.ents[col[0]].focus_set()
-            if not self.ents[col[0]].winfo_class() == "Text":
+            if self.ents[col[0]].winfo_class() != "Text":
                 self.ents[col[0]].selection_range(0, "end")
             self.stat.configure(text="Error, %s" %
                 self.stat.cget("text").replace("Error, ", ""))

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2017-02-25 14:03:05 +0000
+++ std/tartanFunctions.py	2017-07-24 08:34:39 +0000
@@ -39,11 +39,11 @@
     except:
         if dtype == "question":
             answer = None
-            while not answer in ("yes", "no"):
+            while answer not in ("yes", "no"):
                 answer = raw_input("\n%s (yes/no): " % mess)
             return answer
         else:
-            print "\n%s" % mess
+            print("\n%s" % mess)
             return
 
 def askChoice(screen=None, head="", mess="", butt=None, default=""):
@@ -108,19 +108,22 @@
     except:
         user = ""
     prgdir = getPrgPath()
-    homedir = os.path.dirname(prgdir)
+    if sys.platform == "win32":
+        tardir = os.path.normpath("C:/Tartan")
+    else:
+        tardir = os.path.join(os.getenv("HOME"), "Tartan")
     opts = {
         "dbase": ["SQLite"],
         "dbname": ["tartan"],
         "dbhost": ["localhost"],
-        "dbdir": [os.path.join(homedir, "fle")],
+        "dbdir": [os.path.join(tardir, "fle")],
         "dbport": [""],
         "dbuser": [user],
         "dbpwd": [""],
         "prgdir": [prgdir],
-        "bupdir": [os.path.join(homedir, "bup")],
-        "wrkdir": [os.path.join(homedir, "wrk")],
-        "upgdir": [os.path.join(homedir, "upg")],
+        "bupdir": [os.path.join(tardir, "bup")],
+        "wrkdir": [os.path.join(tardir, "wrk")],
+        "upgdir": [os.path.join(tardir, "upg")],
         "vwr": ["/usr/bin/evince",
             os.path.join(prgdir, "uty", "SumatraPDF.exe")],
         "prn": ["/usr/bin/lpr",
@@ -160,14 +163,12 @@
             if sys.platform == "win32":
                 if os.path.isfile(os.path.normpath("C:/tartanrc")):
                     rcfile = os.path.normpath("C:/tartanrc")
+                elif os.path.isfile(os.path.normpath("C:/Tartan/tartanrc")):
+                    rcfile = os.path.normpath("C:/Tartan/tartanrc")
                 else:
-                    rcfile = os.path.join(homedir, "tartanrc")
+                    rcfile = os.path.join(tardir, "tartanrc")
             else:
-                rcf = os.path.join(os.path.expanduser("~"), ".tartanrc")
-                if os.path.isfile(rcf):
-                    rcfile = rcf
-                else:
-                    rcfile = os.path.join(homedir, "tartanrc")
+                rcfile = os.path.join(os.path.expanduser("~"), ".tartanrc")
     try:
         rcdic = {"name": rcfile}
         fle = open(rcfile, "r")
@@ -189,14 +190,14 @@
             else:
                 rcdic[l[0].strip()] = l[1].strip()
         fle.close()
-        if not "dbase" in rcdic or not "dbname" in rcdic:
+        if "dbase" not in rcdic or "dbname" not in rcdic:
             raise Exception
     except:
         if not default:
             return "error"
     for o in opts:
-        if not o in rcdic:
-            if len(opts[o]) == 1 or not sys.platform == "win32":
+        if o not in rcdic:
+            if len(opts[o]) == 1 or sys.platform != "win32":
                 rcdic[o] = opts[o][0]
             else:
                 rcdic[o] = opts[o][1]
@@ -204,6 +205,10 @@
             rcdic[o] = int(rcdic[o])
         if o == "acnf" and rcdic[o].lower() == "y":
             rcdic["acnf"] = "L"
+        if o == "prgdir" and rcdic[o].count("Temp"):
+            rcdic[o] = prgdir
+        if o in ("vwr", "prn") and rcdic[o].count("Temp"):
+            rcdic[o] = os.path.join(prgdir, "uty", os.path.basename(rcdic[o]))
     if not rcdic["geo"] or rcdic["geo"] == "0":
         try:
             w, h, f = getFontSize()
@@ -229,7 +234,7 @@
         check = []
         for pth in pths:
             if pth in rcdic and not os.path.isdir(rcdic[pth]):
-                if not rcdic[pth] in check:
+                if rcdic[pth] not in check:
                     check.append(rcdic[pth])
         if check and os.path.exists(rcfile):
             try:
@@ -262,11 +267,12 @@
     """
     Display an exception
 
-    scrn = The Screen on which to Display the Exception or None to print
-    path = The place where the log file resides
-    mess = The First Line of the Message
-    xits = A command to be executed on exiting the exception frame
-    dbm  = The database class
+    scrn  = The Screen on which to Display the Exception or None to print
+    path  = The place where the log file resides
+    mess  = The First Line of the Message
+    maxTB = The maximum number of entries to display
+    xits  = A command to be executed on exiting the exception frame
+    dbm   = The database class
     """
     import getpass, os, platform, sys, time, traceback
     from TartanClasses import ScrollText
@@ -295,10 +301,10 @@
         if dbm:
             from TartanClasses import Sql
             if not dbm.dbopen:
+                opened = True
+                dbm.openDbase()
+            else:
                 opened = False
-                dbm.openDbase()
-            else:
-                opened = True
             try:
                 tab = ["ctlmst", "ctlsys", "verupd"]
                 sql = Sql(dbm, tables=tab, prog=__name__)
@@ -316,7 +322,7 @@
                 os.remove(fnam)
             except:
                 pass
-            if not opened:
+            if opened:
                 dbm.closeDbase()
 
     title = str(sys.exc_type)
@@ -343,14 +349,14 @@
     if path:
         doSaveExc()
     if not scrn:
-        print mess
+        print(mess)
         return
     try:
         if scrn.winfo_toplevel().state() == "withdrawn":
             scrn.winfo_toplevel().deiconify()
         ScrollText(scrn=scrn, title=title, mess=mess, select=False, xits=xits)
     except:
-        print mess
+        print(mess)
 
 def makeArray(col, row, dth, typ="I"):
     """
@@ -409,7 +415,7 @@
                 (period - 1))], limit=1)
         chk2 = sql.getRec(tables="gentrn", cols=["max(glt_capdt)"],
             where=[("glt_cono", "=", conum), ("glt_curdt", "<",
-            (p[0] / 100))], limit=1)
+            int(p[0] / 100))], limit=1)
         sp.closeSplash()
         if chk2[0] and chk2[0] > chk1[0]:
             ok = askQuestion(mf.window, "Year End Error",
@@ -451,7 +457,7 @@
         nam.append(os.path.join(pth, "%s_%s_%s.%s" % (prg, key, tim, e)))
     return nam
 
-def doPrinter(mf=None, conum=None, pdfnam=None, splash=True, head=None, repprt=None, repeml=None, fromad=None, attach=None, skip=False):
+def doPrinter(mf=None, conum=None, pdfnam=None, splash=True, header=None, repprt=None, repeml=None, fromad=None, attach=None, skip=False):
     """
     This module Views or Prints and/or Mails a Report
 
@@ -459,7 +465,7 @@
      conum  = Company Number
      pdfnam = Report PDF File Name
      splash = Display a Splash Screen
-     head   = Heading Used as Subject of Mail
+     header = Heading Used as Subject of Mail
      repprt = A list containing the following:
                 Y or N widget created
                 Output Report to (V)iew, (P)rinter ot e(X)port
@@ -474,7 +480,7 @@
                         Subject and Message
                         Subject, Message and Attachment
                 Whether to print/view the emailed report
-     fromad = The from address if not the default company one.
+     fromad = The from address if not the default system or company one.
      attach = A list of attachments
      skip   = Skip mail errors
      """
@@ -525,15 +531,17 @@
                 subj = ""
                 mess = ""
             if not subj:
-                if type(head) in (tuple, list):
-                    if len(head) == 1:
-                        subj = head[0]
-                    elif len(head) == 2:
-                        subj = "%s %s" % tuple(head)
-                    elif len(head) == 3:
-                        subj = "%s %s %s" % tuple(head)
+                if type(header) in (tuple, list):
+                    if len(header) == 1:
+                        subj = header[0]
+                    elif len(header) == 2:
+                        subj = "%s %s" % tuple(header)
+                    elif len(header) == 3:
+                        subj = "%s %s %s" % tuple(header)
+                elif header:
+                    subj = header
                 else:
-                    subj = head
+                    subj = "PDF Report"
             while not ok:
                 if splash:
                     sp = SplashScreen(mf.body,
@@ -695,18 +703,18 @@
 
 def sendMail(server, ex, to, subj, mess="", attach=[], embed=[], check=False, timeout=30, local=None):
     """
-    A routine to email a message plus a file as an attachment
+    A routine to email a message, embed files and/or attach files.
 
         server  = A list of the smtp server details i.e.
                     [host, port, security, auth, username, password]
         ex      = The from address
         to      = A list of recipients
         subj    = The subject
-        mess    = The Message or a tuple having (text, html)
+        mess    = The Message string or a tuple having (text, html)
         attach  = A list of attachments
         embed   = A list of attachments to embed in the body of the message.
         timeout = The number of seconds before timing out defaulting to 30.
-        local   = The local hostname
+        local   = The local hostname as fqdn
     """
     import mimetypes, os, smtplib, socket, sys
     if sys.version.split()[0] < "2.6.0":
@@ -745,9 +753,12 @@
         if check:
             smtp.quit()
             return True
+        # identify ourselves, prompting server for supported features
+        smtp.ehlo()
         if secu and int(secu) == 1:
+            smtp.starttls()
+            # reidentify ourselves over TLS connection
             smtp.ehlo()
-            smtp.starttls()
         if auth:
             smtp.login(unam, upwd)
     except:
@@ -824,7 +835,10 @@
         smtp.quit()
         return True
     except:
-        return
+        try:
+            smtp.quit()
+        except:
+            pass
 
 def mthendDate(date):
     """
@@ -832,8 +846,8 @@
     """
     from tartanWork import mthnam
 
-    yy = date / 10000
-    mm = (date % 10000) / 100
+    yy = int(date / 10000)
+    mm = int((date % 10000) / 100)
     if mm == 2:
         if not yy % 4:
             dd = 29
@@ -851,8 +865,8 @@
     """
     import datetime
 
-    yy = date / 10000
-    mm = date / 100 % 100
+    yy = int(date / 10000)
+    mm = int(date / 100) % 100
     dd = date % 100
     mthend = False
     if (typ == "days" and period == 365) or typ in ("months", "years"):
@@ -889,8 +903,8 @@
     elif base == "D":
         paydt = projectDate(trdt, terms)
     else:
-        styr = trdt / 10000
-        stmt = trdt / 100 % 100
+        styr = int(trdt / 10000)
+        stmt = int(trdt / 100) % 100
         if stday in (0, 30):
             stday = 31
         if trdt % 100 > stday:
@@ -903,8 +917,8 @@
             stdt = lmed
         else:
             stdt = (styr * 10000) + (stmt * 100) + stday
-        pyyr = stdt / 10000
-        pymt = stdt / 100 % 100
+        pyyr = int(stdt / 10000)
+        pymt = int(stdt / 100) % 100
         if terms in (30, 31):
             pymt += 1
             if pymt > 12:
@@ -918,72 +932,6 @@
             paydt = projectDate(stdt, terms)
     return paydt
 
-def checkSunday(paydt):
-    import time
-    try:
-        if time.strftime("%A",time.strptime(str(paydt),"%Y%m%d")) == "Sunday":
-            pyyr = paydt / 10000
-            pymt = ((paydt / 100) % 100)
-            pydy = (paydt % 100) - 1
-            if not pydy:
-                pymt -= 1
-                paydt = mthendDate((pyyr * 10000) + (pymt * 100) + 1)
-            else:
-                paydt = (pyyr * 10000) + (pymt * 100) + pydy
-    except:
-        paydt = 0
-    return paydt
-
-def dateToJulian(date):
-    """
-    Function to return a julian date from an iso date
-    """
-    cmon = [0,31,59,90,120,151,181,212,243,273,304,334]
-    y = date / 10000
-    m = (date / 100) - (y * 100)
-    d = date % 100
-    l = y / 4
-    r = y % 4
-    if r:
-        d = d + 1
-    jdate = (y * 365) + l + cmon[m - 1] + d
-    if not r and m > 1:
-        jdate = jdate + 1
-    return jdate
-
-def julianToDate(jdate):
-    """
-    Function to return an iso date from a julian date
-    """
-    from tartanWork import mthnam
-
-    chkmth = copyList(mthnam)
-    y = jdate / 365
-    d = (jdate % 365)
-    l = y / 4
-    d = d - l
-    r = y % 4
-    if r:
-        d = d - 1
-    while d <= 0:
-        y = y - 1
-        r = y % 4
-        if not r:
-            d = d + 366
-        else:
-            d = d + 365
-    r = y % 4
-    m = 0
-    if not r:
-        chkmth[2][2] = 29
-    else:
-        chkmth[2][2] = 28
-    while d > chkmth[m][2]:
-        m = m + 1
-        d = d - chkmth[m - 1][2]
-    date = (y * 10000) + (m * 100) + d
-    return date
-
 def dateDiff(date1, date2, ptype="years"):
     """
     Function to return the differance between two dates.
@@ -1015,7 +963,7 @@
     if ptype.lower() == "years":
         if date2.day < date1.day:
             months -= 1
-        return months / 12
+        return int(months / 12)
 
 def getUnderline(widget=None, blist=None, text=None):
     """
@@ -1033,7 +981,7 @@
         for bind in binds:
             if "<Key-Alt_L>" in bind:
                 c = bind.split("<Key-Alt_L>")[1].upper()
-                if not c in used:
+                if c not in used:
                     used.append(c)
     elif blist:
         # Menu bindings
@@ -1048,10 +996,11 @@
         for p in xrange(start, len(text)):
             c = text[p]
             # If the label is Exit, try and make x the hot key
-            if text == "Exit" and c == "E" and not "X" in used:
+            if text == "Exit" and c == "E" and "X" not in used:
                 continue
-            if (ord(c) in xrange(65, 91) or ord(c) in xrange(97, 123)) and \
-                                                    not c.upper() in used:
+            if (ord(c) in xrange(65, 91) or \
+                    ord(c) in xrange(97, 123)) and \
+                    c.upper() not in used:
                 if not widget:
                     used.append(c.upper())
                 pos = p
@@ -1096,13 +1045,6 @@
             showException(None, ".", "Show Printer Error")
     return data
 
-def deepList(data):
-    """fully copies trees of tuples to a tree of lists.
-       deep_list( (1,2,(3,4)) ) returns [1,2,[3,4]]"""
-    if type(data) != tuple:
-        return data
-    return [deepList(d) for d in data]
-
 def removeFunctions(nam, dec=0):
     """removes all aggregate details from a column name
         nam = the column detail
@@ -1248,7 +1190,7 @@
         rec.append(bal)
         if bal or zer == "A":
             dat.append(rec)
-        elif zer == "Y" and (not dte or not rec[col.index("curdt")] < dte):
+        elif zer == "Y" and (not dte or rec[col.index("curdt")] >= dte):
             dat.append(rec)
     if not neg and tot < 0:
         return col, []
@@ -1298,7 +1240,7 @@
         if not ctl:
             return "Missing Control Record - assctl"
         if ctl["cta_glint"] == "Y":
-            if not "ass_sls" in ctlctl:
+            if "ass_sls" not in ctlctl:
                 return "Missing Control - ass_sls"
             ctlacc.append(ctlctl["ass_sls"])
             sql = Sql(mf.dbm, "assgrp", prog=__name__)
@@ -1312,7 +1254,7 @@
         if not ctl:
             return "Missing Control Record - bkmctl"
         if ctl["cbk_glint"] == "Y":
-            if not "bkm_ctl" in ctlctl:
+            if "bkm_ctl" not in ctlctl:
                 return "Missing Control - bkm_ctl"
             ctlacc.append(ctlctl["bkm_ctl"])
     # Load Crs Control
@@ -1321,7 +1263,7 @@
         if not ctl:
             return "Missing Control Record - crsctl"
         if ctl["ctc_glint"] == "Y":
-            if not "crs_ctl" in ctlctl:
+            if "crs_ctl" not in ctlctl:
                 return "Missing Control - crs_ctl"
             ctlacc.append(ctlctl["crs_ctl"])
     # Load Drs Control
@@ -1330,7 +1272,7 @@
         if not ctl:
             return "Missing Control Record - drsctl"
         if ctl["ctd_glint"] == "Y":
-            if not "drs_ctl" in ctlctl:
+            if "drs_ctl" not in ctlctl:
                 return "Missing Control - drs_ctl"
             ctlacc.append(ctlctl["drs_ctl"])
     # Load Lon Control
@@ -1339,7 +1281,7 @@
         if not ctl:
             return "Missing Control Record - lonctl"
         if ctl["cln_glint"] == "Y":
-            if not "lon_ctl" in ctlctl:
+            if "lon_ctl" not in ctlctl:
                 return "Missing Control - lon_ctl"
             ctlacc.append(ctlctl["lon_ctl"])
     # Load Mem Control
@@ -1348,7 +1290,7 @@
         if not ctl:
             return "Missing Control Record - memctl"
         if ctl["mcm_glint"] == "Y":
-            if not "mem_ctl" in ctlctl:
+            if "mem_ctl" not in ctlctl:
                 return "Missing Control - mem_ctl"
             ctlacc.append(ctlctl["mem_ctl"])
     # Load Rca Control
@@ -1357,9 +1299,8 @@
         if not ctl:
             return "Missing Control Record - rcactl"
         if ctl["cte_glint"] == "Y":
-            if not "rca_own" in ctlctl or not "rca_tnt" in ctlctl:
-                return "Missing Control - rca_own or rca_tnt"
-            ctlacc.extend([ctlctl["rca_own"], ctlctl["rca_tnt"]])
+            ctlacc.extend([ctlctl["rca_own"], ctlctl["rca_tnt"],
+                ctlctl["rca_dep"]])
     # Load Rtl Integration
     if mod.count("RT"):
         ctl = gc.getCtl("rtlctl", coy)
@@ -1377,7 +1318,7 @@
         if not ctl:
             return "Missing Control Record - wagctl"
         if ctl["ctw_glint"] == "Y":
-            if not "wag_slc" in ctlctl:
+            if "wag_slc" not in ctlctl:
                 return "Missing Control - wag_slc"
             ctlacc.append(ctlctl["wag_slc"])
     if acc in ctlacc:
@@ -1553,11 +1494,11 @@
                 "\n\n%s\n\nIs Not Found or Not Accessible" % exe)
             return
 
-    if not "view" in args:
+    if "view" not in args:
         view = True
     else:
         view = args["view"]
-    if not "wait" in args or not args["wait"]:
+    if "wait" not in args or not args["wait"]:
         wait = os.P_NOWAIT
     else:
         wait = os.P_WAIT
@@ -1604,10 +1545,10 @@
             flenam.write(line + "\n")
         # Save the csv file
         flenam.close()
-        if view and not "X" in types:
+        if view and "X" not in types:
             # View the csv file
             viewFile(args["name"] + ".csv", wait)
-        if not "X" in types:
+        if "X" not in types:
             return
 
     styles = {}
@@ -1617,7 +1558,7 @@
             idx = fmt
         else:
             idx = fmt + num
-        if not idx in styles:
+        if idx not in styles:
             if num:
                 styles[idx] = ezxf(fmt, num_format_str=num)
             else:
@@ -1745,7 +1686,7 @@
                 sheet.write(rowx, 0, "", getStyle(fmt))
                 continue
             chk = num + 1
-            if not chk == len(args["datas"]):
+            if chk != len(args["datas"]):
                 if args["datas"][chk][0] == "ULINES":
                     unl = "s"
                 elif args["datas"][chk][0] == "ULINED":
@@ -1786,11 +1727,11 @@
                         continue
                 elif valx and args["forms"][colx][0].lower() == "d1":
                     # D1 Date conversion
-                    valx = datetime.datetime(valx / 10000, (valx / 100) % 100,
-                        valx % 100)
+                    valx = datetime.datetime(int(valx / 10000),
+                        int(valx / 100) % 100, valx % 100)
                 elif valx and args["forms"][colx][0].lower() == "d2":
                     # D2 Date conversion
-                    valx = datetime.datetime(valx / 100, valx % 100, 1)
+                    valx = datetime.datetime(int(valx / 100), valx % 100, 1)
                 elif args["forms"][colx][0] not in alpha and unl:
                     # Underlines
                     if unl == "s":
@@ -1809,7 +1750,7 @@
         if view:
             viewFile(args["name"] + ".xls", wait)
 
-def ftpDownload(server, srce, name=None, word=None, dest=None, close=True):
+def ftpDownload(server, srce, name=None, word=None, dest=None, close=False, check=False):
     import ftplib
     if not name:
         name = "anonymous"
@@ -1817,17 +1758,27 @@
         word = "info@tartan.co.za"
     if not dest:
         dest = srce
-    if close:
-        ofle = open(dest, "wb")
-    else:
-        ofle = dest
     try:
         ftp = ftplib.FTP(server, name, word)
-        ftp.retrbinary("RETR " + srce, ofle.write)
-        if close:
-            ofle.close()
+        if check:
+            if srce in ftp.nlst():
+                found = True
+            else:
+                found = False
+        else:
+            if close:
+                ofle = open(dest, "wb")
+            else:
+                ofle = dest
+            ftp.retrbinary("RETR " + srce, ofle.write)
+            if close:
+                ofle.close()
         ftp.close()
+        if check:
+            return found
     except:
+        if check:
+            return False
         return "Download Error"
 
 def doDrawTable(fpdf, rr, ppad=1, spad=1, cw=None, ld=None, font=True):
@@ -2024,8 +1975,8 @@
     return dat
 
 def genAccNum(name, seq, size=7):
-    valid = map(chr, range(65, 91))
-    valid.extend(map(chr, range(97, 123)))
+    valid = map(chr, xrange(65, 91))
+    valid.extend(map(chr, xrange(97, 123)))
     valid.append("&")
     data = ""
     for c in name:
@@ -2044,7 +1995,7 @@
     nxt = sql.getRec(tables=table, cols=[column], where=where, order=column)
     code = 1
     for n in xrange(start, last):
-        if not [n] in nxt:
+        if [n] not in nxt:
             code = n
             break
     return code
@@ -2072,36 +2023,39 @@
             for r in g[1:]:
                 try:
                     r = int(r)
-                    if not r in greens[g[0]]:
+                    if r not in greens[g[0]]:
                         greens[g[0]].append(r)
                         rinks += 1
                 except:
                     pass
     if rinks < needed:
         return None, None, None, "Not Enough Rinks, %s Needed" % needed
-    # Remove end rinks of last green
+    # End rinks
+    endrks = []
+    for g in greens:
+        if 1 in greens[g]:
+            endrks.append("%s%s" % (g, 1))
+        if 7 in greens[g]:
+            endrks.append("%s%s" % (g, 7))
+        elif 6 in greens[g]:
+            endrks.append("%s%s" % (g, 6))
+    # Remove end rinks if not needed
     rem = rinks - needed
-    chk = [0, 6, 5, 4, 7, 3, 2, 1]
+    if rem > endrks:
+        rem = endrks
+    chk = [0, 6, 0, 0, 0, 0, 0, 1]
     num = 7
-    keys = greens.keys()
+    keys = list(greens.keys())
     keys.sort()
-    keys.reverse()
     while rem:
         for g in keys:
             if num in greens[g] and "%s%s" % (g, num) not in keep:
                 greens[g].remove(num)
+                endrks.remove("%s%s" % (g, num))
                 rem -= 1
             if not rem:
                 break
         num = chk[num]
-    endrks = 0
-    for g in greens:
-        if 1 in greens[g]:
-            endrks += 1
-        if 7 in greens[g]:
-            endrks += 1
-        elif 6 in greens[g]:
-            endrks += 1
     return greens, first, endrks, None
 
 def payeTables(sql, year):
@@ -2234,7 +2188,7 @@
 
 def getFileName(path, wrkdir=None, check=False):
     import os, sys
-    if sys.platform == "win32" or not path[:2] in ("\\\\", "\\", "//"):
+    if sys.platform == "win32" or path[:2] not in ("\\\\", "\\", "//"):
         # Normal path
         if os.path.isfile(path):
             if check:
@@ -2268,16 +2222,16 @@
             nam = os.path.basename(pth)
         if not os.path.exists(nam):
             fle = open(nam, "wb")
-            con.retrieveFileFromOffset(svr[3], pth, fle)
+            con.retrieveFile(svr[3], pth, fle)
             fle.close()
         con.close()
         return nam
     except:
-        if fle:
-            fle.close()
-        if con:
-            con.close()
-        return
+        pass
+    if fle:
+        fle.close()
+    if con:
+        con.close()
 
 def b64Convert(typ, txt):
     import base64
@@ -2327,208 +2281,6 @@
     except:
         return orig[:]
 
-def simpleLineChart(fpdf, head="", xcol=[], vals=[], ycol=None, labs=True):
-    from TartanClasses import rgb
-    if not vals or not vals[0]:
-        return
-    if len(vals) > 3:
-        print "Only a maximum of 3 lines allowed"
-        return
-    # Minimum and Maximum Values
-    mins = None
-    maxs = None
-    for val in vals:
-        for v in val:
-            if mins is None or v < mins:
-                mins = v
-            if maxs is None or v > maxs:
-                maxs = v
-    uu = len(str(int(maxs - mins)))
-    if uu == 3:
-        vi = 100
-    elif uu > 3:
-        vi = 10 ** (uu - 2)
-    else:
-        vi = 1
-    mins = (int(mins) / vi) * vi
-    maxs = ((int(maxs) / vi) + 1) * vi
-    # Heading
-    lm = 20                                 # Left margin
-    cw = int(fpdf.w * .90) - lm             # Chart width
-    fpdf.drawText()
-    fpdf.setFont("Courier", "B", 12)
-    if head:
-        fpdf.drawText(head, x=lm, w=cw, align="C")
-        fpdf.drawText()
-    if maxs > 99:
-        txt = "{:,}'s".format(vi)
-        fpdf.drawText(txt, align="C")
-        fpdf.drawText()
-    # Chart Variables
-    if fpdf.cur_orientation == "P":
-        mx = .80
-    else:
-        mx = .75
-    sy = int(fpdf.get_y()) + 1              # Initial y value
-    ch = (fpdf.h * mx) - sy                 # Chart height
-    vb = (maxs - mins) / vi                 # Vertical blocks
-    vd = ch / vb                            # Depth of blocks
-    ly = sy + ch                            # Last y value
-    cl = ["#ff0000", "#0000ff", "#00ff00"]  # Line colours (red/blue/green)
-    # Horizontal Lines
-    for z in range(vb + 1):
-        num = maxs - (z * vi)
-        if num:
-            if vb > 50 and num % (vi * 10):
-                continue
-            fpdf.set_line_width(0)
-        else:
-            fpdf.set_line_width(1)
-        txt = num / vi
-        fpdf.drawText(txt, x=lm-8, y=sy+(z*vd)-2, w=3, align="R")
-        fpdf.line(lm-3, sy+(z*vd), lm+cw, sy+(z*vd))
-    # Vertical Lines
-    fpdf.set_line_width(1)
-    fpdf.line(lm, sy, lm, ly)
-    hw = int(cw / len(xcol))
-    for num, tab in enumerate(xcol):
-        txt = "%12s" % tab
-        fpdf.set_line_width(0)
-        fpdf.line(lm+10+(num*hw), ly+3, lm+10+(num*hw), sy)
-        fpdf.rotate(60, x=lm+(num*hw)-7, y=ly+fpdf.get_string_width(txt))
-        fpdf.drawText(txt=txt, x=lm+(num*hw)-7, y=ly+fpdf.get_string_width(txt))
-        fpdf.rotate(0)
-    # Chart
-    clrs = cl[:len(vals)]
-    for col, val in enumerate(vals):
-        fpdf.set_draw_color(*rgb(clrs[col]))
-        for num, tab in enumerate(xcol):
-            x1 = lm + 10 + (num * hw)
-            y1 = sy + ((vd / vi) * (maxs - val[num]))
-            if tab != xcol[-1]:
-                fpdf.set_line_width(.80)
-                y2 = sy + ((vd / vi) * (maxs - val[num + 1]))
-                fpdf.line(x1, y1, x1 + hw, y2)
-                fpdf.set_line_width(0)
-            if labs:
-                fpdf.drawText(vals[col][num], x1-5, y1-4, w=11, fill=1,
-                    font=["courier", "B", 8], border="TLRB")
-            fpdf.setFont("Courier", "B", 12)
-        fpdf.set_draw_color(*rgb(0))
-    # Legend
-    if len(vals) > 1 and ycol:
-        fpdf.drawText()
-        x1 = cw
-        for x in range(len(vals) - 1, -1, -1):
-            txt = "     %s" % ycol[x]
-            wth = (len(txt) + 1) * fpdf.cwth
-            x1 -= wth
-            fpdf.drawText(txt, x=x1, y=ly+34, h=5, w=wth, border="TLRB")
-            fpdf.set_line_width(1)
-            fpdf.set_draw_color(*rgb(clrs[x]))
-            fpdf.line(x1+2, ly+36, x1+10, ly+36)
-            fpdf.set_line_width(0)
-            fpdf.set_draw_color(0)
-
-def simpleBarChart(fpdf, head="", xcol=[], vals=[], tgt=0):
-    from TartanClasses import rgb
-    if not vals:
-        return
-    # Minimum and Maximum Values
-    mins = None
-    maxs = None
-    for val in vals:
-        if mins is None or val < mins:
-            mins = val
-        if maxs is None or val > maxs:
-            maxs = val
-    if mins > 0:
-        mins = 0
-    vi = 1
-    while True:
-        if maxs / vi <= 20:
-            break
-        vi = vi * 10
-    mins = (int(mins) / vi) * vi
-    maxs = ((int(maxs) / vi) + 1) * vi
-    # Heading
-    lm = 30                                 # Left margin
-    cw = int(fpdf.w * .95) - lm             # Chart width
-    fpdf.drawText()
-    if head:
-        fpdf.setFont("Courier", "B", 12)
-        fpdf.drawText(head, x=lm, w=cw, align="C")
-        fpdf.drawText()
-    # Chart Variables
-    if fpdf.cur_orientation == "P":
-        mx = .80
-    else:
-        mx = .70
-    sy = int(fpdf.get_y()) + 1              # Initial y value
-    ch = (fpdf.h * mx) - sy                 # Chart height
-    vb = (maxs - mins) / vi                 # Vertical blocks
-    vd = ch / vb                            # Depth of blocks
-    ly = sy + ch                            # Last y value
-    cl = ["#ff0000", "#0000ff", "#000000"]  # Line colours (red/blue/black)
-    # Horizontal Lines
-    ny = sy
-    zy = sy
-    for z in range(vb + 1):
-        num = maxs - (z * vi)
-        if num:
-            fpdf.set_line_width(0)
-        else:
-            fpdf.set_line_width(1)
-        if not tgt or tgt and not num == tgt:
-            fpdf.drawText(num, x=lm-8, y=ny-2, w=3, align="R")
-        fpdf.line(lm-3, ny, lm+cw+2, ny)
-        if not num:
-            zy = ny
-        ny += vd
-    # Vertical Lines
-    fpdf.set_line_width(1)
-    fpdf.line(lm, sy, lm, ly)
-    if len(vals) > 10:
-        lt = 8
-    else:
-        lt = 10
-    fpdf.set_line_width(lt)
-    fpdf.set_draw_color(*rgb(cl[1]))
-    hw = int(cw / len(xcol))
-    hh = ch / (maxs - mins)
-    for num, tab in enumerate(xcol):
-        pad = lt / 2
-        txt = "%12s" % tab
-        if vals[num] < 0:
-            y2 = 0 - vals[num]
-            y2 = zy + (hh * y2) - pad
-            y1 = zy + pad
-            if y2 < y1:
-                y2 = y1
-        else:
-            y1 = vals[num]
-            y1 = zy - (hh * y1) + pad
-            y2 = zy - pad
-            if y1 > y2:
-                y1 = y2
-        fpdf.line(lm+10+(num*hw), y1, lm+10+(num*hw), y2)
-        fpdf.rotate(55, x=lm+(num*hw)-7, y=ly+fpdf.get_string_width(txt))
-        fpdf.drawText(txt=txt, x=lm+(num*hw)-7, y=ly+fpdf.get_string_width(txt))
-        fpdf.rotate(0)
-    # Target Line
-    if tgt:
-        w = fpdf.cwth * 8
-        fpdf.set_line_width(1)
-        fpdf.set_text_color(*rgb(cl[0]))
-        fpdf.set_draw_color(*rgb(cl[0]))
-        y1 = zy - (hh * tgt)
-        fpdf.drawText("Target", x=lm-w, y=y1-2, w=w, align="L")
-        fpdf.drawText("%s%s" % (tgt, "%"), x=lm-w, y=y1+2, w=w, align="C")
-        fpdf.line(lm, y1, lm+cw, y1)
-        fpdf.set_text_color(*rgb(cl[2]))
-        fpdf.set_draw_color(*rgb(cl[2]))
-        fpdf.set_line_width(.2)
-
 def luhnFunc(number):
     def digits_of(n):
         return [int(d) for d in str(n)]
@@ -2540,5 +2292,31 @@
     for d in even_digits:
         checksum += sum(digits_of(d*2))
     return checksum % 10 == 0
+
+def internetConnect(host="8.8.8.8", port=53):
+    """
+    Host: 8.8.8.8 (google-public-dns-a.google.com)
+    OpenPort: 53/tcp
+    Service: domain (DNS/TCP)
+    """
+    import socket
+
+    try:
+        socket.setdefaulttimeout(1)
+        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
+        return True
+    except:
+        return False
+
+def roundup(number, places=0):
+    from decimal import Decimal as dec
+    from decimal import ROUND_HALF_UP
+
+    if type(number) is float:
+        number = str(number)
+    place = '1.'
+    for i in xrange(places):
+        place = ''.join([place, '0'])
+    return float(dec(number).quantize(dec(place), rounding=ROUND_HALF_UP))
 # END
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'std/tartanWork.py'
--- std/tartanWork.py	2017-02-25 14:03:05 +0000
+++ std/tartanWork.py	2017-06-02 04:16:37 +0000
@@ -96,9 +96,7 @@
     ("J/E", "Journal"),
     ("C/N", "Credit Note"),
     ("Pmt", "Payment"),
-    ("Dis", "Set-Discount"),
-    ("Inc", "Inc-Discount"),
-    ("Adv", "Adv-Discount")]
+    ("Dis", "Set-Discount")]
 #
 # Debtor"s Ledger
 #----------------
@@ -244,7 +242,6 @@
             "total_value": [["", "SD", 13.2, "Total Document Value"], []],
             "total_movements": [["", "SD", 13.2, "Total Movements"], []],
             "total_balance": [["", "SD", 13.2, "Total Account Balance"], []],
-            "total_value": [["", "SD", 13.2, "Total Document Value"], []],
             "terms": [["", "NA", 30, "Terms and Conditions (All Lines)"], []]
             }},
     "M": {

=== modified file 'stddia.py'
--- stddia.py	2017-02-25 14:03:05 +0000
+++ stddia.py	2017-05-23 09:18:05 +0000
@@ -21,39 +21,40 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctldep"], prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst"], prog=__name__)
         if self.sql.error:
             return
         return True
 
     def mainProcess(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Department Records Maintenance")
+            "Company Records Maintenance")
         dep = {
             "stype": "R",
-            "tables": ("ctldep",),
+            "tables": ("ctlmst",),
             "cols": (
-                ("dep_code", "", 0, "Cod"),
-                ("dep_name", "", 0, "Name")),
-            "where": [("dep_cono", "=", self.opts["conum"])]}
+                ("ctm_cono", "", 0, "Coy"),
+                ("ctm_name", "", 0, "Name")),
+            "where": [("ctm_cono", "=", self.opts["conum"])]}
         fld = (
-            (("T",0,0,0),"I@dep_code",0,"","",
-                "","N",self.doDepCod,dep,None,("notblank",)),
-            (("T",0,1,0),"I@dep_name",0,"","",
+            (("T",0,0,0),"I@ctm_cono",0,"","",
+                "","N",self.doDepCod,dep,None,("notzero",)),
+            (("T",0,1,0),"I@ctm_name",0,"","",
                 "","N",self.doDepName,None,None,("notblank",)))
+        but = (("Exit", None, self.doExit, 0, ("T",0,1), ("T",0,0)),)
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt)
+            eflds=fld, butt=but, tend=tnd, txit=txt)
 
     def doDepCod(self, frt, pag, r, c, p, i, w):
         self.dept = w
-        acc = self.sql.getRec(tables="ctldep", where=[("dep_cono", "=",
-            self.opts["conum"]), ("dep_code", "=", self.dept)], limit=1)
+        acc = self.sql.getRec(tables="ctlmst", where=[("ctm_cono", "=",
+            self.opts["conum"]), ("ctm_cono", "=", self.dept)], limit=1)
         if not acc:
             return "Invalid Department"
         self.df.loadEntry(frt, pag, p+1,
-            data=acc[self.sql.ctldep_col.index("dep_name")])
+            data=acc[self.sql.ctlmst_col.index("ctm_name")])
 
     def doDepName(self, frt, pag, r, c, p, i, w):
         self.name = w

=== modified file 'str/st1010.py'
--- str/st1010.py	2017-02-25 14:03:05 +0000
+++ str/st1010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Masterfile Maintenance.

=== modified file 'str/st1020.py'
--- str/st1020.py	2017-02-25 14:03:05 +0000
+++ str/st1020.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Selling Price Maintenance.

=== modified file 'str/st2010.py'
--- str/st2010.py	2017-03-25 15:17:51 +0000
+++ str/st2010.py	2017-08-01 13:40:34 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Stores Purchase Orders Placing and Receiving.
@@ -41,7 +39,7 @@
         mods = []
         for x in xrange(0, len(ctlmst["ctm_modules"].rstrip()), 2):
             mods.append(ctlmst["ctm_modules"][x:x+2])
-        if not "CR" in mods:
+        if "CR" not in mods:
             showError(self.opts["mf"].body, "System Error",
                 "This module requires you to have a Creditor's Activated")
             return
@@ -103,7 +101,7 @@
             return "Invalid Date, Not In Financial Period"
         self.trdt = w
         self.trdd = self.pr.t_disp[0][0][1]
-        self.curdt = self.trdt / 100
+        self.curdt = int(self.trdt / 100)
         self.batch = "S%s" % self.curdt
 
     def doAutoMkUp(self, frt, pag, r, c, p, i, w):
@@ -169,7 +167,6 @@
             "stype": "R",
             "tables": ("strmf1",),
             "cols": (
-                ("st1_group", "", 0, "Grp"),
                 ("st1_code", "", 0, "Product-Code"),
                 ("st1_desc", "", 0, "Description","Y")),
             "where": [
@@ -886,7 +883,7 @@
             return
         for line in trn:
             self.doExtData(line)
-            curdt = self.deldt / 100
+            curdt = int(self.deldt / 100)
             # Update strpom record
             self.sql.updRec("strpom", cols=["pom_delno", "pom_deldt"],
                 data=[self.delno, self.deldt], where=[("pom_cono", "=",

=== modified file 'str/st2020.py'
--- str/st2020.py	2017-02-25 14:03:05 +0000
+++ str/st2020.py	2017-08-01 14:32:49 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Goods Received Notes.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, FileImport, GetCtl, RepPrt, Sql
+from TartanClasses import ASD, Balances, CCD, FileImport, GetCtl, RepPrt, Sql
 from TartanClasses import TartanDialog
 from tartanFunctions import askQuestion, callModule, showError
 
@@ -47,6 +45,7 @@
         self.glint = strctl["cts_glint"]
         self.locs = strctl["cts_locs"]
         self.automu = strctl["cts_automu"]
+        self.fromad = strctl["cts_emadd"]
         if self.glint == "Y":
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
@@ -165,7 +164,7 @@
             return "Invalid Date, Not in Financial Period"
         self.dte = w
         self.dtw = self.df.t_disp[0][0][i]
-        self.curdt = self.dte / 100
+        self.curdt = int(self.dte / 100)
         self.batno = "S%s" % self.curdt
 
     def doOrd(self, frt, pag, r, c, p, i, w):
@@ -279,17 +278,18 @@
     def doCode(self, frt, pag, r, c, p, i, w):
         self.code = w
         acc = self.sql.getRec(tables="strmf1", cols=["st1_type", "st1_desc",
-            "st1_uoi", "st1_value_ind"], where=[("st1_cono", "=",
+            "st1_uoi", "st1_units", "st1_value_ind"], where=[("st1_cono", "=",
             self.opts["conum"]), ("st1_group", "=", self.group), ("st1_code",
             "=", w)], limit=1)
         if not acc:
             return "Invalid Code"
         if acc[0] in ("J", "R"):
             return "Invalid Code (Job/Recipe Item)"
-        if acc[3] == "N":
+        if acc[4] == "N":
             return "Invalid Code (Value Indicator)"
         self.desc = acc[1]
         self.uoi = acc[2]
+        self.unt = acc[3]
         self.df.loadEntry("C", pag, p+1, data=self.desc)
         self.df.loadEntry("C", pag, p+2, data=self.uoi)
         if self.locs == "N":
@@ -318,6 +318,15 @@
 
     def doQty(self, frt, pag, r, c, p, i, w):
         self.qty = w
+        # Last Cost Price
+        bal = Balances(self.opts["mf"], "STR", self.opts["conum"], self.curdt,
+            (self.group, self.code, self.loc, ("P", self.opts["period"][0])))
+        bals = bal.doStrBals()
+        if self.unt:
+            pri = bals[7] * self.unt
+        else:
+            pri = bals[7]
+        self.df.loadEntry(frt, pag, p+1, data=pri)
 
     def doUcost(self, frt, pag, r, c, p, i, w):
         self.ucost = w
@@ -512,7 +521,7 @@
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=["strtrn"],
             heads=hds, cols=col, gtots=gtt, where=whr, order=odr,
-            repprt=repprt, repeml=repeml)
+            repprt=repprt, repeml=repeml, fromad=self.fromad)
         self.df.setWidget(self.df.mstFrame, state="show")
 
     def doAllLoc(self, frt, pag, r, c, p, i, w):

=== modified file 'str/st2030.py'
--- str/st2030.py	2017-03-25 15:17:51 +0000
+++ str/st2030.py	2017-06-29 08:12:55 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Issues.
@@ -154,7 +152,7 @@
             return "Invalid Date, Not in Financial Period"
         self.dte = w
         self.ddt = self.df.t_disp[pag][0][p]
-        self.curdt = self.dte / 100
+        self.curdt = int(self.dte / 100)
         self.batno = "S%s" % self.curdt
 
     def doGroup(self, frt, pag, r, c, p, i, w):

=== modified file 'str/st2040.py'
--- str/st2040.py	2017-02-25 14:03:05 +0000
+++ str/st2040.py	2017-06-29 08:13:07 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Transfers.
@@ -114,7 +112,7 @@
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
         self.dte = w
-        self.curdt = self.dte / 100
+        self.curdt = int(self.dte / 100)
         self.batno = "S%s" % self.curdt
 
     def doGroup(self, frt, pag, r, c, p, i, w):

=== modified file 'str/st3010.py'
--- str/st3010.py	2017-02-25 14:03:05 +0000
+++ str/st3010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import sttrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "strtrn"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        strctl = gc.getCtl("strctl", self.opts["conum"])
+        if not strctl:
+            return
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -154,8 +158,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st3020.py'
--- str/st3020.py	2017-02-25 14:03:05 +0000
+++ str/st3020.py	2017-06-29 08:13:23 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Transaction Audit Trail.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import sttrtp
 
@@ -29,11 +28,16 @@
         self.sql = Sql(self.opts["mf"].dbm, "strtrn", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        strctl = gc.getCtl("strctl", self.opts["conum"])
+        if not strctl:
+            return
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
-        self.curdt = self.sysdtw / 100
+        self.curdt = int(self.sysdtw / 100)
         self.totind = "N"
         return True
 
@@ -196,7 +200,7 @@
             qty = CCD(dat[col.index("stt_qty")], "SD", 13.2)
             cost = CCD(dat[col.index("stt_cost")], "SD", 13.2)
             sell = CCD(dat[col.index("stt_sell")], "SD", 13.2)
-            if self.trtp == 0:
+            if not self.trtp:
                 self.trtp = trtp.work
                 self.batch = batch.work
             if trtp.work != self.trtp:
@@ -240,9 +244,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st3030.py'
--- str/st3030.py	2017-02-25 14:03:05 +0000
+++ str/st3030.py	2017-06-29 08:13:45 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Selling And Cost Price List.
@@ -37,6 +35,7 @@
             return
         self.locs = strctl["cts_locs"]
         self.prcs = strctl["cts_prices"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -248,7 +247,7 @@
             for nm, sp in enumerate(pr):
                 if not nm:
                     continue
-                if not sp.work and not sp.disp == "*        ":
+                if not sp.work and sp.disp != "*        ":
                     pr[nm].disp = "         "
             if old_grp and old_grp != grp.work:
                 self.pglin = 999
@@ -270,8 +269,8 @@
         if self.fpdf.page and not p.quit:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=self.pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def printCost(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
@@ -301,8 +300,8 @@
         if self.fpdf.page and not p.quit:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=self.pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)
@@ -312,10 +311,10 @@
         uoi = CCD(data[3], "NA", 10)
         # Balances and Cost Prices
         bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-            (self.sysdtw / 100), keys=(grp.work, code.work, self.loc))
+            int(self.sysdtw / 100), keys=(grp.work, code.work, self.loc))
         bal = bals.doStrBals(0, markup=True)
         qty = CCD(bal[5][0], "SD", 12.2)
-        if self.nostock == "Y" and not qty.work > 0:
+        if self.nostock == "Y" and qty.work <= 0:
             return
         acst = CCD(bal[6], "SD", 10.2)
         lcst = CCD(bal[7], "SD", 10.2)
@@ -361,7 +360,7 @@
                     "=", grp.work), ("stt_code", "=", code.work),
                     ("stt_loc", "=", self.loc), ("stt_type", "=", 7)],
                     order="stt_trdt desc", limit=1)
-                if not lsp or not lsp[0] > 0:
+                if not lsp or lsp[0] <= 0:
                     lsp = CCD(0, "UD", 9.2)
                 else:
                     lsp = CCD(lsp[0], "UD", 9.2)

=== modified file 'str/st3040.py'
--- str/st3040.py	2017-02-25 14:03:05 +0000
+++ str/st3040.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Master Code List.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import doPrinter, doWriteExport, getModName, showError
 
 class st3040:
@@ -29,6 +27,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        strctl = gc.getCtl("strctl", self.opts["conum"])
+        if not strctl:
+            return
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -87,7 +90,7 @@
             ("st1_cono", "=", self.opts["conum"]),
             ("st1_group", ">=", self.sgrp),
             ("st1_group", "<=", self.egrp)]
-        if not self.itype == "A":
+        if self.itype != "A":
             whr.append(("st1_type", "=", self.itype))
         whr.extend([("unm_cono=st1_cono",), ("unm_unit=st1_uoi",)])
         recs = self.sql.getRec(tables=["strmf1", "struoi"], cols=["st1_group",
@@ -154,9 +157,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)

=== modified file 'str/st3050.py'
--- str/st3050.py	2017-02-25 14:03:05 +0000
+++ str/st3050.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Recipe Listing.
@@ -34,6 +32,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -181,9 +180,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, grp, cod, chg=False):
         if self.pgnum and self.page == "N" and chg and \

=== modified file 'str/st3060.py'
--- str/st3060.py	2017-02-25 14:03:05 +0000
+++ str/st3060.py	2017-06-29 08:14:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Stock Movement Report.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, CCD, MyFpdf, ProgressBar, Sql
+from TartanClasses import ASD, Balances, CCD, GetCtl, MyFpdf, ProgressBar, Sql
 from TartanClasses import TartanDialog
 from tartanFunctions import doWriteExport, getModName, doPrinter, showError
 
@@ -30,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        strctl = gc.getCtl("strctl", self.opts["conum"])
+        if not strctl:
+            return
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -59,9 +62,9 @@
         r1s = (("Yes", "Y"), ("No", "N"))
         fld = (
             (("T",0,0,0),"ID2",7,"Start Period","",
-                (self.sysdtw/100),"Y",self.doSdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doSdate,None,None,("efld",)),
             (("T",0,1,0),"ID2",7,"End Period","",
-                (self.sysdtw/100),"Y",self.doEdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doEdate,None,None,("efld",)),
             (("T",0,2,0),"IUA",1,"Location","",
                 "","Y",self.doLoc,loc,None,("efld",)),
             (("T",0,3,0),"IUA",3,"Product Group","",
@@ -197,8 +200,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):
@@ -227,9 +230,9 @@
             t.append(CCD(figs[y], "SD", 12.2))
             self.stot[y] = float(ASD(self.stot[y]) + ASD(t[y+4].work))
             self.gtot[y] = float(ASD(self.gtot[y]) + ASD(t[y+4].work))
-        if self.zero == "Y" and not t[0].work and not t[1].work and \
-                not t[2].work and not t[3].work and not t[4].work and \
-                not t[5].work and not t[6].work and not t[7].work:
+        if self.zero == "Y" and not t[4].work and not t[5].work and \
+                not t[6].work and not t[7].work and not t[8].work and \
+                not t[9].work and not t[10].work and not t[11].work:
             return
         return t
 

=== modified file 'str/st3070.py'
--- str/st3070.py	2017-02-25 14:03:05 +0000
+++ str/st3070.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Purchase Orders Report.
@@ -35,6 +33,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -148,8 +147,8 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                    repeml=self.df.repeml)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                    fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def printSetup(self, recs):

=== modified file 'str/st3080.py'
--- str/st3080.py	2017-03-25 15:17:51 +0000
+++ str/st3080.py	2017-06-29 08:15:34 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Stock On Hand Report.
@@ -36,6 +34,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -70,7 +69,7 @@
         r1s = (("Yes","Y"), ("No","N"))
         fld = [
             (("T",0,0,0),"ID2",7,"Reporting Period","",
-                (self.sysdtw/100),"Y",self.doPeriod,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doPeriod,None,None,("efld",)),
             [("T",0,1,0),"IUA",1,"Location","",
                 "","Y",self.doLoc,loc,None,("efld",)],
             (("T",0,2,0),"IUA",3,"Product Group","",
@@ -85,7 +84,7 @@
             tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
-        if w > (self.sysdtw/100):
+        if w > int(self.sysdtw / 100):
             return "Invalid Period"
         self.curdt = w
         self.date = CCD(mthendDate(w*100), "D1", 10)
@@ -204,8 +203,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)

=== modified file 'str/st3090.py'
--- str/st3090.py	2017-02-25 14:03:05 +0000
+++ str/st3090.py	2017-06-29 08:15:56 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Account Statements.
@@ -36,6 +34,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -63,9 +62,9 @@
         r1s = (("Yes","Y"),("No","N"))
         fld = [
             (("T",0,0,0),"ID2",7,"Start Period","",
-                (self.sysdtw/100),"Y",self.doSdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doSdate,None,None,("efld",)),
             (("T",0,1,0),"ID2",7,"End Period","",
-                (self.sysdtw/100),"Y",self.doEdate,None,None,("efld",)),
+                int(self.sysdtw / 100),"Y",self.doEdate,None,None,("efld",)),
             [("T",0,2,0),"IUA",1,"Location","",
                 "","Y",self.doLoc,loc,None,("efld",)],
             (("T",0,3,0),"IUA",3,"Product Group","",
@@ -191,9 +190,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self, grp, cod, desc):
         self.fpdf.add_page()

=== modified file 'str/st3100.py'
--- str/st3100.py	2017-02-25 14:03:05 +0000
+++ str/st3100.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Notes Listing.
@@ -30,6 +28,7 @@
         strctl = gc.getCtl("strctl", self.opts["conum"])
         if not strctl:
             return
+        self.fromad = strctl["cts_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "STR")
         if not self.notes.data:
@@ -74,6 +73,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'str/st3110.py'
--- str/st3110.py	2017-02-25 14:03:05 +0000
+++ str/st3110.py	2017-06-29 08:16:21 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Ledger Print Labels. L7159
@@ -72,7 +70,7 @@
         lab = {
             "stype": "C",
             "head": ("Codes",),
-            "data": labels.keys()}
+            "data": list(labels.keys())}
         r1s = (("Normal", "N"), ("Recipes", "R"), ("All", "A"))
         r2s = (("Yes", "A"), ("No", "N"), ("All", "B"))
         r3s = (("No", "N"), ("Yes", "Y"))
@@ -207,7 +205,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
+                    pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):
@@ -215,7 +213,7 @@
         # Calculate cost price code ########################################
         if self.ccode:
             bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-                self.date / 100, (group, code, loc)).doStrBals()
+                int(self.date / 100), (group, code, loc)).doStrBals()
             if self.outs == "N" and not bals[5][0]:
                 return
             if valind == "N":

=== modified file 'str/st3120.py'
--- str/st3120.py	2017-02-25 14:03:05 +0000
+++ str/st3120.py	2017-06-29 08:16:37 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Stock to Order Report.
@@ -35,6 +33,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -194,8 +193,8 @@
                 self.pageHeading()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):
@@ -217,7 +216,7 @@
             return
         req = CCD(st2[1], "SD", 12.2)
         bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-            self.repdtw / 100, keys=(grp.work, code.work, self.loc))
+            int(self.repdtw / 100), keys=(grp.work, code.work, self.loc))
         cbal, obal, bbal = bals.doStrOrds()
         tbal = float(ASD(cbal.work) + ASD(obal.work) - ASD(bbal.work))
         if req.work < tbal:

=== modified file 'str/st4010.py'
--- str/st4010.py	2017-02-25 14:03:05 +0000
+++ str/st4010.py	2017-06-29 08:17:49 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Interrogation.
@@ -146,8 +144,8 @@
         txt = (self.doExit,None,None,None,None,self.doExit)
         self.df = TartanDialog(self.opts["mf"], title=self.tit, tags=tag,
             eflds=fld, butt=but, tend=tnd, txit=txt)
-        yer = self.sysdtw / 10000
-        mon = (self.sysdtw % 10000) / 100
+        yer = int(self.sysdtw / 10000)
+        mon = int((self.sysdtw % 10000) / 100)
         self.hist_tit = []
         for x in xrange(1, 14):
             if x == 13:
@@ -284,8 +282,8 @@
 
     def loadBalances(self):
         bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-            (self.sysdtw/100), keys=(self.group, self.code, self.loc, ("P",
-            self.opts["period"][0])))
+            int(self.sysdtw / 100), keys=(self.group, self.code,
+            self.loc, ("P", self.opts["period"][0])))
         m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc, = bals.doStrBals()
         cb, oo, bo = bals.doStrOrds()
         this, hist = bals.doStrHist()
@@ -378,8 +376,8 @@
         items = self.sql.getRec(tables=tab, cols=col, where=whr, order=odr)
         for seq, item in enumerate(items):
             bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-                (self.sysdtw / 100), keys=(item[0], item[1], self.loc, ("P",
-                self.opts["period"][0])))
+                int(self.sysdtw / 100), keys=(item[0], item[1], self.loc,
+                ("P", self.opts["period"][0])))
             m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc, = bals.doStrBals()
             items[seq].extend([y_cb[0], lc])
         return ((

=== modified file 'str/st5010.py'
--- str/st5010.py	2017-02-25 14:03:05 +0000
+++ str/st5010.py	2017-06-29 08:18:09 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Stock Take Report.
@@ -35,6 +33,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -192,8 +191,8 @@
             desc = CCD(dat[4], "UA", 30)
             uoi = CCD(dat[5], "NA", 10)
             bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-                (self.sysdtw/100), keys=(grp.work, code.work, loc.work, ("P",
-                self.opts["period"][0])))
+                int(self.sysdtw / 100), keys=(grp.work, code.work, loc.work,
+                ("P", self.opts["period"][0])))
             m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc = bals.doStrBals()
             if self.zero == "Y" and not y_cb[0]:
                 continue
@@ -214,9 +213,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st5020.py'
--- str/st5020.py	2017-02-25 14:03:05 +0000
+++ str/st5020.py	2017-06-29 08:18:22 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Stock Take Returns.
@@ -357,7 +355,7 @@
 
     def doGetCost(self, grp, code):
         bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-            (self.sysdtw / 100), keys=(grp, code, self.loc))
+            int(self.sysdtw / 100), keys=(grp, code, self.loc))
         vals = bals.doStrBals()
         return (vals[7], vals[5][0])
 

=== modified file 'str/st5030.py'
--- str/st5030.py	2017-02-25 14:03:05 +0000
+++ str/st5030.py	2017-06-29 08:19:19 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Stock Take Variance Report.
@@ -35,6 +33,7 @@
         if not strctl:
             return
         self.locs = strctl["cts_locs"]
+        self.fromad = strctl["cts_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -103,7 +102,7 @@
             qty1 = dat[self.sql.strvar_col.index("stv_qty")]
             prc = dat[self.sql.strvar_col.index("stv_ucost")]
             bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-                (self.date / 100), keys=(grp, code, self.loc,
+                int(self.date / 100), keys=(grp, code, self.loc,
                 ("P", self.opts["period"][0])))
             m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc = bals.doStrBals()
             fq = y_cb[0]
@@ -138,7 +137,7 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data,
                 heads=head, cols=cols, ttype="D", repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                repeml=self.df.repeml, fromad=self.fromad)
 
     def extractBals(self, grp, code, loc):
         qbal = 0

=== modified file 'str/st5040.py'
--- str/st5040.py	2017-02-25 14:03:05 +0000
+++ str/st5040.py	2017-06-29 08:19:33 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Stock Take Merge.
@@ -64,7 +62,7 @@
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
         self.date = w
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
 
     def endPage(self):
         self.df.closeProcess()

=== modified file 'str/st6010.py'
--- str/st6010.py	2017-02-25 14:03:05 +0000
+++ str/st6010.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores's Ledger Key Change.

=== modified file 'str/st6020.py'
--- str/st6020.py	2017-02-25 14:03:05 +0000
+++ str/st6020.py	2017-06-29 08:19:54 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stores Revalue at Last Cost and Eradicate All Minus Balances.
@@ -68,7 +66,7 @@
 
     def doDate(self, frt, pag, r, c, p, i, w):
         self.date = w
-        self.curdt = w / 100
+        self.curdt = int(w / 100)
 
     def doMethod(self, frt, pag, r, c, p, i, w):
         self.method = w
@@ -103,7 +101,7 @@
 
     def updateTables(self, rec):
         bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-            (self.sysdtw / 100), keys=(rec[0], rec[1], rec[2], ("P",
+            int(self.sysdtw / 100), keys=(rec[0], rec[1], rec[2], ("P",
             self.opts["period"][0])))
         m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc = bals.doStrBals()
         if self.minus == "N" and not ac and not lc:

=== modified file 'str/st6030.py'
--- str/st6030.py	2017-02-25 14:03:05 +0000
+++ str/st6030.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Purchase Order Deletions.

=== modified file 'str/stc110.py'
--- str/stc110.py	2017-02-25 14:03:05 +0000
+++ str/stc110.py	2017-07-24 08:34:39 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -42,7 +40,8 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "N", "N", 1, "N", "purchase_order"]
+            self.acc = [self.opts["conum"], "N", "N", 1, "N",
+                "purchase_order", ""]
         else:
             self.new = False
         if self.genleg:
@@ -101,7 +100,9 @@
             (("T",0,seq + 2,0),("IRB",r1s),0,"Automatic Markup","",
                 self.acc[4],"N",None,None,None,None),
             (("T",0,seq + 3,0),"INA",20,"Orders Template","",
-                self.acc[5],"N",self.doTplNam,tpm,None,None)])
+                self.acc[5],"N",self.doTplNam,tpm,None,None),
+            (("T",0,seq + 4,0),"ITX",50,"Email Address","",
+                self.acc[6],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -126,7 +127,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 5):
+            for x in xrange(1, 5):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk4"
 
@@ -161,7 +162,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 5:
                 if x in (1, 3):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'str/stc210.py'
--- str/stc210.py	2017-02-25 14:03:05 +0000
+++ str/stc210.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Units Of Issue File Maintenance.

=== modified file 'str/stc220.py'
--- str/stc220.py	2017-02-25 14:03:05 +0000
+++ str/stc220.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Units Of Issue Listing.

=== modified file 'str/stc310.py'
--- str/stc310.py	2017-02-25 14:03:05 +0000
+++ str/stc310.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Product Groups File Maintenance.

=== modified file 'str/stc320.py'
--- str/stc320.py	2017-02-25 14:03:05 +0000
+++ str/stc320.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Product Groups Listing.

=== modified file 'str/stc410.py'
--- str/stc410.py	2017-02-25 14:03:05 +0000
+++ str/stc410.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Location File Maintenance.

=== modified file 'str/stc420.py'
--- str/stc420.py	2017-02-25 14:03:05 +0000
+++ str/stc420.py	2017-06-27 09:48:18 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Stores Locations Listing.

=== modified file 'tab/tb1010.py'
--- tab/tb1010.py	2017-02-25 14:03:05 +0000
+++ tab/tb1010.py	2017-06-29 08:21:12 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Tartan Systems Table Creation GUI.
@@ -185,7 +183,7 @@
             self.df.loadEntry("C", 1, p + n + 1, data=c)
 
     def endPage1(self):
-        pos = (self.df.col / self.df.colq[1]) - 1
+        pos = int(self.df.col / self.df.colq[1]) - 1
         self.fld[self.colseq] = copyList(self.df.c_work[1][pos])
         self.doPopulate("fld")
 
@@ -216,7 +214,7 @@
             return "Invalid Column"
 
     def endPage2(self):
-        pos = (self.df.col / self.df.colq[2]) - 1
+        pos = int(self.df.col / self.df.colq[2]) - 1
         self.idx[self.idxseq] = copyList(self.df.c_work[2][pos])
         self.doPopulate("idx")
 

=== modified file 'tab/tb1020.py'
--- tab/tb1020.py	2017-03-25 15:17:51 +0000
+++ tab/tb1020.py	2017-08-09 05:51:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Tables Alteration comparing New csv file with existing data in database.
@@ -83,7 +81,7 @@
                     raise Exception
                 self.dbm.openDbase()
             except:
-                print "DB or RC File Error", "DB Error or RC File Not Found"
+                print("DB or RC File Error", "DB Error or RC File Not Found")
                 return
         else:
             self.rcdic = self.opts["mf"].rcdic
@@ -108,7 +106,7 @@
             if self.opts["mf"] and self.opts["mf"].window:
                 showError(self.opts["mf"].body, "Version Error", txt)
             else:
-                print txt
+                print(txt)
             return
         if not self.opts["pth"]:
             self.opts["pth"] = os.path.join(self.rcdic["prgdir"], "csv")
@@ -195,7 +193,7 @@
                 self.p1 = ProgressBar(self.opts["mf"].body, typ=txt,
                     mxs=len(self.tab))
         elif self.opts["bar"]:
-            print txt
+            print(txt)
         if "bwltyp" in self.tab:
             sql = Sql(self.dbm, "bwltyp", prog=__name__)
             self.bwltyp = sql.getRec(tables="bwltyp")
@@ -243,10 +241,9 @@
                         self.sql.sqlRec("Drop index %s" % nam)
                         if self.dbm.dbname == "FBird":
                             self.dbm.commitDbase()
-                self.dbm.vacuumDbase(self.table)
                 DBCreate(dbm=self.dbm, opts=[("-u", self.opts["usr"]),
                     ("-c", "p"), ("-d", self.opts["pth"]), ("-t", self.table),
-                    ("-w", False), ("-x", False)])
+                    ("-w", True), ("-x", False)])
         if self.opts["bar"] and self.opts["mf"] and self.opts["mf"].window:
             self.p1.closeProgress()
 
@@ -273,7 +270,7 @@
                 self.opts["mf"].updateStatus("Table %s Not Found in %s" % \
                         (self.table, tab))
             else:
-                print "Table %s Not Found in %s" % (self.table, tab)
+                print("Table %s Not Found in %s" % (self.table, tab))
             return tipe
         setattr(self, "old%s" % tipe, old)
         csf = os.path.join(self.opts["pth"], "%s_%s.csv" % (self.table, tipe))
@@ -282,7 +279,7 @@
                 self.opts["mf"].updateStatus(
                     "Csv file for %s Table Not Found" % csf)
             else:
-                print "Csv file for %s Table Not Found" % csf
+                print("Csv file for %s Table Not Found" % csf)
             return "csv"
         new = []
         of = open(csf, "r")
@@ -318,7 +315,7 @@
             for rec in ynd:
                 if rec[0] and rec[1]:
                     sql.delRec("ctlvtf", where=[("vtt_cono", "=", rec[0]),
-                        ("vtt_curdt", "<", rec[1] / 100)])
+                        ("vtt_curdt", "<", int(rec[1] / 100))])
         else:
             sql = Sql(self.dbm, self.table, prog=__name__)
         # Read Existing Table
@@ -379,7 +376,6 @@
                 self.spwd = ""
         # Create New Table
         opts = copyList(self.topts)
-        #opts.extend([("-t", self.table), ("-i", False)])
         opts.append(("-t", self.table))
         DBCreate(dbm=self.dbm, opts=opts)
         ndata = []
@@ -443,7 +439,7 @@
                         if old[olddic["bum_multi"][0]] == "Y":
                             new = 1
                         elif old[olddic["bum_type"][0]] == "A":
-                            new = old[olddic["bum_guests"][0]] / 2
+                            new = int(old[olddic["bum_guests"][0]] / 2)
                         else:
                             new = 0
                     elif self.table == "bkmunm" and csf[2] == "bum_dflt":
@@ -539,8 +535,6 @@
                         new = "Unknown"
                     elif self.table == "scpgme" and csf[2] == "scg_ctyp":
                         new = "M"
-                    elif self.table == "slsctl" and csf[2] == "ctv_tills":
-                        new = "N"
                     elif self.table == "slsiv1" and csf[2] == "si1_capnm":
                         new = "Unknown"
                     elif self.table == "slsiv2" and csf[2] == "si2_capnm":
@@ -590,14 +584,14 @@
                     p2.mxs = len(ndata)
                     p2.txtlab.configure(text=txt)
                 elif pbar == "t":
-                    print txt
+                    print(txt)
                 sql.insRec(self.table, data=ndata, dofmt=False, pbar=p2)
             if pbar == "w":
                 p2.closeProgress()
             # Report Writer
             cols = []
             for csf in self.oldfld:
-                if not csf[2] in newdic:
+                if csf[2] not in newdic:
                     cols.append(csf[2])
             if cols:
                 tabs = (
@@ -628,7 +622,7 @@
         if self.opts["mf"] and self.opts["mf"].window:
             spl = SplashScreen(self.opts["mf"].body, txt)
         else:
-            print txt
+            print(txt)
         for emp in emps:
             cono = emp[sql.wagtf1_col.index("wt1_cono")]
             empn = emp[sql.wagtf1_col.index("wt1_empno")]
@@ -709,7 +703,7 @@
         if self.opts["mf"] and self.opts["mf"].window:
             self.opts["mf"].updateStatus(txt)
         elif self.opts["bar"]:
-            print txt
+            print(txt)
         self.doGetTables()
         try:
             csf = __import__(self.opts["sss"]).tables
@@ -722,7 +716,7 @@
                 showError(self.opts["mf"].body, "System File Error",
                     "System Module %s Not Found" % self.opts["sss"])
             else:
-                print "System Module %s Not Found" % self.opts["sss"]
+                print("System Module %s Not Found" % self.opts["sss"])
             return
         # Removing unused tables
         tot = len(self.tab) + len(csf)
@@ -766,7 +760,7 @@
                 "Creating Standard Records\n\nPlease Wait")
             self.opts["mf"].updateStatus("Creating Standard Records")
         elif self.opts["bar"]:
-            print "Creating Standard Records .... Please Wait"
+            print("Creating Standard Records .... Please Wait")
         sql = Sql(self.dbm, "frelat", prog=__name__)
         if not sql.error:
             sql.sqlRec("Delete from frelat")
@@ -909,7 +903,7 @@
         "upd": False, "usr": "", "ver": None}
     for o, v in opts:
         if o == "-h":
-            print """
+            print("""
 This is used to change tables in a database.
 
 Usage: python tb1020.py [options]
@@ -926,7 +920,7 @@
     -t [table]      = Table to update
     -u [user]       = Database Admin User Name
     -v [x.x.x]      = The New version number
-"""
+""")
             sys.exit()
         elif o == "-b":
             parg["bar"] = True
@@ -946,8 +940,8 @@
             parg["tab"] = v.split(",")
         elif o == "-v":
             parg["ver"] = v
-    if not "ver" in parg:
-        print "Invalid -v version_number"
+    if "ver" not in parg:
+        print("Invalid -v version_number")
     else:
         tb1020(**parg)
 

=== modified file 'tab/tb1030.py'
--- tab/tb1030.py	2017-02-25 14:03:05 +0000
+++ tab/tb1030.py	2017-06-29 08:22:59 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Tables Data Maintenance i.e. Facility to change information in the
@@ -76,7 +74,7 @@
     def mainProcess(self):
         self.dics = getattr(self.sql, "%s_dic" % self.table)
         self.lcol = getattr(self.sql, "%s_col" % self.table)
-        self.pgs = ((len(self.lcol) - 1) / 15) + 1
+        self.pgs = int((len(self.lcol) - 1) / 15) + 1
         tit = self.desc
         fld = []
         cnt = 0
@@ -86,7 +84,7 @@
                 pag = 0
             else:
                 pag = int(num / 15) + 1
-            if not pag == lpg:
+            if pag != lpg:
                 lpg = pag
                 cnt = 0
             if self.dics[col][2][0] == "D":

=== modified file 'tab/tb1040.py'
--- tab/tb1040.py	2017-02-25 14:03:05 +0000
+++ tab/tb1040.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Utility to copy Tables from one database to another using different
@@ -140,7 +138,7 @@
             if tab[0] not in ("ftable", "ffield"):
                 self.opts["mf"].updateStatus("Adding Table %s" % tab[0])
                 if not os.path.isfile("%s_fld.csv" % fle):
-                    print "NO", fle
+                    print("NO", fle)
                     continue
                 opts = [("-d", pth), ("-t", tab[0]), ("-x", False)]
                 DBCreate(dbm=self.opts["mf"].dbm, opts=opts)

=== modified file 'tab/tb3010.py'
--- tab/tb3010.py	2017-02-25 14:03:05 +0000
+++ tab/tb3010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     This utility creates _fld.csv and _idx.csv files in the wrk directory
@@ -42,7 +40,7 @@
     def mainProcess(self):
         tit = ("Table Details Listing",)
         dats = [["ALL", "All Systems"]]
-        syss = finsys.keys()
+        syss = list(finsys.keys())
         syss.sort()
         for s in syss:
             dats.append((s, finsys[s][0]))
@@ -137,7 +135,7 @@
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-                head="Table Fields and Indexes", repprt=self.df.repprt,
+                header="Table Fields and Indexes", repprt=self.df.repprt,
                 repeml=self.df.repeml)
 
     def doHeading(self, htyp, table):

=== modified file 'uty/bm1010.py'
--- uty/bm1010.py	2017-02-25 14:03:05 +0000
+++ uty/bm1010.py	2017-06-29 08:32:50 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Bulk Mailing Utility.
@@ -13,8 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-import csv, glob, imghdr, os, sys, time, urllib
-from xml.dom.minidom import parseString
+import csv, glob, imghdr, os, requests, sys, time
 
 try:
     from markdown import markdown as MARKDOWN
@@ -43,7 +40,7 @@
             self.mainProcess()
             self.opts["mf"].startLoop()
         else:
-            print "ERR"
+            print("ERR")
 
     def setVariables(self):
         gc = GetCtl(self.opts["mf"])
@@ -57,7 +54,7 @@
         self.sms = []
         for fld in ("ssvr", "snam", "spwd"):
             self.sms.append(ctlsys["sys_%s" % fld])
-        if not self.smtp[0] and not self.sms[0] == "Y":
+        if not self.smtp[0] and self.sms[0] != "Y":
             showError(self.opts["mf"].body, "SMTP/SMS Error",
                 "There is NO SMTP Server nor SMS Service Available.")
             return
@@ -656,7 +653,7 @@
                     img = PIL.open(i)
                     siz = img.size
                     if siz[0] > 1024:
-                        new = img.resize((1024, siz[1]*1024/siz[0]), 1)
+                        new = img.resize((1024, int((siz[1]*1024)/siz[0])), 1)
                         i = os.path.join(self.opts["mf"].rcdic["wrkdir"],
                             os.path.basename(i))
                         new.save(i)
@@ -691,7 +688,7 @@
         if not w and not self.embed and not self.attach:
             return "Invalid Message"
         if "{{" in w:
-            if not "{{name}}" in w and not "{{surname}}" in w:
+            if "{{name}}" not in w and "{{surname}}" not in w:
                 return "Invalid {{ substitution in Message"
         self.mess = w
         if MARKDOWN:
@@ -714,7 +711,7 @@
         if not self.embed and not self.attach and not self.mess:
             return
         if "{{" in self.mess:
-            if not "{{name}}" in self.mess and not "{{surname}}" in self.mess:
+            if "{{name}}" not in self.mess and "{{surname}}" not in self.mess:
                 showError(self.opts["mf"].body, "Error",
                     "Invalid {{ substitution in Message")
                 return
@@ -735,18 +732,14 @@
     def doSendSMS(self):
         self.url = "http://www.mymobileapi.com/api5/http5.aspx?"
         self.par = {"username": self.sms[1], "password": self.sms[2]}
-        xml = self.doExecuteSMS("credits")
-        if not xml:
-            showError(self.opts["mf"].body, "Error", "No Credits")
-            return
-        dom = parseString(xml)
-        try:
-            tag = dom.getElementsByTagName("credits")[0].toxml()
-            units = int(tag.replace("<credits>","").replace("</credits>",""))
-        except:
+        units = self.doExecuteSMS("credits")
+        if units is None:
             showError(self.opts["mf"].body, "Error",
                 "Please Check Username and/or Password")
             return
+        elif not units:
+            showError(self.opts["mf"].body, "Error", "No Credits")
+            return
         if self.ulist == "B":
             if self.tab[0]:
                 tab = ["bwltab"]
@@ -838,8 +831,9 @@
         elif self.ulist in ("V", "X"):
             accs = self.impdat
         if units < len(accs):
-            showError(self.opts["mf"].body, "Out of Units",
-                "There Are Insufficient Units, %s, in the Account" % units)
+            showError(self.opts["mf"].body, "Out of Units", "There Are "\
+                "Insufficient Units, %s, in the Account for %s SMS's." %
+                (units, len(accs)))
             return
         for acc in accs:
             cell = acc[0].strip().replace(" ", "")
@@ -863,7 +857,7 @@
                 mess = self.mess
             for num in cell:
                 if len(num) == 10 or num.startswith("+"):
-                    xml = self.doExecuteSMS("sendparam", num, mess)
+                    self.doExecuteSMS("sendparam", num, mess)
 
     def doNames(self, name):
         n = name.split()
@@ -878,19 +872,17 @@
     def doExecuteSMS(self, stype, num=None, dat=None):
         par = self.par.copy()
         par["type"] = stype
-        if not dat:
-            params = urllib.urlencode(par)
-        else:
+        if dat:
             par["numto"] = num
             par["data1"] = dat
-            params = urllib.urlencode(par)
         try:
-            f = urllib.urlopen(self.url, params)
-            s = f.read()
-            f.close()
+            f = requests.post(self.url, data=par)
+            if stype == "credits":
+                s = f.text
+                s = s.split("<%s>" % stype)[1].split("</%s>" % stype)[0]
+                return int(s)
         except:
-            s = None
-        return s
+            return
 
     def doSendEmail(self):
         if self.ulist == "B":

=== modified file 'uty/fc1010.py'
--- uty/fc1010.py	2017-02-25 14:03:05 +0000
+++ uty/fc1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Financial Loan Calculator.

=== removed file 'uty/my2to3.py'
--- uty/my2to3.py	2017-02-25 14:03:05 +0000
+++ uty/my2to3.py	1970-01-01 00:00:00 +0000
@@ -1,108 +0,0 @@
-#!/usr/bin/python
-import sys
-
-for flenam in sys.argv[1:]:
-    ifle = open(flenam, "r")
-    lines = ifle.readlines()
-    ifle.close()
-    ofle = open(flenam, "w")
-    tb = False
-    bl = False
-    asd = False
-    rnd = False
-    for line in lines:
-        if flenam[:3] == "csv":
-            ofle.write(line.replace('"UL"', '"UI"'))
-            continue
-        elif line.count("from __future__ import generators"):
-            bl = True
-            continue
-        elif bl:
-            bl = False
-            continue
-        elif line.count('"""') == 2:
-            ofle.write(line)
-        elif line.count('"""') == 1:
-            if tb:
-                tb = False
-            else:
-                tb = True
-            ofle.write(line)
-        elif not line.strip() or line.strip()[0] == "#":
-            ofle.write(line)
-        elif not tb and flenam == "ms0000.py" and line.count("import getopt"):
-            ofle.write(line)
-            ofle.write("""
-# Ensure that python 3 is being used
-if not sys.version[0] >= "3":
-    print "Invalid Python Version, Must be >= 3"
-    sys.exit()
-""")
-        elif not tb and line.strip()[:6] == "class ":
-            ofle.write(line)
-            if line.count("ASD"):
-                asd = True
-            else:
-                asd = False
-        elif not tb and line.count("data[0].replace"):
-            ofle.write(line.replace("data[0].replace", 'data[0].decode("utf=8").replace'))
-        elif not tb and line.count("zipfle.write"):
-            ofle.write(line.replace("(data)", '(data).encode("utf-8")'))
-        elif not tb and line.count("base64."):
-            ofle.write(line.replace("string(txt)", 'bytes(txt.encode("utf-8")).decode("utf-8")'))
-        elif not rnd and line.count("round(") and not line.count('"round('):
-                ofle.write(line)
-                br = 0
-                for c in line:
-                    if c in ("(", "["):
-                        br += 1
-                    elif c in (")", "]"):
-                        br -= 1
-                if br:
-                    rnd = True
-        elif rnd:
-            ofle.write(line)
-            rnd = False
-        elif not tb and not asd and line.count("/") and not line.count(".0") and not line.count("int(") and not line.count('"SD"'):
-            nl = ""
-            sp = False
-            db = False
-            pr = False
-            for c in line:
-                if c == '"':
-                    if db:
-                        db = False
-                    else:
-                        db = True
-                    nl += c
-                    sp = False
-                    continue
-                if db:
-                    nl += c
-                    sp = False
-                    continue
-                if c == " ":
-                    sp = True
-                    nl += c
-                    continue
-                if c == "/":
-                    pr = True
-                    if sp:
-                        nl = nl + c + c
-                    else:
-                        nl = nl + " " + c + c + " "
-                    sp = False
-                else:
-                    nl += c
-                    sp = False
-            if pr:
-                ofle.write(nl)
-            else:
-                ofle.write(line)
-        elif not tb and line.count("long("):
-            ofle.write(line.replace("long(", "int("))
-        elif not tb and line.count("xrange("):
-            ofle.write(line.replace("xrange(", "range("))
-        else:
-            ofle.write(line)
-    ofle.close()

=== modified file 'uty/pkgprg.py'
--- uty/pkgprg.py	2017-03-25 15:17:51 +0000
+++ uty/pkgprg.py	2017-07-24 08:34:39 +0000
@@ -1,8 +1,6 @@
 #!/usr/bin/python
 
-import compileall, getopt, glob, os, shutil, subprocess, sys, time
-from tartanFunctions import findFile, sendMail
-from ms0000 import VERSION
+import compileall, getopt, os, shutil, sys, time
 
 def exeCmd(cmd):
     ret = 1
@@ -11,11 +9,20 @@
         cnt += 1
         ret = os.system(cmd)
     if ret and ret < 256:
-        print "%s Command Failed" % cmd, ret
+        print("%s Command Failed" % cmd, ret)
         sys.exit()
 
 print("Packaging...")
 bd = "/home/paul"
+bv = "Tartan-5"
+vv = 5
+sys.path.extend([
+    os.path.join(bd, bv, "csv"),
+    os.path.join(bd, bv, "men"),
+    os.path.join(bd, bv, "mst"),
+    os.path.join(bd, bv, "std")])
+from tartanFunctions import findFile, sendMail
+from ms0000 import VERSION
 newver = None
 revision = None
 system = "t"
@@ -27,9 +34,9 @@
 opts, args = getopt.getopt(sys.argv[1:], "b:eir:s:v:hwp3")
 for o, v in opts:
     if o == "-h":
-        print "Usage: pkgprg [-h help] [-b base directory] [-i increment] "\
+        print("Usage: pkgprg [-h help] [-b base directory] [-i increment] "\
             "[-s system] [-v new version] [-w windows] [-p publish] "\
-            "[-e email] [-3 python3] [-r last revision]"
+            "[-e email] [-3 python3] [-r last revision]")
         sys.exit()
     elif o == "-3":
         py3 = True
@@ -52,16 +59,16 @@
         windows = True
 
 if not os.path.exists(bd):
-    print "Invalid Base Directory (%s)" % bd
+    print("Invalid Base Directory (%s)" % bd)
     sys.exit()
 
 if verinc and not system == "t":
-    print "Cannot Increment %s" % system
+    print("Cannot Increment %s" % system)
     sys.exit()
 
-pypath = findFile(start=[bd], name="Tartan-5", ftyp="d")
+pypath = findFile(start=[bd], name=bv, ftyp="d")
 if not pypath:
-    print "%s/Tartan-5 directory not found" % bd
+    print("%s/%s directory not found" % (bd, bv))
     sys.exit()
 
 for d in ("TartanExe", "TartanOld", "TartanSve"):
@@ -76,52 +83,53 @@
 os.chdir(pypath)
 
 while system not in ("b", "c", "r", "s", "t", "k"):
-    system = raw_input("System, (T)artan, (R)NE, (S)ections, Boo(k)s, (B)owls, (C)ash: ").lower()
+    system = raw_input("System, (T)artan, (R)NE, (S)ections, "\
+        "Boo(k)s, (B)owls, (C)ash: ").lower()
 
 dirs = ["tab", "mst"]
 if system == "b":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Bwlclb_5.* %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Bwlclb_%s.* %s/TartanOld/" % (bd, vv, bd))
     system = "bwlclb"
     sysmod = "bwlsys"
     modfle = "tarmod"
     chgfle = "tarchg"
-    dirs.extend(["bwl", "scp", "uty"])
+    dirs.extend(["bwl", "uty"])
     custom = ["oth", ["ms1010"]]
-    exclude = ["sc2010", "sc2030", "sc1010", "sc2020", "sc3010", "scc210",
-               "tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
-               "ms3010", "ms3020", "msy010", "msy020", "msy030", "pm1010",
-               "fc1010", "pw1010", "ss1010"]
+    exclude = ["tb1010", "tb1040", "tb3010", "ms1020", "ms1030", "ms1040",
+               "ms3010", "ms3020", "ms3030", "msy010", "msy020", "msy030",
+               "fc1010", "pm1010", "pw1010", "ss1010", "td1010", "tdc110",
+               "tp1010"]
 elif system == "c":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Cshana_5.* %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Cshana_%s.* %s/TartanOld/" % (bd, vv, bd))
     system = "cshana"
     sysmod = "cshsys"
     modfle = "tarmod"
     chgfle = "tarchg"
     dirs.extend(["csh", "gen"])
     custom = [""]
-    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "msy030"]
+    exclude = ["tb1010", "tb1040", "tb3010", "msy030"]
 elif system == "k":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Bksclb_5.* %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Bksclb_%s.* %s/TartanOld/" % (bd, vv, bd))
     system = "bksclb"
     sysmod = "bkssys"
     modfle = "tarmod"
     chgfle = "tarchg"
     dirs.extend(["bks"])
     custom = ["oth", ["ms1010"]]
-    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
-               "ms3010", "ms3020", "msy010", "msy020", "msy030"]
+    exclude = ["tb1010", "tb1040", "tb3010", "ms1020", "ms1030", "ms3010",
+               "ms3020", "msy010", "msy020", "msy030"]
 elif system == "r":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Rnehol_5.* %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Rnehol_%s.* %s/TartanOld/" % (bd, vv, bd))
     system = "rnehol"
     sysmod = "rnesys"
     modfle = "tarmod"
     chgfle = "tarchg"
     dirs.extend(["ass", "crs", "drs", "gen", "ibt", "lon", "rtl", "sls",
-                "str", "uty"])
+                 "str", "uty"])
     custom = ["rne", ["ar6020", "ar6030", "cr1010", "cr2010", "cr2020",
               "cr2030", "cr3030", "cr3070", "cr3310", "cr3320", "cr3330",
               "cr3340", "cr3350", "cr3360", "cr3370", "cr3380", "cr4010",
@@ -135,23 +143,23 @@
                "st3070", "st3080", "st3090", "st3100", "st3110", "st3120",
                "st4010", "st5010", "st5020", "st5030", "st5040", "st6010",
                "st6020", "stc220", "stc320", "stc410", "stc420", "tb1010",
-               "tb1030", "tb1040", "tb3010", "pw1010"]
+               "tb1040", "tb3010", "pw1010"]
 elif system == "s":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Seccmp_5.* %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Seccmp_%s.* %s/TartanOld/" % (bd, vv, bd))
     system = "seccmp"
     sysmod = "scpsys"
     modfle = "tarmod"
     chgfle = "tarchg"
     dirs.extend(["scp"])
     custom = ["oth", ["ms1010"]]
-    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
+    exclude = ["tb1010", "tb1040", "tb3010", "ms1020", "ms1030", "ms1040",
                "ms3010", "ms3020", "ms3030", "msy010", "msy020", "msy030"]
 elif system == "t":
     if publish or verinc:
-        exeCmd("mv %s/TartanExe/Tartan_5.?.?.tgz %s/TartanOld/" % (bd, bd))
+        exeCmd("mv %s/TartanExe/Tartan_%s.?.?.tgz %s/TartanOld/" % (bd, vv, bd))
         if windows:
-            exeCmd("mv %s/TartanExe/Tartan_5.?.?.exe %s/TartanOld/" % (bd, bd))
+            exeCmd("mv %s/TartanExe/Tartan_%s.?.?.exe %s/TartanOld/" % (bd, vv, bd))
     system = "tartan"
     sysmod = "stdsys"
     modfle = "tarmod"
@@ -175,7 +183,7 @@
             newver = "%s.%s.%s" % (ver[0], ver[1], ver[2])
     else:
         ver = list(newver.split("."))
-        for x in range(3):
+        for x in xrange(3):
             ver[x] = int(ver[x])
     if newver:
         if not os.path.isfile("%s/changes.txt" % pypath):
@@ -252,9 +260,9 @@
             # Create changes module
             chg = open("%s/std/%s.py" % (pypath, chgfle), "w")
             chg.write('changes = """')
-            for x in range(6):
-                for y in range(99, -1, -1):
-                    for z in range(999, -1, -1):
+            for x in xrange(6):
+                for y in xrange(99, -1, -1):
+                    for z in xrange(999, -1, -1):
                         nam = "ver_%s.%s.%s" % (x, y, z)
                         fle = os.path.join(pypath, "ver", "%s.changes" % nam)
                         if os.path.isfile(fle):
@@ -279,11 +287,11 @@
             exeCmd("/usr/bin/bzr commit -m 'ver_%s.%s.%s'" % tuple(ver))
             exeCmd("/usr/bin/bzr log > ver/ver_%s.%s.%s.log" % tuple(ver))
         except:
-            print "Error Creating New Version"
+            print("Error Creating New Version")
             sys.exit()
 
 print("")
-zipfle = "%s-%s" % (system, 5)
+zipfle = "%s-%s" % (system, vv)
 print("Creating %s.zip in your TartanSve directory ..... Please Wait" % zipfle)
 
 if os.path.exists("%s/TartanSve/%s.zip" % (bd, zipfle)):
@@ -291,23 +299,6 @@
 
 prg = ["%s/%s/%s" % (pypath, "std", "sitecustomize.py")]
 std = []
-rpt = []
-
-#os.chdir(os.path.join(pypath, "std"))
-#cmd = "find fpdf ghostscript"
-#if system in ("tartan", "rnehol"):
-#    cmd += " pychart"
-#if system == "rnehol":
-#    cmd += " paramiko"
-#proc = subprocess.Popen(cmd + " -name '*.py'", shell=True, bufsize=0,
-#                        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
-#                        close_fds=True)
-#lst = proc.stdout.readlines()
-#for x in lst:
-#    t = x.split("/")
-#    if t[1] in ("demos", "docs", "test"):
-#        continue
-#    rpt.append(x.rstrip())
 
 for pth in dirs:
     lst = os.listdir(os.path.join(pypath, pth))
@@ -354,7 +345,7 @@
                         storeWord(words[num+1])
                         break
                     if wrd == "import":
-                        for x in range(num+1, len(words)):
+                        for x in xrange(num+1, len(words)):
                             if words[x] == "as":
                                 break
                             storeWord(words[x])
@@ -429,20 +420,12 @@
         exeCmd("zip -qj %s/TartanSve/%s %s" % (bd, zipfle, pp))
     p = os.path.basename(pp).replace("_%s" % custom[0], "")
     p = p.split(".")
-    if p[0] == "sys":
-        print pp
     if p[0] not in ("ms0000", ) and p[1] == "py":
         if not custom:
             inc.write("import %s\n" % p[0])
         else:
             inc.write("import %s\n" % p[0].replace("_%s" % custom[0], ""))
-#rpt.sort()
-#for p in rpt:
-#    exeCmd("zip -q %s/TartanSve/%s %s" % (bd, zipfle, p))
-#    if not p.count("__init__"):
-#        p = p.replace(".py", "")
-#        p = p.replace("/", ".")
-#        inc.write("import %s\n" % p)
+
 inc.close()
 exeCmd("zip -qj %s/TartanSve/%s %s/std/%s.py" %
          (bd, zipfle, pypath, modfle))
@@ -450,13 +433,17 @@
 tabs = __import__(sysmod).tables
 tabs.extend(["ftable", "ffield"])
 for tab in tabs:
-    exeCmd("zip -q %s/TartanSve/%s csv/%s*" % (bd, zipfle, tab))
+    exeCmd("zip -q %s/TartanSve/%s csv/%s_fld.csv" % (bd, zipfle, tab))
+    exeCmd("zip -q %s/TartanSve/%s csv/%s_idx.csv" % (bd, zipfle, tab))
+    if os.path.isfile("csv/%s.dat" % tab):
+        exeCmd("zip -q %s/TartanSve/%s csv/%s.dat" % (bd, zipfle, tab))
 if system == "rnehol":
     os.mkdir("tmp/csv")
+    shutil.copy("csv/crstrn_idx_rne.csv", "tmp/csv/crstrn_idx.csv")
     shutil.copy("csv/tplmst_rne.dat", "tmp/csv/tplmst.dat")
     shutil.copy("csv/tpldet_rne.dat", "tmp/csv/tpldet.dat")
     os.chdir("tmp")
-    exeCmd("zip %s/TartanSve/%s csv/*" % (bd, zipfle))
+    exeCmd("zip -q %s/TartanSve/%s csv/*" % (bd, zipfle))
     os.chdir(pypath)
 if os.path.exists("%s/tmp" % pypath):
     shutil.rmtree("%s/tmp" % pypath)
@@ -521,35 +508,36 @@
 exeCmd("zip -q %s/TartanSve/%s uty/SumatraPDF.exe" % (bd, zipfle))
 if py3:
     # Create python 3 zip file
-    if os.path.isdir("/home/paul/tartan"):
-        shutil.rmtree("/home/paul/tartan")
-    os.mkdir("/home/paul/tartan")
-    os.chdir("/home/paul/tartan")
+    if os.path.exists("%s/TartanSve/%s-%s-py3.zip" % (bd, system, vv)):
+        os.remove("%s/TartanSve/%s-%s-py3.zip" % (bd, system, vv))
+    if os.path.isdir("%s/tartan" % bd):
+        shutil.rmtree("%s/tartan" % bd)
+    os.mkdir("%s/tartan" % bd)
+    os.chdir("%s/tartan" % bd)
     exeCmd("unzip -q %s/TartanSve/%s" % (bd, zipfle))
     if os.path.exists("sitecustomize.py"):
         os.remove("sitecustomize.py")
+    if os.path.exists("fpdf"):
+        shutil.rmtree("fpdf")
+    if os.path.exists("ghostscript"):
+        shutil.rmtree("ghostscript")
     if os.path.exists("paramiko"):
         shutil.rmtree("paramiko")
     if os.path.exists("progressbar"):
         shutil.rmtree("progressbar")
-    if os.path.exists("ghostscript"):
-        shutil.rmtree("ghostscript")
     if os.path.exists("pychart"):
         shutil.rmtree("pychart")
-    exeCmd("python /home/paul/Tartan-5/uty/my2to3.py *.py")
-    exeCmd("python /home/paul/Tartan-5/uty/my2to3.py csv/*_fld.csv")
-    exeCmd("2to3 -w --no-diffs *.py")
-    for fle in glob.glob("*.bak"):
-        os.remove(fle)
-    exeCmd("unzip -q ~/TartanWin/Python3/PyChart-1.39 pychart/*")
-    exeCmd("zip -qr ~/TartanSve/%s-5-py3 *" % system)
+    exeCmd("python %s/%s/sdy/my2to3.py *.py" % (bd, bv))
+    exeCmd("2to3 -nw -x input -x print --no-diffs *.py")
+    exeCmd("unzip -q %s/Python3/PyChart-1.39 pychart/*" % bd)
+    exeCmd("zip -qr %s/TartanSve/%s-%s-py3 *" % (bd, system, vv))
     os.chdir(pypath)
 # Create tgz file
 if os.path.isdir("%s/prg" % bd):
     shutil.rmtree("%s/prg" % bd)
 os.mkdir("%s/prg" % bd)
 os.chdir("%s/prg" % bd)
-exeCmd("unzip -q %s/TartanSve/%s-5" % (bd, system))
+exeCmd("unzip -q %s/TartanSve/%s-%s" % (bd, system, vv))
 try:
     if os.path.isfile("fcrypt.py"):
         os.remove("fcrypt.py")
@@ -559,7 +547,7 @@
         os.remove("tarmod.py")
 except:
     pass
-for fle in ("fdb", "fpdf", "ghostscript", "nmb", "odf", "progressbar", "pyasn1", "pychart", "simpleodspy", "smb", "uty", "xlrd", "xlwt"):
+for fle in ("fdb", "fpdf", "ghostscript", "nmb", "odf", "paramiko", "progressbar", "pyasn1", "pychart", "simpleodspy", "smb", "uty", "xlrd", "xlwt"):
     try:
         shutil.rmtree(fle)
     except:
@@ -568,12 +556,12 @@
     os.remove("ms0000.py")
     compileall.compile_dir(".", maxlevels=10, quiet=True)
     exeCmd("rm `find . -name '*.py'`")
-    exeCmd("unzip -q %s/TartanSve/%s-5 ms0000.py" % (bd, system))
+    exeCmd("unzip -q %s/TartanSve/%s-%s ms0000.py" % (bd, system, vv))
 if publish or verinc:
     exeCmd("tar -czf %s/TartanExe/%s_%s.%s.%s.tgz *" % (bd,
         system.capitalize(), ver[0], ver[1], ver[2]))
-    exeCmd("cp %s/TartanSve/%s-5.zip %s/TartanSve/%s_%s.%s.%s.zip" %
-        (bd, system, bd, system.capitalize(), ver[0], ver[1], ver[2]))
+    exeCmd("cp %s/TartanSve/%s-%s.zip %s/TartanSve/%s_%s.%s.%s.zip" %
+        (bd, system, vv, bd, system.capitalize(), ver[0], ver[1], ver[2]))
 if windows:
     # Python 2 windows executable
     exeCmd("wine2 wineconsole c:/PyInstall/maker.bat %s" % system)
@@ -581,8 +569,9 @@
         # Python 3 windows executable
         exeCmd("wine3 wineconsole c:/PyInstall/maker.bat %s" % system)
     if publish or verinc:
-        exeCmd("cp %s/TartanExe/%s-5.exe %s/TartanExe/%s_%s.%s.%s.exe" %
-            (bd, system, bd, system.capitalize(), ver[0], ver[1], ver[2]))
+        exeCmd("cp %s/TartanExe/%s-%s.exe %s/TartanExe/%s_%s.%s.%s.exe" %
+            (bd, system, vv, bd, system.capitalize(), ver[0], ver[1], ver[2]))
+        exeCmd("cp %s/TartanExe/%s_upd-%s.exe %s/TartanExe/%s_%s.%s.%s_upd.exe" % (bd, system, vv, bd, system.capitalize(), ver[0], ver[1], ver[2]))
         if system == "tartan":
             # Create CD
             if os.path.isdir("%s/TartanCD" % bd):
@@ -604,33 +593,33 @@
             exeCmd("todos -o %s/tempcd/AUTORUN.INF" % bd)
             exeCmd("chmod a+x %s/tempcd/AUTORUN.INF" % bd)
             # Add Documentation
-            exeCmd("cp -p %s/Tartan-5/doc/Manual.pdf %s/tempcd/" % (bd, bd))
+            exeCmd("cp -p %s/%s/doc/Manual.pdf %s/tempcd/" % (bd, bv, bd))
             # Make CD iso
             exeCmd("mkisofs -r -J -l -D -V 'Tartan Systems %s.%s.%s' -p 'Paul Malherbe paul@tartan.co.za' -copyright 'Paul Malherbe' -o %s/TartanCD/Tartan.iso -graft-points /\=%s/tempcd" % (ver[0], ver[1], ver[2], bd, bd))
             shutil.rmtree("%s/tempcd" % bd)
     # Publish
     if not system == "rnehol" and publish:
-        print
-        print "Version Number is %s.%s.%s" % tuple(ver)
-        print
+        print()
+        print("Version Number is %s.%s.%s" % tuple(ver))
+        print()
         # FTP Server
         exeCmd("ssh root@server rm /srv/ftp/%s*" % system.capitalize())
+        exeCmd("rsync -artz %s/TartanExe/current root@server:/srv/ftp/ --progress" % bd)
         exeCmd("rsync -artz %s/TartanExe/%s* root@server:/srv/ftp/ --progress" % (bd, system.capitalize()))
         exeCmd("ssh root@server chmod a+rwx /srv/ftp/*")
         exeCmd("ssh root@server chown paul:users /srv/ftp/*")
         exeCmd("ssh root@server chmod a-w /srv/ftp")
         # WWW Server
         if system == "tartan":
-            exeCmd("rsync -artz %s/Tartan-5/doc/Tartan.rst root@server:/var/www/tartan.co.za/htdocs/Manual/Manual.rst --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/QST.rst root@server:/var/www/tartan.co.za/htdocs/QuickStart/QuickStart.rst --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/Downloads.rst root@server:/var/www/tartan.co.za/htdocs/Downloads/ --progress" % bd)
-            exeCmd("rsync -artz %s/Tartan-5/doc/Changes.rst root@server:/var/www/tartan.co.za/htdocs/Changes/ --progress" % bd)
-os.remove("%s/Tartan-5/doc/Manual.pdf" % bd)
-os.remove("%s/Tartan-5/doc/%s.rst" % (bd, man))
+            exeCmd("rsync -artz %s/%s/doc/Tartan.rst root@server:/var/www/tartan.co.za/htdocs/Manual/Manual.rst --progress" % (bd, bv))
+            exeCmd("rsync -artz %s/%s/doc/QST.rst root@server:/var/www/tartan.co.za/htdocs/QuickStart/QuickStart.rst --progress" % (bd, bv))
+            exeCmd("rsync -artz %s/%s/doc/Downloads.rst root@server:/var/www/tartan.co.za/htdocs/Downloads/ --progress" % (bd, bv))
+            exeCmd("rsync -artz %s/%s/doc/Changes.rst root@server:/var/www/tartan.co.za/htdocs/Changes/ --progress" % (bd, bv))
+#os.remove("%s/%s/doc/Manual.pdf" % (bd, bv))
+os.remove("%s/%s/doc/%s.rst" % (bd, bv, man))
 if system in ("tartan", "bwlclb"):
-    os.remove("%s/Tartan-5/doc/QuickStart.pdf" % bd)
+    os.remove("%s/%s/doc/QuickStart.pdf" % (bd, bv))
 # Remove Duplicate File
-# os.remove("%s/TartanSve/%s-5.zip" % (bd, system))
 # Email Users
 if email:
     chgfle = "%s/ver/ver_%s.%s.%s.changes" % (pypath, ver[0], ver[1], ver[2])
@@ -676,11 +665,10 @@
             "ruthmiles52@gmail.com",
             "tyron@i-volt.net",
             "yolande@acsaccounting.co.za"]
-            #"peetneethling.vdm@gmail.com",
         for addr in addrs:
             if addr == "deonk@spargs.co.za":
                 sendMail(serv, mfrm, addr, subj)
             else:
                 sendMail(serv, mfrm, addr, subj, mess=(text, html))
-print "DONE"
+print("DONE")
 # END

=== modified file 'uty/pm1010.py'
--- uty/pm1010.py	2017-02-25 14:03:05 +0000
+++ uty/pm1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Password Manager
@@ -74,7 +72,7 @@
                     t = line.find("End%s" % codes)
                     data.append(line[f:t])
                 user = data[0]
-                if not user in self.data:
+                if user not in self.data:
                     self.data[user] = {}
                 code = data[1]
                 login = data[2]
@@ -93,7 +91,7 @@
                     if fill:
                         encrypt = encrypt[:-fill]
                 self.data[user][code] = [login, encrypt]
-        if not self.opts["capnm"] in self.data:
+        if self.opts["capnm"] not in self.data:
             self.data[self.opts["capnm"]] = {}
         self.sw.closeProcess()
         self.opts["mf"].closeLoop()
@@ -129,7 +127,7 @@
 
     def doCode(self, frt, pag, r, c, p, i, w):
         self.code = w
-        if not self.code in self.data[self.opts["capnm"]]:
+        if self.code not in self.data[self.opts["capnm"]]:
             self.data[self.opts["capnm"]][self.code] = ["", ""]
         self.login = self.data[self.opts["capnm"]][self.code][0]
         self.encrypt = self.data[self.opts["capnm"]][self.code][1]
@@ -156,7 +154,7 @@
  <group>
   <title>Secrets</title>
   <icon>0</icon>""")
-        codes = self.data[self.opts["capnm"]].keys()
+        codes = list(self.data[self.opts["capnm"]].keys())
         codes.sort()
         for code in codes:
             log, enc = self.data[self.opts["capnm"]][code]
@@ -193,7 +191,7 @@
         self.fpdf = MyFpdf(name="pm1010", head=133, auto=True, foot=True)
         self.fpdf.header = self.doHead
         self.fpdf.add_page()
-        codes = self.data[self.opts["capnm"]].keys()
+        codes = list(self.data[self.opts["capnm"]].keys())
         codes.sort()
         for count, code in enumerate(codes):
             self.fpdf.drawText(code, w=31*self.fpdf.cwth, align="L",
@@ -208,7 +206,7 @@
                     border="TLRB", ctyp=ctyp, ln=num)
         self.fpdf.output("secrets.pdf", "F")
         doPrinter(mf=self.opts["mf"], pdfnam="secrets.pdf", splash=False,
-            repprt=["Y", "V", "view"])
+            repprt=["N", "V", "view"])
         os.remove("secrets.pdf")
 
     def doHead(self):
@@ -236,7 +234,7 @@
 
     def doLoadCodes(self):
         data = []
-        codes = self.data[self.opts["capnm"]].keys()
+        codes = list(self.data[self.opts["capnm"]].keys())
         codes.sort()
         for code in codes:
             login, encrypt = self.data[self.opts["capnm"]][code]
@@ -250,7 +248,7 @@
             if os.path.isfile(self.flenam):
                 shutil.copy(self.flenam, self.flenam + "~")
             of = open(self.flenam, "wb")
-            users = self.data.keys()
+            users = list(self.data.keys())
             users.sort()
             for user in users:
                 for code in self.data[user]:
@@ -284,9 +282,9 @@
     try:
         opts, args = getopt.getopt(sys.argv[1:],"r:")
     except:
-        print
-        print "Usage: -r rcfile"
-        print
+        print()
+        print("Usage: -r rcfile")
+        print()
         sys.exit()
     rcdic = loadRcFile(opts[0][1])
     mf = MainFrame(rcdic=rcdic)

=== modified file 'uty/pw1010.py'
--- uty/pw1010.py	2017-02-25 14:03:05 +0000
+++ uty/pw1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     User Administration with ssh, paramiko and crypt or fcrypt.
@@ -117,7 +115,8 @@
         self.usrnam = w
         self.usrpwd = None
         for x in xrange(4):
-            exec "self.df.setWidget(self.df.B%s, state='disabled')" % x
+            wid = getattr(self.df, "B%s" % x)
+            self.df.setWidget(wid, state="disabled")
         if self.opt == "A":
             return "sk1"
         if self.opt == "D":
@@ -139,7 +138,8 @@
         if self.df.pag == 1:
             self.df.selPage("Accounts")
             for x in xrange(4):
-                exec "self.df.setWidget(self.df.B%s, state='normal')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, state="normal")
             self.opts["mf"].updateStatus("Click the Required Option Button")
             self.df.setWidget(self.df.topEntry[2][0], state="disabled")
             return
@@ -173,7 +173,7 @@
                 chan = self.client.get_transport().open_session()
                 chan.get_pty()
                 try:
-                    if not self.admnam == "root":
+                    if self.admnam != "root":
                         chan.exec_command("sudo %s\n" % c)
                         if chan.recv(4096).count("password"):
                             chan.send("%s\n" % self.admpwd)
@@ -191,7 +191,8 @@
         if self.df.pag == 2:
             self.df.clearFrame("T", 2)
             for x in xrange(4):
-                exec "self.df.setWidget(self.df.B%s, state='normal')" % x
+                wid = getattr(self.df, "B%s" % x)
+                self.df.setWidget(wid, state="normal")
             self.opts["mf"].updateStatus("Click the Required Option Button")
             self.df.setWidget(self.df.topEntry[2][0], state="disabled")
             return

=== modified file 'uty/rp1010.py'
--- uty/rp1010.py	2017-02-25 14:03:05 +0000
+++ uty/rp1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Report Printer Front End.
@@ -268,17 +266,18 @@
         self.df.setWidget(self.df.B1, "disabled")
 
     def doImport(self, widget=None):
-        sel = FileDialog(title="Import File",
-            initd=self.opts["mf"].rcdic["wrkdir"],
-            ftype=[("Report", "*.rpt")])
+        self.df.setWidget(self.df.mstFrame, "hide")
+        sel = FileDialog(parent=self.opts["mf"].body, title="Import File",
+            initd=self.opts["mf"].rcdic["wrkdir"], ftype=[("Report", "*.rpt")])
         nam = sel.askopenfilename()
+        self.df.setWidget(self.df.mstFrame, "show")
         err = None
         if nam:
             fle = open(nam, "r")
             for num, line in enumerate(fle):
                 dat = line.split("|")
                 if not num:
-                    if not dat[0] == "rptmst":
+                    if dat[0] != "rptmst":
                         err = "This File Does Not Contain a Valid Format"
                         break
                     chk = self.sql.getRec(tables="rptmst",
@@ -577,7 +576,7 @@
 
     def doTopEnd(self):
         pag = self.df.pag
-        if pag == 0:
+        if not pag:
             self.doAllTabs("normal")
             self.doSetNextSeq()
             self.df.focusField("T", 1, 1)
@@ -974,7 +973,7 @@
 
     def doColExit(self):
         self.doAllTabs("normal")
-        if self.df.idx == 0:
+        if not self.df.idx:
             if self.newrow == "Y":
                 self.df.clearLine(self.df.pag)
             self.df.last[self.df.pag] = [0, 0]
@@ -1007,7 +1006,8 @@
                 but[3] = 1
             else:
                 but[3] = 0
-            exec "self.df.setWidget(self.df.B%s, '%s')" % (num, state)
+            wid = getattr(self.df, "B%s" % num)
+            self.df.setWidget(wid, state)
 
     def doSave(self, widget=None):
         self.doDeleteAllRecords()
@@ -1071,7 +1071,7 @@
         self.df.focusField("T", self.df.pag, 1)
 
     def doInsert(self, widget=None):
-        if self.df.frt != "T" or self.df.pag == 0 or self.df.col != 1:
+        if self.df.frt != "T" or not self.df.pag or self.df.col != 1:
             return
         tit = ("Insert Column",)
         fld = ((("T",0,0,0), "IUI", 2, "Before Sq","Insert Before Sq",
@@ -1248,7 +1248,7 @@
                 s = sm.split("_")
                 if not chk:
                     chk.append(s[0])
-                elif not s[0] in chk:
+                elif s[0] not in chk:
                     showError(self.opts["mf"].body, "Sum Error",
                         "You are Aggregating More than One Table!\n\n"\
                         "The Results Will Most Probably be Incorrect!")
@@ -1279,7 +1279,7 @@
                         "rel_col2"], where=[("rel_tab1", "=", t2), ("rel_tab2",
                         "=", t1)])
                 for rel in recs:
-                    if rels.count(rel) == 0:
+                    if not rels.count(rel):
                         rels.append(rel)
         if len(tabs) > 1 and not rels:
             showError(self.opts["mf"].body, "Relationship Error",

=== modified file 'uty/ss1010.py'
--- uty/ss1010.py	2017-02-25 14:03:05 +0000
+++ uty/ss1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Stock Take Sheets.

=== modified file 'uty/td1010.py'
--- uty/td1010.py	2017-02-25 14:03:05 +0000
+++ uty/td1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Telephone Directory Maintenance.

=== modified file 'uty/tdc110.py'
--- uty/tdc110.py	2017-02-25 14:03:05 +0000
+++ uty/tdc110.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Telephone Directory Group Records.

=== modified file 'uty/tp1010.py'
--- uty/tp1010.py	2017-02-25 14:03:05 +0000
+++ uty/tp1010.py	2017-06-27 09:48:14 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Template Maintenance.
@@ -190,7 +188,7 @@
             (("T",0,0,0),"I@tpm_title",0,"Title","Template Title",
                 "","N",None,None,self.doDelTpt,("notblank",)),
             (("T",0,0,0),"I@tpm_type",0,"TT","Template Type",
-                "","N",self.doTptTyp,tpt,None,("in",tptrtp.keys())),
+                "","N",self.doTptTyp,tpt,None,("in",list(tptrtp.keys()))),
             (("T",0,0,0),"I@tpm_system",0,"Sys","Financial System",
                 "","N",self.doSystem,self.sys,None,("notblank",)),
             (("T",0,0,0),"I@tpm_sttp",0,"ST","Statement Type",
@@ -400,7 +398,7 @@
             self.df.butt[1][4] = ("T",0,2)
 
     def doTptTyp(self, frt, pag, r, c, p, i, w):
-        if self.ttype and not w == self.ttype:
+        if self.ttype and w != self.ttype:
             yn = askQuestion(self.opts["mf"].body, "Change Type?",
                 "Are You Sure You Want to Change the Template Type?",
                 default="no")
@@ -426,7 +424,7 @@
             "ff_type", "ff_size", "ff_desc"], where=[("ff_tabl", "in",
             tuple(tabs))])
         for r in rec:
-            if not r[1] == "ctm_cono" and r[1][4:] == "cono":
+            if r[1] != "ctm_cono" and r[1][4:] == "cono":
                 continue
             if r[1] in self.ignore:
                 continue
@@ -435,7 +433,7 @@
         for key in self.tptrtp:
             data.append([self.tptrtp[key][0][0], key]+self.tptrtp[key][0][1:])
         self.mrg["data"] = sorted(data, key=operator.itemgetter(0, 1))
-        if not self.ttype == "S":
+        if self.ttype != "S":
             self.df.loadEntry(frt, pag, p+1, data="")
             return "sk1"
         if self.systyp == "RCA":
@@ -450,9 +448,9 @@
     def doSmtTyp(self, frt, pag, r, c, p, i, w):
         if self.systyp == "RCA" and w not in ("O", "T"):
             return "Invalid Statement Type"
-        elif not self.systyp == "RCA" and w not in ("N", "O"):
+        elif self.systyp != "RCA" and w not in ("N", "O"):
             return "Invalid Statement Type"
-        if self.sttyp and not w == self.sttyp:
+        if self.sttyp and w != self.sttyp:
             yn = askQuestion(self.opts["mf"].body, "Change Type?",
                 "Are You Sure You Want to Change the Statement Type?",
                 default="no")
@@ -528,7 +526,7 @@
             if not os.path.isfile(self.text):
                 return "Invalid File Name"
             ext = self.text.split(".")[-1]
-            if not ext in ("jpg", "JPG", "jpeg", "JPEG", "png", "PNG"):
+            if ext not in ("jpg", "JPG", "jpeg", "JPEG", "png", "PNG"):
                 return "Invalid Image File"
             self.df.loadEntry(frt, pag, p+1, data="")
             return "sk1"
@@ -561,7 +559,7 @@
             self.size = w
 
     def doColour(self, frt, pag, r, c, p, i, w):
-        if not w[0] == "#":
+        if w[0] != "#":
             return "Invalid Color Code"
         if p in (2, 4):
             self.colour = w
@@ -633,7 +631,7 @@
             self.df.loadEntry(frt, pag, p+1, data=self.mrg_x2)
         else:
             self.chrs = w
-            if not self.dtype == "L" and ("L" or "R" in self.border):
+            if self.dtype != "L" and ("L" or "R" in self.border):
                 pad = 1
             else:
                 pad = 0
@@ -784,10 +782,12 @@
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def doImport(self, widget=None):
-        sel = FileDialog(title="Import File",
+        self.df.setWidget(self.df.mstFrame, "hide")
+        sel = FileDialog(parent=self.opts["mf"].body, title="Import File",
             initd=self.opts["mf"].rcdic["wrkdir"],
             ftype=[("Template", "*.tpl")])
         nam = sel.askopenfilename()
+        self.df.setWidget(self.df.mstFrame, "show")
         if nam:
             fle = open(nam, "r")
             for line in fle:
@@ -798,12 +798,13 @@
                     if chk:
                         showError(self.opts["mf"].body, "Invalid Import",
                             "This Template Already Exists")
+                        self.df.focusField(self.df.frt, self.df.pag, 1)
                         return
                     self.sql.insRec("tplmst", data=dat[1:])
                 else:
                     self.sql.insRec("tpldet", data=dat[1:])
         self.opts["mf"].dbm.commitDbase()
-        self.df.focusField(self.df.frt, self.df.pag, self.df.col)
+        self.df.focusField(self.df.frt, self.df.pag, 1)
 
     def doExport(self, widget=None):
         fle = open(os.path.join(self.opts["mf"].rcdic["wrkdir"], "%s.tpl" %

=== modified file 'wag/sl1010.py'
--- wag/sl1010.py	2017-02-25 14:03:05 +0000
+++ wag/sl1010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     File Maintenance for Staff Loans Record.

=== modified file 'wag/sl2010.py'
--- wag/sl2010.py	2017-02-25 14:03:05 +0000
+++ wag/sl2010.py	2017-06-29 08:35:23 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries New Staff Loans Capture.
@@ -121,7 +119,7 @@
     def doSdate(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.sdate = w
 
@@ -158,7 +156,7 @@
 
     def updateTables(self):
         if self.bh.multi == "Y":
-            curdt = self.sdate / 100
+            curdt = int(self.sdate / 100)
         else:
             curdt = self.bh.curdt
         self.sql.insRec("waglmf", data=[self.opts["conum"], self.empno,

=== modified file 'wag/sl2020.py'
--- wag/sl2020.py	2017-02-25 14:03:05 +0000
+++ wag/sl2020.py	2017-06-29 08:35:50 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries Staff Loans Data Capture.
@@ -172,7 +170,7 @@
     def doTrdate(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
+        if self.bh.multi == "N" and int(w / 100) > self.bh.curdt:
             return "Invalid Date, After Batch Period"
         self.trdate = w
 
@@ -220,7 +218,7 @@
 
     def updateTables1(self):
         if self.bh.multi == "Y":
-            self.curdt = self.trdate / 100
+            self.curdt = int(self.trdate / 100)
         else:
             self.curdt = self.bh.curdt
         if self.typ == 1:

=== modified file 'wag/sl2030.py'
--- wag/sl2030.py	2017-02-25 14:03:05 +0000
+++ wag/sl2030.py	2017-06-29 08:36:01 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries Staff Loans Raise Interest.
@@ -72,7 +70,7 @@
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs))
         for num, rec in enumerate(recs):
             p.displayProgress(num)
-            curdt = self.trdate / 100
+            curdt = int(self.trdate / 100)
             batch = "L%s" % curdt
             LoanInterest("S", self.opts["mf"].dbm, rec, update="Y",
                 batch=batch, curdt=curdt, tdate=self.trdate,

=== modified file 'wag/sl3010.py'
--- wag/sl3010.py	2017-02-25 14:03:05 +0000
+++ wag/sl3010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Staff Loans Batch Error Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 from tartanWork import sltrtp
 
@@ -29,6 +28,11 @@
         self.sql = Sql(self.opts["mf"].dbm, ["ctlbat", "wagltf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % (t[0],
             t[1], t[2], t[3], t[4])
@@ -154,8 +158,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         else:
             showError(self.opts["mf"].body, "Batch Errors",
                 "No Batch Transactions")

=== modified file 'wag/sl3020.py'
--- wag/sl3020.py	2017-02-25 14:03:05 +0000
+++ wag/sl3020.py	2017-06-29 08:37:13 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Staff Loans Transaction Audit Trail.
@@ -35,20 +33,21 @@
         if not wagctl:
             return
         lir = wagctl["ctw_i_date"]
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
         if lir:
-            fy = lir / 10000
-            fm = (lir / 100) - (fy * 100) + 1
+            fy = int(lir / 10000)
+            fm = int(lir / 100) - (fy * 100) + 1
             if fm == 13:
                 fy = fy + 1
                 fm = 1
             self.sdate = (fy * 100) + fm
         else:
             self.sdate = 0
-        self.edate = self.sysdtw / 100
+        self.edate = int(self.sysdtw / 100)
         self.totind = "N"
         return True
 
@@ -221,9 +220,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'wag/sl3030.py'
--- wag/sl3030.py	2017-02-25 14:03:05 +0000
+++ wag/sl3030.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Staff Loans Master Listing.
@@ -14,7 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class sl3030:
@@ -29,6 +28,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -127,8 +131,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'wag/sl3040.py'
--- wag/sl3040.py	2017-02-25 14:03:05 +0000
+++ wag/sl3040.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Staff Loans Statements.
@@ -14,10 +12,11 @@
 """
 
 import time
-from tartanWork import sltrtp
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, getSingleRecords
 from tartanFunctions import showError
+from tartanWork import sltrtp
 
 class sl3040:
     def __init__(self, **opts):
@@ -31,6 +30,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -229,8 +233,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Loan Statement at %s" % (self.opts["conam"], self.dated),
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            header="%s Loan Statement at %s" % (self.opts["conam"], self.dated),
+            fromad=self.fromad, repprt=self.df.repprt, repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'wag/sl4010.py'
--- wag/sl4010.py	2017-02-25 14:03:05 +0000
+++ wag/sl4010.py	2017-06-29 08:38:45 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Staff Loans Interrogation.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, LoanInterest, MyFpdf, SChoice, Sql, SRec
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, LoanInterest, MyFpdf, SChoice
+from TartanClasses import Sql, SRec, TartanDialog
 from tartanFunctions import getModName, getPeriods,  doPrinter
 from tartanWork import sltrtp
 
@@ -31,6 +29,10 @@
             "wagltf"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -131,7 +133,7 @@
         self.df.loadEntry("T", 1, 3, data=rec[lmc.index("wlm_repay")])
         # Raise Interest
         LoanInterest("S", self.opts["mf"].dbm, rec, update="Y",
-            curdt=self.sysdtw / 100, tdate=self.sysdtw, refno="Pending")
+            curdt=int(self.sysdtw / 100), tdate=self.sysdtw, refno="Pending")
         # Get Balances
         self.lon = 0.0
         self.imt = 0.0
@@ -233,7 +235,7 @@
             ("wlt_empno", "=", self.empno),
             ("wlt_loan", "=", self.loan)]
         if self.history == "N":
-            whr.append(("wlt_curdt", ">=", self.opts["period"] / 100))
+            whr.append(("wlt_curdt", ">=", int(self.opts["period"] / 100)))
         odr = "wlt_trdt, wlt_type, wlt_ref"
         state = self.df.disableButtonsTags()
         SRec(self.opts["mf"], screen=self.df.nb.Page2, title=tit, tables=tab,
@@ -278,12 +280,12 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.wlt:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.acctot = 0
                 self.pageHeading()
@@ -291,7 +293,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.wlt:
                 self.acctot = 0
@@ -300,7 +302,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%-5s %-20s %-25s %s" % ("", "",
@@ -322,7 +324,7 @@
             ("wlt_loan", "=", self.loan)]
         odr = "wlt_trdt, wlt_type"
         if self.history == "N":
-            whr.append(("wlt_curdt", ">=", self.opts["period"] / 100))
+            whr.append(("wlt_curdt", ">=", int(self.opts["period"] / 100)))
         recs = self.sql.getRec(tables="wagltf", where=whr, order=odr)
         for rec in recs:
             trd = CCD(rec[self.sql.wagltf_col.index("wlt_trdt")], "D1", 10)
@@ -371,7 +373,7 @@
         self.fpdf.underLine(txt=self.head)
         self.fpdf.setFont()
         self.pglin = 8
-        b = CCD(self.acctot / 100, "SD", 15.2)
+        b = CCD(self.acctot / 100.0, "SD", 15.2)
         if self.acctot != 0:
             self.fpdf.drawText("%-42s %13s %-30s" % \
                 (" ", b.disp, "Brought Forward"))

=== modified file 'wag/wg1010.py'
--- wag/wg1010.py	2017-02-25 14:03:05 +0000
+++ wag/wg1010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     File Maintenance for Salaries & Wages Masterfile Record.

=== modified file 'wag/wg2010.py'
--- wag/wg2010.py	2017-02-25 14:03:05 +0000
+++ wag/wg2010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries - Data Capture.

=== modified file 'wag/wg2020.py'
--- wag/wg2020.py	2017-02-25 14:03:05 +0000
+++ wag/wg2020.py	2017-06-29 08:40:51 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries and Wages Payslips.
@@ -66,8 +64,8 @@
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = CCD(self.sysdtw, "d1", 10).disp
-        self.s_per = self.opts["period"][1][0] / 100
-        self.e_per = self.opts["period"][2][0] / 100
+        self.s_per = int(self.opts["period"][1][0] / 100)
+        self.e_per = int(self.opts["period"][2][0] / 100)
         self.head = ("%03u %-30s %40s %10s" % \
             (self.opts["conum"], self.opts["conam"], self.sysdtd, "wg2020"))
         self.etotal = 0
@@ -136,8 +134,8 @@
 
     def doRunDate(self, frt, pag, r, c, p, i, w):
         self.rundt = w
-        self.curdt = w / 100
-        self.taxyr = w / 10000
+        self.curdt = int(w / 100)
+        self.taxyr = int(w / 10000)
         mth = self.curdt % 100
         if mth > 2:
             self.taxyr = self.taxyr + 1
@@ -149,8 +147,8 @@
             showError(self.opts["mf"].body, "Missing Rates",
                 "There are No Tax Rates for Year %s" % self.taxyr)
             return "rf"
-        y = w / 10000
-        m = (w % 10000) / 100
+        y = int(w / 10000)
+        m = int((w % 10000) / 100)
         if m < 3:
             self.sdate = ((y - 1) * 10000) + 301
         else:
@@ -191,7 +189,7 @@
 
     def doIgnore(self, frt, pag, r, c, p, i, w):
         self.ignore = w
-        if not self.freq == "M":
+        if self.freq != "M":
             self.df.loadEntry(frt, pag, p+1, data="N")
 
     def doMthly(self, frt, pag, r, c, p, i, w):
@@ -429,7 +427,7 @@
             rate = self.frate
         elif self.freq == "M":
             rate = self.mrate
-        idx = self.ern.keys()
+        idx = list(self.ern.keys())
         idx.sort()
         for cod in idx:
             ced = self.sql.getRec(tables="wagedc", where=[("ced_cono", "=",
@@ -535,7 +533,7 @@
             rate = self.frate
         elif self.freq == "M":
             rate = self.mrate
-        idx = self.ded.keys()
+        idx = list(self.ded.keys())
         idx.sort()
         for cod in idx:
             ced = self.sql.getRec(tables="wagedc", where=[("ced_cono", "=",
@@ -856,7 +854,7 @@
             lint = LoanInterest("S", self.opts["mf"].dbm, lmf, update="N",
                 tdate=self.rundt)
             bal = float(ASD(lint.cap) + ASD(lint.rin))
-            if not bal > 0:
+            if bal <= 0:
                 continue
             if damnt > bal:
                 ded = bal

=== modified file 'wag/wg2030.py'
--- wag/wg2030.py	2017-02-25 14:03:05 +0000
+++ wag/wg2030.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Employee Terminations.

=== modified file 'wag/wg3010.py'
--- wag/wg3010.py	2017-02-25 14:03:05 +0000
+++ wag/wg3010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Salaries and Wages Master Report.
@@ -14,21 +12,27 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, RepPrt, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, RepPrt, Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName
 
 class wg3010:
     def __init__(self, **opts):
         self.opts = opts
-        self.setVariables()
-        self.mainProcess()
-        self.opts["mf"].startLoop()
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
 
     def setVariables(self):
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtt = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
+        return True
 
     def mainProcess(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
@@ -131,8 +135,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.head, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+                pdfnam=pdfnam, header=self.head, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
         else:
             cols = [
                 ["wgm_empno",  "UI",  5, "EmpNo", "y"],
@@ -144,7 +148,8 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=__name__, tables=tabs,
                 heads=[self.head], cols=cols, where=whr, order=odr,
-                opts=opts, repprt=self.df.repprt, repeml=self.df.repeml)
+                opts=opts, repprt=self.df.repprt, repeml=self.df.repeml,
+                fromad=self.fromad)
         self.closeProcess()
 
     def doHead(self):

=== modified file 'wag/wg3020.py'
--- wag/wg3020.py	2017-02-25 14:03:05 +0000
+++ wag/wg3020.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries and Wages Data Capture Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
 
 class wg3020:
@@ -29,6 +27,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -102,9 +105,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, repprt=self.df.repprt,
-                repeml=self.df.repeml)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, header=self.tit, repprt=self.df.repprt,
+                fromad=self.fromad, repeml=self.df.repeml)
 
     def doPageHeading(self):
         self.fpdf.add_page()

=== modified file 'wag/wg3030.py'
--- wag/wg3030.py	2017-02-25 14:03:05 +0000
+++ wag/wg3030.py	2017-06-29 08:42:40 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Salaries and Wages EMP201 Report.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName
 
 class wg3030:
@@ -29,6 +27,11 @@
             "wagtf2"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
@@ -56,8 +59,8 @@
             return "Invalid Date"
         self.edatew = w
         self.edated = self.df.t_disp[pag][0][i]
-        yr = w / 10000
-        mt = w / 100 % 100
+        yr = int(w / 10000)
+        mt = int(w / 100) % 100
         if mt > 2:
             yr += 1
         self.txa = self.sql.getRec(tables="wagtxa",
@@ -104,7 +107,7 @@
                     num = p[0]
                     edl = (p[1] * c[1]) / 100.0
                     sdl = float(ASD(sdl) + ASD(edl))
-                    if not num in emp:
+                    if num not in emp:
                         emp[num] = [p[1], edl]
                     else:
                         emp[num][0] = float(ASD(emp[num][0]) + ASD(p[1]))
@@ -156,7 +159,7 @@
         self.fpdf.drawText()
         self.fpdf.drawText("Summary of SDL Payment")
         self.fpdf.underLine(txt="X" * 61)
-        keys = emp.keys()
+        keys = list(emp.keys())
         keys.sort()
         for k in keys:
             name = self.sql.getRec(tables="wagmst", cols=["wgm_sname",
@@ -164,12 +167,12 @@
                 ("wgm_empno", "=", k)], limit=1)
             n = "%s, %s" % (name[0].strip(), name[1].strip())
             t = CCD(emp[k][0], "SD", 13.2)
-            s = CCD((int(emp[k][1])/100.0), "SD", 13.2)
+            s = CCD((int(emp[k][1]) / 100.0), "SD", 13.2)
             self.fpdf.drawText("%2s %-30s %13s %13s" % (k, n, t.disp, s.disp))
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            header=self.tit, repprt=self.df.repprt,
+            fromad=self.fromad, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'wag/wg3040.py'
--- wag/wg3040.py	2017-02-25 14:03:05 +0000
+++ wag/wg3040.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python2
-
 """
 SYNOPSIS
     Salaries and Wages Earnings and Deduction Analysis.
@@ -13,7 +11,7 @@
     Copyright (C) 2004-2017 Paul Malherbe.
 """
 
-from TartanClasses import ASD, RepPrt, Sql, TartanDialog
+from TartanClasses import ASD, GetCtl, RepPrt, Sql, TartanDialog
 from tartanFunctions import showError
 
 class wg3040:
@@ -28,6 +26,11 @@
             prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         return True
 
     def mainProcess(self):
@@ -131,7 +134,7 @@
         RepPrt(self.opts["mf"], name=name, tables=tables, heads=heads,
             opts=opts, cols=cols, stots=stots, gtots=gtots,
             conum=self.opts["conum"], conam=self.opts["conam"], ttype="D",
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            repprt=self.df.repprt, repeml=self.df.repeml, fromad=self.fromad)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'wag/wg3050.py'
--- wag/wg3050.py	2017-02-25 14:03:05 +0000
+++ wag/wg3050.py	2017-06-29 08:44:03 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries and Wages IRP5 Statements Printing.
@@ -14,7 +12,8 @@
 """
 
 import csv, os, time
-from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import TartanDialog
 from tartanFunctions import dateDiff, doPrinter, getModName, getSingleRecords
 from tartanFunctions import payeTables, showError
 
@@ -31,6 +30,11 @@
             "wagtxr", "wagtf1"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -127,10 +131,10 @@
         self.df.loadEntry(frt, pag, p+1, data=self.edate.work)
 
     def doDate(self, frt, pag, r, c, p, i, w):
-        yr = w / 10000
+        yr = int(w / 10000)
         if yr < (self.taxyr - 1) or yr > self.taxyr:
             return "Invalid Date"
-        self.taxmth = (w / 100) % 100
+        self.taxmth = int(w / 100) % 100
         if self.taxmth < 3 and yr < self.taxyr:
             return "Invalid Date"
         if self.taxmth > 2 and yr == self.taxyr:
@@ -396,7 +400,7 @@
             paye10 = 0
             for x in xrange(0, 9, 2):
                 paye10b = int(self.taxno.work[x]) * 2
-                paye10 = paye10 + (paye10b / 10) + (paye10b % 10)
+                paye10 = paye10 + int(paye10b / 10) + (paye10b % 10)
                 if x < 8:
                     paye10 = paye10 + int(self.taxno.work[(x + 1)])
             paye10 = paye10 % 10
@@ -564,7 +568,7 @@
         for line in csvrdr:
             for num in xrange(0, len(line), 2):
                 if int(line[0]) in fincd:
-                    if not int(line[num]) == 9999:
+                    if int(line[num]) != 9999:
                         if int(line[num]) in (6010, 6020):
                             check["C%s" % line[num]] = int(line[num + 1])
                         else:
@@ -709,7 +713,7 @@
         #Employee Details
         # Removing 3070, pasport number and 3075, country of issue
         try:
-            if self.dob.work % 1000000 != self.idno / 10000000:
+            if self.dob.work % 1000000 != int(self.idno / 10000000):
                 raise Exception
             else:
                 try:
@@ -841,8 +845,8 @@
     def doPrint(self):
         self.fpdf.output(self.pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
-            repeml=self.df.repeml)
+            pdfnam=self.pdfnam, header=self.tit, repprt=self.df.repprt,
+            fromad=self.fromad, repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'wag/wg3060.py'
--- wag/wg3060.py	2017-02-25 14:03:05 +0000
+++ wag/wg3060.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries and Wages Notes Listing.
@@ -30,6 +28,7 @@
         wagctl = gc.getCtl("wagctl", self.opts["conum"])
         if not wagctl:
             return
+        self.fromad = wagctl["ctw_emadd"]
         self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
             self.opts["conam"], "WAG")
         if not self.notes.data:
@@ -71,6 +70,6 @@
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
                 cols=cols, ttype="D", repprt=self.notes.df.repprt,
-                repeml=self.notes.df.repeml)
+                repeml=self.notes.df.repeml, fromad=self.fromad)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'wag/wg3070.py'
--- wag/wg3070.py	2017-02-25 14:03:05 +0000
+++ wag/wg3070.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries and Wages Payslips Reprinting.

=== modified file 'wag/wg4010.py'
--- wag/wg4010.py	2017-02-25 14:03:05 +0000
+++ wag/wg4010.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries Interrogation.
@@ -14,8 +12,8 @@
 """
 
 import time
-from TartanClasses import ASD, CCD, MyFpdf, NotesCreate, SChoice, Sql, SRec
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, CCD, GetCtl, MyFpdf, NotesCreate, SChoice
+from TartanClasses import Sql, SRec, TartanDialog
 from tartanFunctions import getModName, doPrinter
 
 class wg4010:
@@ -30,6 +28,10 @@
             "wagbal", "wagtf1", "wagtf2"], prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -57,6 +59,10 @@
                 ("wgm_sname", "", 0, "Surname"),
                 ("wgm_fname", "", 0, "Namse")),
             "where": [("wgm_cono", "=", self.opts["conum"])]}
+        r1s = (("Weekly","W"),("2xWeekly","F"),("Monthly   ","M"))
+        r2s = (("Cash  ","C"),("Cheque  ","Q"),("Electronic","E"))
+        r3s = (("Yes","Y"),("No","N"))
+        r4s = (("Current","1"),("Transmission","2"),("Savings","3"))
         tag = (
             ("General", self.doTagSelect, ("T",0,2), ("T",0,1)),
             ("Tax", self.doTagSelect, ("T",0,2), ("T",0,1)),
@@ -86,9 +92,9 @@
             (("T",1,12,0),"OD1",10,"Start Date"),
             (("T",1,13,0),"Od1",10,"Term  Date"),
             (("T",1,14,0),"OUD",13.2,"Salary"),
-            (("T",1,15,0),"OUA",1,"Pay Freq"),
-            (("T",1,16,0),"OUA",1,"Pay Type"),
-            (("T",2,0,0),"OUA",1,"P.A.Y.E."),
+            (("T",1,15,0),("ORB",r1s),1,"Pay Freq"),
+            (("T",1,16,0),("ORB",r2s),1,"Pay Type"),
+            (("T",2,0,0),("ORB",r3s),1,"P.A.Y.E."),
             (("T",2,1,0),"ONA",16,"Tax Office"),
             (("T",2,2,0),"ONA",10,"Tax Number"),
             (("T",2,3,0),"OUA",1,"Nature of Employee"),
@@ -96,7 +102,7 @@
             (("T",2,5,0),"OUA",1,"Voluntary Excess"),
             (("T",2,6,0),"OUD",6.2,"Fixed Rate"),
             (("T",2,7,0),"ONA",13,"Directive"),
-            (("T",3,0,0),"OUA",1,"Account Type"),
+            (("T",3,0,0),("ORB",r4s),1,"Account Type"),
             (("T",3,1,0),"OUI",8,"Branch Code"),
             (("T",3,2,0),"ONA",16,"Account Number"),
             (("T",3,3,0),"ONA",30,"Bank Name"),
@@ -291,20 +297,20 @@
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             self.wagtrn = self.doGetTrans()
             if not self.wagtrn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             self.wagtrn = self.doGetTrans()
             if self.wagtrn:
@@ -313,7 +319,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
+                    pdfnam=pdfnam, header=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%26s %-25s %s" % \

=== modified file 'wag/wgc110.py'
--- wag/wgc110.py	2017-02-25 14:03:05 +0000
+++ wag/wgc110.py	2017-07-24 08:34:39 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Wages Control File Maintenance.
@@ -28,7 +26,7 @@
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         mods = ctlmst["ctm_modules"]
         self.genleg = False
-        for x in range(0, len(mods), 2):
+        for x in xrange(0, len(mods), 2):
             if mods[x:x + 2] == "GL":
                 self.genleg = True
                 break
@@ -43,7 +41,7 @@
         if not self.acc:
             self.new = True
             self.acc = [self.opts["conum"], "N", 0, "", "", 0, 0, 0, 0, "N",
-                0, 0, "", 61, "payslip"]
+                0, 0, "", 61, "payslip", ""]
         else:
             self.new = False
         if self.genleg:
@@ -123,7 +121,9 @@
             (("T",0,seq + 11,0),"IUI",2,"Best Account Type","",
                 self.acc[13],"N",None,None,None,("efld",)),
             (("T",0,seq + 12,0),"INA",20,"Payslip Template","",
-                self.acc[14],"N",self.doTplNam,tpm,None,("efld",))])
+                self.acc[14],"N",self.doTplNam,tpm,None,("efld",)),
+            (("T",0,seq + 13,0),"ITX",50,"Email Address","",
+                self.acc[15],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
@@ -152,7 +152,7 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 7):
+            for x in xrange(1, 7):
                 self.df.loadEntry(frt, pag, p+x, data="")
             return "sk6"
 
@@ -184,7 +184,7 @@
         for x, d in enumerate(self.df.t_work[0][0]):
             if self.genleg and x < 7:
                 if x in (1, 3, 5):
-                    y = (x - 1) / 2
+                    y = int((x - 1) / 2)
                     chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
                         "=", self.opts["conum"]), ("ctl_code", "=",
                         self.ctl[y][0])], limit=1)

=== modified file 'wag/wgc210.py'
--- wag/wgc210.py	2017-02-25 14:03:05 +0000
+++ wag/wgc210.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Wages Receiver of Revenue Codes File Maintenance.

=== modified file 'wag/wgc220.py'
--- wag/wgc220.py	2017-02-25 14:03:05 +0000
+++ wag/wgc220.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries Receiver of Revenue Codes Listing.

=== modified file 'wag/wgc310.py'
--- wag/wgc310.py	2017-02-25 14:03:05 +0000
+++ wag/wgc310.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Wages Earnings and Deductions File Maintenance.

=== modified file 'wag/wgc320.py'
--- wag/wgc320.py	2017-02-25 14:03:05 +0000
+++ wag/wgc320.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Earnings and Deduction Codes Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import RepPrt, Sql, TartanDialog
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
 from tartanFunctions import showError
 
 class wgc320:
@@ -28,6 +26,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "wagedc", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
@@ -108,7 +111,8 @@
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=cols, conum=self.opts["conum"], ttype="D",
             conam=self.opts["conam"], lines=(len(descs) - 1),
-            repprt=self.df.repprt, repeml=self.df.repeml)
+            repprt=self.df.repprt, repeml=self.df.repeml,
+            fromad=self.fromad)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'wag/wgc410.py'
--- wag/wgc410.py	2017-02-25 14:03:05 +0000
+++ wag/wgc410.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Wages Unions File Maintenance.

=== modified file 'wag/wgc420.py'
--- wag/wgc420.py	2017-02-25 14:03:05 +0000
+++ wag/wgc420.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Unions Codes Listing.

=== modified file 'wag/wgc510.py'
--- wag/wgc510.py	2017-02-25 14:03:05 +0000
+++ wag/wgc510.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Salaries Messages File Maintenance.

=== modified file 'wag/wgc520.py'
--- wag/wgc520.py	2017-02-25 14:03:05 +0000
+++ wag/wgc520.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/env python
-
 """
 SYNOPSIS
     Wages Messages Listing.
@@ -14,7 +12,7 @@
 """
 
 import time
-from TartanClasses import CCD, MyFpdf, ProgressBar, Sql, TartanDialog
+from TartanClasses import CCD, GetCtl, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, textFormat, doPrinter
 from tartanFunctions import showError
 
@@ -29,6 +27,11 @@
         self.sql = Sql(self.opts["mf"].dbm, "ctlmes", prog=__name__)
         if self.sql.error:
             return
+        gc = GetCtl(self.opts["mf"])
+        wagctl = gc.getCtl("wagctl", self.opts["conum"])
+        if not wagctl:
+            return
+        self.fromad = wagctl["ctw_emadd"]
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
@@ -96,8 +99,8 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, 0,
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                repprt=self.df.repprt,
+            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, header=self.tit,
+                repprt=self.df.repprt, fromad=self.fromad,
                 repeml=self.df.repeml)
 
     def pageHeading(self):

=== modified file 'wag/wgc610.py'
--- wag/wgc610.py	2017-02-25 14:03:05 +0000
+++ wag/wgc610.py	2017-06-27 09:48:15 +0000
@@ -1,5 +1,3 @@
-#! /usr/bin/python
-
 """
 SYNOPSIS
     Salaries & Wages PAYE, UIF and SDL Tables.
@@ -99,19 +97,19 @@
         if i == 0:
             if p == 0 and w:
                 return "Invalid From Income, Should be Zero"
-            if p > 0 and not w == (self.to + 1):
+            if p > 0 and w != (self.to + 1):
                 return "Invalid To Income, Should Be %s" % (self.to + 1)
             self.fr = w
         elif i == 1:
-            if not w > self.fr:
+            if w <= self.fr:
                 return "Invalid To Income, Less Than From"
             self.to = w
         elif i == 2:
-            if not p == 2 and w <= self.tx:
+            if p != 2 and w <= self.tx:
                 return "Invalid Tax, Less Than Previous"
             self.tx = w
         else:
-            if not p == 3 and w <= self.rt:
+            if p != 3 and w <= self.rt:
                 return "Invalid rate, Less Than Previous"
             self.rt = w
 
@@ -120,7 +118,7 @@
             self.fr = 0
             self.df.loadEntry("C", 0, 0, data=self.fr)
             self.df.focusField("C", 0, 2)
-        elif not self.df.row == 9:
+        elif self.df.row != 9:
             if self.to == 9999999:
                 self.doExit()
             else:

