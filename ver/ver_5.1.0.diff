=== modified file '.bzrignore'
--- .bzrignore	2015-08-25 15:02:35 +0000
+++ .bzrignore	2015-10-03 07:35:48 +0000
@@ -2,6 +2,9 @@
 .komodotools/
 Tartan-5.pidaproject
 Tartan.komodoproject
+autoacc
+butt.py
+buttons.txt
 bwl/bc2010.try
 bwl/clr2.py
 changes.txt
@@ -16,7 +19,9 @@
 doc/Downloads.rst
 doc/Manual.pdf
 doc/Manual.rst
+doc/Notes.txt
 doc/QuickStart.pdf
+doc/Quickstart.rst
 doc/Rnehol.rst
 doc/Rsync.rst
 doc/Seccmp.rst
@@ -28,20 +33,28 @@
 doc/gnugpl.rst
 doc/gnugpl.txt
 doc/manual.css
+doc/mynut.txt
 doc/mystylesheet
 doc/nfs_setup.rst
 doc/nut_ups.odt
 doc/postfix_vacation.txt
+doc/postgresql_upgrade.txt
 doc/stylesheet
 doc/tarlic.pdf
 doc/tarlic.rst
 doc/vnc_setup.rst
 doc/volmoed_client.sh
+doprt.py
+files
+flake.ign
+flakes
+lon/implon.py
 mem/chk.py
 mst/csv
 mst/doc
 mst/img
 profile
+repprt.py
 scp/all.sh
 scp/doitall
 scp/pop.py
@@ -89,8 +102,3 @@
 wag/wg3030.new
 wag/wg3030.old
 web
-doc/Notes.txt
-flakes
-buttons.txt
-butt.py
-doc/mynut.txt

=== modified file 'ass/ar2010.py'
--- ass/ar2010.py	2015-08-25 15:02:35 +0000
+++ ass/ar2010.py	2015-09-09 07:37:28 +0000
@@ -34,7 +34,7 @@
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
-        self.dend = projectDate(self.opts["period"][1][0], 1, "-")
+        self.dend = projectDate(self.opts["period"][1][0], -1)
         self.todat = 0
         self.imports = False
         t = time.localtime()

=== modified file 'ass/ar2020.py'
--- ass/ar2020.py	2015-08-25 15:02:35 +0000
+++ ass/ar2020.py	2015-09-12 15:52:53 +0000
@@ -319,12 +319,11 @@
         return "sk2"
 
     def doVatCod(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        rate = float(vat[-1])
-        self.trnvat = round((self.coyamt * rate / (rate + 100)), 2)
+        self.trnvat = round((self.coyamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.trnvat)
         if not self.trnvat:
             return "sk1"

=== modified file 'ass/ar3010.py'
--- ass/ar3010.py	2015-08-26 08:52:51 +0000
+++ ass/ar3010.py	2015-08-28 11:26:21 +0000
@@ -155,8 +155,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3020.py'
--- ass/ar3020.py	2015-08-26 08:52:51 +0000
+++ ass/ar3020.py	2015-08-28 11:26:21 +0000
@@ -216,8 +216,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3030.py'
--- ass/ar3030.py	2015-08-26 08:52:51 +0000
+++ ass/ar3030.py	2015-08-28 11:26:21 +0000
@@ -183,8 +183,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'ass/ar3040.py'
--- ass/ar3040.py	2015-08-26 08:52:51 +0000
+++ ass/ar3040.py	2015-08-28 11:26:21 +0000
@@ -232,8 +232,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         bals = Balances(self.opts["mf"], "ASS", self.opts["conum"], self.sper,

=== modified file 'ass/ar3050.py'
--- ass/ar3050.py	2015-02-07 06:31:11 +0000
+++ ass/ar3050.py	2015-08-28 11:26:21 +0000
@@ -72,9 +72,8 @@
                 ["g", "NA", 10, "Act-Date",    "y"],
                 ["h", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
-                conam=self.opts["conam"], name=name,
-                tables=data, heads=head, cols=cols, ttype="D",
-                view=self.notes.view, prtnam=self.notes.pnam,
-                mail=self.notes.mail)
+                conam=self.opts["conam"], name=name, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'ass/ar4010.py'
--- ass/ar4010.py	2015-08-26 08:52:51 +0000
+++ ass/ar4010.py	2015-08-28 13:14:25 +0000
@@ -243,7 +243,7 @@
                 rec = SelectChoice(self.df.nb.Page3, tit, atc, dat)
                 if rec.selection:
                     self.df.setWidget(self.df.mstFrame, state="hide")
-                    whr = [("ast_seq", "=", rec.selection[10])]
+                    whr = [("ast_seq", "=", rec.selection[len(col)])]
                     TabPrt(self.opts["mf"], tabs="asstrn", where=whr,
                         pdia=False)
                     self.df.setWidget(self.df.mstFrame, state="show")
@@ -298,20 +298,20 @@
             self.printInfo()
         if self.pr_opts == "B":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
         elif self.pr_opts == "A":
             if not self.trn[0]:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
         elif self.pr_opts == "T":
             if self.trn[0]:
                 self.pageHeading()
@@ -319,7 +319,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'ass/arc110.py'
--- ass/arc110.py	2015-08-25 15:02:35 +0000
+++ ass/arc110.py	2015-09-18 10:41:53 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["assctl", "ctlctl", "chglog"],
-            prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["assctl", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="assctl", where=[("cta_cono", "=",
@@ -35,35 +45,41 @@
             self.acc = [self.opts["conum"], "N", "N", 0]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [["ass_sls", "Sale of Assets", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [["ass_sls", "Sale of Assets", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Asset Register Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [("glm_cono", "=", self.opts["conum"])]}
         r1s = (("Yes","Y"),("No","N"))
-        fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),("IRB",r1s),0,"Receiver Dep","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,"")]
+            seq = 2
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),("IRB",r1s),0,"Receiver Dep","",
                 self.acc[2],"N",None,None,None,None),
-            (("T",0,3,0),"Id2",7,"Last Dep Period","",
-                self.acc[3],"N",None,None,None,None))
+            (("T",0,seq + 1,0),"Id2",7,"Last Dep Period","",
+                self.acc[3],"N",None,None,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
@@ -72,6 +88,8 @@
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -107,21 +125,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1,):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 3:
+                if x in (1,):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2,):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2,):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'ass/arc210.py'
--- ass/arc210.py	2014-12-30 15:37:38 +0000
+++ ass/arc210.py	2015-09-01 13:39:39 +0000
@@ -54,8 +54,8 @@
                 "","N",self.doCode,cod,None,("notblank",)),
             (("T",0,1,0),"I@asd_desc",0,"","",
                 "","N",None,None,self.doDelete,("notblank",)),
-            (("T",0,2,0),("IRB",r1s),0,"Company Type","",
-                "S","N",self.doCoyTyp,None,None,None)]
+            (("T",0,2,0),("IRB",r1s),0,"Type","",
+                "S","N",self.doDepTyp,None,None,None)]
         if self.rordp == "Y":
             fld.append(
             (("T",0,3,0),("IRB",r1s),0,"Receiver Type","Receiver Type",
@@ -98,7 +98,7 @@
             for y in xrange(0, 14, inc):
                 self.df.loadEntry("C", 0, y/inc, data=acc[x+y+2])
 
-    def doCoyTyp(self, frt, pag, r, c, p, i, w):
+    def doDepTyp(self, frt, pag, r, c, p, i, w):
         self.ctyp = w
 
     def doRecTyp(self, frt, pag, r, c, p, i, w):

=== modified file 'ass/arc320.py'
--- ass/arc320.py	2015-08-26 08:52:51 +0000
+++ ass/arc320.py	2015-08-28 11:26:21 +0000
@@ -50,8 +50,8 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=col, order=odr, where=whr, conum=self.opts["conum"],
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            conam=self.opts["conam"], repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.df.enableButtonsTags(state=state)
         self.closeProcess()
 

=== modified file 'bkm/bk1010.py'
--- bkm/bk1010.py	2015-08-25 15:02:35 +0000
+++ bkm/bk1010.py	2015-09-09 07:37:53 +0000
@@ -47,7 +47,7 @@
         self.ptyp = None
         self.newb = False
         udics = {}
-        self.start = projectDate(self.sysdtw, 7, "-")
+        self.start = projectDate(self.sysdtw, -7)
         bkm = self.sql.getRec(tables="bkmmst", cols=["max(bkm_depart)"],
             where=[("bkm_cono", "=", self.opts["conum"]), ("bkm_state",
             "<>", "X")], limit=1)

=== modified file 'bkm/bk1020.py'
--- bkm/bk1020.py	2015-08-26 08:52:51 +0000
+++ bkm/bk1020.py	2015-09-28 11:13:37 +0000
@@ -31,8 +31,8 @@
 from TartanClasses import PrintBookingInvoice, SelectChoice, TartanDialog
 from TartanClasses import Sql, TabPrt
 from tartanFunctions import askQuestion, callModule, chkGenAcc, dateDiff
-from tartanFunctions import doPrinter, getFileName, getModName, getVatRate
-from tartanFunctions import projectDate, showError, textFormat
+from tartanFunctions import doPrinter, genAccNum, getFileName, getModName
+from tartanFunctions import getVatRate, projectDate, showError, textFormat
 from tartanWork import bktrtp, mthnam
 
 class bk1020:
@@ -570,6 +570,9 @@
                 "stype": "C",
                 "titl": titl,
                 "head": head,
+                "typs": (("UA", 6), ("NA", 30), ("UI", 3), ("UI", 3),
+                    ("NA", 20), ("UD", 10.2), ("UI", 3), ("UI", 3),
+                    ("UD", 6.2), ("UD", 10.2), ("UI", 5)),
                 "data": data}
             state = self.rt.disableButtonsTags()
             self.opts["mf"].updateStatus("Select a Product to Edit")
@@ -1033,22 +1036,11 @@
 
     def doUpdate(self):
         if self.newcon:
-            # Remove invalid characters
-            name = self.sname.replace(" ", "")
-            for c in (" ", ".", ",", ";", ":", "'", '"'):
-                name = name.replace(c, "")
-            if len(name) < 5:
-                name = name + ("0" * (5 - len(name)))
-            ccode = ""
-            for c in xrange(0, 5):
-                ccode = (ccode + name[c]).upper()
-            ccode = ccode.strip()
-            text = "%s%0" + str((7 - len(ccode))) + "d"
-            for x in xrange(1, 100):
-                self.ccode = text % (ccode, x)
-                chk = self.sql.getRec(tables="bkmcon",
-                    where=[("bkc_cono", "=", self.opts["conum"]),
-                    ("bkc_ccode", "=", self.ccode)], limit=1)
+            for seq in xrange(1, 100):
+                self.ccode = genAccNum(self.sname, seq)
+                chk = self.sql.getRec(tables="bkmcon", where=[("bkc_cono",
+                    "=", self.opts["conum"]), ("bkc_ccode", "=", self.ccode)],
+                    limit=1)
                 if not chk:
                     break
             self.df.loadEntry("T", 2, 0, data=self.ccode)
@@ -1109,12 +1101,13 @@
                         "%03i%7s" % (self.opts["conum"], self.number),
                         self.sql.bkmmst_col[num], trdt, self.opts["capnm"],
                         str(dat), str(data[num]), 0])
+        self.opts["mf"].dbm.commitDbase()
         if self.rev:
             self.df.setWidget(self.df.mstFrame, state="hide")
             PrintBookingInvoice(self.opts["mf"], self.opts["conum"],
-                "C", [self.crnno], tname=self.ivtpl, prtnam="Default")
+                self.opts["conam"], "C", [self.crnno], tname=self.ivtpl,
+                repprt=["N", "P", "Default"])
             self.df.setWidget(self.df.mstFrame, state="show")
-        self.opts["mf"].dbm.commitDbase()
         return changed
 
     def doAccept(self):
@@ -1336,9 +1329,9 @@
         if self.ttype == 4 and self.glint == "Y":       # Cancellation
             self.tglac = self.ccgctl
             self.tvcod = self.taxdf
-            rte = getVatRate(
-                self.sql, self.opts["conum"], self.tvcod, self.tdte)[0]
-            self.tvamt = round(self.tamount * rte / (100 + rte), 2)
+            vrte = getVatRate(self.sql, self.opts["conum"], self.tvcod,
+                self.tdte)
+            self.tvamt = round(self.tamount * vrte / (100 + vrte), 2)
             return "nd"
         elif self.ttype in (1, 2, 5):                   # Rec or Ref or Reins
             return "nd"
@@ -1358,8 +1351,8 @@
         if not rec:
             return "Invalid VAT Code"
         self.tvcod = w
-        rte = getVatRate(self.sql, self.opts["conum"], w, self.tdte)[0]
-        self.tvamt = round(self.tamount * rte / (100 + rte), 2)
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.tdte)
+        self.tvamt = round(self.tamount * vrte / (100 + vrte), 2)
         self.tr.loadEntry(frt, pag, p+1, self.tvamt)
 
     def doTVamt(self, frt, pag, r, c, p, i, w):
@@ -1405,8 +1398,8 @@
         elif self.ttype == 4 and self.fee:              # Cancellation
             tramt = self.tamount
             vatind = self.tvcod
-            r = getVatRate(self.sql, self.opts["conum"], vatind, self.tdte)[0]
-            vatamt = round(tramt * r / (100 + r), 2)
+            vrte = getVatRate(self.sql, self.opts["conum"], vatind, self.tdte)
+            vatamt = round(tramt * vrte / (100 + vrte), 2)
             excamt = float(ASD(tramt) - ASD(vatamt))
         elif not self.ttype == 4:
             tramt = self.tamount
@@ -1608,8 +1601,9 @@
                     self.df.setWidget(self.df.mstFrame, state="hide")
                     if rec.selection[4] == 2:
                         PrintBookingInvoice(self.opts["mf"],
-                            self.opts["conum"], "I", [rec.selection[5]],
-                            prtnam="view", copy="y")
+                            self.opts["conum"], self.opts["conam"], "I",
+                            [rec.selection[5]], repprt=["N", "V", "view"],
+                            copy="y")
                     else:
                         whr = [
                             ("bkt_cono", "=", self.opts["conum"]),
@@ -1643,7 +1637,7 @@
         fld = []
         view = ("N", "V")
         if self.email:
-            mail = ("N","Y","N", "E-Mail Booking")
+            mail = ("N", "Y", "N", "E-Mail Booking")
         else:
             mail = None
         state = self.df.disableButtonsTags()
@@ -1666,13 +1660,8 @@
         self.doPEnd()
 
     def doPBooking(self):
-        view = self.pr.repprt[1]
-        prtnam = self.pr.repprt[2]
         if self.pr.repeml[1] == "Y":
-            mail = self.email
-        else:
-            mail = None
-        printm = self.pr.repeml[3]
+            self.pr.repeml[2] = self.email
         self.form = DrawForm(self.opts["mf"].dbm, self.bktpl,
             wrkdir=self.opts["mf"].rcdic["wrkdir"])
         self.doLoadStatic()
@@ -1715,10 +1704,12 @@
                     emess = ("Booking Settlement - %s" % self.number,
                         "Dear %s\n\nAttached please find your confirmation "\
                         "of settlement of your booking." % nam)
-                elif self.state == "X":
+                else:
                     emess = ("Booking Cancellation - %s" % self.number,
                         "Dear %s\n\nAttached please find the expiry of your "\
                         "booking enquiry." % nam)
+                if self.pr.repeml[1] == "Y":
+                        self.pr.repeml[3] = emess
             if ln[tdc.index("tpd_detseq")] == 7:
                 if self.state in ("Q", "C"):
                     ln[tdc.index("tpd_text")] = "%-20s%60s" % \
@@ -1735,9 +1726,9 @@
             else:
                 att = None
             self.form.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=view, prtnam=prtnam, mail=mail,
-                printm=printm, emess=emess, attach=att)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.pr.repprt,
+                repeml=self.pr.repeml, attach=att)
 
     def doLoadStatic(self):
         cmc = self.sql.ctlmst_col
@@ -1936,7 +1927,7 @@
         if self.group:
             v1 = self.value * .10
             v2 = self.value * .50
-            d2 = projectDate(self.arrive, 120, "-")
+            d2 = projectDate(self.arrive, -120)
         else:
             v1 = self.value * .50
             v2 = 0

=== modified file 'bkm/bk2010.py'
--- bkm/bk2010.py	2015-08-26 08:52:51 +0000
+++ bkm/bk2010.py	2015-09-14 06:32:34 +0000
@@ -90,7 +90,7 @@
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("B","N"))
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doSDate(self, frt, pag, r, c, p, i, w):
         self.sdate = w
@@ -113,8 +113,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        prt = self.df.repprt[2]
-        eml = self.df.repeml[1:3]
         tab = ["bkmmst", "bkmcon", "bkmrtt"]
         col = ["bkm_number", "bkc_sname", "bkc_names", "bkm_arrive"]
         whr = [("bkm_cono", "=", self.opts["conum"])]
@@ -173,7 +171,9 @@
                 vatc = umst[self.sql.bkmunm_col.index("bum_vatc")]
                 if not vatc:
                     vatc = self.ctm_taxdf
-                vrte = getVatRate(self.sql, self.opts["conum"], vatc, trdt)[0]
+                vrte = getVatRate(self.sql, self.opts["conum"], vatc, trdt)
+                if vrte is None:
+                    vrte = 0.0
                 if rbas == "A":
                     inca = quan * days * rate
                 elif rbas == "B":
@@ -227,8 +227,9 @@
                 docs.append(invno)
         self.opts["mf"].dbm.commitDbase()
         if docs:
-            PrintBookingInvoice(self.opts["mf"], self.opts["conum"], "I",
-                docs, prtnam=prt, tname=self.tname, email=eml, copy="O")
+            PrintBookingInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], "I", docs, tname=self.tname,
+                repprt=self.df.repprt, repeml=self.df.repeml, copy="O")
         self.doExit()
 
     def getRef(self, bkno):

=== modified file 'bkm/bk3010.py'
--- bkm/bk3010.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3010.py	2015-08-28 11:26:21 +0000
@@ -168,7 +168,7 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2])
+                repprt=self.df.repprt)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self):

=== modified file 'bkm/bk3020.py'
--- bkm/bk3020.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3020.py	2015-08-28 11:26:21 +0000
@@ -162,10 +162,7 @@
         self.df.closeProcess()
         recs = self.getRecords()
         if recs:
-            self.view = self.df.repprt[1]
-            self.prtnam = self.df.repprt[2]
-            self.mail = self.df.repeml[2]
-            if self.prtnam == "export":
+            if self.df.repprt[2] == "export":
                 self.exportReport(recs)
             else:
                 self.printReport(recs)
@@ -209,7 +206,7 @@
             self.expdatas.append(line)
         p.closeProgress()
         self.grandTotal()
-        doWriteExport(xtype=self.view, name=expnam,
+        doWriteExport(xtype=self.df.repprt[1], name=expnam,
             heads=self.expheads, colsh=self.expcolsh, forms=self.expforms,
             datas=self.expdatas, rcdic=self.opts["mf"].rcdic)
 
@@ -279,8 +276,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.view,
-                prtnam=self.prtnam, mail=self.mail)
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         bkmno = CCD(data[0], "UI", 7)
@@ -410,7 +407,7 @@
 
     def grandTotal(self):
         tot = [0, 0, 0, 0, 0]
-        if self.prtnam == "export":
+        if self.df.repprt[2] == "export":
             for x in xrange(0, len(bktrtp)):
                 tot[0] = float(ASD(tot[0]) + ASD(self.gdr[x]))
                 tot[1] = float(ASD(tot[1]) + ASD(self.gcr[x]))

=== modified file 'bkm/bk3030.py'
--- bkm/bk3030.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3030.py	2015-09-19 10:31:51 +0000
@@ -136,7 +136,7 @@
             if not datetime.date(year, month, day).weekday() == chk:
                 return True
         else:
-            date = projectDate(self.sysdtw, 1, "-")
+            date = projectDate(self.sysdtw, -1)
             dte = 99
             while not dte == chk:
                 date = projectDate(date, 1)
@@ -186,11 +186,11 @@
         start = self.getDate(self.start)
         end = self.getDate(projectDate(self.end, 1))
         if self.period == "D":
-            self.hdes = "Arrivals for Weekdays %s - %s" % (start, end)
+            self.hdes = "Arrivals for Weekdays %s to %s" % (start, end)
         elif self.period == "E":
-            self.hdes = "Arrivals for Weekend %s - %s" % (start, end)
+            self.hdes = "Arrivals for Weekend %s to %s" % (start, end)
         else:
-            self.hdes = "Arrivals for Period %s - %s" % (start, end)
+            self.hdes = "Arrivals for Period %s to %s" % (start, end)
         self.fpdf = MyFpdf(name=__name__, prog=__name__, head=80)
         self.fpdf.header = self.pageHeading
         self.fpdf.alias_nb_pages()
@@ -208,17 +208,19 @@
             self.fpdf.output(pdfnam, "F")
             subj = "%s - %s" % (self.cdes, self.hdes)
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=subj, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=subj, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         if self.prtinv == "Y" and self.docs:
             # Print Invoice
             self.docs.sort()
-            PrintBookingInvoice(self.opts["mf"], self.opts["conum"], "I",
-                self.docs, tname=self.tname, prtnam=self.df.repprt[2])
+            PrintBookingInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], "I", self.docs, tname=self.tname,
+                repprt=self.df.repprt, repeml=self.df.repeml)
             # Print Statement
             self.book.sort()
-            callModule(self.opts["mf"], None, "bk3070", coy=(self.opts["conum"],
-                self.opts["conam"]), args=[self.book, self.df.repprt])
+            callModule(self.opts["mf"], None, "bk3070",
+                coy=(self.opts["conum"], self.opts["conam"]),
+                args=[self.book, self.df.repprt, self.df.repeml])
         self.opts["mf"].closeLoop()
 
     def doArrival(self):
@@ -246,12 +248,12 @@
                 self.doRaiseInvoice(number, arrive)
             con = self.sql.getRec(tables="bkmcon", where=[("bkc_cono", "=",
                 self.opts["conum"]), ("bkc_ccode", "=", ccode)], limit=1)
-            sname = con[self.sql.bkmcon_col.index("bkc_sname")]
-            names = con[self.sql.bkmcon_col.index("bkc_names")]
+            sname = con[self.sql.bkmcon_col.index("bkc_sname")].strip()
+            names = con[self.sql.bkmcon_col.index("bkc_names")].strip()
             if names:
-                name = "%s %s" % (names.split()[0], sname)
+                name = "%s %s (%s)" % (names.split()[0], sname, number)
             else:
-                name = sname
+                name = "%s (%s)" % (sname, number)
             bal = self.sql.getRec(tables="bkmtrn", cols=["sum(bkt_tramt)"],
                 where=[("bkt_cono", "=", self.opts["conum"]), ("bkt_number",
                 "=", number)], limit=1)
@@ -298,7 +300,7 @@
                 else:
                     arr = "<--"
                 if btype == "A":
-                    td = projectDate(depart, 1, "-")
+                    td = projectDate(depart, -1)
                 else:
                     td = depart
                 if td <= self.end:
@@ -349,6 +351,7 @@
                     name = "%s %s" % (bk[4].split()[0], bk[3])
                 else:
                     name = bk[3]
+                name = "%s\n(%s)" % (name.strip(), number)
                 arrive = bk[5]
                 depart = bk[6]
                 if btype == "A":
@@ -365,7 +368,7 @@
                 else:
                     arrive = "<--"
                 if btype == "A":
-                    td = projectDate(depart, 1, "-")
+                    td = projectDate(depart, -1)
                 else:
                     td = depart
                 if td <= self.end:
@@ -457,7 +460,9 @@
             vatc = umst[self.sql.bkmunm_col.index("bum_vatc")]
             if not vatc:
                 vatc = self.ctm_taxdf
-            vrte = getVatRate(self.sql, self.opts["conum"], vatc, trdt)[0]
+            vrte = getVatRate(self.sql, self.opts["conum"], vatc, trdt)
+            if vrte is None:
+                vrte = 0.0
             if rbas == "A":
                 inca = quan * days * rate
             elif rbas == "B":
@@ -566,7 +571,7 @@
             ctyp = "S"
         ft = ["courier", "B", 12]
         self.fpdf.set_font(ft[0], ft[1], ft[2])
-        w = self.fpdf.get_string_width("X"*26)
+        w = self.fpdf.get_string_width("X" * 26)
         x = 7
         y = self.fpdf.get_y()
         if a:
@@ -575,11 +580,11 @@
             if self.rtyp == "H" and not fill:
                 return
         x += w
-        w = self.fpdf.get_string_width("X"*26)
+        w = self.fpdf.get_string_width("X" * 26)
         self.fpdf.drawText(b, x=x, y=y, w=w, h=hh[1], border=bdr,
             fill=fill, ctyp=ctyp, font=ft)
         x += w
-        w = self.fpdf.get_string_width("X"*4) + 1
+        w = self.fpdf.get_string_width("X" * 4) + 1
         h = self.fpdf.get_y() - y
         if self.rtyp == "A":
             self.fpdf.drawText(c, x=x, y=y, w=w, h=h, border=bdr,
@@ -590,23 +595,23 @@
         ly = self.fpdf.get_y()
         if a or self.rtyp == "H":
             x += w
-            w = self.fpdf.get_string_width("X"*4)
-            if self.rtyp == "A":
-                self.fpdf.drawText(d, x=x, y=y, w=w, h=hh[2], border=bdr,
-                    fill=fill, font=ft)
-            else:
-                self.fpdf.drawText(d, x=x, y=y, w=w, h=hh[2], border=bdr,
-                    fill=fill, ctyp=ctyp, font=ft)
-            x += w
-            w = self.fpdf.get_string_width("X"*4)
-            if self.rtyp == "A":
-                self.fpdf.drawText(e, x=x, y=y, w=w, h=hh[2], border=bdr,
-                    fill=fill, font=ft)
-            else:
-                self.fpdf.drawText(e, x=x, y=y, w=w, h=hh[2], border=bdr,
-                    fill=fill, ctyp=ctyp, font=ft)
-            x += w
-            w = self.fpdf.get_string_width("X"*14)
+            w = self.fpdf.get_string_width("X" * 4)
+            if self.rtyp == "A":
+                self.fpdf.drawText(d, x=x, y=y, w=w, h=hh[2], border=bdr,
+                    fill=fill, font=ft)
+            else:
+                self.fpdf.drawText(d, x=x, y=y, w=w, h=hh[2], border=bdr,
+                    fill=fill, ctyp=ctyp, font=ft)
+            x += w
+            w = self.fpdf.get_string_width("X" * 4)
+            if self.rtyp == "A":
+                self.fpdf.drawText(e, x=x, y=y, w=w, h=hh[2], border=bdr,
+                    fill=fill, font=ft)
+            else:
+                self.fpdf.drawText(e, x=x, y=y, w=w, h=hh[2], border=bdr,
+                    fill=fill, ctyp=ctyp, font=ft)
+            x += w
+            w = self.fpdf.get_string_width("X" * 14)
             if self.rtyp == "A":
                 self.fpdf.drawText(f, x=x, y=y, w=w, h=hh[2], border="TLRB",
                     fill=fill, font=ft)

=== modified file 'bkm/bk3040.py'
--- bkm/bk3040.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3040.py	2015-08-28 11:26:21 +0000
@@ -167,8 +167,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         num = CCD(data[0], "UI", 7)

=== modified file 'bkm/bk3050.py'
--- bkm/bk3050.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3050.py	2015-08-28 11:26:21 +0000
@@ -85,9 +85,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = False
         tab = ["bkmcon"]
         whr = [("bkc_cono", "=", self.opts["conum"])]
@@ -119,8 +116,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.view,
-                    prtnam=self.prtnam, mail=self.emadd)
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'bkm/bk3060.py'
--- bkm/bk3060.py	2015-02-07 06:31:11 +0000
+++ bkm/bk3060.py	2015-08-28 11:26:21 +0000
@@ -68,7 +68,7 @@
                 ["g", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bkm/bk3070.py'
--- bkm/bk3070.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3070.py	2015-09-12 08:59:38 +0000
@@ -43,11 +43,11 @@
             "bkmtrn", "tplmst"], prog=__name__)
         if self.sql.error:
             return
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Bookings Statements (%s)" % __name__)
         return True
 
     def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "- Bookings Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -85,7 +85,7 @@
                 "Y","N",self.doCancel,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -121,28 +121,34 @@
 
     def doEnd(self):
         if "args" in self.opts:
-            self.cancel = "N"
+            self.cancel = "Y"
             self.tname = self.stpl
             self.whole = "A"
             self.snum = 0
             self.enum = 0
-            self.prtnam = self.opts["args"][1][0][2]
-            self.email = self.opts["args"][1][1][1]
-            self.printm = self.opts["args"][1][1][3]
+            if len(self.opts["args"]) == 1:
+                self.repprt = ["N", "V", "view"]
+                self.repeml = ["N", "N", "", "", "Y"]
+            else:
+                self.repprt = self.opts["args"][1]
+                self.repeml = self.opts["args"][2]
         else:
             self.df.closeProcess()
-            self.prtnam = self.df.repprt[2]
-            self.email = self.df.repeml[1]
-            self.printm = self.df.repeml[3]
+            self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
             if not self.enum:
                 self.enum = 9999999
+        self.emadd = self.repeml[2]
         tab = ["bkmmst"]
         whr = [("bkm_cono", "=", self.opts["conum"])]
         if self.cancel == "N":
             whr.append(("bkm_state", "<>", "X"))
         odr = "bkm_number"
         if self.whole == "A":
-            whr.append(("bkm_number", "in", self.opts["args"][0]))
+            if type(self.opts["args"][0]) == int:
+                whr.append(("bkm_number", "=", self.opts["args"][0]))
+            else:
+                whr.append(("bkm_number", "in", self.opts["args"][0]))
             recs = self.sql.getRec(tables="bkmmst", where=whr, order=odr)
         elif self.whole == "S":
             tab.append("bkmcon")
@@ -185,7 +191,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.repeml[1] == "N" or self.emadd:
+                self.repeml[2] = self.emadd
                 self.doPrint()
         if not "args" in self.opts:
             self.opts["mf"].closeLoop()
@@ -215,7 +224,7 @@
         self.cod = bkm[bmc.index("bkm_ccode")]
         con = self.sql.getRec(tables="bkmcon", where=[("bkc_cono", "=",
             self.opts["conum"]), ("bkc_ccode", "=", self.cod)], limit=1)
-        self.eml = con[self.sql.bkmcon_col.index("bkc_email")]
+        eml = con[self.sql.bkmcon_col.index("bkc_email")]
         if "contact_details" in self.form.tptp:
             dat = "%s %s %s" % (
                 con[ccc.index("bkc_title")],
@@ -239,29 +248,22 @@
         self.doBody(btc, bkt, tdc)
         self.doTotal(tdc)
         self.doTail()
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.repeml[2] = eml
             self.doPrint()
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s" % (self.opts["conum"], self.num)
         else:
             key = "%s_all" % self.opts["conum"]
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
             ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.eml:
-            mail = "N"
-        else:
-            mail = self.eml
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.sysdtd),
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'bkm/bk3080.py'
--- bkm/bk3080.py	2015-08-26 08:52:51 +0000
+++ bkm/bk3080.py	2015-09-14 06:33:16 +0000
@@ -84,7 +84,7 @@
                 "","N",self.doDocno,self.trn,None,("notzero",)])
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=((self.doEnd, "y"),), txit=(self.doExit,),
-            view=("N","V"), mail=("B","N"))
+            view=("N","V"), mail=("B","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -129,8 +129,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        prt = self.df.repprt[2]
-        eml = self.df.repeml[1:3]
         tab = ["bkmtrn", "bkmmst", "bkmcon"]
         col = ["bkt_refno", "bkt_date", "bkc_sname", "bkc_names"]
         dic = {}
@@ -162,8 +160,9 @@
             for rec in recs:
                 docs.append(rec[0])
         if docs:
-            PrintBookingInvoice(self.opts["mf"], self.opts["conum"], self.dtyp,
-                docs, prtnam=prt, tname=self.tname, email=eml, copy=self.copy)
+            PrintBookingInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], self.dtyp, docs, tname=self.tname,
+                repprt=self.df.repprt, repeml=self.df.repeml, copy=self.copy)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bkm/bkc110.py'
--- bkm/bkc110.py	2015-08-25 15:02:35 +0000
+++ bkm/bkc110.py	2015-09-18 10:55:27 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["bkmctl", "tplmst", "ctlctl",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["bkmctl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="bkmctl", where=[("cbk_cono", "=",
@@ -36,29 +46,21 @@
                 "booking_invoice", "booking_statement", ""]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["bkm_ctl", "Bookings Control", 0],
-            ["bkm_chq", "Cheques Received", 0],
-            ["bkm_csh", "Cash Received", 0],
-            ["bkm_ccg", "Cancellation Fee", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["bkm_ctl", "Bookings Control", 0],
+                ["bkm_chq", "Cheques Received", 0],
+                ["bkm_csh", "Cash Received", 0],
+                ["bkm_ccg", "Cancellation Fee", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Bookings Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         tpb = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -96,37 +98,53 @@
             "stype": "F",
             "types": "fle"}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
-                self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,3,0),"ONA",30,""),
-            (("T",0,4,0),"IUI",7,self.ctl[3][1],"",
-                self.ctl[3][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,4,0),"ONA",30,""),
-            (("T",0,5,0),"INA",20,"Booking Template","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
+                    self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,3,0),"ONA",30,""),
+                (("T",0,4,0),"IUI",7,self.ctl[3][1],"",
+                    self.ctl[3][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,4,0),"ONA",30,"")]
+            seq = 5
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),"INA",20,"Booking Template","",
                 self.acc[2],"N",self.doBkgTpl,tpb,None,None),
-            (("T",0,6,0),"INA",20,"Invoice Template","",
+            (("T",0,seq + 1,0),"INA",20,"Invoice Template","",
                 self.acc[3],"N",self.doInvTpl,tpi,None,None),
-            (("T",0,7,0),"INA",20,"Statement Template","",
+            (("T",0,seq + 2,0),"INA",20,"Statement Template","",
                 self.acc[4],"N",self.doStaTpl,tps,None,None),
-            (("T",0,8,0),"ITX",50,"Terms and Conditions","",
-                self.acc[5],"N",None,trm,None,("fle","blank")))
+            (("T",0,seq + 3,0),"ITX",50,"Terms and Conditions","",
+                self.acc[5],"N",None,trm,None,("fle","blank"))])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -179,21 +197,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3, 5, 7):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 9:
+                if x in (1, 3, 5, 7):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4, 6, 8):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4, 6, 8):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'bwl/bc1010.py'
--- bwl/bc1010.py	2015-08-26 08:52:51 +0000
+++ bwl/bc1010.py	2015-09-28 13:23:58 +0000
@@ -15,7 +15,8 @@
 
 from TartanClasses import CCD, FileImport, GetCtl, ProgressBar, RepPrt, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import askQuestion, getNextCode, showError, showInfo
+from tartanFunctions import askChoice, askQuestion, getNextCode, showError
+from tartanFunctions import showInfo
 
 class bc1010:
     def __init__(self, **opts):
@@ -25,7 +26,7 @@
             if "args" in self.opts:
                 self.newtab = True
                 self.gentab = False
-                self.tab = self.opts["args"][0]
+                self.tab = self.opts["args"]
                 self.df.loadEntry("T", 0, 0, data=self.tab)
                 self.df.focusField("T", 0, 2)
             self.opts["mf"].startLoop()
@@ -97,7 +98,7 @@
             (("T",0,2,0),"I@btb_surname",0,"","",
                 "","N",self.doSurname,None,self.doDelete,("notblank",)),
             (("T",0,3,0),"I@btb_names",0,"","",
-                "","N",self.doNames,None,None,("notblank",)),
+                "","N",self.doNames,None,None,("efld",)),
             (("T",0,4,0),("IRB",r1s),0,"Gender","",
                 "M","N",self.doGender,None,None,None),
             (("T",0,5,0),"I@btb_add1",0,"","",
@@ -270,13 +271,16 @@
                 return "A Tab with this Name Already Exists"
             return
         if not self.sname == self.snam or not w == self.fnam:
-            ok = askQuestion(self.opts["mf"].body, "Name Change",
-                "Is This a Re-Issue of the Tab?", default="no")
-            if ok == "no":
+            but = [("Amendment", "A"), ("Re-Issue", "R"), ("Neither", "N")]
+            ok = askChoice(self.opts["mf"].body, "Name Change",
+                "Please Select the Reason for the Name Change",
+                butt=but, default="Neither")
+            if ok == "N":
                 return "ff3"
-            self.tabchg = True
-            for x in range(1, 15):
-                self.df.clearEntry(frt, pag, c + x)
+            if ok == "R":
+                self.tabchg = True
+                for x in range(1, 15):
+                    self.df.clearEntry(frt, pag, c + x)
 
     def doGender(self, frt, pag, r, c, p, i, w):
         self.gender = w
@@ -430,8 +434,8 @@
                 dft,"N",self.doCField,None,None,None))
         tnd = ((self.doCEnd,"Y"), )
         txt = (self.doCExit, )
-        self.cf = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
-            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+        self.pr = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","Y"))
         self.opts["mf"].startLoop()
         if self.cols:
             cols = []
@@ -480,13 +484,16 @@
                     if col == "name":
                         snam = rec[btc.index("btb_surname")]
                         fnam = rec[btc.index("btb_names")]
-                        fnam = fnam.split()
-                        for num, nam in enumerate(fnam):
-                            if not num:
-                                init = nam[0].capitalize()
-                            else:
-                                init = "%s, %s" % (init, nam[0].capitalize())
-                        dat.append("%s, %s" % (snam, init))
+                        if fnam:
+                            fnam = fnam.split()
+                            for num, nam in enumerate(fnam):
+                                if not num:
+                                    init = nam[0].upper()
+                                else:
+                                    init = "%s %s" % (init, nam[0].upper())
+                            dat.append("%s, %s" % (snam, init))
+                        else:
+                            dat.append(snam)
                     elif col == "address":
                         txt = rec[btc.index("btb_add1")]
                         adr = rec[btc.index("btb_add2")]
@@ -529,8 +536,8 @@
                 tit = "%s (Females Only)" % tit
             RepPrt(self.opts["mf"], name=__name__, conum=self.opts["conum"],
                 conam=self.opts["conam"], heads=[tit], ttype="D",
-                tables=data, cols=cols, view=self.cf.repprt[1],
-                prtnam=self.cf.repprt[2], mail=self.cf.repeml[2])
+                tables=data, cols=cols, repprt=self.pr.repprt,
+                repeml=self.pr.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.enableButtonsTags(state=state)
         self.df.window.focus_force()
@@ -548,25 +555,25 @@
         else:
             idx = 3
         if p == idx and w == "Y":
-            self.cf.loadEntry(frt, pag, p+1, data="N")
-            self.cf.loadEntry(frt, pag, p+2, data="N")
+            self.pr.loadEntry(frt, pag, p+1, data="N")
+            self.pr.loadEntry(frt, pag, p+2, data="N")
             return "sk2"
 
     def doCEnd(self):
-        self.cf.closeProcess()
+        self.pr.closeProcess()
         self.cols = ["btb_tab"]
-        if self.cf.repeml[0] == "N":
+        if self.pr.repeml[0] == "N":
             end = -2
         else:
             end = -4
-        for num, dat in enumerate(self.cf.t_work[0][0][2:end]):
+        for num, dat in enumerate(self.pr.t_work[0][0][2:end]):
             if dat == "Y":
                 self.cols.append(self.colsd[num][2])
         self.opts["mf"].closeLoop()
 
     def doCExit(self):
         self.cols = []
-        self.cf.closeProcess()
+        self.pr.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doEnd(self):

=== modified file 'bwl/bc2010.py'
--- bwl/bc2010.py	2015-08-26 08:52:51 +0000
+++ bwl/bc2010.py	2015-09-22 11:27:32 +0000
@@ -183,7 +183,7 @@
             (("T",1,1,0),"I@btb_surname",0,"","",
                 "","N",None,None,None,("notblank",)),
             (("T",1,2,0),"I@btb_names",0,"","",
-                "","N",None,None,None,("notblank",)),
+                "","N",None,None,None,("efld",)),
             (("T",1,3,0),("IRB",r4s),0,"Gender","",
                 "M","N",self.doGender,None,None,None),
             (("T",1,4,0),("IRB",r5s),0,"Position","",
@@ -257,22 +257,22 @@
                 self.opts["mf"].dbm.commitDbase()
                 return
             self.mixed = chk[self.sql.bwldrm_col.index("bdm_mixed")]
-            self.df.loadEntry(frt, pag, p+1, data=self.mixed)
+            self.df.loadEntry(frt, pag, p + 1, data=self.mixed)
             self.rating = chk[self.sql.bwldrm_col.index("bdm_rating")]
-            self.df.loadEntry(frt, pag, p+2, data=self.rating)
+            self.df.loadEntry(frt, pag, p + 2, data=self.rating)
             self.dbase = chk[self.sql.bwldrm_col.index("bdm_dbase")]
-            self.df.loadEntry(frt, pag, p+3, data=self.dbase)
+            self.df.loadEntry(frt, pag, p + 3, data=self.dbase)
             self.tsize = chk[self.sql.bwldrm_col.index("bdm_tsize")]
             self.mrate = chk[self.sql.bwldrm_col.index("bdm_mrate")]
-            self.df.loadEntry(frt, pag, p+4, data=self.mrate)
+            self.df.loadEntry(frt, pag, p + 4, data=self.mrate)
             self.vrate = chk[self.sql.bwldrm_col.index("bdm_vrate")]
-            self.df.loadEntry(frt, pag, p+5, data=self.vrate)
+            self.df.loadEntry(frt, pag, p + 5, data=self.vrate)
             draws = self.sql.getRec(tables="bwldrt", cols=["bdt_tab",
                 "bdt_name", "bdt_rink", "bdt_side", "bdt_pos", "bdt_rate",
                 "bdt_flag"], where=[("bdt_cono", "=", self.opts["conum"]),
                 ("bdt_date", "=", self.date), ("bdt_time", "=", self.time)],
                 order="bdt_rink, bdt_side")
-            self.df.loadEntry(frt, pag, p+6, data=len(draws))
+            self.df.loadEntry(frt, pag, p + 6, data=len(draws))
             rnk = {}
             self.adraw1 = []
             self.arranged = {}
@@ -319,17 +319,17 @@
         self.mixed = w
         if self.mixed == "N":
             self.rating = "N"
-            self.df.loadEntry(frt, pag, p+1, data=self.rating)
+            self.df.loadEntry(frt, pag, p + 1, data=self.rating)
             if self.dbase == "C":
                 return "sk1"
             else:
-                self.df.loadEntry(frt, pag, p+2, data=self.dbase)
+                self.df.loadEntry(frt, pag, p + 2, data=self.dbase)
                 return "sk2"
 
     def doRating(self, frt, pag, r, c, p, i, w):
         self.rating = w
         if not self.dbase == "C":
-            self.df.loadEntry(frt, pag, p+1, data=self.dbase)
+            self.df.loadEntry(frt, pag, p + 1, data=self.dbase)
             return "sk1"
 
     def doDrawBase(self, frt, pag, r, c, p, i, w):
@@ -402,7 +402,7 @@
                 return "Duplicate Rink"
         self.rink = w
         self.team = "L"
-        self.ag.loadEntry(frt, pag, self.ag.pos+1, data=self.team)
+        self.ag.loadEntry(frt, pag, self.ag.pos + 1, data=self.team)
 
     def doADel(self, widget=None):
         if self.rink in self.arranged:
@@ -411,7 +411,7 @@
 
     def doATab(self, frt, pag, r, c, p, i, w):
         if not w:
-            self.ag.loadEntry(frt, pag, p+1, data="")
+            self.ag.loadEntry(frt, pag, p + 1, data="")
             if i == 2:
                 return "Missing Tab Number"
         if w and not self.doLoadTab(w, frt):
@@ -431,7 +431,7 @@
                     pos += 1
                     for mem in self.arranged[self.rink][self.team]:
                         if mem:
-                            self.ag.focusField("C", 0, pos+1)
+                            self.ag.focusField("C", 0, pos + 1)
                             self.ag.loadEntry("C", 0, pos, data=mem)
                             self.doLoadTab(mem, "C")
                         pos += 2
@@ -458,8 +458,8 @@
         if self.team == "L":
             self.team = "R"
             self.ag.colf[0][2][4] += "(noesc)"
-            self.ag.loadEntry("C", 0, self.ag.pos+1, data=self.team)
-            self.ag.focusField("C", 0, self.ag.col+2)
+            self.ag.loadEntry("C", 0, self.ag.pos + 1, data=self.team)
+            self.ag.focusField("C", 0, self.ag.col + 2)
         else:
             self.ag.colf[0][2][4] = self.ag.colf[0][2][4].replace("(noesc)",
                 "")
@@ -509,22 +509,22 @@
                 return "rf"
         elif not self.doLoadTab(w, frt):
             return "Invalid Tab Number"
-        elif self.dbase in ("C", "P") and not self.df.t_work[1][0][p+4]:
-            self.df.loadEntry(frt, pag, p+4, data="1")
+        elif self.dbase in ("C", "P") and not self.df.t_work[1][0][p + 4]:
+            self.df.loadEntry(frt, pag, p + 4, data="1")
             return "sk3"
-        elif self.dbase in ("C", "R") and not self.df.t_work[1][0][p+5]:
-            self.df.loadEntry(frt, pag, p+5, data=1)
+        elif self.dbase in ("C", "R") and not self.df.t_work[1][0][p + 5]:
+            self.df.loadEntry(frt, pag, p + 5, data=1)
         else:
             return "sk5"
 
     def doGender(self, frt, pag, r, c, p, i, w):
         if self.dbase == "R":
-            self.df.loadEntry(frt, pag, p+1, data="")
+            self.df.loadEntry(frt, pag, p + 1, data="")
             return "sk1"
 
     def doPosition(self, frt, pag, r, c, p, i, w):
         if self.dbase == "P":
-            self.df.loadEntry(frt, pag, p+1, data="")
+            self.df.loadEntry(frt, pag, p + 1, data="")
             return "sk1"
 
     def doEntered(self, widget=None):
@@ -573,7 +573,7 @@
             if ok == "no":
                 return
             callModule(self.opts["mf"], self.df, "bc1010",
-                coy=[self.opts["conum"], self.opts["conam"]], args=(tab,))
+                coy=[self.opts["conum"], self.opts["conam"]], args=tab)
             acc = self.sql.getRec(tables="bwltab", where=[("btb_cono", "=",
                 self.opts["conum"]), ("btb_tab", "=", tab)], limit=1)
             if not acc:
@@ -594,8 +594,11 @@
                 self.df.loadEntry("T",1,4, data=str(acc[c.index("btb_pos1")]))
                 self.df.loadEntry("T",1,5, data=str(acc[c.index("btb_rate1")]))
         else:
-            name = snam + ", " + fnam[0][0]
-            self.ag.loadEntry("C", 0, self.ag.pos+1, data=name)
+            if fnam:
+                name = snam.upper() + ", " + fnam[0][0].upper()
+            else:
+                name = snam.upper()
+            self.ag.loadEntry("C", 0, self.ag.pos + 1, data=name)
         return True
 
     def doDelete(self, widget=None):
@@ -739,7 +742,7 @@
         if self.tsize == 3:
             return
         self.rep42 = "N"
-        self.gr.loadEntry(frt, pag, p+1, data=self.rep42)
+        self.gr.loadEntry(frt, pag, p + 1, data=self.rep42)
         if self.mixed == "Y":
             self.needed = self.getNeeded(len(self.alltabs))
         else:
@@ -870,7 +873,7 @@
             for num, grp in enumerate(groups):
                 alldraw = []
                 self.doPositions(grp)
-                self.doHistory(self.weeks * 7)
+                self.doHistory(self.weeks * -7)
                 if self.mixed == "Y":
                     text = "Selecting the Best Mixed Combination"
                 elif not num:
@@ -890,7 +893,7 @@
                     tcl = []
                     for rink in xrange(0, len(self.adraw2), 2):
                         sk1 = self.adraw2[rink][2][0]
-                        sk2 = self.adraw2[rink+1][2][0]
+                        sk2 = self.adraw2[rink + 1][2][0]
                         if sk1 in self.hist and sk2 in self.hist[sk1][1]:
                             scl += 1
                         pls = []
@@ -900,7 +903,7 @@
                             if team[0]:
                                 pls.append(team[0])
                                 tms.append(team[0])
-                        for opp in self.adraw2[rink+1][2:]:
+                        for opp in self.adraw2[rink + 1][2:]:
                             if opp[0]:
                                 pls.append(opp[0])
                                 ops.append(opp[0])
@@ -1148,7 +1151,7 @@
                     self.lead1.append(self.second1.pop(0))
 
     def doHistory(self, days):
-        ldate = projectDate(self.date, days, act="-")
+        ldate = projectDate(self.date, days)
         self.hist = {}
         self.broken = []
         recs = self.sql.getRec(tables="bwldrt", where=[("bdt_cono", "=",
@@ -1216,14 +1219,14 @@
         draws = sorted(draws, key=itemgetter(0))
         for x in xrange(0, len(draws), 2):
             g = rinks2.pop(0)
-            #if len(draws[x]) > len(draws[x+1]):
-            #    draws[x+1][1] += draws[x+1][-1][5]
-            #elif len(draws[x]) < len(draws[x+1]):
+            #if len(draws[x]) > len(draws[x + 1]):
+            #    draws[x + 1][1] += draws[x + 1][-1][5]
+            #elif len(draws[x]) < len(draws[x + 1]):
             #    draws[x][1] += draws[x][-1][5]
             self.loadData(g, draws[x])
             tot = draws[x][1]
-            self.loadData(g, draws[x+1])
-            tot -= draws[x+1][1]
+            self.loadData(g, draws[x + 1])
+            tot -= draws[x + 1][1]
             if tot < 0:
                 tot = 0 - tot
             if tot > total:
@@ -1241,16 +1244,24 @@
             return self.lead2.pop()
 
     def loadData(self, g, d):
-        drw = [g, d[1], [d[2][0], "%s, %s" % (d[2][1], d[2][2][0]), d[2][5]]]
+        if d[2][2]:
+            nam = "%s, %s" % (d[2][1].upper(), d[2][2][0].upper())
+        else:
+            nam = d[2][1].upper()
+        drw = [g, d[1], [d[2][0], nam, d[2][5]]]
         if d[0] == 1:
-            drw.extend([[0,"",0], [0,"",0], [0,"",0]])
+            drw.extend([[0, "",0], [0, "", 0], [0, "", 0]])
         elif d[0] == 2:
-            drw.extend([[0,"",0], [0,"",0]])
+            drw.extend([[0, "", 0], [0, "", 0]])
         elif d[0] == 3:
-            drw.append([0,"",0])
+            drw.append([0, "", 0])
         if len(d) > 3:
             for f in d[3:]:
-                drw.append([f[0], "%s, %s" % (f[1], f[2][0]), f[5]])
+                if f[2]:
+                    nam = "%s, %s" % (f[1].upper(), f[2][0].upper())
+                else:
+                    nam = f[1].upper()
+                drw.append([f[0], nam, f[5]])
         self.adraw2.append(drw)
 
     def doSave(self):
@@ -1270,7 +1281,7 @@
             for r in self.adraw1[x][2:]:
                 if r[0]:
                     one += 1
-            for r in self.adraw1[x+1][2:]:
+            for r in self.adraw1[x + 1][2:]:
                 if r[0]:
                     two += 1
             if not two == one:
@@ -1279,7 +1290,7 @@
                 broken = False
             side = "L"
             for y in xrange(2):
-                dat = self.adraw1[x+y]
+                dat = self.adraw1[x + y]
                 tab = []
                 for num, plr in enumerate(dat[2:]):
                     pos = [4, 3, 2, 1][num]
@@ -1364,7 +1375,7 @@
             self.df.setWidget(self.df.mstFrame, state="show")
         PrintDraw(self.opts["mf"], self.opts["conum"], self.date, self.time,
             takings=self.takings, listing=self.listing, board=self.board,
-            empty=self.empty, prtnam=self.pd.repprt[2])
+            empty=self.empty, repprt=self.pd.repprt)
         self.printed = True
         self.opts["mf"].closeLoop()
 
@@ -1406,7 +1417,9 @@
                     remove = []
                     for t in self.alltabs:
                         if t not in chk:
-                            n = self.alltabs[t][0]+", "+self.alltabs[t][1][0]
+                            n = self.alltabs[t][0]
+                            if self.alltabs[t][1]:
+                                n = "%s, %s" % (n, self.alltabs[t][1][0])
                             ok = askQuestion(self.opts["mf"].body,
                                 "Missing Tab", "Tab %s - %s is Not in the "\
                                 "Amended Draw, Would You Like to Remove It "\
@@ -1494,8 +1507,8 @@
             focus=False)
         self.cg.loadEntry("T", 0, 0, data=self.cdraw[0])
         for n, d in enumerate(self.cdraw[2:]):
-            self.cg.loadEntry("T", 0, 1+(2*n), data=d[0])
-            self.cg.loadEntry("T", 0, 2+(2*n), data=d[1])
+            self.cg.loadEntry("T", 0, 1 + (2 * n), data=d[0])
+            self.cg.loadEntry("T", 0, 2 + (2 * n), data=d[1])
         self.cg.focusField("T", 0, 1, clr=False)
         self.opts["mf"].startLoop()
         self.doSetFont(self.nfs)
@@ -1532,8 +1545,10 @@
         if not w:
             nam = ""
         else:
-            nam = self.alltabs[w][0] + ", " + self.alltabs[w][1][0]
-        self.cg.loadEntry(frt, pag, p+1, data=nam)
+            nam = self.alltabs[w][0].upper()
+            if self.alltabs[w][1]:
+                nam = "%s, %s" % (nam, self.alltabs[w][1][0].upper())
+        self.cg.loadEntry(frt, pag, p + 1, data=nam)
 
     def doChgEnd(self):
         z = 0
@@ -1544,8 +1559,8 @@
                 y = ((x - 8) / 2) + 2
             else:
                 y = (x / 2) + 2
-            self.adraw3[self.seq+z][y] = [self.cg.t_work[0][0][x],
-                self.cg.t_work[0][0][x+1]]
+            self.adraw3[self.seq + z][y] = [self.cg.t_work[0][0][x],
+                self.cg.t_work[0][0][x + 1]]
         self.doChgExit()
 
     def doChgExit(self):

=== modified file 'bwl/bc2020.py'
--- bwl/bc2020.py	2015-08-26 08:52:51 +0000
+++ bwl/bc2020.py	2015-09-22 12:54:12 +0000
@@ -675,12 +675,14 @@
         fpdf.output(pdfnam, "F")
         head = "Match Selections for %s" % self.disp
         doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            view=self.pr.repprt[1], prtnam=self.pr.repprt[2],
-            mail=self.pr.repeml[2])
+            repprt=self.pr.repprt, repeml=self.pr.repeml)
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):
-        return "%s, %s" % (snam, fnam.split()[0][0].upper())
+        if fnam:
+            return "%s, %s" % (snam.upper(), fnam.split()[0][0].upper())
+        else:
+            return snam.upper()
 
     def doQuit(self, widget=None):
         self.df.closeProcess()

=== modified file 'bwl/bc2030.py'
--- bwl/bc2030.py	2014-12-30 15:37:38 +0000
+++ bwl/bc2030.py	2015-09-22 09:38:25 +0000
@@ -283,8 +283,9 @@
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):
-        for i in fnam.split():
-            snam = "%s %s" % (snam, i[0].capitalize())
-        return snam
+        if fnam:
+            for i in fnam.split():
+                snam = "%s %s" % (snam, i[0])
+        return snam.upper()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc2040.py'
--- bwl/bc2040.py	2015-08-25 15:02:35 +0000
+++ bwl/bc2040.py	2015-09-22 09:43:21 +0000
@@ -253,11 +253,12 @@
         self.opts["mf"].closeLoop()
 
     def getName(self, chk):
-        name = "%s," % chk[0]
-        init = chk[1].split()
-        for i in init:
-            name = "%s %s" % (name, i.upper())
-        return name
+        name = chk[0]
+        if chk[1]:
+            name += ","
+            for i in chk[1].split():
+                name = "%s %s" % (name, i)
+        return name.upper()
 
     def doPaid(self, frt, pag, r, c, p, i, w):
         self.paid = w

=== modified file 'bwl/bc2050.py'
--- bwl/bc2050.py	2015-08-26 08:52:51 +0000
+++ bwl/bc2050.py	2015-09-28 14:19:03 +0000
@@ -105,7 +105,7 @@
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt, view=("Y","V"))
+            eflds=fld, tend=tnd, txit=txt, view=("Y","V"), mail=("Y","Y"))
         self.df.setWidget(self.df.topEntry[0][10][2][0], state="hide")
 
     def doCmpCod(self, frt, pag, r, c, p, i, w):
@@ -350,8 +350,7 @@
             if ok == "yes":
                 callModule(self.opts["mf"], None, "bc3090",
                     coy=[self.opts["conum"], self.opts["conam"]],
-                    args=[self.ccod, self.df.repprt[1],
-                    self.df.repprt[2], self.df.repeml[2]])
+                    args=[self.ccod, self.df.repprt, self.df.repeml])
             if self.game == 1 and self.cfmat == "R":
                 self.sql.delRec("bwlgme", where=[("bcg_cono", "=",
                     self.opts["conum"]), ("bcg_ccod", "=", self.ccod),
@@ -878,8 +877,10 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2])
+            head = "%s Draw" % self.cdes
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                head=head, pdfnam=pdfnam, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doCompletionDates(self):
@@ -1028,7 +1029,9 @@
                 seeds.append(self.sp.t_work[0][0][x*2+1])
         if w in seeds:
             return "Invalid Seed, Already Seeded"
-        nam = chk[0] + ", " + chk[1][0]
+        nam = chk[0].strip()
+        if chk[1]:
+            nam = "%s, %s" % (nam, chk[1][0])
         self.sp.loadEntry(frt, pag, p+1, data=nam)
         if ((p + 1) / 2) == self.seednum:
             return "nd"
@@ -1276,7 +1279,9 @@
         skp = self.sql.getRec(tables="bwltab", cols=["btb_surname",
             "btb_names"], where=[("btb_cono", "=", self.opts["conum"]),
             ("btb_tab", "=", skip)], limit=1)
-        name = "%s, %s" % (skp[0], skp[1][0])
+        name = skp[0].strip()
+        if skp[1]:
+            name = "%s, %s" % (name, skp[1][0])
         if seed:
             name = "%s (%s)" % (name, seed)
         return name
@@ -1327,19 +1332,31 @@
                         "btb_surname", "btb_names"], where=[("btb_cono", "=",
                         self.opts["conum"]), ("btb_tab", "=", skp[3])],
                         limit=1)
-                a = CCD("%s, %s" % (skp[1], skp[2].split()[0]), "NA", 30)
+                nam = skp[1].strip()
+                if skp[2]:
+                    nam = "%s, %s" % (nam, skp[2].split()[0])
+                a = CCD(nam, "NA", 30)
                 b = CCD(skp[4], "UA", 2)
+                nam = opp[1].strip()
                 if opp[2]:
-                    c = CCD("%s, %s" % (opp[1], opp[2].split()[0]), "NA", 30)
-                else:
-                    c = CCD(opp[1], "NA", 30)
+                    nam = "%s, %s" % (nam, opp[2].split()[0])
+                c = CCD(nam, "NA", 30)
                 self.printLine(a.disp, " %s " % b.disp, c.disp)
                 self.pglin += 1
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             "report", ext="pdf")
         self.fpdf.output(pdfnam, "F")
-        doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2])
+        if self.game in (1, 21, 31, 41, 51, 61, 71, 81, 91):
+            desc = "%sst" % self.game
+        elif self.game in (2, 22, 32, 42, 52, 62, 72, 82, 92):
+            desc = "2nd"
+        elif self.game in (3, 23, 33, 43, 53, 63, 73, 83, 93):
+            desc = "3rd"
+        else:
+            desc = "%sth" % self.game
+        head = "%s Draw for the %s game" % (self.cdes, desc)
+        doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
+            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
 
     def pageHeading(self, date=False):
         self.fpdf.add_page()
@@ -1467,8 +1484,8 @@
             for key in self.form.newkey:
                 self.form.doDrawDetail(self.form.newdic[key])
         self.form.output(pdfnam, "F")
-        doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+        doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+            pdfnam=pdfnam, repprt=self.df.repprt)
 
     def doLoadStatic(self):
         tdc = self.form.sql.tpldet_col
@@ -1485,7 +1502,11 @@
 
     def getName(self, data):
         if data:
-            return "%s. %s (%s)" % (data[2].split()[0][0], data[1], data[0])
+            if data[2]:
+                name = "%s. " % data[2].split()[0][0]
+            else:
+                name = ""
+            return "%s%s (%s)" % (name, data[1], data[0])
         else:
             return "* Bye *"
 

=== modified file 'bwl/bc2060.py'
--- bwl/bc2060.py	2014-12-30 15:37:38 +0000
+++ bwl/bc2060.py	2015-09-22 09:47:36 +0000
@@ -174,14 +174,20 @@
         self.skip = w
         self.old_opp = skp[2]
         self.old_rink = skp[3]
-        name = "%s, %s" % tuple(skp[:2])
+        if skp[1]:
+            name = "%s, %s" % tuple(skp[:2])
+        else:
+            name = skp[0]
         self.df.loadEntry(frt, pag, p+1, data=name)
         if self.old_opp:
             self.df.loadEntry(frt, pag, p+2, data=self.old_opp)
             opp = self.sql.getRec(tables="bwltab", cols=["btb_surname",
                 "btb_names"], where=[("btb_cono", "=", self.opts["conum"]),
                 ("btb_tab", "=", skp[2])], limit=1)
-            name = "%s, %s" % tuple(opp[:2])
+            if opp[1]:
+                name = "%s, %s" % tuple(opp[:2])
+            else:
+                name = opp[0]
             self.df.loadEntry(frt, pag, p+3, data=name)
         if self.old_rink:
             self.df.loadEntry(frt, pag, p+4, data=self.old_rink)
@@ -196,7 +202,10 @@
             return "Invalid Opponents Code"
         self.new_opp = w
         self.chg_skp = opp[2]
-        name = "%s, %s" % tuple(opp[:2])
+        if opp[1]:
+            name = "%s, %s" % tuple(opp[:2])
+        else:
+            name = opp[0]
         self.df.loadEntry(frt, pag, p+1, data=name)
 
     def doRink(self, frt, pag, r, c, p, i, w):

=== modified file 'bwl/bc2070.py'
--- bwl/bc2070.py	2015-08-25 15:02:35 +0000
+++ bwl/bc2070.py	2015-09-25 09:33:01 +0000
@@ -101,7 +101,7 @@
         cnd = ((self.doEnd,"y"),)
         cxt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            rows=(18,), eflds=fld, butt=but, tend=tnd, txit=txt,
+            rows=(19,), eflds=fld, butt=but, tend=tnd, txit=txt,
             cend=cnd, cxit=cxt)
 
     def doCmpCod(self, frt, pag, r, c, p, i, w):
@@ -111,7 +111,7 @@
         if not com:
             return "Invalid Competition Code"
         self.ccod = w
-        self.df.loadEntry(frt, pag, p+1, data=com[0])
+        self.df.loadEntry(frt, pag, p + 1, data=com[0])
         bwltyp = self.sql.getRec(tables="bwltyp", where=[("bct_cono", "=",
             self.opts["conum"]), ("bct_code", "=", com[1])], limit=1)
         self.cfmat = bwltyp[self.sql.bwltyp_col.index("bct_cfmat")]
@@ -142,9 +142,9 @@
         for game in chk:
             self.gcod = game[0]
             if not game[1]:
-                self.df.loadEntry(frt, pag, p+2, data=self.gcod)
+                self.df.loadEntry(frt, pag, p + 2, data=self.gcod)
                 break
-        self.df.loadEntry(frt, pag, p+3, data=self.ends)
+        self.df.loadEntry(frt, pag, p + 3, data=self.ends)
 
     def doGamCod(self, frt, pag, r, c, p, i, w):
         chk = self.sql.getRec(tables="bwlgme", cols=["bcg_aflag",
@@ -226,22 +226,28 @@
         self.opp = chk[2]
         if self.opp > 900000:
             return "This Skip Had a Bye"
-        name = "%s, %s" % tuple(chk[:2])
-        self.df.loadEntry(frt, pag, p+1, data=name)
+        if chk[1]:
+            name = "%s, %s" % tuple(chk[:2])
+        else:
+            name = chk[0]
+        self.df.loadEntry(frt, pag, p + 1, data=name)
         if self.only == "N":
-            self.df.loadEntry(frt, pag, p+2, data=chk[3])
-        self.df.loadEntry(frt, pag, p+3, data=chk[5])
-        self.df.loadEntry(frt, pag, p+4, data=self.opp)
+            self.df.loadEntry(frt, pag, p + 2, data=chk[3])
+        self.df.loadEntry(frt, pag, p + 3, data=chk[5])
+        self.df.loadEntry(frt, pag, p + 4, data=self.opp)
         chk = self.sql.getRec(tables=["bwlgme", "bwltab"], cols=["btb_surname",
             "btb_names", "bcg_shots_for", "bcg_shots_agt", "bcg_points"],
             where=[("bcg_cono", "=", self.opts["conum"]), ("bcg_ccod", "=",
             self.ccod), ("bcg_scod", "=", self.opp), ("bcg_game", "=",
             self.gcod), ("btb_tab=bcg_scod",)], limit=1)
-        name = "%s, %s" % (chk[0], chk[1])
-        self.df.loadEntry(frt, pag, p+5, data=name)
+        if chk[1]:
+            name = "%s, %s" % tuple(chk[:2])
+        else:
+            name = chk[0]
+        self.df.loadEntry(frt, pag, p + 5, data=name)
         if self.only == "N":
-            self.df.loadEntry(frt, pag, p+6, data=chk[2])
-        self.df.loadEntry(frt, pag, p+7, data=chk[4])
+            self.df.loadEntry(frt, pag, p + 6, data=chk[2])
+        self.df.loadEntry(frt, pag, p + 7, data=chk[4])
         if self.only == "Y":
             self.mpts = self.totpts
             self.s_for = self.s_agt = 0
@@ -252,13 +258,13 @@
             self.s_for = w
             if not self.s_for or (not self.totpts and not self.bonus == "Y"):
                 self.p_for = w
-                self.df.loadEntry(frt, pag, p+1, data=0)
+                self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
         else:
             self.s_agt = w
             if not self.s_agt or (not self.totpts and not self.bonus == "Y"):
                 self.p_agt = w
-                self.df.loadEntry(frt, pag, p+1, data=0)
+                self.df.loadEntry(frt, pag, p + 1, data=0)
                 return "sk1"
             self.mpts = self.totpts
             if self.bonus == "N":
@@ -276,12 +282,15 @@
             return "Invalid Decimal in Points"
         if i == 3:
             self.p_for = w
-            self.df.loadEntry(frt, pag, p+1, data=self.opp)
+            self.df.loadEntry(frt, pag, p + 1, data=self.opp)
             chk = self.sql.getRec(tables="bwltab", cols=["btb_surname",
                 "btb_names"], where=[("btb_cono", "=", self.opts["conum"]),
                 ("btb_tab", "=", self.opp)], limit=1)
-            name = "%s, %s" % tuple(chk)
-            self.df.loadEntry(frt, pag, p+2, data=name)
+            if chk[1]:
+                name = "%s, %s" % tuple(chk[:2])
+            else:
+                name = chk[0]
+            self.df.loadEntry(frt, pag, p + 2, data=name)
             if self.only == "Y":
                 return "sk3"
             else:
@@ -355,20 +364,26 @@
                 ("bcg_game", "=", self.gcod), ("btb_tab=bcg_scod",)], limit=1)
             idx = seq * 8
             self.df.loadEntry("C", 0, idx, data=rec[0])
-            name = "%s, %s" % tuple(skp[:2])
-            self.df.loadEntry("C", 0, idx+1, data=name)
-            self.df.loadEntry("C", 0, idx+2, data=skp[2])
-            self.df.loadEntry("C", 0, idx+3, data=skp[3])
+            if skp[1]:
+                name = "%s, %s" % tuple(skp[:2])
+            else:
+                name = skp[0]
+            self.df.loadEntry("C", 0, idx + 1, data=name)
+            self.df.loadEntry("C", 0, idx + 2, data=skp[2])
+            self.df.loadEntry("C", 0, idx + 3, data=skp[3])
             opp = self.sql.getRec(tables=["bwlgme", "bwltab"],
                 cols=["btb_surname", "btb_names", "bcg_shots_for",
                 "bcg_points"], where=[("bcg_cono", "=", self.opts["conum"]),
                 ("bcg_ccod", "=", self.ccod), ("bcg_scod", "=", rec[1]),
                 ("bcg_game", "=", self.gcod), ("btb_tab=bcg_scod",)], limit=1)
-            self.df.loadEntry("C", 0, idx+4, data=rec[1])
-            name = "%s, %s" % tuple(opp[:2])
-            self.df.loadEntry("C", 0, idx+5, data=name)
-            self.df.loadEntry("C", 0, idx+6, data=opp[2])
-            self.df.loadEntry("C", 0, idx+7, data=opp[3])
+            self.df.loadEntry("C", 0, idx + 4, data=rec[1])
+            if opp[1]:
+                name = "%s, %s" % tuple(opp[:2])
+            else:
+                name = opp[0]
+            self.df.loadEntry("C", 0, idx + 5, data=name)
+            self.df.loadEntry("C", 0, idx + 6, data=opp[2])
+            self.df.loadEntry("C", 0, idx + 7, data=opp[3])
             self.df.advanceLine(0)
             if seq < 17:
                 seq += 1

=== modified file 'bwl/bc3010.py'
--- bwl/bc3010.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3010.py	2015-08-28 11:26:22 +0000
@@ -100,7 +100,7 @@
         self.df.closeProcess()
         PrintDraw(self.opts["mf"], self.opts["conum"], self.date, self.time,
             takings=self.takings, listing=self.listing, board=self.board,
-            empty=self.empty, prtnam=self.df.repprt[2])
+            empty=self.empty, repprt=self.df.repprt)
         self.printed = True
         self.opts["mf"].closeLoop()
 

=== modified file 'bwl/bc3020.py'
--- bwl/bc3020.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3020.py	2015-09-28 14:22:32 +0000
@@ -43,7 +43,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Tabs Draw Summary")
         r1s = (("Yes","Y"), ("No","N"))
         fld = (
@@ -55,8 +55,8 @@
                 "Y","N",self.doTabs,None,None,None))
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], tops=False, title=self.tit,
-            eflds=fld, tend=tnd, txit=txt, view=("N","V"))
+        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
+            eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("Y","Y"))
 
     def doStartPeriod(self, frt, pag, r, c, p, i, w):
         if w:
@@ -200,28 +200,34 @@
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
+        head = "Tabs Draw Summary for the period %s to %s" % (self.start.disp,
+            self.end.disp)
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            head=head, repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def getName(self, tab):
         self.clash = False
         if not tab:
             return ""
-        nam = self.sql.getRec(tables="bwltab", cols=["btb_surname",
+        rec = self.sql.getRec(tables="bwltab", cols=["btb_surname",
             "btb_names", "btb_rate1"], where=[("btb_tab", "=", tab)],
             limit=1)
-        if not nam:
-            nam = ["VISITOR", "A", 0]
+        if not rec:
+            rec = ["VISITOR", "A", 0]
+            nam = "VISITOR, A"
         else:
+            if rec[1]:
+                nam = "%s, %s" % (rec[0], rec[1][0])
+            else:
+                nam = rec[0]
             if tab in self.dic[self.tab]:
                 self.clash = True
             self.dic[self.tab].append(tab)
         if self.heading == "main":
-            return "%s, %s" % (nam[0], nam[1][0])
+            return nam
         else:
-            return "%s, %s (%s)" % (nam[0], nam[1][0], nam[2])
+            return "%s (%s)" % (nam, rec[2])
 
     def header(self):
         self.fpdf.set_font("Arial","B",15)

=== modified file 'bwl/bc3030.py'
--- bwl/bc3030.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3030.py	2015-09-28 13:52:32 +0000
@@ -61,7 +61,7 @@
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("Y","Y"))
 
     def doFmat(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="bwlflf", where=[("bff_cono", "=",
@@ -289,8 +289,7 @@
         fpdf.output(pdfnam, "F")
         head = "Match Assessment Forms for %s" % self.disp
         doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):
@@ -298,6 +297,9 @@
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):
-        return "%s, %s" % (snam, fnam.split()[0][0].upper())
+        if fnam:
+            return "%s, %s" % (snam.upper(), fnam.split()[0][0].upper())
+        else:
+            return snam.upper()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc3040.py'
--- bwl/bc3040.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3040.py	2015-09-28 13:53:55 +0000
@@ -59,7 +59,7 @@
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tend=tnd,
-            txit=txt, view=("N","V"), mail=("Y","N"))
+            txit=txt, view=("N","V"), mail=("Y","Y"))
 
     def doFmat(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="bwlflf", cols=["bff_desc", "bff_logo"],
@@ -188,8 +188,9 @@
                 order="bft_skip, bft_position")
             for num, player in enumerate(teams):
                 init = ""
-                for i in player[0].split():
-                    init = init + i[0].capitalize() + " "
+                if player[0]:
+                    for i in player[0].split():
+                        init = init + i[0].upper() + " "
                 pos = tab2[((num % 4) + 1) * 4][1][num / 4] + .4
                 fpdf.drawText(x=20*cw, y=pos*ld, txt=init.strip())
                 fpdf.drawText(x=30*cw, y=pos*ld, txt=player[1])
@@ -198,8 +199,9 @@
                 "btb_surname", "btb_bsano"], where=[("btb_cono", "=",
                 self.opts["conum"]), ("btb_tab", "=", match[4])], limit=1)
             init = ""
-            for i in captain[0].split():
-                init = init + i[0].capitalize() + " "
+            if captain[0]:
+                for i in captain[0].split():
+                    init = init + i[0].upper() + " "
             fpdf.drawText(x=20*cw, y=(tab3[8][1][0]+.4)*ld, txt=init.strip())
             fpdf.drawText(x=30*cw, y=(tab3[8][1][0]+.4)*ld, txt=captain[1])
             fpdf.drawText(x=10*cw, y=54*ld, txt="Declaration")
@@ -214,8 +216,7 @@
         fpdf.output(pdfnam, "F")
         head = "Match Declaration Forms for %s" % self.disp
         doPrinter(mf=self.opts["mf"], head=head, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.closeProcess()
 
     def doExit(self):

=== modified file 'bwl/bc3050.py'
--- bwl/bc3050.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3050.py	2015-09-28 13:57:18 +0000
@@ -62,7 +62,7 @@
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            eflds=fld, tend=tnd, txit=txt, view=("Y","V"), mail=("Y","Y"))
 
     def doFmat(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="bwlflf", where=[("bff_cono", "=",
@@ -118,6 +118,8 @@
                 self.date), ("bft_skip", "=", player[0])])
             tot = sc[0][0] + sc[1][0] + sc[2][0] + sc[3][0]
             tav = self.getHistory(player[1])
+            if tav == "error":
+                break
             if not tav:
                 tav = tot
             if self.forms == 1:
@@ -140,31 +142,32 @@
                     tav, player[10]])
             if pos == 4:
                 data.append(["BLANK"])
-        head = ("Match Assessment for %s Match Played on %s" % \
-            (self.fnam, self.disp),)
-        cols = [
-            ["a", "NA",  20, "Player",  "y"],
-            ["b", "NA",   4, "Posn",    "y"],
-            ["c", "UI",   3, "For",     "y"],
-            ["d", "UI",   3, "Agt",     "y"],
-            ["e", "UI",   1, "P",       "y"]]
-        if self.forms == 1:
-            cols.append(["f", "UD", 4.1, " Ass",    "y"])
-        elif self.forms == 4:
+        if not tav == "error":
+            head = ("Match Assessment for %s Match Played on %s" % \
+                (self.fnam, self.disp),)
+            cols = [
+                ["a", "NA",  20, "Player",  "y"],
+                ["b", "NA",   4, "Posn",    "y"],
+                ["c", "UI",   3, "For",     "y"],
+                ["d", "UI",   3, "Agt",     "y"],
+                ["e", "UI",   1, "P",       "y"]]
+            if self.forms == 1:
+                cols.append(["f", "UD", 4.1, " Ass",    "y"])
+            elif self.forms == 4:
+                cols.extend([
+                    ["f", "UD", 4.1, " Skp",    "y"],
+                    ["g", "UD", 4.1, " 3rd",    "y"],
+                    ["h", "UD", 4.1, " 2nd",    "y"],
+                    ["i", "UD", 4.1, "Lead",    "y"],
+                    ["j", "UD", 4.1, " Avg",    "y"],
+                    ["k", "UD", 4.1, " Own",    "y"],
+                    ["l", "UD", 4.1, " Adj",    "y"]])
             cols.extend([
-                ["f", "UD", 4.1, " Skp",    "y"],
-                ["g", "UD", 4.1, " 3rd",    "y"],
-                ["h", "UD", 4.1, " 2nd",    "y"],
-                ["i", "UD", 4.1, "Lead",    "y"],
-                ["j", "UD", 4.1, " Avg",    "y"],
-                ["k", "UD", 4.1, " Own",    "y"],
-                ["l", "UD", 4.1, " Adj",    "y"]])
-        cols.extend([
-            ["m", "UD", 4.1, " ATD",    "y"],
-            ["n", "NA",  70, "Remarks", "y"]])
-        RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
-            cols=cols, ttype="D", view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                ["m", "UD", 4.1, " ATD",    "y"],
+                ["n", "NA",  70, "Remarks", "y"]])
+            RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def getHistory(self, player):
@@ -180,6 +183,7 @@
         if not sdate:
             showError(self.opts["mf"].body, "ERROR",
                 "No Start Date of 1st Round")
+            return "error"
         rounds = self.sql.getRec(tables="bwlflm", cols=["bfm_round",
             "bfm_date"], where=[("bfm_cono", "=", self.opts["conum"]),
             ("bfm_fmat", "=", self.fmat), ("bfm_type", "=", self.ftyp),
@@ -220,6 +224,9 @@
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):
-        return "%s, %s" % (snam, fnam.split()[0][0].upper())
+        if fnam:
+            return "%s, %s" % (snam.upper(), fnam.split()[0][0].upper())
+        else:
+            return snam.upper()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc3060.py'
--- bwl/bc3060.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3060.py	2015-09-28 13:57:07 +0000
@@ -192,8 +192,8 @@
                 ["l", "UD", 4.1, "HA",     "y"],
                 ["m", "UD", 4.1, "NA",     "y"]])
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
-            cols=cols, ttype="D", blank=True, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            cols=cols, ttype="D", blank=True, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):
@@ -201,6 +201,9 @@
         self.opts["mf"].closeLoop()
 
     def getName(self, snam, fnam):
-        return "%s, %s" % (snam, fnam.split()[0][0].upper())
+        if fnam:
+            return "%s, %s" % (snam.upper(), fnam.split()[0][0].upper())
+        else:
+            return snam.upper()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'bwl/bc3070.py'
--- bwl/bc3070.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3070.py	2015-09-28 14:24:23 +0000
@@ -50,7 +50,7 @@
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt, view=("N","V"))
+            eflds=fld, tend=tnd, txit=txt, view=("N","V"), mail=("Y","Y"))
 
     def doCmpCod(self, frt, pag, r, c, p, i, w):
         chk = self.sql.getRec(tables="bwlcmp", cols=["bcm_name"],
@@ -80,16 +80,19 @@
             self.fpdf.set_font("Courier","",9)
             cwth = self.fpdf.get_string_width("X")
             for num, rec in enumerate(recs):
-                nm = rec[0].strip() + ", %s" % rec[1].split()[0]
+                nm = rec[0].strip()
+                if rec[1]:
+                    nm += ", %s" % rec[1].split()[0].upper()
                 self.fpdf.drawText(txt=nm, w=cwth*31, h=5, ln=0)
                 self.fpdf.drawText(txt=rec[2], w=cwth*16, h=5, ln=0)
                 self.fpdf.drawText(txt=rec[3], w=cwth*41, h=5, ln=1)
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], pdfnam=pdfnam,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+            head = "%s - Entered Teams" % self.cnam
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=head, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def header(self):

=== modified file 'bwl/bc3080.py'
--- bwl/bc3080.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3080.py	2015-08-28 11:26:22 +0000
@@ -86,8 +86,8 @@
         pdfnam = getModName(self.mf.rcdic["wrkdir"], __name__, self.conum,
             ext="pdf")
         self.fpdf.output(pdfnam, "F")
-        doPrinter(mf=self.mf, pdfnam=pdfnam, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+        doPrinter(mf=self.mf, pdfnam=pdfnam, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.mf.closeLoop()
 
     def drawFormat(self):

=== modified file 'bwl/bc3090.py'
--- bwl/bc3090.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3090.py	2015-09-28 13:44:03 +0000
@@ -51,7 +51,7 @@
         tnd = ((self.doEnd,"y"),)
         txt = (self.doExit,)
         self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
+            eflds=fld, tend=tnd, txit=txt, view=("Y","V"), mail=("Y","Y"))
 
     def doCmpCod(self, frt, pag, r, c, p, i, w):
         ret = self.getCompDetails(w)
@@ -116,8 +116,10 @@
             cols=col, where=whr, group=grp, order=odr)
         data = []
         for skip in skips:
-            nam = "%s, %s" % (skip[1], skip[2].split()[0])
-            dat = [skip[0], "%s" % nam.strip()]
+            nam = skip[1].strip()
+            if skip[2]:
+                nam = "%s, %s" % (nam, skip[2].split()[0])
+            dat = [skip[0], nam]
             ops = []
             rks = []
             dup = ["-", "-"]
@@ -156,16 +158,13 @@
                 ["e%s" % x, "UA", 2, "Rk",  "y"]])
         cols.append(["f", "UA",  2, "OR",  "y"])
         if self.auto:
-            view = self.opts["args"][1]
-            prtnam = self.opts["args"][2]
-            mail = self.opts["args"][3]
+            repprt = self.opts["args"][1]
+            repeml = self.opts["args"][2]
         else:
-            view = self.df.repprt[1]
-            prtnam = self.df.repprt[2]
-            mail = self.df.repeml[2]
+            repprt = self.df.repprt
+            repeml = self.df.repprt
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
-            cols=cols, ttype="D", pages=False, view=view, prtnam=prtnam,
-            mail=mail)
+            cols=cols, ttype="D", pages=False, repprt=repprt, repeml=repeml)
         if not self.auto:
             self.opts["mf"].closeLoop()
 

=== modified file 'bwl/bc3100.py'
--- bwl/bc3100.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3100.py	2015-09-22 10:29:45 +0000
@@ -160,7 +160,10 @@
                         self.pageHeading()
                     self.groupHeading(g)
                     lastg = g
-                nam = "%s, %s" % (snam, fnam.split()[0])
+                if fnam:
+                    nam = "%s, %s" % (snam.upper(), fnam.split()[0].upper())
+                else:
+                    nam = snam.upper()
                 a = CCD(num+1, "UI", 3)
                 b = CCD(nam, "NA", 30)
                 c = CCD(sfor, "SD", 7.1)
@@ -173,7 +176,7 @@
             "report", ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2])
+            repprt=self.df.repprt)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self):

=== modified file 'bwl/bc3110.py'
--- bwl/bc3110.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3110.py	2015-09-27 10:04:29 +0000
@@ -170,7 +170,10 @@
                         self.pageHeading()
                     self.groupHeading(g)
                     lastg = g
-                nam = "%s, %s" % (snam, fnam.split()[0])
+                if fnam:
+                    nam = "%s, %s" % (snam.upper(), fnam.split()[0].upper())
+                else:
+                    nam = snam.upper()
                 a = CCD(num+1, "UI", 3)
                 b = CCD(nam, "NA", 30)
                 c = CCD(sfor, "SD", 7.1)
@@ -215,8 +218,11 @@
                 wins[gcod] = []
                 for x in xrange(self.grps[gcod][1]):
                     allp.append(recs[x][0])
-                    wins[gcod].append("%s, %s" % (recs[x][1],
-                        recs[x][2].split()[0]))
+                    if recs[x][2]:
+                        nam = "%s, %s" % (recs[x][1], recs[x][2].split()[0])
+                    else:
+                        nam = recs[x][1]
+                    wins[gcod].append(nam)
             # Session Winners
             sess = {}
             for gme in xrange(1, self.games + 1):
@@ -261,7 +267,11 @@
                         allp.append(rec[0])
                         if not gme in sess:
                             sess[gme] = {}
-                        sess[gme][gpc] = "%s, %s" % (rec[1], rec[2].split()[0])
+                        if rec[2]:
+                            nam = "%s, %s" % (rec[1], rec[2].split()[0])
+                        else:
+                            nam = rec[1]
+                        sess[gme][gpc] = nam
                         done = gpc
             self.pageHeading("S")
             mess = "Session Winners"
@@ -370,7 +380,7 @@
             "report", ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2])
+            repprt=self.df.repprt)
         self.opts["mf"].closeLoop()
 
     def pageHeading(self, htyp=None):

=== modified file 'bwl/bc3120.py'
--- bwl/bc3120.py	2015-08-26 08:52:51 +0000
+++ bwl/bc3120.py	2015-09-22 10:35:02 +0000
@@ -76,7 +76,11 @@
                     font=["courier", "B", 24], border="TLRB", fill=1)
                 fpdf.drawText("Name", w=50, h=10, fill=1, ln=0,
                     font=["courier", "B", 18], border="TLRB")
-                fpdf.drawText("%s, %s" % (rec[0], rec[1]), h=10, border="TLRB")
+                if rec[1]:
+                    nam = "%s, %s" % (rec[0].upper(), rec[1].split()[0].upper())
+                else:
+                    nam = rec[0].upper()
+                fpdf.drawText(nam, h=10, border="TLRB")
                 fpdf.drawText("Email", w=50, h=10, border="TLRB", fill=1, ln=0)
                 fpdf.drawText(rec[2], h=10, border="TLRB")
                 fpdf.drawText("Phone", w=50, h=10, border="TLRB", fill=1, ln=0)
@@ -88,8 +92,8 @@
                 self.opts["conum"], ext="pdf")
             fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'bwl/bcc110.py'
--- bwl/bcc110.py	2015-08-25 15:02:35 +0000
+++ bwl/bcc110.py	2015-09-03 04:31:23 +0000
@@ -56,14 +56,15 @@
         r4s = (("S32L-S32L","A"),("S32L-L23S","B"))
         if not self.memctl:
             self.fld = [
-                (("T",0,0,0),["ORB",r1s],0,"M/L Integration")]
+                (("T",0,0,0),["ORB",r1s],0,"M/L Integration"),
+                (("T",0,1,0),("ORB",r1s),0,"Same Numbers")]
         else:
             self.fld = [
                 (("T",0,0,0),["IRB",r1s],0,"M/L Integration","",
-                    self.acc[1],"N",self.doMlint,None,None,None)]
+                    self.acc[1],"N",self.doMlint,None,None,None),
+                (("T",0,1,0),("IRB",r1s),0,"Same Numbers","",
+                    self.acc[2],"N",self.doSame,None,None,None)]
         self.fld.extend([
-            (("T",0,1,0),("IRB",r1s),0,"Same Numbers","",
-                self.acc[2],"N",self.doSame,None,None,None),
             (("T",0,2,0),"IUI",6,"Male Start Seq","",
                 self.acc[3],"N",self.doMStart,None,None,("notzero",)),
             (("T",0,3,0),"IUI",6,"Female Start Seq","",

=== modified file 'crs/cr1010.py'
--- crs/cr1010.py	2015-08-25 15:02:35 +0000
+++ crs/cr1010.py	2015-08-28 13:49:45 +0000
@@ -268,13 +268,13 @@
             self.doEndAll()
 
     def doPrint(self, widget=None):
-        state = self.df.disableButtonsTagsTags()
+        state = self.df.disableButtonsTags()
         self.df.setWidget(self.df.mstFrame, state="hide")
         TabPrt(self.opts["mf"], self.opts["conum"], self.opts["conam"],
             name=__name__, tabs="crsmst", where=[("crm_cono", "=",
             self.opts["conum"]), ("crm_acno", "=", self.acno)])
         self.df.setWidget(self.df.mstFrame, state="show")
-        self.df.enableButtonsTagsTags(state=state)
+        self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def doImport(self, widget=None):

=== modified file 'crs/cr2010.py'
--- crs/cr2010.py	2015-08-25 15:02:35 +0000
+++ crs/cr2010.py	2015-09-30 15:37:06 +0000
@@ -14,8 +14,7 @@
 """
 
 import time
-from TartanClasses import AgeAll, ASD, Batches, GetCtl, LoanInterest, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import AgeAll, ASD, Batches, GetCtl, Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, chkGenAcc, getNextCode
 from tartanFunctions import getVatRate, paymentDate, showError
 from tartanWork import crtrtp
@@ -44,6 +43,7 @@
         # Check for Company record
         self.gc = GetCtl(self.opts["mf"])
         self.allcoy = self.opts["conum"]
+        self.allnam = self.opts["conam"]
         ctlmst = self.gc.getCtl("ctlmst", self.allcoy)
         if not ctlmst:
             return
@@ -156,8 +156,7 @@
                     ("lm2_desc", "", 0, "Description", "Y")),
                 "whera": [
                     ("C", "lm2_cono", 0, 2),
-                    ("C", "lm2_acno", 0)],
-                "index": 0}
+                    ("C", "lm2_acno", 0)]}
         if self.opts["rtn"] in (1, 4) and self.slnmod:
             wgm = {
                 "stype": "R",
@@ -176,8 +175,7 @@
                 "where": [("wlm_cono", "=", self.opts["conum"])],
                 "whera": [
                     ("C", "wgm_cono", 0, 2),
-                    ("C", "wlm_empno", 0)],
-                "index": 0}
+                    ("C", "wlm_empno", 0)]}
             ced = {
                 "stype": "R",
                 "tables": ("wagedc",),
@@ -253,7 +251,7 @@
             if self.opts["rtn"] in (1, 4) and self.lonmod:
                 fld.extend([
                     (("T",nxt,0,0),"OSD",13.2,"Unallocated Balance"),
-                    (("C",nxt,0,0),"IUI",7,"Acc-Num","Account Number",
+                    (("C",nxt,0,0),"IUA",7,"Acc-Num","Account Number",
                         0,"N",self.doLonAcc,lm1,None,None),
                     (("C",nxt,0,1),"ONA",30,"Name"),
                     (("C",nxt,0,2),"IUI",2,"Ln","Loan Number",
@@ -262,11 +260,13 @@
                         "","N",self.doLonDes,None,None,("notblank",)),
                     (("C",nxt,0,4),"ISD",13.2,"Amount","",
                         "","N",self.doLonAmt,None,None,("efld",)),
-                    (("C",nxt,0,5),"IUD",6.2,"Rate-%","Interest Rate",
-                        "","N",self.doLonInt,None,None,None),
-                    (("C",nxt,0,6),"IUI",3,"Mth","Period in Months",
+                    (("C",nxt,0,5),"IUD",6.2,"DRte-%","Debit Rate",
+                        "","N",self.doLonDri,None,None,None),
+                    (("C",nxt,0,6),"IUD",6.2,"CRte-%","Credit Rate",
+                        "","N",self.doLonDri,None,None,None),
+                    (("C",nxt,0,7),"IUI",3,"Mth","Period in Months",
                         "","N",self.doLonMth,None,None,("efld",)),
-                    (("C",nxt,0,7),"OUD",12.2,"Repayment")])
+                    (("C",nxt,0,8),"OUD",12.2,"Repayment")])
                 self.lonpag = nxt
                 nxt += 1
             if self.opts["rtn"] in (1, 4) and self.slnmod:
@@ -376,12 +376,11 @@
             self.vatamt = 0
 
     def doVatCode1(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        rate = vat[0]
-        self.vatamt = round((self.trnamt * rate / (rate + 100)), 2)
+        self.vatamt = round((self.trnamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.vatamt)
         if self.vatamt == 0:
             return "sk1"
@@ -539,9 +538,9 @@
         self.opts["mf"].closeLoop()
 
     def doCoyNum(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="ctlmst", cols=["ctm_name"],
+        nam = self.sql.getRec(tables="ctlmst", cols=["ctm_name"],
             where=[("ctm_cono", "=", w)], limit=1)
-        if not acc:
+        if not nam:
             return "Invalid Company, Missing"
         if self.incoac and w not in self.incoac:
             return "Invalid Company, No Intercompany Record 1"
@@ -553,7 +552,18 @@
         self.ctlctl = self.gc.getCtl("ctlctl", w)
         if not self.ctlctl:
             return "rf"
+        if self.lonmod:
+            lonctl = self.gc.getCtl("lonctl", self.allcoy)
+            self.lon_gl = lonctl["cln_glint"]
+        else:
+            self.lon_gl = "N"
+        if self.slnmod:
+            slnctl = self.gc.getCtl("wagctl", self.allcoy)
+            self.sln_gl = slnctl["ctw_glint"]
+        else:
+            self.sln_gl = "N"
         self.allcoy = w
+        self.allnam = nam[0]
         self.df.loadEntry(frt, pag, p+1, data=self.glac)
 
     def doGenAcc(self, frt, pag, r, c, p, i, w):
@@ -583,20 +593,19 @@
         if self.gc.chkRec(self.allcoy, ctlctl, ["vat_ctl"]):
             return "Missing or Invalid Control Record"
         self.convat = ctlctl["vat_ctl"]
-        acc = getVatRate(self.sql, self.allcoy, w, self.trndat)
-        if not acc:
+        self.vatrte = getVatRate(self.sql, self.allcoy, w, self.trndat)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        self.vatrat = acc[0]
 
     def doAllAmt(self, frt, pag, r, c, p, i, w):
         if not w:
             incamt = float(ASD(self.trnamt) - ASD(self.allocated))
         elif self.glinp == "E":
-            incamt = round((w * (100 + self.vatrat) / 100), 2)
+            incamt = round((w * (100 + self.vatrte) / 100), 2)
         else:
             incamt = w
-        self.allamt = round((incamt * 100 / (100 + self.vatrat)), 2)
+        self.allamt = round((incamt * 100 / (100 + self.vatrte)), 2)
         self.allvat = float(ASD(incamt) - ASD(self.allamt))
         if self.glinp == "E":
             self.df.loadEntry(frt, pag, p, data=self.allamt)
@@ -637,7 +646,9 @@
             row = int((self.df.last[1][1] - 1) / self.df.colq[1])
             col = (row * self.df.colq[1]) + 1
             self.df.focusField("C", 1, col)
-            if pag in (self.lonpag, self.slnpag):
+            if self.lonmod and pag == self.lonpag:
+                self.opts["mf"].closeLoop()
+            elif self.slnmod and pag == self.slnpag:
                 self.opts["mf"].closeLoop()
 
     def endPage2(self):
@@ -781,13 +792,12 @@
             if yn == "no":
                 return "Invalid Account Number"
             self.newlon = True
-            self.lonrte = 0
             w = callModule(self.opts["mf"], self.df, "ln1010",
-                coy=(self.opts["conum"], self.opts["conam"]),
-                user=self.opts["capnm"], args="auto", ret="acno")
+                coy=(self.allcoy, self.allnam), user=self.opts["capnm"],
+                args="auto", ret="acno")
             self.df.loadEntry(frt, pag, p, data=w)
         acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
-            where=[("lm1_cono", "=", self.opts["conum"]),
+            where=[("lm1_cono", "=", self.allcoy),
             ("lm1_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
@@ -803,25 +813,24 @@
                     mess="Is This a New Loan?", default="no")
             if ok == "yes":
                 self.newlon = True
-                self.lonrte = 0
                 self.lonnum = getNextCode(self.sql, "lonmf2", "lm2_loan",
-                    where=[("lm2_cono", "=", self.opts["conum"])],
-                    start=1, last=9999999)
+                    where=[("lm2_cono", "=", self.allcoy),
+                    ("lm2_acno", "=", self.lonacc)], start=1, last=9999999)
                 self.df.loadEntry(frt, pag, p, data=self.lonnum)
             else:
                 return "Invalid Loan Number"
         else:
-            acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
-                "=", self.opts["conum"]), ("lm2_acno", "=", self.lonacc),
+            self.lonmf2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+                "=", self.allcoy), ("lm2_acno", "=", self.lonacc),
                 ("lm2_loan", "=", w)], limit=1)
-            if not acc:
+            if not self.lonmf2:
                 return "Invalid Loan Number"
             self.lonnum = w
-            self.londes = acc[self.sql.lonmf2_col.index("lm2_desc")]
-            self.lonrte = acc[self.sql.lonmf2_col.index("lm2_rate")]
-            self.londat = acc[self.sql.lonmf2_col.index("lm2_start")]
-            self.lonmth = acc[self.sql.lonmf2_col.index("lm2_mths")]
-            self.lonpay = acc[self.sql.lonmf2_col.index("lm2_rpay")]
+            self.newlon = False
+            self.londes = self.lonmf2[self.sql.lonmf2_col.index("lm2_desc")]
+            self.londat = self.lonmf2[self.sql.lonmf2_col.index("lm2_start")]
+            self.lonmth = self.lonmf2[self.sql.lonmf2_col.index("lm2_pmths")]
+            self.lonpay = self.lonmf2[self.sql.lonmf2_col.index("lm2_repay")]
             if self.lonmth:
                 return "Invalid Entry, Fixed Loan"
             self.df.loadEntry(frt, pag, p+1, data=self.londes)
@@ -835,18 +844,20 @@
         if not self.lonamt:
             self.lonamt = self.othtot
         self.df.loadEntry(frt, pag, p, data=self.lonamt)
-        self.df.loadEntry(frt, pag, p+1, data=self.lonrte)
         if not self.newlon:
-            self.newrte = self.lonrte
+            self.newdri = 0
             return "nd"
 
-    def doLonInt(self, frt, pag, r, c, p, i, w):
-        self.newrte = w
+    def doLonDri(self, frt, pag, r, c, p, i, w):
+        self.newdri = w
+
+    def doLonCri(self, frt, pag, r, c, p, i, w):
+        self.newcri = w
 
     def doLonMth(self, frt, pag, r, c, p, i, w):
         self.lonmth = w
         if self.lonmth:
-            rte = (self.newrte / 1200.0)
+            rte = (self.newdri / 1200.0)
             self.lonpay = round(((self.lonamt * rte) * ((1 + rte) ** w)) /
                 (((1 + rte) ** w) - 1), 2)
         else:
@@ -861,31 +872,19 @@
         self.othtot = float(ASD(self.othtot) - ASD(self.lonamt))
         if self.newlon:
             # Loans Rate
-            self.sql.insRec("lonrte", data=[self.opts["conum"], self.lonacc,
-                self.lonnum, self.trndat, self.newrte])
+            self.sql.insRec("lonrte", data=[self.allcoy, self.lonacc,
+                self.lonnum, self.trndat, self.newdri, self.newcri])
             # Loans Ledger Masterfile
-            self.othrtn = 2
             self.sql.insRec("lonmf2", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.londes, self.trndat, self.newrte,
-                self.lonmth, self.lonpay])
+                self.lonnum, self.londes, self.trndat, self.lonmth,
+                self.lonpay])
+            self.othrtn = 2
         else:
-            # Loans Ledger Interest
             self.othrtn = 3
-            LoanInterest(self.sql, self.opts["period"][1][0], self.allcoy,
-                self.lonacc, self.lonnum, self.lonrte, self.londat,
-                self.trndat, self.bh.batno, self.curdt, update="Y",
-                capnm=self.opts["capnm"], glctls=(self.ctlctl["wag_slc"],
-                self.ctlctl["wag_sli"]), ltype="O", mths=self.lonmth,
-                rpay=self.lonpay)
-            # Loans Ledger Masterfile
-            self.sql.updRec("lonmf2", cols=["mf2_rate"], data=[self.newrte],
-                where=[("lm2_cono", "=", self.opts["conum"]), ("lm2_acno",
-                "=", self.lonacc), ("lm2_loan", "=", self.lonnum)])
         # Loans Ledger Transaction
         data = [self.allcoy, self.lonacc, self.lonnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, tramt, tramt,
-            self.newrte, 0, 0, self.curdt, self.alldet, "",
-            self.opts["capnm"], self.sysdtw, 0]
+            self.othrtn, self.trndat, self.trnref, tramt, self.curdt,
+            self.alldet, "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("lontrn", data=data)
         if self.othtot:
             self.df.loadEntry("T", self.lonpag, 0, data=self.othtot)
@@ -907,22 +906,30 @@
         self.df.loadEntry("C", pag, p+1, data=empnam)
 
     def doSlnNum(self, frt, pag, r, c, p, i, w):
-        self.slnnum = w
-        acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
-            "=", self.allcoy), ("wlm_empno", "=", self.empnum),
-            ("wlm_loan", "=", self.slnnum)], limit=1)
-        if not acc:
+        if not w and self.opts["rtn"] == 1:
             ok = askQuestion(self.opts["mf"].body, head="New Loan",
                 mess="Is This a New Loan?", default="no")
             if ok == "yes":
                 self.newsln = True
+                self.slnnum = getNextCode(self.sql, "waglmf", "wlm_loan",
+                    where=[("wlm_cono", "=", self.allcoy), ("wlm_empno",
+                    "=", self.empnum)], start=1, last=9999999)
+                self.df.loadEntry(frt, pag, p, data=self.slnnum)
+            else:
+                return "Invalid Loan Number"
         else:
+            acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
+                "=", self.allcoy), ("wlm_empno", "=", self.empnum),
+                ("wlm_loan", "=", w)], limit=1)
+            if not acc:
+                return "Invalid Loan Number"
+            self.slnnum = w
             self.newsln = False
             self.slndes = acc[self.sql.waglmf_col.index("wlm_desc")]
-            self.slncod = acc[self.sql.waglmf_col.index("wlm_ded_code")]
-            self.slnrte = acc[self.sql.waglmf_col.index("wlm_int_per")]
-            self.slndat = acc[self.sql.waglmf_col.index("wlm_start_date")]
-            self.slnded = acc[self.sql.waglmf_col.index("wlm_ded_amt")]
+            self.slncod = acc[self.sql.waglmf_col.index("wlm_code")]
+            self.slnrte = acc[self.sql.waglmf_col.index("wlm_rate")]
+            self.slndat = acc[self.sql.waglmf_col.index("wlm_start")]
+            self.slnded = acc[self.sql.waglmf_col.index("wlm_repay")]
             self.df.loadEntry(frt, pag, p+1, data=self.slndes)
             return "sk1"
 
@@ -946,7 +953,9 @@
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.slncod = w
         if not self.newsln:
-            self.df.loadEntry(frt, pag, p+2, data=self.slnrte)
+            self.newrte = 0
+            self.slnded = 0
+            return "nd"
 
     def doSlnInt(self, frt, pag, r, c, p, i, w):
         self.newrte = w
@@ -964,22 +973,12 @@
         self.othtot = float(ASD(self.othtot) - ASD(self.slnamt))
         if self.newsln:
             # Staff Loans Ledger Masterfile
-            self.othrtn = 2
             self.sql.insRec("waglmf", data=[self.allcoy, self.empnum,
                 self.slnnum, self.slndes, self.slncod, self.newrte,
                 self.trndat, self.slnded])
+            self.othrtn = 2
         else:
-            # Staff Loans Ledger Interest
             self.othrtn = 3
-            LoanInterest(self.sql, self.opts["period"][1][0], self.allcoy,
-                self.empnum, self.slnnum, self.slnrte, self.slndat,
-                self.trndat, self.bh.batno, self.curdt, update="Y",
-                capnm=self.opts["capnm"], glctls=(self.ctlctl["wag_slc"],
-                self.ctlctl["wag_sli"]))
-            # Staff Loans Ledger Masterfile
-            self.sql.updRec("waglmf", cols=["wlm_int_per"], data=[self.newrte],
-                where=[("wlm_cono", "=", self.opts["conum"]), ("wlm_empno",
-                "=", self.empnum), ("wlm_loan", "=", self.slnnum)])
         # Staff Loans Ledger Transaction
         data = [self.allcoy, self.empnum, self.slnnum, self.bh.batno,
             self.othrtn, self.trndat, self.trnref, tramt, tramt, self.slnded,

=== modified file 'crs/cr2010_rne.py'
--- crs/cr2010_rne.py	2015-08-25 15:02:35 +0000
+++ crs/cr2010_rne.py	2015-09-12 14:48:46 +0000
@@ -204,11 +204,10 @@
             self.trnbch = 0
 
     def doVatCode(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndte)
-        if not vat:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.trndte)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcod = w
-        self.vatrte = vat[0]
         rate = float(ASD(100.0) + ASD(self.vatrte))
         self.vatstr = round((self.trnamt * self.vatrte / rate), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.vatstr)

=== modified file 'crs/cr2020_rne.py'
--- crs/cr2020_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr2020_rne.py	2015-09-22 07:22:27 +0000
@@ -63,7 +63,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Creditors Remittance Advices (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -112,8 +112,8 @@
                 self.cats,"Y",self.doFirstCat,None,None,("notzero",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","P"), mail=("n","N"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","P"), mail=("N","N"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -185,8 +185,6 @@
             if answer == "yes":
                 self.opts["mf"].closeLoop()
                 return
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "crsmst", ["crm_acno",
                 "crm_name"], where=[("crm_cono", "=", self.opts["conum"]),
@@ -224,7 +222,7 @@
                 p.displayProgress(num)
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N":
+            if self.repeml[1] == "N":
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
@@ -391,7 +389,7 @@
         rmc = self.sql.crsrmf_col
         tdc = self.form.sql.tpldet_col
         self.name = crm[cmc.index("crm_name")]
-        self.emadd = crm[cmc.index("crm_acc_email")]
+        self.emlto = crm[cmc.index("crm_acc_email")]
         self.pydis = CCD(crm[cmc.index("crm_pydis")], "UD", 5.2)
         self.terms = CCD(crm[cmc.index("crm_terms")], "UI", 3)
         self.stday = CCD(crm[cmc.index("crm_stday")], "UI", 2)
@@ -597,6 +595,7 @@
         if self.doTotal(tdc):
             self.doTail(tdc)
             if self.email == "Y":
+                self.repeml[2] = self.emlto
                 self.doPrint()
         else:
             self.form.page = self.pgsve
@@ -756,7 +755,7 @@
         self.opts["mf"].dbm.commitDbase()
 
     def doPrint(self):
-        if self.email == "N":
+        if self.repeml[1] == "N":
             key = "%s_all_all" % self.opts["conum"]
         elif self.elec:
             key = "%03i_%s_EFT%06i" % (self.opts["conum"], self.acno.work,
@@ -764,12 +763,6 @@
         else:
             key = "%03i_%s_EFT%06i" % (self.opts["conum"], self.acno.work,
                 self.cheque)
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
-            ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
         if self.acno.work[0] in ("A", "B", "C", "D"):
             fromad = "recon1@spargs.co.za"
         elif self.acno.work[0] in ("E", "F", "G", "H", "I", "J", "K"):
@@ -778,15 +771,13 @@
             fromad = "recon3@spargs.co.za"
         else:
             fromad = "recon4@spargs.co.za"
-        if self.email == "N" or not self.emadd:
-            mail = "N"
-        else:
-            mail = self.emadd
+        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
+            ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, fromad=fromad,
-            mail=mail)
-        if self.email == "Y":
+            head="%s REMITTANCE ADVICE" % self.opts["conam"],
+            repprt=self.df.repprt, repeml=self.df.repeml, fromad=fromad)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'crs/cr3010.py'
--- crs/cr3010.py	2015-08-26 08:52:51 +0000
+++ crs/cr3010.py	2015-08-28 11:26:22 +0000
@@ -153,8 +153,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'crs/cr3020.py'
--- crs/cr3020.py	2015-08-26 08:52:51 +0000
+++ crs/cr3020.py	2015-08-28 11:26:22 +0000
@@ -276,8 +276,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         acno = CCD(data[0], "NA", 7)

=== modified file 'crs/cr3030.py'
--- crs/cr3030.py	2015-08-26 08:52:51 +0000
+++ crs/cr3030.py	2015-08-28 11:26:22 +0000
@@ -150,8 +150,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, acno, name, ptyp):
         self.fpdf.add_page()

=== modified file 'crs/cr3030_rne.py'
--- crs/cr3030_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3030_rne.py	2015-08-28 11:26:22 +0000
@@ -172,8 +172,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, acno, name, ptyp):
         self.fpdf.add_page()

=== modified file 'crs/cr3040.py'
--- crs/cr3040.py	2015-08-26 08:52:51 +0000
+++ crs/cr3040.py	2015-08-28 11:26:22 +0000
@@ -136,8 +136,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, acno, name):
         self.fpdf.add_page()

=== modified file 'crs/cr3050.py'
--- crs/cr3050.py	2015-08-26 08:52:51 +0000
+++ crs/cr3050.py	2015-08-28 11:26:22 +0000
@@ -243,8 +243,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         acc = CCD(data[0], "NA", 7)

=== modified file 'crs/cr3060.py'
--- crs/cr3060.py	2015-08-26 08:52:51 +0000
+++ crs/cr3060.py	2015-08-28 11:26:22 +0000
@@ -133,8 +133,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'crs/cr3070.py'
--- crs/cr3070.py	2015-08-26 08:52:51 +0000
+++ crs/cr3070.py	2015-08-28 16:30:41 +0000
@@ -53,7 +53,7 @@
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=("N","V"), mail=("B","Y"))
 
     def doPeriod(self, frt, pag, r, c, p, i, w):
         self.curdt = w
@@ -72,9 +72,6 @@
 
     def doEnd(self):
         self.df.setWidget(self.df.mstFrame, state="hide")
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = "N"
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "crsmst", ("crm_acno",
@@ -97,9 +94,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.view, prtnam=self.prtnam,
-                mail=self.emadd)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.focusField("T", 0, 1)
 

=== modified file 'crs/cr3070_rne.py'
--- crs/cr3070_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3070_rne.py	2015-08-28 11:26:22 +0000
@@ -72,9 +72,6 @@
 
     def doEnd(self):
         self.df.setWidget(self.df.mstFrame, state="hide")
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = "N"
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "crsmst", ("crm_acno",
@@ -99,9 +96,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.view, prtnam=self.prtnam,
-                mail=self.emadd)
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.focusField("T", 0, 1)
 

=== modified file 'crs/cr3080.py'
--- crs/cr3080.py	2015-08-26 08:52:51 +0000
+++ crs/cr3080.py	2015-09-22 05:37:23 +0000
@@ -62,7 +62,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Creditors Remittance Advices (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -106,8 +106,8 @@
                 self.sysdtw,"Y",self.doPaydat,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("N","N"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -159,9 +159,7 @@
         self.df.closeProcess()
         if self.excepts == "Y":
             self.doExceptions()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
+        self.emadd = self.df.repeml[2]
         if self.bestac:
             self.export = open(os.path.join(self.opts["mf"].rcdic["wrkdir"],
                 "best%03d_%s.txt" % (self.opts["conum"], self.paydtw)), "w")
@@ -206,7 +204,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page:
+            if p.quit or not self.form.page:
+                pass
+            elif self.df.repeml[1] == "N" or self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
             if self.bestac:
                 # Trailer for BEST
@@ -390,7 +391,7 @@
         cmc = self.sql.crsmst_col
         tdc = self.form.sql.tpldet_col
         self.acno = crm[cmc.index("crm_acno")]
-        self.emadd = crm[cmc.index("crm_acc_email")]
+        eml = crm[cmc.index("crm_acc_email")]
         self.form.account_details("crm", cmc, crm, 1)
         for col in cmc:
             d = "%s_C00" % col
@@ -437,29 +438,22 @@
             self.doBody(ctc, crt, tdc)
             self.doTotal(tdc)
             self.doTail(tdc)
-            if self.email == "Y":
+            if self.df.repeml[1] == "Y" and not self.emadd:
+                self.df.repeml[2] = eml
                 self.doPrint()
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s" % (self.opts["conum"], self.acno)
         else:
             key = "%s_all" % self.opts["conum"]
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
             ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.emadd:
-            mail = "N"
-        else:
-            mail = self.emadd
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s REMITTANCE ADVICE" % self.opts["conam"],
+            repprt=self.df.repprt, repeml=self.df.repeml)
+        if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'crs/cr3090.py'
--- crs/cr3090.py	2015-08-26 08:52:51 +0000
+++ crs/cr3090.py	2015-08-28 11:26:23 +0000
@@ -85,9 +85,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = False
         tab = ["crsmst"]
         whr = [("crm_cono", "=", self.opts["conum"])]
@@ -119,8 +116,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.view,
-                    prtnam=self.prtnam, mail=self.emadd)
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'crs/cr3100.py'
--- crs/cr3100.py	2015-02-07 06:31:11 +0000
+++ crs/cr3100.py	2015-08-28 11:26:23 +0000
@@ -71,9 +71,8 @@
                 ["f", "NA", 10, "Act-Date",  "y"],
                 ["g", "NA", 50, "Details",   "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
-                conam=self.opts["conam"], name=name,
-                tables=data, heads=head, cols=cols, ttype="D",
-                view=self.notes.view, prtnam=self.notes.pnam,
-                mail=self.notes.mail)
+                conam=self.opts["conam"], name=name, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'crs/cr3110.py'
--- crs/cr3110.py	2015-08-26 08:52:51 +0000
+++ crs/cr3110.py	2015-08-28 11:26:23 +0000
@@ -158,8 +158,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         if self.df.repprt[1] == "X":
             return
         CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],

=== modified file 'crs/cr3310_rne.py'
--- crs/cr3310_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3310_rne.py	2015-08-28 11:26:23 +0000
@@ -149,8 +149,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):

=== modified file 'crs/cr3320_rne.py'
--- crs/cr3320_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3320_rne.py	2015-08-28 11:26:23 +0000
@@ -163,8 +163,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         if self.preview == "N":
             self.opts["mf"].dbm.commitDbase(ask=True)
             if self.opts["mf"].dbm.commit == "no":

=== modified file 'crs/cr3330_rne.py'
--- crs/cr3330_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3330_rne.py	2015-08-28 11:26:23 +0000
@@ -248,8 +248,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         dep = CCD(data[0], "UI", 3)

=== modified file 'crs/cr3340_rne.py'
--- crs/cr3340_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3340_rne.py	2015-08-28 11:26:23 +0000
@@ -288,8 +288,8 @@
             self.doGrandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         bch = CCD(data[0], "UI", 3)

=== modified file 'crs/cr3350_rne.py'
--- crs/cr3350_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3350_rne.py	2015-08-28 11:26:23 +0000
@@ -248,8 +248,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'crs/cr3360_rne.py'
--- crs/cr3360_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3360_rne.py	2015-09-22 06:17:43 +0000
@@ -102,7 +102,7 @@
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("B","Y"))
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -127,10 +127,6 @@
             self.enum = w
 
     def doEnd(self):
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.emadd = self.df.repeml[2]
-        self.printm = self.df.repeml[3]
         recs = self.sql.getRec(tables="crstrn", cols=["crt_acno", "crt_ref1",
             "crt_trdt"], where=[("crt_cono", "=", self.opts["conum"]),
             ("crt_type", "=", 5), ("crt_ref1", "between", self.snum,
@@ -149,7 +145,7 @@
                 self.doProcess(rec)
             p.closeProgress()
             self.df.setWidget(self.df.mstFrame, state="show")
-            if self.email == "N":
+            if self.df.repeml[1] == "N":
                 self.doPrint()
         self.df.focusField("T", 0, 1)
 
@@ -188,10 +184,7 @@
         # Account details #####################################################
         cmc = self.sql.crsmst_col
         self.form.account_details("crm", cmc, crm, 1)
-        if self.emadd:
-            self.emto = self.emadd
-        else:
-            self.emto = crm[cmc.index("crm_acc_email")]
+        emlto = crm[cmc.index("crm_acc_email")]
         # Discount details ####################################################
         rmc = self.sql.crsrmf_col
         chg = self.getChanges("crsmst", "crm_pydis")
@@ -213,7 +206,8 @@
         self.doBody()
         self.doTotal()
         self.doTail()
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y":
+            self.df.repeml[2] = emlto
             self.doPrint()
 
     def getChanges(self, table, col):
@@ -376,17 +370,13 @@
                 self.form.doDrawDetail(line)
 
     def doPrint(self):
-        if self.email == "N":
+        if self.df.repeml[1] == "N":
             key = "%s_all_all" % self.opts["conum"]
         else:
             key = "%03i_%s_%s" % (self.opts["conum"], self.acno.work,
                 self.refno.work)
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
             ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
         if self.acno.work[0] in ("A", "B", "C", "D"):
             fromad = "recon1@spargs.co.za"
         elif self.acno.work[0] in ("E", "F", "G", "H", "I", "J", "K"):
@@ -395,15 +385,11 @@
             fromad = "recon3@spargs.co.za"
         else:
             fromad = "recon4@spargs.co.za"
-        if self.email == "N" or not self.emto:
-            mail = "N"
-        else:
-            mail = self.emto
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, fromad=fromad,
-            mail=mail, printm=self.printm)
-        if self.email == "Y":
+            head=self.tit, repprt=self.df.repprt, fromad=fromad,
+            repeml=self.df.repeml)
+        if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'crs/cr3370_rne.py'
--- crs/cr3370_rne.py	2015-08-26 08:52:51 +0000
+++ crs/cr3370_rne.py	2015-09-19 13:39:16 +0000
@@ -65,6 +65,7 @@
             "stype": "C",
             "titl": "Invoice Numbers",
             "head": ("Inv-Num", "Inv-Date", "T"),
+            "typs": (("UI", 9), ("D1", 10), ("UA", 1)),
             "data": []}
         r1s = (("New", "N"), ("Reprint", "R"))
         r2s = (("Advertising","A"), ("Incentive","I"), ("Both","B"))
@@ -224,7 +225,9 @@
                     t1 = 0
                     a2 = 0
                 else:
-                    r = getVatRate(self.sql, self.opts["conum"], ind, ix)[0]
+                    r = getVatRate(self.sql, self.opts["conum"], ind, ix)
+                    if r is None:
+                        r = 0
                     a1 = round(iv * (100 + r) / r, 2)  # Calculated Inclusive
                     t1 = iv                            # Tax Amount
                     if ia != a1:
@@ -254,7 +257,9 @@
                     t1 = 0
                     a2 = 0
                 else:
-                    r = getVatRate(self.sql, self.opts["conum"], ind, ax)[0]
+                    r = getVatRate(self.sql, self.opts["conum"], ind, ax)
+                    if r is None:
+                        r = 0
                     a1 = round(av * (100 + r) / r, 2)  # Calculated Inclusive
                     t1 = av                            # Tax Amount
                     if aa != a1:
@@ -338,17 +343,10 @@
         if cnt:
             self.printTotals(cw, ld, tots)
         self.fpdf.output(pdfnam, "F")
-        if self.df.repprt[2] == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.df.repeml[1] == "N" or not self.emadd.work:
-            mail = "N"
-        else:
-            mail = self.emadd.work
+        self.df.repeml[2] = self.emadd.work
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Invoice" % self.opts["conam"], view=view, mail=mail,
-            prtnam=self.df.repprt[2], printm=self.df.repeml[3])
+            head="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
+            repeml=self.df.repeml)
 
     def drawInvoice(self, cw, ld):
         self.fpdf.add_page()

=== modified file 'crs/cr4010.py'
--- crs/cr4010.py	2015-08-25 15:02:35 +0000
+++ crs/cr4010.py	2015-09-01 09:49:22 +0000
@@ -281,22 +281,24 @@
             self.df.setWidget(self.df.mstFrame, state="hide")
             if ss.selection[0] in ("I", "B"):
                 table = "crsmst"
-                whr = [("crm_cono", "=", self.opts["conum"]),
+                whr = [
+                    ("crm_cono", "=", self.opts["conum"]),
                     ("crm_acno", "=", self.acno)]
                 rp = TabPrt(self.opts["mf"], self.opts["conum"],
-                    self.opts["conam"], name=__name__,
-                    tabs=table, where=whr, keys=[self.acno])
-                view = rp.view
-                mail = rp.mail
+                    self.opts["conam"], name=__name__, tabs=table,
+                    where=whr, keys=[self.acno])
+                repprt = rp.repprt
+                repeml = rp.repeml
                 xits = rp.xits
             else:
-                view = None
-                mail = None
+                repprt = None
+                repeml = None
                 xits = False
             if ss.selection[0] in ("T", "B") and not xits:
                 heads = ["Creditor's Transactions",
                     "Account: %s  Name: %s" % (self.acno, self.name)]
-                whr = [("crt_cono", "=", self.opts["conum"]),
+                whr = [
+                    ("crt_cono", "=", self.opts["conum"]),
                     ("crt_acno", "=", self.acno)]
                 if self.paidup == "Y":
                     col, recs = getTrn(self.opts["mf"].dbm, "crs", whr=whr)
@@ -321,14 +323,15 @@
                         dat.append(rec[col.index(nam)])
                     data.append(dat)
                 gtots = ["crt_tramt", "paid", "balance"]
-                if view:
+                if repprt:
                     prtdia = False
                 else:
                     prtdia = (("Y","V"),("Y","N"))
                 rp = RepPrt(self.opts["mf"], conum=self.opts["conum"],
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["crt_type",
-                    crtrtp], gtots=gtots, prtdia=prtdia, view=view, mail=mail)
+                    crtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
+                    repeml=repeml)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'crs/cr4010_rne.py'
--- crs/cr4010_rne.py	2015-08-25 15:02:35 +0000
+++ crs/cr4010_rne.py	2015-08-28 12:11:14 +0000
@@ -340,12 +340,12 @@
                 rep = TabPrt(self.opts["mf"], self.opts["conum"],
                     self.opts["conam"], name=__name__, tabs=table, where=whr,
                     keys=[self.acno])
-                view = rep.view
-                mail = rep.mail
+                repprt = rep.repprt
+                repeml = rep.repeml
                 xits = rep.xits
             else:
-                view = None
-                mail = None
+                repprt = None
+                repeml = None
                 xits = False
             if ss.selection[0] in ("2", "3") and not xits:
                 heads = ["Creditors's Transactions",
@@ -384,14 +384,15 @@
                         dat.append(rec[col.index(nam)])
                     data.append(dat)
                 gtots = ["crt_tramt", "crt_taxamt", "paid", "balance"]
-                if view:
+                if repprt:
                     prtdia = False
                 else:
                     prtdia = (("Y","V"),("Y","N"))
                 rep = RepPrt(self.opts["mf"], conum=self.opts["conum"],
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["crt_type",
-                    crtrtp], gtots=gtots, prtdia=prtdia, view=view, mail=mail)
+                    crtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
+                    repeml=repeml)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'crs/crc110.py'
--- crs/crc110.py	2015-06-19 16:06:22 +0000
+++ crs/crc110.py	2015-09-18 12:28:54 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlctl", "crsctl", "tplmst",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["crsctl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="crsctl", where=[("ctc_cono", "=",
@@ -36,27 +46,19 @@
                 "remittance_advice"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["crs_ctl", "Creditors Control", 0],
-            ["dis_rec", "Discount Received", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["crs_ctl", "Creditors Control", 0],
+                ["dis_rec", "Discount Received", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Creditors Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         ctl = {
             "stype": "R",
             "tables": ("ctlctl", "genmst"),
@@ -83,35 +85,51 @@
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
         r2s = (("Exclusive","E"),("Inclusive","I"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),("IRB",r2s),0,"G/L Input Method","",
-                self.acc[2],"N",None,None,None,None),
-            (("T",0,4,0),"INA",4,"Best Account Code","Best",
-                self.acc[3],"N",self.doBestAcc,None,None,("efld",)),
-            (("T",0,5,0),"IUI",2,"Best Account Type","BT",
-                self.acc[4],"N",None,None,None,("efld",)),
-            (("T",0,6,0),"IUI",7,"Bank Account Code","Bank-Ac",
-                self.acc[5],"N",self.doBankAcc,ctl,None,("efld",)),
-            (("T",0,7,0),"INA",20,"Remittance Template","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),("IRB",r2s),0,"G/L Input Method","",
+                    self.acc[2],"N",None,None,None,None),
+                (("T",0,4,0),"INA",4,"Best Account Code","Best",
+                    self.acc[3],"N",self.doBestAcc,None,None,("efld",)),
+                (("T",0,5,0),"IUI",2,"Best Account Type","BT",
+                    self.acc[4],"N",None,None,None,("efld",)),
+                (("T",0,6,0),"IUI",7,"Bank Account Code","Bank-Ac",
+                    self.acc[5],"N",self.doBankAcc,ctl,None,("efld",))]
+            seq = 7
+        else:
+            fld = []
+            seq = 0
+        fld.append(
+            (("T",0,seq,0),"INA",20,"Remittance Template","",
                 self.acc[6],"N",self.doTplNam,tpm,None,("efld",)))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and n < 5:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -167,21 +185,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.extend(["N", "E", "", 0, 0])
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 9:
+                if x in (1, 3):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'csh/ca2010.py'
--- csh/ca2010.py	2015-08-25 15:02:35 +0000
+++ csh/ca2010.py	2015-09-19 13:40:45 +0000
@@ -207,15 +207,14 @@
             self.df.loadEntry(frt, pag, p+1, data=acc[0])
 
     def doVCode(self, frt, pag, r, c, p, i, w):
-        acc = getVatRate(self.sql, self.opts["conum"], w, self.date)
-        if not acc:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.date)
+        if self.vatrte is None:
             return "Invalid VAT Code"
-        self.rate = acc[0]
 
     def doIncAmt(self, frt, pag, r, c, p, i, w):
         self.iamt = w
-        if self.rate:
-            vat = self.iamt * self.rate / float(ASD(100) + ASD(self.rate))
+        if self.vatrte:
+            vat = self.iamt * self.vatrte / float(ASD(100) + ASD(self.vatrte))
             self.df.loadEntry(frt, pag, p+1, data=round(vat, 2))
         else:
             self.df.loadEntry(frt, pag, p+1, data=0)
@@ -252,14 +251,8 @@
             "stype": "C",
             "titl": titl,
             "head": head,
-            "typs": [
-                ("D1", 10),
-                ("UI", 5),
-                ("NA", 30),
-                ("UA", 1),
-                ("SD", 13.2),
-                ("SD", 13.2),
-                ("US", 10)],
+            "typs": (("D1", 10), ("UI", 5), ("NA", 30), ("UA", 1),
+                ("SD", 13.2), ("SD", 13.2), ("US", 10)),
             "data": data}
         state = self.df.disableButtonsTags()
         self.opts["mf"].updateStatus("Select a Line to Edit")
@@ -328,15 +321,14 @@
         self.chgdte = w
 
     def doChgVCode(self, frt, pag, r, c, p, i, w):
-        acc = getVatRate(self.sql, self.opts["conum"], w, self.chgdte)
-        if not acc:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.chgdte)
+        if self.vatrte is None:
             return "Invalid VAT Code"
-        self.rate = acc[0]
 
     def doChgIncAmt(self, frt, pag, r, c, p, i, w):
         self.iamt = w
-        if self.rate:
-            vat = self.iamt * self.rate / float(ASD(100) + ASD(self.rate))
+        if self.vatrte:
+            vat = self.iamt * self.vatrte / float(ASD(100) + ASD(self.vatrte))
             self.cg.loadEntry(frt, pag, p+1, data=round(vat, 2))
         else:
             self.cg.loadEntry(frt, pag, p+1, data=0)

=== modified file 'csh/ca3010.py'
--- csh/ca3010.py	2015-08-26 08:52:51 +0000
+++ csh/ca3010.py	2015-08-28 11:26:23 +0000
@@ -121,8 +121,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def printPettyCash(self, recs):

=== modified file 'csv/ctlsys_fld.csv'
--- csv/ctlsys_fld.csv	2014-08-06 15:44:15 +0000
+++ csv/ctlsys_fld.csv	2015-09-29 15:58:43 +0000
@@ -14,3 +14,4 @@
 13,"sys_spwd","TX","20.0","SMS Password","SMS-Password"
 14,"sys_gl_dep","UA","1.0","G/L Departments","D"
 15,"sys_gl_dig","UI","1.0","Number of Digits","N"
+16,"sys_regdet","UA","1.0","Registration Flag","F"

=== modified file 'csv/lonctl_fld.csv'
--- csv/lonctl_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/lonctl_fld.csv	2015-09-04 10:28:24 +0000
@@ -1,4 +1,8 @@
 0,"cln_cono","UI","3.0","Company Number","Coy"
 1,"cln_glint","UA","1.0","Integration","I"
-2,"cln_rate","UD","6.2","Interest Rate","Rate-%"
-3,"cln_date","d1","10.0","Last Interest Raised Date","Last-IDate"
+2,"cln_ityp","UA","1.0","Interest Method","M"
+3,"cln_capb","UA","1.0","Capitalization Base","B"
+4,"cln_capf","UA","1.0","Capitalization Freq","F"
+5,"cln_drte","UD","6.2","Debit Rate","DRte-%"
+6,"cln_crte","UD","6.2","Credit Rate","CRte-%"
+7,"cln_last","D1","10.0","Last Interest Date","Last-IntDt"

=== modified file 'csv/lonmf1_fld.csv'
--- csv/lonmf1_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/lonmf1_fld.csv	2015-09-04 14:40:51 +0000
@@ -1,5 +1,5 @@
 0,"lm1_cono","UI","3.0","Company Number","Coy"
-1,"lm1_acno","UI","7.0","Account Number","Acc-Num"
+1,"lm1_acno","UA","7.0","Account Number","Acc-Num"
 2,"lm1_name","TX","30.0","Name","Name"
 3,"lm1_addr1","TX","30.0","Address Line 1","Address-Line-1"
 4,"lm1_addr2","TX","30.0","Address Line 2","Address-Line-2"

=== modified file 'csv/lonmf2_fld.csv'
--- csv/lonmf2_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/lonmf2_fld.csv	2015-09-20 20:35:52 +0000
@@ -1,8 +1,8 @@
 0,"lm2_cono","UI","3.0","Company Number","Coy"
-1,"lm2_acno","UI","7.0","Account Number","Acc-Num"
-2,"lm2_loan","UI","2.0","Loan","Ln"
+1,"lm2_acno","UA","7.0","Account Number","Acc-Num"
+2,"lm2_loan","UI","2.0","Loan Number","Ln"
 3,"lm2_desc","NA","30.0","Description","Description"
-4,"lm2_start","D1","10.0","Start Date","Start-Date"
-5,"lm2_rate","UD","6.2","Interest Rate","Rate-%"
-6,"lm2_mths","UI","3.0","Period in Months","Mth"
-7,"lm2_rpay","UD","12.2","Repayment","Repayment"
+4,"lm2_start","D1","10.0","Starting Date","Start-Date"
+5,"lm2_pmths","UI","3.0","Period in Months","Mth"
+6,"lm2_repay","UD","12.2","Repayment Amount","Repayment"
+7,"lm2_lcap","d1","10.0","Last Capitalise","Last-Captl"

=== modified file 'csv/lonrte_fld.csv'
--- csv/lonrte_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/lonrte_fld.csv	2015-09-04 14:41:08 +0000
@@ -1,5 +1,6 @@
 0,"lrt_cono","UI","3.0","Company Number","Coy"
-1,"lrt_acno","UI","7.0","Account Number","Acc-Num"
+1,"lrt_acno","UA","7.0","Account Number","Acc-Num"
 2,"lrt_loan","UI","2.0","Loan","Ln"
 3,"lrt_start","D1","10.0","Start Date","Start-Date"
-4,"lrt_rate","UD","6.2","Interest Rate","Int-%"
+4,"lrt_drte","UD","6.2","Debit Rate","DRte-%"
+5,"lrt_crte","UD","6.2","Credit Rate","CRte-%"

=== modified file 'csv/lontrn_fld.csv'
--- csv/lontrn_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/lontrn_fld.csv	2015-09-20 21:05:39 +0000
@@ -1,18 +1,14 @@
 0,"lnt_cono","UI","3.0","Company Number","Coy"
-1,"lnt_acno","UI","7.0","Account Number","Acc-Num"
+1,"lnt_acno","UA","7.0","Account Number","Acc-Num"
 2,"lnt_loan","UI","2.0","Loan Number","Ln"
 3,"lnt_batch","Na","7.0","Batch Number","BatchNo"
 4,"lnt_type","UI","2.0","Transaction Type","TT"
 5,"lnt_trdt","D1","10.0","Transaction Date","Date"
 6,"lnt_refno","Na","9.0","Reference Number","Reference"
 7,"lnt_tramt","SD","13.2","Transaction Amount","Trn-Amount"
-8,"lnt_cpamt","SD","13.2","Capital Amount","Cap-Amount"
-9,"lnt_rate","UD","6.2","Interest Percentage","Int-%"
-10,"lnt_mths","UD","3.0","Period in Months","Mth"
-11,"lnt_repay","UD","13.2","Monthly Repayment","Repayment"
-12,"lnt_curdt","D2","7.0","Current Date","Cur-Date"
-13,"lnt_desc","TX","30.0","Description","Description"
-14,"lnt_batind","NA","1.0","Batch Indicator","B"
-15,"lnt_capnm","TX","20.0","Capture Name","Capture-Name"
-16,"lnt_capdt","d1","10.0","Capture Date","Capture-Dt"
-17,"lnt_seq","US","10.0","Sequence","Sequence"
+8,"lnt_curdt","D2","7.0","Current Date","Cur-Date"
+9,"lnt_desc","TX","30.0","Description","Description"
+10,"lnt_batind","NA","1.0","Batch Indicator","B"
+11,"lnt_capnm","TX","20.0","Capture Name","Capture-Name"
+12,"lnt_capdt","d1","10.0","Capture Date","Capture-Dt"
+13,"lnt_seq","US","10.0","Sequence","Sequence"

=== modified file 'csv/slsctl_fld.csv'
--- csv/slsctl_fld.csv	2014-04-29 19:57:51 +0000
+++ csv/slsctl_fld.csv	2015-09-01 11:12:07 +0000
@@ -1,6 +1,5 @@
 0,"ctv_cono","UI","3.0","Company Number","Coy"
-1,"ctv_useadd","UA","1.0","Address (P/S)","A"
-2,"ctv_delnos","UA","1.0","Delivery Notes","D"
-3,"ctv_delval","UA","1.0","Print Values","V"
-4,"ctv_tplnam","NA","20.0","Document Template","Template-Name"
-5,"ctv_tills","UA","1.0","Point of Sale Tills","T"
+1,"ctv_delnos","UA","1.0","Delivery Notes","D"
+2,"ctv_delval","UA","1.0","Print Values","V"
+3,"ctv_tplnam","NA","20.0","Document Template","Template-Name"
+4,"ctv_tills","UA","1.0","Point of Sale Tills","T"

=== modified file 'csv/tpldet.dat'
--- csv/tpldet.dat	2015-08-25 15:02:35 +0000
+++ csv/tpldet.dat	2015-09-07 20:20:10 +0000
@@ -116,7 +116,7 @@
 payslip|8.0|C|A|L|TelNo:|courier|10|#000000|Y|N|N|L||N|100.0|7|115.0|29.0|33.0|0.0|ctm_tel|courier|10|#000000|Y|N|N|L||N|115.0|15|147.0|29.0|33.0|1|1
 payslip|9.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_pcode|courier|10|#000000|Y|N|N|L||N|30.0|4|38.0|33.0|37.0|1|1
 payslip|10.0|C|A|L|FaxNo:|courier|10|#000000|Y|N|N|L||N|100.0|7|115.0|33.0|37.0|0.0|ctm_fax|courier|10|#000000|Y|N|N|L||N|115.0|15|147.0|33.0|37.0|1|1
-payslip|11.0|C|A|N|||0||||||||0.0|0|0.0|0.0|0.0|0.0|document_type|courier|14|#000000|Y|N|N|R||N|146.0|12|185.0|39.0|44.0|1|1
+payslip|11.0|C|A|N|||0||||||||0.0|0|0.0|0.0|0.0|0.0|document_type|courier|14|#000000|Y|N|N|R||N|146.0|12|185.0|15.0|20.0|1|1
 payslip|12.0|C|A|H|Employee Name|courier|10|#000000|Y|N|N|L|TLRB|Y|30.0|46|128.0|45.0|50.0|0.0|employee_name|courier|10|#000000|N|N|N|L|LRB|N|30.0|46|128.0|50.0|55.0|1|1
 payslip|13.0|C|A|H|EmpNo|courier|10|#000000|Y|N|N|R|TLRB|Y|128.0|5|141.0|45.0|50.0|0.0|wgm_empno|courier|10|#000000|N|N|N|R|RB|N|128.0|5|141.0|50.0|55.0|1|1
 payslip|15.0|C|A|H|Dep|courier|10|#000000|Y|N|N|L|TLRB|Y|141.0|3|149.0|45.0|50.0|0.0|wgm_dept|courier|10|#000000|N|N|N|L|RB|N|141.0|3|149.0|50.0|55.0|1|1
@@ -241,6 +241,33 @@
 sales_document|41.0|C|D|L|Code:|courier|10|Y|N|N|L|L|N|111.0|8|130.0|176.0|180.0|0.0|ctm_b_ibt|courier|10|N|N|N|L|R|N|130.0|30|196.0|176.0|180.0|1|1
 sales_document|42.0|C|D|L|Account:|courier|10|Y|N|N|L|LB|N|111.0|8|130.0|180.0|184.0|0.0|ctm_b_acno|courier|10|N|N|N|L|RB|N|130.0|30|196.0|180.0|184.0|1|1
 sales_document|43.0|C|D|H|Terms and Conditions:|courier|10|Y|N|N|L|TLRB|Y|212.0|30|278.0|163.0|168.0|0.0|terms|courier|10|N|N|N|L|LRB|N|212.0|30|278.0|168.0|172.0|5|1
+statement_loan|1.0|I|A||||0|#000000|||||||15.0|0|130.0|15.0|35.0|0.0|ctm_logo||0|#000000|||||||0.0|0|0.0|0.0|0.0|0|0
+statement_loan|2.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_name|courier|18|#000000|Y|N|N|L||N|15.0|30|129.0|15.0|20.0|1|1
+statement_loan|3.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_add1|courier|10|#000000|Y|N|N|L||N|15.0|30|78.0|21.0|25.0|1|1
+statement_loan|4.0|C|A|L|RegNo:|courier|10|#000000|Y|N|N|L||N|85.0|7|100.0|21.0|25.0|0.0|ctm_regno|courier|10|#000000|Y|N|N|L||N|100.0|20|142.0|21.0|25.0|1|1
+statement_loan|5.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_add2|courier|10|#000000|Y|N|N|L||N|15.0|30|78.0|25.0|28.0|1|1
+statement_loan|6.0|C|A|L|TaxNo:|courier|10|#000000|Y|N|N|L||N|85.0|7|100.0|25.0|29.0|0.0|ctm_taxno|courier|10|#000000|Y|N|N|L||N|100.0|20|142.0|25.0|29.0|1|1
+statement_loan|7.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_add3|courier|10|#000000|Y|N|N|L||N|15.0|30|78.0|29.0|33.0|1|1
+statement_loan|8.0|C|A|L|TelNo:|courier|10|#000000|Y|N|N|L||N|85.0|7|100.0|29.0|33.0|0.0|ctm_tel|courier|10|#000000|Y|N|N|L||N|100.0|15|132.0|29.0|33.0|1|1
+statement_loan|9.0|C|A|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_pcode|courier|10|#000000|Y|N|N|L||N|15.0|4|23.0|33.0|37.0|1|1
+statement_loan|10.0|C|A|L|FaxNo:|courier|10|#000000|Y|N|N|L||N|85.0|7|100.0|33.0|37.0|0.0|ctm_fax|courier|10|#000000|Y|N|N|L||N|100.0|15|132.0|33.0|37.0|1|1
+statement_loan|11.0|T|A||STATEMENT & INVOICE|courier|14|#000000|Y|N|N|R|TLRB|N|148.0|9|178.0|15.0|20.0|0.0|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0|0
+statement_loan|12.0|C|A|H|Account:|courier|10|#000000|Y|N|N|L|TLRB|Y|15.0|30|81.0|45.0|50.0|0.0|account_details|courier|10|#000000|N|N|N|L|TLRB|N|15.0|30|81.0|50.0|54.0|5|1
+statement_loan|13.0|C|A|H|Acc-Num|courier|10|#000000|Y|N|N|C|TLRB|Y|148.0|13|178.0|47.0|52.0|0.0|lm1_acno|courier|10|#000000|N|N|N|C|TLRB|N|148.0|13|178.0|52.0|56.0|1|1
+statement_loan|14.0|C|A|H|Loan|courier|10|#000000|Y|N|N|C|TLRB|Y|148.0|13|178.0|56.0|61.0|0.0|lm2_loan|courier|10|#000000|N|N|N|C|TLRB|N|148.0|13|178.0|61.0|65.0|1|1
+statement_loan|15.0|C|A|H|Page|courier|10|#000000|Y|N|N|C|TLRB|Y|148.0|13|178.0|65.0|70.0|0.0|page_number|courier|10|#000000|N|N|N|C|TLRB|N|148.0|13|178.0|70.0|74.0|1|1
+statement_loan|16.0|C|A|H|Date|courier|10|#000000|Y|N|N|C|TLRB|Y|148.0|13|178.0|74.0|79.0|0.0|document_date|courier|10|#000000|N|N|N|C|TLRB|N|148.0|13|178.0|79.0|83.0|1|1
+statement_loan|17.0|C|B|H|Date|courier|10|#000000|Y|N|N|C|TLRB|Y|15.0|10|38.0|85.0|90.0|0.0|lnt_trdt|courier|10|#000000|N|N|N|C|LR|N|15.0|10|38.0|90.0|94.0|1|38
+statement_loan|18.0|C|B|H|Reference|courier|10|#000000|Y|N|N|C|TLRB|Y|38.0|9|59.0|85.0|90.0|0.0|lnt_refno|courier|10|#000000|N|N|N|L|R|N|38.0|9|59.0|90.0|94.0|1|38
+statement_loan|19.0|C|B|H|Typ|courier|10|#000000|Y|N|N|C|TLRB|Y|59.0|3|67.0|85.0|90.0|0.0|type_code|courier|10|#000000|N|N|N|C|R|N|59.0|3|67.0|90.0|94.0|1|38
+statement_loan|20.0|C|B|H|Details|courier|10|#000000|Y|N|N|C|TLRB|Y|67.0|30|148.0|85.0|90.0|0.0|lnt_desc|courier|10|#000000|N|N|N|L|R|N|67.0|30|148.0|90.0|94.0|1|38
+statement_loan|21.0|C|B|H|Amount|courier|10|#000000|Y|N|N|R|TLRB|Y|148.0|13|178.0|85.0|90.0|0.0|lnt_tramt|courier|10|#000000|N|N|N|R|R|N|148.0|13|178.0|90.0|94.0|1|38
+statement_loan|22.0|C|C|N|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0.0|carried_forward|courier|10|#000000|Y|N|N|R|LRB|N|129.0|22|178.0|244.0|249.0|1|1
+statement_loan|23.0|C|C|H|Balance|courier|10|#000000|Y|N|N|R|TLRB|Y|148.0|13|178.0|244.0|249.0|0.0|total_balance|courier|10|#000000|Y|N|N|R|TLRB|N|148.0|13|178.0|249.0|253.0|1|1
+statement_loan|24.0|T|D||Banking Details:|courier|10|#000000|Y|N|N|L|TLRB|Y|15.0|30|178.0|255.0|260.0|0.0|||0|#000000|||||||0.0|0|0.0|0.0|0.0|0|0
+statement_loan|25.0|C|D|L|Bank:|courier|10|#000000|Y|N|N|L|LB|N|15.0|5|28.0|260.0|264.0|0.0|ctm_b_name|courier|10|#000000|N|N|N|L|B|N|28.0|27|87.0|260.0|264.0|1|1
+statement_loan|26.0|C|D|L|Branch:|courier|10|#000000|Y|N|N|L|B|N|87.0|7|104.0|260.0|264.0|0.0|ctm_b_ibt|courier|10|#000000|N|N|N|L|B|N|104.0|8|123.0|260.0|264.0|1|1
+statement_loan|27.0|C|D|L|Account:|courier|10|#000000|Y|N|N|L|B|N|123.0|8|142.0|260.0|264.0|0.0|ctm_b_acno|courier|10|#000000|N|N|N|L|RB|N|142.0|16|178.0|260.0|264.0|1|1
 statement_member|1.0|I|A||||0|||||||15.0|0|130.0|15.0|35.0|0.0|ctm_logo||0|||||||0.0|0|0.0|0.0|0.0|0|0
 statement_member|2.0|C|A|N|||0|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_name|courier|18|Y|N|N|L||N|15.0|30|129.0|15.0|20.0|1|1
 statement_member|3.0|C|A|N|||0|||||||0.0|0|0.0|0.0|0.0|0.0|ctm_add1|courier|10|Y|N|N|L||N|15.0|30|78.0|21.0|25.0|1|1

=== modified file 'csv/tplmst.dat'
--- csv/tplmst.dat	2014-12-09 16:32:44 +0000
+++ csv/tplmst.dat	2015-09-05 10:07:27 +0000
@@ -7,6 +7,7 @@
 purchase_order|Purchase Order|O|STR||A4|L
 remittance_advice|Remittance Advice|R|CRS||A4|P
 sales_document|Sales Document|I|INV||A4|L
+statement_loan|Statement (Loan)|S|LON|O|A4|P
 statement_member|Statement (Member)|S|MEM|O|A4|P
 statement_normal|Statement (Normal)|S|DRS|N|A4|P
 statement_other|Statement (Other)|S|DRS|O|A4|P

=== modified file 'csv/wagctl_fld.csv'
--- csv/wagctl_fld.csv	2015-08-25 15:02:35 +0000
+++ csv/wagctl_fld.csv	2015-09-18 12:08:39 +0000
@@ -1,13 +1,13 @@
 0,"ctw_cono","UI","3.0","Company Number","Coy"
-1,"ctw_regno","UL","10.0","Registration Number","Reg-Num"
-2,"ctw_sdlno","NA","10.0","SDL Number","SDL-Num"
-3,"ctw_uifno","NA","10.0","UIF Number","UIF-Num"
-4,"ctw_trade","UI","4.0","Trade Code","T-CD"
-5,"ctw_d_hrs","UD","9.5","Daily Hours","Hrs-Day"
-6,"ctw_w_hrs","UD","9.5","Weekly Hours","Hrs-Week"
-7,"ctw_m_hrs","UD","9.5","Monthly Hours","Hrs-Month"
-8,"ctw_irp_dip","UA","1.0","IRP5 Diplomatic","D"
-9,"ctw_glint","UA","1.0","Integration","I"
+1,"ctw_glint","UA","1.0","Integration","I"
+2,"ctw_regno","UL","10.0","Registration Number","Reg-Num"
+3,"ctw_sdlno","NA","10.0","SDL Number","SDL-Num"
+4,"ctw_uifno","NA","10.0","UIF Number","UIF-Num"
+5,"ctw_trade","UI","4.0","Trade Code","T-CD"
+6,"ctw_d_hrs","UD","6.2","Daily Hours","Hrs-Day"
+7,"ctw_w_hrs","UD","6.2","Weekly Hours","Hrs-Week"
+8,"ctw_m_hrs","UD","6.2","Monthly Hours","Hrs-Month"
+9,"ctw_irp_dip","UA","1.0","IRP5 Diplomatic","D"
 10,"ctw_i_rate","UD","6.2","Interest Rate","Rate-%"
 11,"ctw_i_date","d1","10.0","Last Interest Raised Date","Last-IDate"
 12,"ctw_bestac","NA","4.0","Best Account Code","Best"

=== modified file 'csv/waglmf_fld.csv'
--- csv/waglmf_fld.csv	2014-03-28 07:32:49 +0000
+++ csv/waglmf_fld.csv	2015-09-08 12:25:16 +0000
@@ -2,7 +2,7 @@
 1,"wlm_empno","UI","5.0","Employee Number","EmpNo"
 2,"wlm_loan","UI","2.0","Loan","Ln"
 3,"wlm_desc","NA","30.0","Description","Description"
-4,"wlm_ded_code","UI","3.0","Deduction Code","Cod"
-5,"wlm_int_per","UD","6.2","Interest Percentage","Int-%"
-6,"wlm_start_date","D1","10.0","Start Date","Start-Date"
-7,"wlm_ded_amt","UD","10.2","Deduction Amount","Ded-Amount"
+4,"wlm_code","UI","3.0","Deduction Code","Cod"
+5,"wlm_rate","UD","6.2","Interest Percentage","Int-%"
+6,"wlm_start","D1","10.0","Start Date","Start-Date"
+7,"wlm_repay","UD","10.2","Deduction Amount","Ded-Amount"

=== modified file 'doc/Downloads.rst'
--- doc/Downloads.rst	2015-06-24 07:32:39 +0000
+++ doc/Downloads.rst	2015-10-03 07:36:48 +0000
@@ -11,23 +11,23 @@
 
 |tartan| Version
 ================
-The latest version of Tartan is 5.0.18 and was released on the 24th June, 2015.
+The latest version of Tartan is 5.1.0 and was released on the 3rd October, 2015.
 
 Backup and restore functions must only be done with the  same version of Tartan i.e. the version used to restore a backup must be the same as the one used to make the backup.
 
 .. _Documentation: http://www.tartan.co.za/cgi-bin/simple_web.py/Documentation
-.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.0.18.tar.gz
+.. _Tartan-5-lnx: ftp://tartan.co.za/Tartan_5.1.0.tar.gz
 .. _Tartan-4-lnx: ftp://tartan.co.za/Tartan_4.1.14.tar.gz
 .. _Tartan-3-lnx: ftp://tartan.co.za/Tartan_3.4.51.tar.gz
 .. _Tartan-2-lnx: ftp://tartan.co.za/Tartan_2.5.29.tar.gz
-.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.0.18.exe
+.. _Tartan-5-win: ftp://tartan.co.za/Tartan_5.1.0.exe
 .. _Tartan-4-win: ftp://tartan.co.za/Tartan_4.1.14.exe
 .. _Tartan-3-win: ftp://tartan.co.za/Tartan_3.4.51.exe
 .. _Tartan-2-win: ftp://tartan.co.za/Tartan_2.5.29.exe
-.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.0.18.tar.gz
-.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.0.18.exe
-.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.0.18.tar.gz
-.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.0.18.exe
+.. _Bwlclb-5-lnx: ftp://tartan.co.za/Bwlclb_5.1.0.tar.gz
+.. _Bwlclb-5-win: ftp://tartan.co.za/Bwlclb_5.1.0.exe
+.. _Seccmp-5-lnx: ftp://tartan.co.za/Seccmp_5.1.0.tar.gz
+.. _Seccmp-5-win: ftp://tartan.co.za/Seccmp_5.1.0.exe
 
 |linux| Linux
 =============

=== modified file 'doc/LN.rst'
--- doc/LN.rst	2015-08-25 15:02:35 +0000
+++ doc/LN.rst	2015-09-07 20:14:53 +0000
@@ -8,8 +8,19 @@
 
 + **G/L Integration** - Whether or not to integrate with the general ledger.
 + **Loans Control** - The G/L loans control account number.
-+ **Loans Interest** - The G/L loans interest account number.
-+ **Interest Rate** - The default interest rate.
++ **Interest Received** - The G/L loans interest received account number.
++ **Interest Paid** - The G/L loans interest paid account number.
++ **Interest Method** - The method for raising interest as follows:
+  + **Daily** - Interest is raised on daily balance.
+  + **Monthly** - Interest is raised on monthly balance.
++ **Capitalisation Base** - What capitalisation of interest is based on:
+  + **Anniversary** - Using the anniversary of the loan as the basis.
+  + **Financial** - Using the financial period as the basis.
++ **Capitalisation Freq** - When capitalisation takes place:
+  + **Annual** - Interest get capitalised every 12 months from the base.
+  + **Bi-Annual** - Interest get capitalised every 6 months from the base.
++ **Debit Rate** - The default interest rate on debit balances.
++ **Credit Rate** - The default interest rate on credit balances.
 + **Last Interest Date** - The last date interest was raised.
 
 Loans Masterfile (LN)
@@ -25,9 +36,10 @@
 + **Acc-Num** - The account number. Use 0 for a new account.
 + **Ln** -  This is automatically generated.
 + **Description** - The description of the loan e.g. Study Loan
-+ **Start Date** - The starting date of the loan.
++ **Start-Date** - The starting date of the loan.
 + **Reference** - The reference number of the loan.
-+ **Rate-%** - The rate of interest to be charged on the loan.
++ **DRte%** - The rate of interest to be charged on the loan if in debit.
++ **CRte%** - The rate of interest to be charged on the loan if in credit.
 + **Loan-Amount** - The capital amount of the loan.
 + **Mth** - The number of months for the loan to run or 0 for an open loan.
 
@@ -38,15 +50,19 @@
 + **Acc-Num** - The account number.
 + **Ln** - The loan number which was generated when creating a new loan.
 + **Trans-Date** - The movement date.
++ **Reference** - The reference number of the movement.
 + **T** - The type of movement as follows:
     + *1 Interest Adjustment*
     + *3 Further Advance*
     + *4 Loan Repayment*
     + *5 Loan Adjustment*
-+ **Reference** - The reference number of the movement.
-+ **Rate-%** - The new rate of interest to be charged on the loan.
-+ **Interest** - The interest adjustment, if type 1.
-+ **Amount** - The loan amount for types 3, 4 and 5.
++ **Amount** - The transaction amount.
+
+If the loans ledger is integrated with the general ledger the following applies.
+
++ **Acc-Num** - The general ledger account to be debited or credited.
++ **All-Amt** - The amount to be allocated to this account.
++ **Details** - The details of the allocation.
 
 Raise Interest
 ++++++++++++++
@@ -55,13 +71,26 @@
 + **Transaction Date** - The date on which the interest must be raised.
 
 Rate Change
-++++++++++++++
++++++++++++
 Use this routine to change the interest rate of a loan.
 
++ **All Current Rates** - Select whether to globally change existing rates.
+
+If All Current Rates was selected the following applies:
+
++ **Effective Date**  - The date of the rate change.
++ **Debit  Rate - Old** - The old debit rate to change.
++ **              New** - The new debit rate.
++ **Credit Rate - Old** - The old credit rate to change.
++ **              New** - The new credit rate.
+
+else the following applies:
+
 + **Acc-Num** - The loan account number.
 + **Ln** - The loan number.
 + **Date** - The effective date of the change.
-+ **Rate-%** - The new rate to apply.
++ **DRte-%** - The new debit rate to apply.
++ **CRte-%** - The new credit rate to apply.
 
 Reporting (LN)
 ..............
@@ -87,16 +116,18 @@
 Use this routine to list all existing loans.
 
 + **Sort Order** - Select whether to sort by Number or Name.
-+ **Ignore Zero Balances** - Select whether to exclude repaid loans.
++ **Ignore Zero Balances** - Select whether to exclude loans with zero balances.
 
 Statements
 ++++++++++
 Use this routine to print loan statements as follows:
 
-+ **Start Date** - Only include loans issued on or after this date.
-+ **Last Date** - Only include loans issued on or before this date.
-+ **Whole File** - Include all loans in the selected period or individuals.
-+ **Ignore Paid Ups** - Select whether to exclude repaid loans.
++ **Template Name** - The template to use.
++ **Maximum Pages** - Enter the maximum number of pages for the statement, 0 for all.
++ **Whole File** - Select whether to print all statements or only selected ones.
++ **Sort Order** - Select the order in which to print the statements.
++ **Include Zero Balances** - Select whether to include zero balance loans.
++ **Statement Date** - The statement date.
 
 Interrogation (LN)
 ..................

=== modified file 'doc/MB.rst'
--- doc/MB.rst	2015-06-24 07:32:39 +0000
+++ doc/MB.rst	2015-10-03 07:36:48 +0000
@@ -2,7 +2,7 @@
  TARTAN SYSTEMS - Bowling Clubs
 ================================
 
-:Version:   5.0.18
+:Version:   5.1.0
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za

=== modified file 'doc/MD.rst'
--- doc/MD.rst	2015-08-25 15:02:35 +0000
+++ doc/MD.rst	2015-10-03 07:36:48 +0000
@@ -2,7 +2,7 @@
  Tartan Systems - User Manual
 ==============================
 
-:Version:   5.0.18
+:Version:   5.1.0
 :Author:    Paul Malherbe
 :Contact:   paul@tartan.co.za
 :Home:      http://www.tartan.co.za
@@ -196,6 +196,7 @@
 * **Printer Name** - If you selected `Print`, enter the printer name.
 * **E-Mail Report** - If available, select whether or not to email the report.
 * **E-Mail Address** - If available, enter the email address, if more than one, comma separate them.
+* **E-Mail Message** - If available, enter the email message.
 
 Error Messages
 --------------

=== added file 'doc/Testimonials.rst'
--- doc/Testimonials.rst	1970-01-01 00:00:00 +0000
+++ doc/Testimonials.rst	2015-08-28 19:23:36 +0000
@@ -0,0 +1,16 @@
+.. |agfin| image:: /images/agfin.jpg
+   :height: 100pc
+   :width: 100pc
+   :scale: 40 %
+
+.. |build| image:: /images/buildinn.jpg
+   :height: 100pc
+   :width: 100pc
+   :scale: 40 %
+
+.. |rne| image:: /images/rne.jpg
+   :height: 100pc
+   :width: 100pc
+   :scale: 40 %
+
+|agfin| |build| |rne|

=== modified file 'drs/dr2010.py'
--- drs/dr2010.py	2015-08-25 15:02:35 +0000
+++ drs/dr2010.py	2015-09-15 09:01:23 +0000
@@ -291,12 +291,11 @@
             self.vatamt = 0
 
     def doVatCode1(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        rate = vat[0]
-        self.vatamt = round((self.trnamt * rate / (rate + 100)), 2)
+        self.vatamt = round((self.trnamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, self.vatamt)
         if self.vatamt == 0:
             return "sk1"
@@ -475,20 +474,19 @@
         if self.gc.chkRec(self.opts["conum"], ctlctl, ["vat_ctl"]):
             return "Missing or Invalid Control Record"
         self.convat = ctlctl["vat_ctl"]
-        acc = getVatRate(self.sql, self.allcoy, w, self.trndat)
-        if not acc:
+        self.vatrte = getVatRate(self.sql, self.allcoy, w, self.trndat)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        self.vatrat = acc[0]
 
     def doAllAmt(self, frt, pag, r, c, p, i, w):
         if not w:
             incamt = float(ASD(self.trnamt) - ASD(self.allocated))
         elif self.glinp == "E":
-            incamt = round((w * (100 + self.vatrat) / 100), 2)
+            incamt = round((w * (100 + self.vatrte) / 100), 2)
         else:
             incamt = w
-        self.allamt = round((incamt * 100 / (100 + self.vatrat)), 2)
+        self.allamt = round((incamt * 100 / (100 + self.vatrte)), 2)
         self.allvat = float(ASD(incamt) - ASD(self.allamt))
         if self.glinp == "E":
             self.df.loadEntry(frt, pag, p, data=self.allamt)
@@ -572,7 +570,7 @@
         self.sql.insRec("ctlvtf", data=data)
         if self.glint == "N":
             return
-        # General Ledger Transaction (Expense)
+        # General Ledger Transaction (Allocation)
         data = (self.allcoy, self.genacc, self.curdt, self.trndat,
             self.glt, self.ref1, self.bh.batno, amt, vat, self.alldet,
             self.vatcode, "", 0, self.opts["capnm"], self.sysdtw, 0)

=== modified file 'drs/dr2030.py'
--- drs/dr2030.py	2015-08-26 08:52:51 +0000
+++ drs/dr2030.py	2015-09-22 05:48:34 +0000
@@ -146,8 +146,8 @@
                 else:
                     self.trdt = (self.bh.curdt * 100) + day
                 vat = dcm[self.sql.drsrcm_col.index("dcm_vat")]
-                self.rte = getVatRate(self.sql, self.opts["conum"],
-                    vat, self.trdt)[0]
+                self.vatrte = getVatRate(self.sql, self.opts["conum"],
+                    vat, self.trdt)
                 glac = dcm[self.sql.drsrcm_col.index("dcm_glac")]
                 nxt = self.sql.getRec(tables="drstrn", cols=["max(drt_ref1)"],
                     where=[("drt_cono", "=", self.opts["conum"]), ("drt_ref1",
@@ -186,7 +186,7 @@
                     self.ref = "RC%03i%04i" % (num, nxt)
                     self.detail = textFormat(dct[col.index("dct_detail")], 73)
                     self.amnt = dct[col.index("dct_amnt")]
-                    self.vmnt = round(self.amnt * self.rte / 100, 2)
+                    self.vmnt = round(self.amnt * self.vatrte / 100, 2)
                     self.tmnt = float(ASD(self.amnt) + ASD(self.vmnt))
                     tot_val = float(ASD(tot_val) + ASD(self.amnt))
                     tot_vat = float(ASD(tot_vat) + ASD(self.vmnt))
@@ -246,7 +246,7 @@
         ld = self.fpdf.font[2]
         ica = CCD(self.tmnt, "SD", 13.2)
         iva = CCD(float(ASD(self.tmnt) - ASD(self.amnt)), "SD", 13.2)
-        ivr = CCD(self.rte, "UD", 5.2)
+        ivr = CCD(self.vatrte, "UD", 5.2)
         self.drawInvoice(cw, ld)
         row = 20
         for detail in self.detail:
@@ -345,23 +345,16 @@
 
     def doPrint(self):
         if self.df.repeml[1] == "Y":
+            self.df.repeml[2] = self.emadd.work
             key = "%s_%s_%s" % (self.opts["conum"], self.chain, self.acno)
         else:
             key = "%s_all_all" % self.opts["conum"]
-        if self.df.repprt[2] == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.df.repeml[1] == "N" or not self.emadd.work:
-            mail = "N"
-        else:
-            mail = self.emadd.work
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
              ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head="%s Invoice" % self.opts["conam"], view=view, mail=mail,
-            prtnam=self.df.repprt[2], printm=self.df.repeml[3])
+            head="%s Invoice" % self.opts["conam"], repprt=self.df.repprt,
+            repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'drs/dr3010.py'
--- drs/dr3010.py	2015-08-26 08:52:51 +0000
+++ drs/dr3010.py	2015-08-28 11:26:23 +0000
@@ -154,8 +154,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr3020.py'
--- drs/dr3020.py	2015-08-26 08:52:51 +0000
+++ drs/dr3020.py	2015-08-28 11:26:23 +0000
@@ -173,7 +173,7 @@
             where=whr, order=odr)
         if not recs:
             showError(self.opts["mf"].body, "Transaction Error",
-            "No Transactions Selected")
+                "No Transactions Selected")
         elif self.df.repprt[2] == "export":
             self.exportReport(recs)
         else:
@@ -279,9 +279,9 @@
             self.typeTotal()
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         chain = CCD(data[0], "UI", 3)

=== modified file 'drs/dr3030.py'
--- drs/dr3030.py	2015-08-26 08:52:51 +0000
+++ drs/dr3030.py	2015-08-28 11:26:23 +0000
@@ -121,8 +121,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3040.py'
--- drs/dr3040.py	2015-08-26 08:52:51 +0000
+++ drs/dr3040.py	2015-08-28 11:26:23 +0000
@@ -140,8 +140,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, chn, acno, name):
         self.fpdf.add_page()

=== modified file 'drs/dr3050.py'
--- drs/dr3050.py	2015-08-26 08:52:51 +0000
+++ drs/dr3050.py	2015-08-28 11:26:23 +0000
@@ -255,8 +255,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         chn = CCD(data[0], "UI", 3)

=== modified file 'drs/dr3060.py'
--- drs/dr3060.py	2015-08-26 08:52:51 +0000
+++ drs/dr3060.py	2015-08-28 11:26:23 +0000
@@ -191,8 +191,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr3080.py'
--- drs/dr3080.py	2015-08-26 08:52:51 +0000
+++ drs/dr3080.py	2015-09-22 05:36:43 +0000
@@ -47,7 +47,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Debtors Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -126,7 +126,7 @@
                 fld[n][0][2] = n
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -222,9 +222,7 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
+        self.emadd = self.df.repeml[2]
         if self.whole == "S":
             recs = getSingleRecords(self.opts["mf"], "drsmst",
                 ("drm_chain", "drm_acno", "drm_name"), where=[("drm_cono",
@@ -246,10 +244,10 @@
             else:
                 odr = "drm_pcod"
             recs = self.sql.getRec(tables="drsmst", where=whr, order=odr)
-            if not recs:
-                showError(self.opts["mf"].body, "Error",
-                    "No Accounts Selected")
-        if recs:
+        if not recs:
+            showError(self.opts["mf"].body, "Error",
+                "No Accounts Selected")
+        else:
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()
@@ -261,7 +259,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.df.repeml[1] == "N" or self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
@@ -287,7 +288,7 @@
         tdc = self.form.sql.tpldet_col
         self.chn = drm[dmc.index("drm_chain")]
         self.acc = drm[dmc.index("drm_acno")]
-        self.eml = drm[dmc.index("drm_acc_email")]
+        eml = drm[dmc.index("drm_acc_email")]
         self.form.account_details("drm", dmc, drm, 1)
         if drm[dmc.index("drm_stames")]:
             self.mesno = drm[dmc.index("drm_stames")]
@@ -342,7 +343,7 @@
                     lines = len(trns[1]) - (self.pages * self.form.maxlines)+1
                     for _ in xrange(lines):
                         trn = trns[1].pop(0)
-                        bal = float(ASD(bal) + ASD(trn[8]))
+                        bal = float(ASD(bal) + ASD(trn[dtc.index("drt_tramt")]))
                     trn[trns[0].index("drt_type")] = 3
                     trn[trns[0].index("drt_ref1")] = "B/FWD"
                     trn[trns[0].index("drt_batch")] = ""
@@ -362,29 +363,22 @@
             self.doBody(trns[0], trns[1], tdc)
         self.doTotal(tdc)
         self.doTail(tdc)
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y" and not self.emadd:
+            self.df.repeml[2] = eml
             self.doPrint()
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s_%s" % (self.opts["conum"], self.chn, self.acc)
         else:
             key = "%s_all_all" % self.opts["conum"]
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.eml:
-            mail = "N"
-        else:
-            mail = self.eml
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.df.repprt, repeml=self.df.repeml)
+        if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'drs/dr3090.py'
--- drs/dr3090.py	2015-08-26 08:52:51 +0000
+++ drs/dr3090.py	2015-08-28 11:26:23 +0000
@@ -85,9 +85,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = False
         tab = ["drsmst"]
         whr = [("drm_cono", "=", self.opts["conum"])]
@@ -119,8 +116,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.view,
-                    prtnam=self.prtnam, mail=self.emadd)
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):

=== modified file 'drs/dr3100.py'
--- drs/dr3100.py	2015-02-07 06:31:11 +0000
+++ drs/dr3100.py	2015-08-28 11:26:23 +0000
@@ -75,7 +75,7 @@
                 ["h", "NA", 50, "Details",   "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'drs/dr3110.py'
--- drs/dr3110.py	2015-08-26 08:52:51 +0000
+++ drs/dr3110.py	2015-08-28 11:26:23 +0000
@@ -221,8 +221,8 @@
         self.doTotals(ttype="G")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         if self.df.repprt[1] == "X":
             return
         CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],

=== modified file 'drs/dr3120.py'
--- drs/dr3120.py	2015-08-26 08:52:51 +0000
+++ drs/dr3120.py	2015-09-04 05:05:06 +0000
@@ -42,9 +42,11 @@
             (("T",0,0,0),"ID1",10,"Cut-Off Date","",
                 self.sysdtw,"Y",self.doCutoff,None,None,("efld",)),
             (("T",0,1,0),"IUI",2,"Days Leeway","",
-                "","Y",self.doLeeway,None,None,("between",0,31)),
+                "","N",self.doLeeway,None,None,("between",0,31)),
             (("T",0,2,0),"IUD",12.2,"Minimum Balance","",
-                "","Y",self.doMinBal,None,None,("efld",)))
+                "","N",self.doMinBal,None,None,("efld",)),
+            (("T",0,3,0),"IUD",5.2,"Default Rate","",
+                "","N",self.doDefRte,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
@@ -62,6 +64,9 @@
     def doMinBal(self, frt, pag, r, c, p, i, w):
         self.minbal = w
 
+    def doDefRte(self, frt, pag, r, c, p, i, w):
+        self.defrte = w
+
     def doEnd(self):
         self.df.closeProcess()
         self.col = ["drm_chain", "drm_acno", "drm_name", "drm_rfterms",
@@ -70,8 +75,7 @@
             where=[("drm_cono", "=", self.opts["conum"])],
             order="drm_chain, drm_acno")
         if not recs:
-            showError(self.opts["mf"].body, "Transaction Error",
-            "No Transactions Selected")
+            showError(self.opts["mf"].body, "Error", "No Records Selected")
         else:
             self.printReport(recs)
         self.closeProcess()
@@ -94,7 +98,9 @@
             rft = CCD(dat[self.col.index("drm_rfterms")], "UI", 3)
             per = CCD(dat[self.col.index("drm_int_per")], "UD", 5.2)
             if not per.work:
-                continue
+                if not self.defrte:
+                    continue
+                per = CCD(self.defrte, "UD", 5.2)
             bals = Balances(self.opts["mf"], "DRS", self.opts["conum"],
                 (self.cutoff/100), (chn.work, acno.work))
             obal, tbal, ages = bals.doAllBals()
@@ -114,7 +120,7 @@
             amt = CCD(b, "SD", 13.2)
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading()
-            self.fpdf.drawText("%s %s %s %s %s %s %s %s" % \
+            self.fpdf.drawText("%s %s %s %s %s %s       %s %s" % \
                 (chn.disp, acno.disp, name.disp, rft.disp, bal.disp,
                 odu.disp, per.disp, amt.disp))
             self.pglin += 1
@@ -126,9 +132,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'drs/dr4010.py'
--- drs/dr4010.py	2015-08-25 15:02:35 +0000
+++ drs/dr4010.py	2015-09-14 06:23:34 +0000
@@ -374,8 +374,9 @@
                     else:
                         inv = []
                     if inv:
-                        PrintInvoice(self.opts["mf"], self.opts["conum"], typ,
-                            doc, prtnam="view", copy="y")
+                        PrintInvoice(self.opts["mf"], self.opts["conum"],
+                            self.opts["conam"], typ, doc, repprt=["N",
+                            "V", "view"], copy="y")
                     else:
                         whr = [
                             ("drt_cono", "=", self.opts["conum"]),
@@ -417,17 +418,19 @@
             self.df.setWidget(self.df.mstFrame, state="hide")
             if ss.selection[0] in ("I", "B"):
                 tab = "drsmst"
-                whr = [("drm_cono", "=", self.opts["conum"]), ("drm_chain",
-                "=", self.chain), ("drm_acno", "=", self.acno)]
+                whr = [
+                    ("drm_cono", "=", self.opts["conum"]),
+                    ("drm_chain", "=", self.chain),
+                    ("drm_acno", "=", self.acno)]
                 rp = TabPrt(self.opts["mf"], self.opts["conum"],
-                    self.opts["conam"], name=__name__, tabs=tab, where=whr,
-                    keys=[self.chain, self.acno])
-                view = rp.view
-                mail = rp.mail
+                    self.opts["conam"], name=__name__, tabs=tab,
+                    where=whr, keys=[self.chain, self.acno])
+                repprt = rp.repprt
+                repeml = rp.repeml
                 xits = rp.xits
             else:
-                view = None
-                mail = None
+                repprt = None
+                repeml = None
                 xits = False
             if ss.selection[0] in ("T", "B") and not xits:
                 heads = ["Debtor's Transactions",
@@ -460,14 +463,15 @@
                         dat.append(rec[col.index(nam)])
                     data.append(dat)
                 gtots = ["drt_tramt", "paid", "balance"]
-                if view:
+                if repprt:
                     prtdia = False
                 else:
                     prtdia = (("Y","V"),("Y","N"))
                 rp = RepPrt(self.opts["mf"], conum=self.opts["conum"],
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["drt_type",
-                    drtrtp], gtots=gtots, prtdia=prtdia, view=view, mail=mail)
+                    drtrtp], gtots=gtots, prtdia=prtdia, repprt=repprt,
+                    repeml=repeml)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'drs/drc110.py'
--- drs/drc110.py	2015-08-25 15:02:35 +0000
+++ drs/drc110.py	2015-09-18 11:57:48 +0000
@@ -24,38 +24,41 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlctl", "drsctl", "tplmst",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["drsctl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="drsctl", where=[("ctd_cono", "=",
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "N", "E", "N", "statement", "Y"]
+            self.acc = [self.opts["conum"], "N", "E", "N",
+                "statement_normal", "Y"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["drs_ctl", "Debtors Control", 0],
-            ["dis_all", "Discount Allowed", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["drs_ctl", "Debtors Control", 0],
+                ["dis_all", "Discount Allowed", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Debtors Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -69,33 +72,49 @@
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
         r2s = (("Exclusive","E"),("Inclusive","I"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),("IRB",r2s),0,"G/L Input Method","",
-                self.acc[2],"N",None,None,None,None),
-            (("T",0,4,0),("IRB",r1s),0,"Chain Stores","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),("IRB",r2s),0,"G/L Input Method","",
+                    self.acc[2],"N",None,None,None,None)]
+            seq = 4
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),("IRB",r1s),0,"Chain Stores","",
                 self.acc[3],"N",None,None,None,None),
-            (("T",0,5,0),"INA",20,"Statement Template","",
+            (("T",0,seq + 1,0),"INA",20,"Statement Template","",
                 self.acc[4],"N",self.doTplNam,tpm,None,None),
-            (("T",0,6,0),("IRB",r1s),0,"Statement Ageing","",
-                self.acc[5],"N",None,None,None,None))
+            (("T",0,seq + 2,0),("IRB",r1s),0,"Statement Ageing","",
+                self.acc[5],"N",None,None,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and n < 2:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -136,21 +155,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.extend(["N", "E"])
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 6:
+                if x in (1, 3):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'drs/drc210.py'
--- drs/drc210.py	2014-12-30 15:37:38 +0000
+++ drs/drc210.py	2015-08-31 13:33:41 +0000
@@ -14,6 +14,7 @@
 """
 
 from TartanClasses import GetCtl, Sql, TartanDialog
+from tartanFunctions import showError
 
 class drc210:
     def __init__(self, **opts):
@@ -23,15 +24,17 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlvmf", "drschn"],
-            prog=__name__)
-        if self.sql.error:
-            return
         gc = GetCtl(self.opts["mf"])
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
         if drsctl["ctd_chain"] == "N":
+            showError(self.opts["mf"].body, "Error",
+                "Chain Stores are Not Enabled")
+            return
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlvmf", "drschn"],
+            prog=__name__)
+        if self.sql.error:
             return
         return True
 

=== modified file 'drs/drc220.py'
--- drs/drc220.py	2015-08-26 08:52:51 +0000
+++ drs/drc220.py	2015-08-31 13:31:30 +0000
@@ -14,7 +14,8 @@
 """
 
 import time
-from TartanClasses import RepPrt, Sql, TartanDialog
+from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
+from tartanFunctions import showError
 
 class drc220:
     def __init__(self, **opts):
@@ -24,6 +25,14 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
+        self.gc = GetCtl(self.opts["mf"])
+        drsctl = self.gc.getCtl("drsctl", self.opts["conum"])
+        if not drsctl:
+            return
+        if drsctl["ctd_chain"] == "N":
+            showError(self.opts["mf"].body, "Error",
+                "Chain Stores are Not Enabled")
+            return
         self.sql = Sql(self.opts["mf"].dbm, "drschn", prog=__name__)
         if self.sql.error:
             return
@@ -57,8 +66,7 @@
         RepPrt(self.opts["mf"], name=__name__, tables=["drschn"], heads=heads,
             cols=cols, where=[("chm_cono", "=", self.opts["conum"])],
             conum=self.opts["conum"], conam=self.opts["conam"],
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc320.py'
--- drs/drc320.py	2015-08-26 08:52:51 +0000
+++ drs/drc320.py	2015-08-28 12:17:08 +0000
@@ -65,11 +65,10 @@
             sort = "arm_name"
         elif self.sort == "R":
             sort = "arm_rep"
-        RepPrt(self.opts["mf"], name=__name__, tables=["ctlare"], heads=heads,
-            cols=cols, where=[("arm_cono", "=", self.opts["conum"])],
-            order=sort, opts=opts, conum=self.opts["conum"],
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+        RepPrt(self.opts["mf"], tables=["ctlare"], heads=heads, cols=cols,
+            where=[("arm_cono", "=", self.opts["conum"])], order=sort,
+            opts=opts, conum=self.opts["conum"], conam=self.opts["conam"],
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc420.py'
--- drs/drc420.py	2015-08-26 08:52:51 +0000
+++ drs/drc420.py	2015-08-28 12:18:16 +0000
@@ -50,7 +50,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        name = __name__
         tables = ["ctlrep"]
         heads = ["Salemen's Master Listing"]
         cols = []
@@ -66,11 +65,10 @@
             odr = "rpm_name, rpm_rep"
         whr = [("rpm_cono", "=", self.opts["conum"])]
         opts = "%-5s%-6s" % ("Sort-", self.sort)
-        RepPrt(self.opts["mf"], name=name, tables=tables, heads=heads,
-            cols=cols, order=odr, opts=opts, where=whr,
-            conum=self.opts["conum"], conam=self.opts["conam"],
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+        RepPrt(self.opts["mf"], tables=tables, heads=heads, cols=cols,
+            order=odr, opts=opts, where=whr, conum=self.opts["conum"],
+            conam=self.opts["conam"], repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc520.py'
--- drs/drc520.py	2015-08-26 08:52:51 +0000
+++ drs/drc520.py	2015-08-31 13:44:41 +0000
@@ -68,12 +68,10 @@
         cols = [["a","NA",7.0,"Add-Cod"],
                 ["b","NA",30.0,"Address-Line"],
                 ["c","NA",30.0,"Address-Line"]]
-        state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=cols, conum=self.opts["conum"], ttype="D",
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
-        self.df.enableButtonsTags(state=state)
+            conam=self.opts["conam"], repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def closeProcess(self):

=== modified file 'drs/drc620.py'
--- drs/drc620.py	2015-08-26 08:52:51 +0000
+++ drs/drc620.py	2015-08-28 11:26:24 +0000
@@ -110,8 +110,8 @@
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'gen/gl1010.py'
--- gen/gl1010.py	2015-06-17 15:23:42 +0000
+++ gen/gl1010.py	2015-09-18 12:52:41 +0000
@@ -327,30 +327,45 @@
             dat.insert(0, self.opts["conum"])
             self.sql.insRec("ctlctl", data=dat)
         if "CR" in self.mods:
-            self.sql.delRec(
-                "crsctl", where=[("ctc_cono", "=", self.opts["conum"])])
-            self.sql.insRec("crsctl", data=[self.opts["conum"], self.igcrs,
-                "E", "", 0, 0, "remittance_advice"])
+            chk = self.sql.getRec(tables="crsctl",
+                where=[("ctc_cono", "=", self.opts["conum"])])
+            if not chk:
+                self.sql.insRec("crsctl", data=[self.opts["conum"], self.igcrs,
+                    "E", "", 0, 0, "remittance_advice"])
+            else:
+                self.sql.updRec("crsctl", cols=["ctc_glint"], data=[self.igcrs],
+                    where=[("ctc_cono", "=", self.opts["conum"])])
             if self.igcrs == "Y" and crsctl:
                 self.sql.updRec("genmst", cols=["glm_ind"], data=["N"],
                     where=[("glm_cono", "=", self.opts["conum"]),
                     ("glm_acno", "=", crsctl)])
         if "DR" in self.mods:
-            self.sql.delRec(
-                "drsctl", where=[("ctd_cono", "=", self.opts["conum"])])
-            self.sql.insRec("drsctl", data=[self.opts["conum"], self.igdrs,
-                "E", "N", "statement_normal", "Y"])
+            chk = self.sql.getRec(tables="drsctl",
+                where=[("ctd_cono", "=", self.opts["conum"])])
+            if not chk:
+                self.sql.insRec("drsctl", data=[self.opts["conum"], self.igdrs,
+                    "E", "N", "statement_normal", "Y"])
+            else:
+                self.sql.updRec("drsctl", cols=["ctd_glint"], data=[self.igdrs],
+                    where=[("ctd_cono", "=", self.opts["conum"])])
             if self.igdrs == "Y" and drsctl:
                 self.sql.updRec("genmst", cols=["glm_ind"], data=["N"],
                     where=[("glm_cono", "=", self.opts["conum"]),
                     ("glm_acno", "=", drsctl)])
         if "ST" in self.mods:
-            self.sql.delRec(
-                "strctl", where=[("cts_cono", "=", self.opts["conum"])])
-            self.sql.insRec("strctl", data=[self.opts["conum"],self.igstr,
-                "N", 1, "N", "purchase_order"])
-            self.sql.insRec("strloc", data=[self.opts["conum"], "1",
-                "Location Number One", "", "", "", ""])
+            chk = self.sql.getRec(tables="drsctl",
+                where=[("ctd_cono", "=", self.opts["conum"])])
+            if not chk:
+                self.sql.insRec("strctl", data=[self.opts["conum"],self.igstr,
+                    "N", 1, "N", "purchase_order"])
+            else:
+                self.sql.updRec("strctl", cols=["cts_glint"], data=[self.igstr],
+                    where=[("cts_cono", "=", self.opts["conum"])])
+            chk = self.sql.getRec(tables="strloc", where=[("srl_cono", "=",
+                self.opts["conum"])])
+            if not chk:
+                self.sql.insRec("strloc", data=[self.opts["conum"], "1",
+                    "Location Number One", "", "", "", ""])
             if self.igstr == "Y" and stksoh:
                 self.sql.updRec("genmst", cols=["glm_ind"], data=["N"],
                     where=[("glm_cono", "=", self.opts["conum"]),

=== modified file 'gen/gl1040.py'
--- gen/gl1040.py	2014-12-30 15:37:38 +0000
+++ gen/gl1040.py	2015-09-14 09:28:19 +0000
@@ -70,12 +70,11 @@
             eflds=flds, rows=row, butt=but, tend=tnd, cend=cnd, txit=txt,
             cxit=cxt)
 
-    def doCode(self, frt, pag, r, c, p, i, code):
-        self.code = code
+    def doCode(self, frt, pag, r, c, p, i, w):
+        self.code = w
         cod = self.sql.getRec(tables="gendtm", cols=["gdm_desc"],
-            where=[("gdm_cono", "=", self.opts["conum"]), (
-                "gdm_code", "=", self.code)],
-            limit=1)
+            where=[("gdm_cono", "=", self.opts["conum"]),
+            ("gdm_code", "=", self.code)], limit=1)
         if not cod:
             self.newcod = "y"
         else:
@@ -88,8 +87,8 @@
         self.sql.delRec("gendtt", where=[("gdt_cono", "=", self.opts["conum"]),
             ("gdt_code", "=", self.code)])
 
-    def doDesc(self, frt, pag, r, c, p, i, desc):
-        self.desc = desc
+    def doDesc(self, frt, pag, r, c, p, i, w):
+        self.desc = w
 
     def endTops(self):
         data = [self.opts["conum"], self.code, self.desc]
@@ -119,8 +118,8 @@
         self.sql.delRec("gendtt", where=[("gdt_cono", "=", self.opts["conum"]),
             ("gdt_code", "=", self.code), ("gdt_curdt", "=", self.per)])
 
-    def doValue(self, frt, pag, r, c, p, i, val):
-        self.val = val
+    def doValue(self, frt, pag, r, c, p, i, w):
+        self.val = w
 
     def endData(self):
         data = [self.opts["conum"], self.code, self.per, self.val]

=== modified file 'gen/gl2020.py'
--- gen/gl2020.py	2015-08-25 15:02:35 +0000
+++ gen/gl2020.py	2015-09-19 13:43:06 +0000
@@ -275,6 +275,7 @@
             "stype": "C",
             "titl": titl,
             "head": head,
+            "typs": (("UI", 7), ("NA", 30), ("SD", 7.2)),
             "data": data}
         state = self.rr.disableButtonsTags()
         self.opts["mf"].updateStatus("")

=== modified file 'gen/gl2030.py'
--- gen/gl2030.py	2015-08-25 15:02:35 +0000
+++ gen/gl2030.py	2015-09-15 11:54:12 +0000
@@ -28,8 +28,8 @@
 """
 
 import time
-from TartanClasses import AgeAll, ASD, Batches, CCD, GetCtl, LoanInterest
-from TartanClasses import ProgressBar, BankImport, SChoice, Sql, TartanDialog
+from TartanClasses import AgeAll, ASD, BankImport, Batches, CCD, GetCtl
+from TartanClasses import ProgressBar, SChoice, Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, chkGenAcc, getNextCode
 from tartanFunctions import getSingleRecords, getVatRate, copyList, mthendDate
 from tartanFunctions import showError
@@ -319,8 +319,7 @@
                     ("lm2_desc", "", 0, "Description", "Y")),
                 "whera": [
                     ("C", "lm2_cono", 0, 2),
-                    ("C", "lm2_acno", 0, self.tagp["LN"])],
-                "index": 0}
+                    ("C", "lm2_acno", 0, self.tagp["LN"])]}
         if "ML" in self.tagp:
             mlm = {
                 "stype": "R",
@@ -347,8 +346,7 @@
                     ("wlm_desc", "", 0, "Description", "Y")),
                 "whera": [
                     ("C", "wlm_cono", 0, 2),
-                    ("C", "wlm_empno", 0, self.tagp["SL"])],
-                "index": 0}
+                    ("C", "wlm_empno", 0, self.tagp["SL"])]}
             ced = {
                 "stype": "R",
                 "tables": ("wagedc",),
@@ -450,7 +448,7 @@
                 self.lonpag = self.tagp[tag]
                 fld.extend([
                     [["T",self.lonpag,0,0],"OSD",13.2,"Unallocated Balance"],
-                    [["C",self.lonpag,0,0],"IUI",7,"Acc-Num","Account Number",
+                    [["C",self.lonpag,0,0],"IUA",7,"Acc-Num","Account Number",
                         "","N",self.doLonAcc,lm1,None,None],
                     [["C",self.lonpag,0,1],"ONA",20,"Name"],
                     [["C",self.lonpag,0,2],"IUI",2,"Ln","Loan Number",
@@ -459,11 +457,13 @@
                         "","N",self.doLonDes,None,None,("notblank",)],
                     [["C",self.lonpag,0,4],"ISD",13.2,"Amount","",
                         "","N",self.doLonAmt,None,None,("efld",)],
-                    [["C",self.lonpag,0,5],"IUD",6.2,"Rate-%","Interest Rate",
-                        "","N",self.doLonInt,None,None,("efld",)],
-                    [["C",self.lonpag,0,6],"IUI",3,"Mth","Period in Months",
+                    [["C",self.lonpag,0,5],"IUD",6.2,"DRte-%","Debit Rate",
+                        self.lon_dr,"N",self.doLonDri,None,None,("efld",)],
+                    [["C",self.lonpag,0,6],"IUD",6.2,"CRte-%","Credit Rate",
+                        self.lon_cr,"N",self.doLonCri,None,None,("efld",)],
+                    [["C",self.lonpag,0,7],"IUI",3,"Mth","Period in Months",
                         "","N",self.doLonMth,None,None,("efld",)],
-                    [["C",self.lonpag,0,7],"OUD",12.2,"Repayment"]])
+                    [["C",self.lonpag,0,8],"OUD",12.2,"Repayment"]])
 
             elif tag == "ML":
                 self.mempag = self.tagp[tag]
@@ -493,7 +493,7 @@
                         "","N",self.doSlnCod,ced,None,("efld",)],
                     [["C",self.slnpag,0,6],"ONA",20,"Description"],
                     [["C",self.slnpag,0,7],"IUD",6.2,"Rate-%","Interest Rate",
-                        "","N",self.doSlnInt,None,None,("efld",)],
+                        self.sln_rt,"N",self.doSlnInt,None,None,("efld",)],
                     [["C",self.slnpag,0,8],"IUD",13.2,"Ded-Amt","Deduction",
                         "","N",self.doSlnDed,None,None,("efld",)]])
         if self.pcash:
@@ -1142,7 +1142,8 @@
             if not ctl:
                 return "rf"
             self.lon_gl = ctl["cln_glint"]
-            self.lon_rt = ctl["cln_rate"]
+            self.lon_dr = ctl["cln_drte"]
+            self.lon_cr = ctl["cln_crte"]
         else:
             self.lon_gl = "N"
         # Load Mem Integration
@@ -1273,12 +1274,11 @@
             return "sk1"
 
     def doVatCalc(self, code):
-        vat = getVatRate(self.sql, self.opts["conum"], code, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], code, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T. Code"
         self.vatcod = code
-        rate = float(vat[0])
-        self.vatamt = round((self.allamt * rate / (rate + 100)), 2)
+        self.vatamt = round((self.allamt * vrte / (vrte + 100)), 2)
 
     def doVatAmt(self, frt, pag, r, c, p, i, w):
         if self.allamt < 0 and w > 0:
@@ -1995,8 +1995,8 @@
         self.sql.insRec("bkmtrn", data=data)
         # Check and Update Status
         trn = self.sql.getRec(tables="bkmtrn", cols=["sum(bkt_tramt)"],
-            where=[("bkt_cono", "=", self.opts["conum"]), ("bkt_number",
-            "=", self.bkmnum), ("bkt_type", "<>", 1)], limit=1)
+            where=[("bkt_cono", "=", self.allcoy), ("bkt_number", "=",
+            self.bkmnum), ("bkt_type", "<>", 1)], limit=1)
         if not trn[0]:
             bal = CCD(0, "SD", 13.2).work
         else:
@@ -2025,13 +2025,12 @@
             if yn == "no":
                 return "Invalid Account Number"
             self.newlon = True
-            self.lonrte = 0
             w = callModule(self.opts["mf"], self.df, "ln1010",
-                coy=(self.opts["conum"], self.opts["conam"]),
-                user=self.opts["capnm"], args="auto", ret="acno")
+                coy=(self.allcoy, self.allnam), user=self.opts["capnm"],
+                args="auto", ret="acno")
             self.df.loadEntry(frt, pag, p, data=w)
         acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
-            where=[("lm1_cono", "=", self.opts["conum"]),
+            where=[("lm1_cono", "=", self.allcoy),
             ("lm1_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
@@ -2047,25 +2046,23 @@
                     mess="Is This a New Loan?", default="no")
             if ok == "yes":
                 self.newlon = True
-                self.lonrte = 0
                 self.lonnum = getNextCode(self.sql, "lonmf2", "lm2_loan",
-                    where=[("lm2_cono", "=", self.opts["conum"])],
-                    start=1, last=9999999)
+                    where=[("lm2_cono", "=", self.allcoy), ("lm2_acno",
+                    "=", self.lonacc)], start=1, last=9999999)
                 self.df.loadEntry(frt, pag, p, data=self.lonnum)
             else:
                 return "Invalid Loan Number"
         else:
-            acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
-                "=", self.opts["conum"]), ("lm2_acno", "=", self.lonacc),
+            self.lonmf2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+                "=", self.allcoy), ("lm2_acno", "=", self.lonacc),
                 ("lm2_loan", "=", w)], limit=1)
-            if not acc:
+            if not self.lonmf2:
                 return "Invalid Loan Number"
             self.lonnum = w
-            self.londes = acc[self.sql.lonmf2_col.index("lm2_desc")]
-            self.lonrte = acc[self.sql.lonmf2_col.index("lm2_rate")]
-            self.londat = acc[self.sql.lonmf2_col.index("lm2_start")]
-            self.lonmth = acc[self.sql.lonmf2_col.index("lm2_mths")]
-            self.lonpay = acc[self.sql.lonmf2_col.index("lm2_rpay")]
+            self.londes = self.lonmf2[self.sql.lonmf2_col.index("lm2_desc")]
+            self.londat = self.lonmf2[self.sql.lonmf2_col.index("lm2_start")]
+            self.lonmth = self.lonmf2[self.sql.lonmf2_col.index("lm2_pmths")]
+            self.lonpay = self.lonmf2[self.sql.lonmf2_col.index("lm2_repay")]
             if self.lonmth and self.glrtn == 2:
                 return "Invalid Entry, Fixed Loan"
             self.df.loadEntry(frt, pag, p+1, data=self.londes)
@@ -2082,18 +2079,21 @@
         else:
             self.othamt = float(ASD(self.allamt) - ASD(self.vatamt))
         self.df.loadEntry(frt, pag, p, data=self.othamt)
-        self.df.loadEntry(frt, pag, p+1, data=self.lonrte)
         if self.glrtn == 6 or not self.newlon:
-            self.newrte = self.lonrte
+            self.df.loadEntry(frt, pag, p+1, data=0)
+            self.df.loadEntry(frt, pag, p+2, data=0)
             return "nd"
 
-    def doLonInt(self, frt, pag, r, c, p, i, w):
-        self.newrte = w
+    def doLonDri(self, frt, pag, r, c, p, i, w):
+        self.newdri = w
+
+    def doLonCri(self, frt, pag, r, c, p, i, w):
+        self.newcri = w
 
     def doLonMth(self, frt, pag, r, c, p, i, w):
         self.lonmth = w
         if self.lonmth:
-            rte = (self.newrte / 1200.0)
+            rte = (self.newdri / 1200.0)
             self.lonpay = round(((self.othamt * rte) * ((1 + rte) ** w)) /
                 (((1 + rte) ** w) - 1), 2)
         else:
@@ -2108,40 +2108,24 @@
         self.othtot = float(ASD(self.othtot) + ASD(self.othamt))
         if self.newlon:
             # Loans Rate
-            self.sql.insRec("lonrte", data=[self.opts["conum"], self.lonacc,
-                self.lonnum, self.trndat, self.newrte])
+            self.sql.insRec("lonrte", data=[self.allcoy, self.lonacc,
+                self.lonnum, self.trndat, self.newdri, self.newcri])
             # Loans Ledger Masterfile
             self.othrtn = 2
             cap = self.othamt
             self.sql.insRec("lonmf2", data=[self.allcoy, self.lonacc,
-                self.lonnum, self.londes, self.trndat, self.newrte,
-                self.lonmth, self.lonpay])
+                self.lonnum, self.londes, self.trndat, self.lonmth,
+                self.lonpay])
         else:
-            # Loans Ledger Interest
-            LoanInterest(self.sql, self.allcoy, self.lonacc, self.lonnum,
-                self.lonrte, self.londat, self.trndat, self.bh.batno,
-                self.curdt, capnm=self.opts["capnm"], update="Y",
-                glctls=(self.ctlctl["lon_ctl"], self.ctlctl["lon_int"]),
-                ltype="O", mths=self.lonmth, rpay=self.lonpay)
-            # Loans Ledger Masterfile
-            self.sql.updRec("lonmf2", cols=["lm2_rate"], data=[self.newrte],
-                where=[("lm2_cono", "=", self.opts["conum"]), ("lm2_acno",
-                "=", self.lonacc), ("lm2_loan", "=", self.lonnum)])
+            # Loans Ledger Rest
             if self.glrtn == 6:
                 self.othrtn = 4
-                cap = 0.00
             else:
                 self.othrtn = 3
-                cap = tramt
         # Loans Ledger Transaction
         data = [self.allcoy, self.lonacc, self.lonnum, self.bh.batno,
-            self.othrtn, self.trndat, self.trnref, tramt, cap, self.newrte]
-        if self.newlon:
-            data.extend([self.lonmth, self.lonpay])
-        else:
-            data.extend([0, 0])
-        data.extend([self.curdt, self.alldet, "", self.opts["capnm"],
-            self.sysdtw, 0])
+            self.othrtn, self.trndat, self.trnref, tramt, self.curdt,
+            self.alldet, "", self.opts["capnm"], self.sysdtw, 0]
         self.sql.insRec("lontrn", data=data)
         if self.othtot != self.allamt:
             bal = float(ASD(self.allamt) - ASD(self.othtot))
@@ -2152,8 +2136,8 @@
 
     def doSlnEmp(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
-            where=[("wgm_cono", "=", self.opts["conum"]), ("wgm_empno", "=",
-            w)], limit=1)
+            where=[("wgm_cono", "=", self.allcoy), ("wgm_empno", "=", w)],
+            limit=1)
         if not acc:
             return "Invalid Employee Number"
         self.empnum = w
@@ -2168,24 +2152,23 @@
                 mess="Is This a New Loan?", default="no")
             if ok == "yes":
                 self.newsln = True
-                self.slnrte = 0
                 self.slnnum = getNextCode(self.sql, "waglmf", "wlm_loan",
-                    where=[("wlm_cono", "=", self.opts["conum"])],
-                    start=1, last=99999)
+                    where=[("wlm_cono", "=", self.allcoy), ("wlm_empno",
+                    "=", self.empnum)], start=1, last=99999)
                 self.df.loadEntry(frt, pag, p, data=self.slnnum)
         else:
             acc = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
-                "=", self.opts["conum"]), ("wlm_empno", "=", self.empnum),
+                "=", self.allcoy), ("wlm_empno", "=", self.empnum),
                 ("wlm_loan", "=", self.slnnum)], limit=1)
             if not acc:
                 return "Loan Does Not Exist"
             self.slnnum = w
             self.newsln = False
             self.slndes = acc[self.sql.waglmf_col.index("wlm_desc")]
-            self.slncod = acc[self.sql.waglmf_col.index("wlm_ded_code")]
-            self.slnrte = acc[self.sql.waglmf_col.index("wlm_int_per")]
-            self.slndat = acc[self.sql.waglmf_col.index("wlm_start_date")]
-            self.slnded = acc[self.sql.waglmf_col.index("wlm_ded_amt")]
+            self.slncod = acc[self.sql.waglmf_col.index("wlm_code")]
+            self.slnrte = acc[self.sql.waglmf_col.index("wlm_rate")]
+            self.slndat = acc[self.sql.waglmf_col.index("wlm_start")]
+            self.slnded = acc[self.sql.waglmf_col.index("wlm_repay")]
             self.df.loadEntry(frt, pag, p+1, data=self.slndes)
             return "sk1"
 
@@ -2201,19 +2184,24 @@
             self.othamt = float(ASD(self.allamt) - ASD(self.vatamt))
         self.df.loadEntry(frt, pag, p, data=self.othamt)
         if self.glrtn == 6:
-            self.newrte = self.slnrte
             return "nd"
         if not self.newsln:
             self.df.loadEntry(frt, pag, p+1, data=self.slncod)
 
     def doSlnCod(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="wagedc", cols=["ced_desc"],
-            where=[("ced_cono", "=", self.opts["conum"]), ("ced_type",
+            where=[("ced_cono", "=", self.allcoy), ("ced_type",
             "=", "D"), ("ced_code", "=", w)], limit=1)
         if not acc:
             return "Invalid Code"
         self.df.loadEntry(frt, pag, p+1, data=acc[0])
         self.slncod = w
+        if not self.newsln:
+            self.newrte = 0
+            self.slnded = 0
+            self.df.loadEntry(frt, pag, p+1, data=0)
+            self.df.loadEntry(frt, pag, p+2, data=0)
+            return "nd"
         self.df.loadEntry(frt, pag, p+2, data=self.slnrte)
 
     def doSlnInt(self, frt, pag, r, c, p, i, w):
@@ -2238,15 +2226,10 @@
                 self.slnnum, self.slndes, self.slncod, self.newrte,
                 self.trndat, self.slnded])
         else:
-            # Staff Loans Ledger Interest
-            LoanInterest(self.sql, self.allcoy, self.empnum, self.slnnum,
-                self.slnrte, self.slndat, self.trndat, self.bh.batno,
-                self.curdt, capnm=self.opts["capnm"], update="Y",
-                glctls=(self.ctlctl["wag_slc"], self.ctlctl["wag_sli"]))
             # Staff Loans Ledger Masterfile
             self.sql.updRec("waglmf", cols=["wlm_int_per"], data=[self.newrte],
-                where=[("wlm_cono", "=", self.opts["conum"]), ("wlm_empno",
-                "=", self.empnum), ("wlm_loan", "=", self.slnnum)])
+                where=[("wlm_cono", "=", self.allcoy), ("wlm_empno", "=",
+                self.empnum), ("wlm_loan", "=", self.slnnum)])
             if self.glrtn == 6:
                 self.othrtn = 4
                 cap = 0.00

=== modified file 'gen/gl2040.py'
--- gen/gl2040.py	2015-08-25 15:02:35 +0000
+++ gen/gl2040.py	2015-09-12 16:03:58 +0000
@@ -289,13 +289,11 @@
                 self.trnamt = val
                 self.vatcod = cod
                 if self.vatcod and not vat:
-                    vatr = getVatRate(self.sql, self.opts["conum"],
+                    vrte = getVatRate(self.sql, self.opts["conum"],
                         self.vatcod, self.trndat)
-                    if not vatr:
-                        rate = 0
-                    else:
-                        rate = float(vatr[0])
-                    self.vatamt = round((self.trnamt * rate / (rate + 100)), 2)
+                    if vrte is None:
+                        vrte = 0.0
+                    self.vatamt = round((self.trnamt * vrte / (vrte + 100)), 2)
                 else:
                     self.vatamt = vat
                 self.trndet = des
@@ -392,14 +390,12 @@
         self.df.loadEntry("C", 0, p+1, self.taxgl)
 
     def doVatCod(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T. Code"
         self.vatcod = w
-        rate = float(vat[0])
-        vat = str(round((self.trnamt * rate / (rate + 100)), 2))
-        vat = self.df.loadEntry("C", 0, p+1, data=vat)
-        self.vatamt = vat.work
+        self.vatamt = str(round((self.trnamt * vrte / (vrte + 100)), 2))
+        self.df.loadEntry("C", 0, p+1, data=self.vatamt)
         if not self.vatamt:
             return "sk1"
 
@@ -504,14 +500,12 @@
                             self.acno = tran[0]
                             self.trnamt = tran[1]
                             self.vatcod = tran[2]
-                            vat = getVatRate(self.sql, self.opts["conum"],
+                            vrte = getVatRate(self.sql, self.opts["conum"],
                                 self.vatcod, self.trndat)
-                            if not vat:
-                                rate = 0
-                            else:
-                                rate = float(vat[0])
-                            self.vatamt = round((
-                                self.trnamt * rate / (rate + 100)), 2)
+                            if vrte is None:
+                                vrte = 0.0
+                            self.vatamt = round(
+                                (self.trnamt * vrte / (vrte + 100)), 2)
                             self.updateTables()
                             self.updateBatch()
                         self.sql.updRec("genjlm", cols=["gjm_last"],

=== modified file 'gen/gl3010.py'
--- gen/gl3010.py	2015-08-26 08:52:51 +0000
+++ gen/gl3010.py	2015-08-28 11:26:24 +0000
@@ -155,8 +155,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'gen/gl3020.py'
--- gen/gl3020.py	2015-08-26 08:52:51 +0000
+++ gen/gl3020.py	2015-08-28 11:26:24 +0000
@@ -382,8 +382,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         cono = CCD(data[0], "UI", 3)

=== modified file 'gen/gl3030.py'
--- gen/gl3030.py	2015-08-26 08:52:51 +0000
+++ gen/gl3030.py	2015-08-28 11:26:24 +0000
@@ -262,8 +262,8 @@
             self.fpdf.output(pdfnam, "F")
             if not self.auto:
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                    prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                    repeml=self.df.repeml)
 
     def getAccValues(self, data):
         dic = self.sql.genmst_dic

=== modified file 'gen/gl3040.py'
--- gen/gl3040.py	2015-08-26 08:52:51 +0000
+++ gen/gl3040.py	2015-08-28 11:26:24 +0000
@@ -25,7 +25,7 @@
                 self.opebal = "N"
                 self.incope = "Y"
                 self.start = self.s_per
-                self.end, self.zerbal, self.repprt, self.fpdf = \
+                self.end, self.zerbal, self.repprt, self.repeml, self.fpdf = \
                         self.opts["args"]
                 self.doEnd()
             else:
@@ -104,6 +104,7 @@
     def doEnd(self):
         if not "args" in self.opts:
             self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
             self.df.closeProcess()
         recs = self.sql.getRec(tables="genmst", cols=["glm_acno",
             "glm_desc", "glm_type"], where=[("glm_cono", "=",
@@ -198,8 +199,8 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.repprt[1],
-                    prtnam=self.repprt[2], mail=self.repeml[2])
+                    pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
+                    repeml=self.repeml)
         if not "args" in self.opts:
             self.closeProcess()
 

=== modified file 'gen/gl3050.py'
--- gen/gl3050.py	2015-08-26 08:52:51 +0000
+++ gen/gl3050.py	2015-09-08 16:39:00 +0000
@@ -26,7 +26,7 @@
         if self.setVariables():
             if "args" in self.opts:
                 self.end, self.typ, self.rep, self.val, self.var, self.zer, \
-                    self.repprt, self.fpdf = self.opts["args"]
+                    self.repprt, self.repeml, self.fpdf = self.opts["args"]
                 yed = CCD(mthendDate((self.end * 100) + 1), "D1", 10)
                 self.yed = "%s %s %s" % ((yed.work % 100),
                     mthnam[((yed.work % 10000) / 100)][1], yed.work / 10000)
@@ -51,7 +51,7 @@
         self.gldep = ctlsys["sys_gl_dep"]
         self.gldig = ctlsys["sys_gl_dig"]
         self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "ctldep", "genbud",
-            "gendtm", "genrpt", "genrpc", "genstr"], prog=__name__)
+            "gendtm", "gendtt", "genrpt", "genrpc", "genstr"], prog=__name__)
         if self.sql.error:
             return
         t = time.localtime()
@@ -303,6 +303,7 @@
     def doMainEnd(self):
         if not "args" in self.opts:
             self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
             self.df.closeProcess()
         if self.strm:
             reps = self.sql.getRec(tables="genstr", where=[("gls_cono", "=",
@@ -333,19 +334,19 @@
                         self.num = "Y"
                     if not rep[col.index("gls_prnt")]:
                         self.view = "N"
-                        self.prtnam = "None"
+                        self.repprt[2] = ""
                         self.pdfnam = getModName(self.opts["mf"].
                             rcdic["wrkdir"], __name__, "%s_%s" %
                             (self.opts["conum"], seq), ext="pdf")
                     elif rep[col.index("gls_prnt")] == "Export":
                         self.view = "X"
-                        self.prtnam = "export"
+                        self.repprt[2] = "export"
                         self.pdfnam = getModName(self.opts["mf"].
                             rcdic["wrkdir"], __name__, "%s_%s" %
                             (self.opts["conum"], seq))
                     else:
                         self.view = "N"
-                        self.prtnam = rep[col.index("gls_prnt")]
+                        self.repprt[2] = rep[col.index("gls_prnt")]
                         self.pdfnam = getModName(self.opts["mf"].
                             rcdic["wrkdir"], __name__, "%s_%s" %
                             (self.opts["conum"], seq), ext="pdf")
@@ -355,10 +356,7 @@
                             continue
                     self.doCreateReport()
         else:
-            self.view = self.repprt[1]
-            self.prtnam = self.repprt[2]
-            self.mail = self.repeml[2]
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 self.pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"],
                     __name__, self.opts["conum"])
             else:
@@ -825,7 +823,7 @@
                 self.allfields.extend(self.fin.allFields)
         if not self.allfields:
             return
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             self.doExportReport()
         else:
             self.doPrintReport()
@@ -899,13 +897,13 @@
                 self.doUnderline(dat)
             self.counter = dat[6]
         p.closeProgress()
-        if self.strm and self.prtnam == "export":
+        if self.strm and self.repprt[2] == "export":
             view = False
         else:
             view = True
-        doWriteExport(xtype=self.view, name=self.pdfnam, heads=self.expheads,
-            colsh=self.expcolsh, forms=self.expforms, datas=self.expdatas,
-            rcdic=self.opts["mf"].rcdic, view=view)
+        doWriteExport(xtype=self.repprt[1], name=self.pdfnam,
+            heads=self.expheads, colsh=self.expcolsh, forms=self.expforms,
+            datas=self.expdatas, rcdic=self.opts["mf"].rcdic, view=view)
 
     def doPrintReport(self):
         p = ProgressBar(self.opts["mf"].body, mxs=len(self.allfields))
@@ -1093,17 +1091,17 @@
         if not "args" in self.opts and self.fpdf.page:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.emlhead, view=self.view,
-                prtnam=self.prtnam, mail=self.mail)
+                pdfnam=self.pdfnam, head=self.emlhead,
+                repprt=self.repprt, repeml=self.repeml)
 
     def doHeading(self, line):
         if line[3] == "Y":
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 if self.oldtyp != line[1]:
                     self.pageHeading(line)
             else:
                 self.pageHeading(line)
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             data = []
             for num, dat in enumerate(self.expforms):
                 if int(self.expforms[num][1]) < 30:
@@ -1163,11 +1161,13 @@
                     vmt = CCD(vmt, "CI", 14)
                     if bud.work:
                         vmtper = round(vmt.work * 100.0 / bud.work, 2)
+                        if vmtper > 0 and vmtper > 999.99:
+                            vmtper = 999.99
+                        elif vmtper < 0 and vmtper < -999.99:
+                            vmtper = -999.99
                     else:
                         vmtper = 0
                     vmtper = CCD(vmtper, "SD", 7.2)
-                    if vmtper.err:
-                        vmtper = CCD(999.99, "SD", 7.2)
             ytd = CCD(line[8][4], "CD", 17.2)
             btd = CCD(long(line[8][5]), "CI", 14)
             if typ == "P":
@@ -1181,20 +1181,22 @@
                 vtd = CCD(vtd, "CI", 14)
                 if btd.work:
                     vtdper = round(vtd.work * 100.0 / btd.work, 2)
+                    if vtdper > 0 and vtdper > 999.99:
+                        vtdper = 999.99
+                    elif vtdper < 0 and vtdper < -999.99:
+                        vtdper = -999.99
                 else:
                     vtdper = 0
                 vtdper = CCD(vtdper, "SD", 7.2)
-                if vtdper.err:
-                    vtdper = CCD(999.99, "SD", 7.2)
         else:
             for x in xrange(0, 14):
                 if self.val == "X" and sgn == "N":
                     line[9][x] = float(ASD(0) - ASD(line[9][x]))
                 ldic["mp%s" % x] = CCD(long(line[9][x]), "SL", 11)
                 ldic["mx%s" % x] = CCD(line[9][x], "SD", 14.2)
-        if self.prtnam != "export" and line[2] == "Y":
+        if self.repprt[2] != "export" and line[2] == "Y":
             self.fpdf.setFont(style="B")
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             if typ == "T":
                 txt = "TOTAL"
             else:
@@ -1203,7 +1205,7 @@
             if self.zer == "Y" and not lyr.work and not ytd.work and not \
                     btd.work and not vtd.work:
                 pass
-            elif self.prtnam == "export":
+            elif self.repprt[2] == "export":
                 self.expdatas.append([txt, [lyr.work, des.work, ytd.work,
                     btd.work, vtd.work, vtdper.work]])
             else:
@@ -1217,7 +1219,7 @@
                     vtd.work and not lyr.work:
                 pass
             elif line[1] == "B":
-                if self.prtnam == "export":
+                if self.repprt[2] == "export":
                     if self.num == "Y":
                         self.expdatas.append([txt, [acc.work, des.work, "",
                             "", "", "", ytd.work, btd.work, vtd.work,
@@ -1240,7 +1242,7 @@
                     self.pglin += 1
                     self.last = True
             else:
-                if self.prtnam == "export":
+                if self.repprt[2] == "export":
                     if self.num == "Y":
                         self.expdatas.append([txt, [acc.work, des.work,
                             mth.work, bud.work, vmt.work, vmtper.work,
@@ -1268,7 +1270,7 @@
             if self.zer == "Y":
                 p = "n"
                 for x in xrange(0, 14):
-                    if self.prtnam == "export":
+                    if self.repprt[2] == "export":
                         a = ldic["mx%s" % x].work
                     else:
                         a = ldic["mp%s" % x].work
@@ -1278,7 +1280,7 @@
                 p = "y"
             if p == "n":
                 pass
-            elif self.prtnam == "export":
+            elif self.repprt[2] == "export":
                 if self.num == "Y":
                     self.expdatas.append([txt, [acc.work, des.work,
                         ldic["mx0"].work, ldic["mx1"].work, ldic["mx2"].work,
@@ -1345,7 +1347,7 @@
                     work.append(ytd.work)
                     if ytd.work:
                         zero = False
-                elif self.titles[col[0]][0] == "Budget":
+                elif self.titles[col[0]][0] in ("Budget", "Prev-Year"):
                     disp.append(btd.disp)
                     work.append(btd.work)
                     if btd.work:
@@ -1363,17 +1365,17 @@
                         zero = False
             if self.zer == "Y" and zero:
                 pass
-            elif self.prtnam == "export":
+            elif self.repprt[2] == "export":
                 self.expdatas.append([txt, work])
             else:
                 self.fpdf.drawText(self.lind % tuple(disp))
                 self.pglin += 1
                 self.last = True
-        if self.prtnam != "export":
+        if self.repprt[2] != "export":
             self.fpdf.setFont()
 
     def doUnderline(self, line):
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             if line[5] == "Blank":
                 self.expdatas.append(["BLANK"])
             elif line[5] == "Double":
@@ -1401,7 +1403,7 @@
         self.last = False
 
     def pageHeading(self, line):
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             if self.typ == "C":
                 if self.rptyp in ("B", "P"):
                     if line[11] == "Balance Sheet":
@@ -1573,7 +1575,7 @@
         else:
             con = str(tuple(self.con)).replace("'", "").replace(" ", "")
             txt += " Companies: %s " % con
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             self.expheads.append(txt)
             return
         self.fpdf.drawText()

=== modified file 'gen/gl3060.py'
--- gen/gl3060.py	2015-08-26 08:52:51 +0000
+++ gen/gl3060.py	2015-08-28 12:19:32 +0000
@@ -55,8 +55,7 @@
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=["genmst"],
             heads=["General Ledger Chart of Accounts"], cols=col, where=whr,
-            order=odr, view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            order=odr, repprt=self.df.repprt, repeml=self.df.repeml)
         self.closeProcess()
 
     def doExit(self):

=== modified file 'gen/gl3070.py'
--- gen/gl3070.py	2015-02-07 06:31:11 +0000
+++ gen/gl3070.py	2015-08-28 11:26:24 +0000
@@ -66,7 +66,7 @@
                 ["g", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'gen/gl3080.py'
--- gen/gl3080.py	2015-08-26 08:52:51 +0000
+++ gen/gl3080.py	2015-08-27 07:58:31 +0000
@@ -182,8 +182,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
 
     def printLine(self, num, mxs, dat, typ):
         trdt = CCD(dat[0], "D1", 10)

=== modified file 'gen/gl3090.py'
--- gen/gl3090.py	2015-08-26 08:52:51 +0000
+++ gen/gl3090.py	2015-08-28 12:19:59 +0000
@@ -107,8 +107,7 @@
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=["genrct"],
             heads=hds, cols=col, where=whr, order=odr, gtots=tot,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.closeProcess()
 
     def doExit(self):

=== modified file 'gen/gl3100_rne.py'
--- gen/gl3100_rne.py	2015-08-26 08:52:51 +0000
+++ gen/gl3100_rne.py	2015-08-31 10:11:35 +0000
@@ -44,12 +44,6 @@
                 ("cye_start", "", 0, "Start"),
                 ("cye_end", "", 0, "End")),
             "where": [("cye_cono=1",)]}
-        coy = {
-            "stype": "R",
-            "tables": ("ctlmst",),
-            "cols": (
-                ("ctm_cono", "", 0, "Com"),
-                ("ctm_name", "", 0, "Name", "Y"))}
         grp = {
             "stype": "R",
             "tables": ("ctlgrp",),
@@ -57,6 +51,12 @@
                 ("ctg_code", "", 0, "Cod"),
                 ("ctg_desc", "", 0, "Description")),
             "order": "ctg_code"}
+        coy = {
+            "stype": "R",
+            "tables": ("ctlmst",),
+            "cols": (
+                ("ctm_cono", "", 0, "Com"),
+                ("ctm_name", "", 0, "Name", "Y"))}
         fld = (
             (("T",0,0,0),"IUI",3,"Financial Period","",
                 self.finper,"Y",self.doFP,fin,None,("efld",)),
@@ -303,14 +303,18 @@
                     lyr = float(ASD(lyr) + ASD(amt.work))
                     if amt.work:
                         zero = False
-                if not zero:
-                    if not tot or not lyr:
-                        lyv = 0
-                    else:
-                        lyv = float(ASD(lyr) - ASD(tot))
-                        lyv = round(lyv * 100.0 / float(ASD(0) - ASD(tot)), 2)
                 else:
+                    lyr = 0
+            if not zero:
+                if not tot or not lyr:
                     lyv = 0
+                else:
+                    lyv = float(ASD(lyr) - ASD(tot))
+                    lyv = round(lyv * 100.0 / float(ASD(0) - ASD(tot)), 2)
+                    if lyv > 0 and lyv > 999.99:
+                        lyv = 999.99
+                    elif lyv < 0 and lyv < -999.99:
+                        lyv = -999.99
                 dat.extend([tot, lyr, lyv])
                 data.append(dat)
         cols = [
@@ -327,11 +331,10 @@
         gtot.append("total")
         gtot.append("lyear")
         view, pnam = self.df.repprt[1:3]
-        mail = self.df.repeml[2]
         RepPrt(self.opts["mf"], **{"name": "gl3100", "tables": data,
             "heads": ["Trial Balance as at %s for %s" % (self.epd, self.tbh)],
             "cols": cols, "stots": [["type", "Total of Type", "Y"]],
             "gtots": gtot, "pdffl": pdffl, "ttype": "D",
-            "view": view, "prtnam": pnam, "mail": mail})
+            "repprt": self.df.repprt, "repeml": self.df.repeml})
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'gen/gl3110_rne.py'
--- gen/gl3110_rne.py	2015-08-26 08:52:51 +0000
+++ gen/gl3110_rne.py	2015-08-28 11:26:24 +0000
@@ -170,8 +170,8 @@
                     self.df.repprt, self.fpdf))
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
         if self.fs == "Y":
             tit = "Financial Statements as at %s for Companies %s" % (self.epd,
                 coyd)
@@ -190,8 +190,8 @@
                     self.rn, self.rv, "P", self.iz, self.df.repprt, self.fpdf))
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'gen/gl4010.py'
--- gen/gl4010.py	2015-08-26 08:52:51 +0000
+++ gen/gl4010.py	2015-09-09 08:25:39 +0000
@@ -52,6 +52,7 @@
         else:
             self.d_per = 0
             self.s_per = self.i_per
+        self.d_pyr = 0
         if self.opts["period"][0]:
             s, e, f = getPeriods(self.opts["mf"], self.opts["conum"],
                 (self.opts["period"][0] - 1))
@@ -72,7 +73,6 @@
                         yr += 1
                 self.s_pyr = (yr * 100) + mt
             else:
-                self.d_pyr = 0
                 self.s_pyr = self.i_pyr
         self.trnper = 0
         return True
@@ -405,9 +405,8 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.pr.repprt[1],
-                prtnam=self.pr.repprt[2], mail=self.pr.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repeml=self.pr.repeml)
         else:
             trn = self.getTrans()
             if trn:
@@ -459,8 +458,7 @@
                 RepPrt(self.opts["mf"], name=__name__,
                     conum=self.opts["conum"], conam=self.opts["conam"],
                     tables=data, heads=heads, cols=cols, gtots=["debit",
-                    "credit"], view=self.pr.repprt[1],
-                    prtnam=self.pr.repprt[2], mail=self.pr.repeml[2],
+                    "credit"], repprt=self.pr.repprt, repeml=self.pr.repeml,
                     ttype="D")
         self.opts["mf"].closeLoop()
 

=== modified file 'gen/gl6010.py'
--- gen/gl6010.py	2015-08-25 15:02:35 +0000
+++ gen/gl6010.py	2015-09-11 14:08:37 +0000
@@ -14,7 +14,7 @@
 """
 
 from TartanClasses import CCD, FileImport, ProgressBar, Sql, TartanDialog
-from tartanFunctions import askQuestion, copyList
+from tartanFunctions import copyList
 
 class gl6010:
     def __init__(self, **opts):
@@ -27,6 +27,7 @@
         sql = Sql(self.opts["mf"].dbm, "ftable", prog=__name__)
         if sql.error:
             return
+        self.unique = ("genbal", "genbud", "genmst", "genrcc", "genrct")
         self.tables = [
             ("assgrp", "asg_cono", "asg_assacc"),
             ("assgrp", "asg_cono", "asg_depacc"),
@@ -39,7 +40,7 @@
             ("ctldep", "dep_dr_coy", "dep_dr_com"),
             ("ctldep", "dep_cr_coy", "dep_cr_sal"),
             ("ctldep", "dep_cr_coy", "dep_cr_com"),
-            ("ctlnot", "not_key"),
+            ("ctlnot", "not_cono", "not_key"),
             ("ctlvtf", "vtt_cono", "vtt_acno", "vtt_styp"),
             ("drsrcm", "dcm_cono", "dcm_glac"),
             ("genbal", "glo_cono", "glo_acno"),
@@ -77,6 +78,7 @@
         self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
+        self.doimp = False
         return True
 
     def mainProcess(self):
@@ -107,6 +109,7 @@
 
     def doImport(self, widget=None):
         self.df.closeProcess()
+        self.doimp = True
         impcol = []
         pos = 0
         for num, fld in enumerate(self.fld):
@@ -119,21 +122,10 @@
             impcol.append([fld[4], pos, fld[1][1:], size])
             pos += 1
         fi = FileImport(self.opts["mf"], impcol=impcol)
-        if fi.impdat:
-            p = ProgressBar(self.opts["mf"].body, typ="Importing Changes",
-                mxs=len(fi.impdat))
-            for num, line in enumerate(fi.impdat):
-                p.displayProgress(num)
-                self.oldacc = line[0]
-                if line[1]:
-                    self.newacc = line[1]
-                else:
-                    self.newacc = self.oldacc
-                self.oldnot = str(self.oldacc)
-                self.newnot = str(self.newacc)
-                self.doChange()
-            p.closeProgress()
-            self.opts["mf"].dbm.commitDbase(ask=True)
+        chgs = fi.impdat
+        if chgs:
+            chgs.sort()
+            self.doChange(chgs)
         self.opts["mf"].closeLoop()
 
     def doOldAcc(self, frt, pag, r, c, p, i, w):
@@ -142,7 +134,6 @@
         if not acc:
             return "Invalid Account Number, Does Not exist"
         self.oldacc = w
-        self.oldnot = str(w)
         self.df.loadEntry(frt, pag, p+1, data=acc[3])
 
     def doNewAcc(self, frt, pag, r, c, p, i, w):
@@ -151,44 +142,69 @@
         if acc:
             return "Invalid Account Number, Already Exists"
         self.newacc = w
-        self.newnot = str(w)
 
     def doEnd(self):
-        genrpt = askQuestion(self.opts["mf"].body, head="Report Generator",
-            mess="Apply this Change to the Report Generator as well?",
-            default="no")
-        self.doChange(genrpt)
+        self.doChange([[self.oldacc, self.newacc]])
         self.df.focusField("T", 0, 1)
 
-    def doChange(self, genrpt="yes"):
-        for tab in self.tables:
-            if tab[0] == "ctlnot":
-                whr = [("not_cono", "=", self.opts["conum"]),
-                    ("not_sys", "=", "GEN"), (tab[1], "=", self.oldnot)]
-                dat = [self.newnot]
-                col = [tab[1]]
-            elif tab[0] == "ctlvtf":
-                oldacc = CCD(self.oldacc, "Na", 7).work
-                newacc = CCD(self.newacc, "Na", 7).work
-                whr = [
-                    (tab[1], "=", self.opts["conum"]),
-                    (tab[2], "=", oldacc),
-                    (tab[3], "=", "G")]
-                dat = [newacc]
-                col = [tab[2]]
-            elif tab[0] == "genrpt" and genrpt == "yes":
-                whr = [
-                    (tab[1], "in", (0, self.opts["conum"])),
-                    (tab[2], "=", self.oldacc)]
-                dat = [self.newacc]
-                col = [tab[2]]
-            else:
-                whr = [
-                    (tab[1], "=", self.opts["conum"]),
-                    (tab[2], "=", self.oldacc)]
-                dat = [self.newacc]
-                col = [tab[2]]
-            self.sql.updRec(tab[0], where=whr, data=dat, cols=col)
+    def doChange(self, chgs):
+        if self.doimp:
+            p1 = ProgressBar(self.opts["mf"].body, typ="",
+                mxs=len(self.tables))
+        for num, tab in enumerate(self.tables):
+            if self.doimp:
+                p1.txtlab.configure(text="Changing %s Table" % tab[0])
+                p1.displayProgress(num)
+            #print tab[0], self.sql.getRec(tables=tab[0], \
+            #        cols=["count(*)"])[0][0],
+            new = []
+            if self.doimp:
+                p2 = ProgressBar(self.opts["mf"].body, inn=p1, typ="",
+                    mxs=len(chgs))
+            for seq, chg in enumerate(chgs):
+                if self.doimp:
+                    p2.txtlab.configure(text="Changing Number %s to %s" %
+                        (chg[0], chg[1]))
+                    p2.displayProgress(seq)
+                # Get records for this change
+                oldacc, newacc = chg
+                if tab[0] == "genrpt":
+                    whr = [(tab[1], "in", (0, self.opts["conum"]))]
+                else:
+                    whr = [(tab[1], "=", self.opts["conum"])]
+                if tab[0] == "ctlnot":
+                    whr.extend([
+                        ("not_sys", "=", "GEN"),
+                        (tab[2], "=", str(oldacc))])
+                elif tab[0] == "ctlvtf":
+                    oldacc = CCD(oldacc, "Na", 7).work
+                    newacc = CCD(newacc, "Na", 7).work
+                    whr.extend([
+                        (tab[2], "=", oldacc),
+                        (tab[3], "=", "G")])
+                else:
+                    whr.append((tab[2], "=", oldacc))
+                recs = self.sql.getRec(tables=tab[0], where=whr)
+                if not recs:
+                    continue
+                # Delete records
+                self.sql.delRec(tab[0], where=whr)
+                # Make changes
+                col = getattr(self.sql, "%s_col" % tab[0])
+                pos = col.index(tab[2])
+                cpy = copyList(recs)
+                for rec in cpy:
+                    rec[pos] = newacc
+                    new.append(rec)
+            if self.doimp:
+                p2.closeProgress()
+            if new:
+                self.sql.insRec(tab[0], data=new)
+            #print self.sql.getRec(tables=tab[0], \
+            #        cols=["count(*)"])[0][0]
+        if self.doimp:
+            p1.closeProgress()
+            self.opts["mf"].dbm.commitDbase(ask=True)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'gen/gl6030.py'
--- gen/gl6030.py	2015-08-26 08:52:51 +0000
+++ gen/gl6030.py	2015-08-28 11:26:24 +0000
@@ -533,8 +533,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.doExit()
 
     def pageHeading(self, desc=None):

=== modified file 'gen/gl6040.py'
--- gen/gl6040.py	2015-08-26 08:52:51 +0000
+++ gen/gl6040.py	2015-08-28 11:26:24 +0000
@@ -131,8 +131,8 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.doExit()
 
     def pageHeading(self):

=== added file 'gen/gl6060.py'
--- gen/gl6060.py	1970-01-01 00:00:00 +0000
+++ gen/gl6060.py	2015-09-16 12:47:25 +0000
@@ -0,0 +1,205 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    General Ledger Merge Accounts into a Control Account.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2015 Paul Malherbe.
+"""
+
+from TartanClasses import ASD, CCD, ProgressBar, Sql, TartanDialog
+from tartanFunctions import copyList, getSingleRecords
+
+class gl6060:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        sql = Sql(self.opts["mf"].dbm, "ftable", prog=__name__)
+        if sql.error:
+            return
+        self.unique = ("genbal", "genbud", "genmst", "genrcc", "genrct")
+        self.tables = [
+            ("assgrp", "asg_cono", "asg_assacc"),
+            ("assgrp", "asg_cono", "asg_depacc"),
+            ("assgrp", "asg_cono", "asg_expacc"),
+            ("bkmunm", "bum_cono", "bum_slsa"),
+            ("crsctl", "ctc_cono", "ctc_bankac"),
+            ("crsmst", "crm_cono", "crm_glac"),
+            ("ctlctl", "ctl_cono", "ctl_conacc"),
+            ("ctldep", "dep_dr_coy", "dep_dr_sal"),
+            ("ctldep", "dep_dr_coy", "dep_dr_com"),
+            ("ctldep", "dep_cr_coy", "dep_cr_sal"),
+            ("ctldep", "dep_cr_coy", "dep_cr_com"),
+            ("ctlnot", "not_cono", "not_key"),
+            ("ctlvtf", "vtt_cono", "vtt_acno", "vtt_styp"),
+            ("drsrcm", "dcm_cono", "dcm_glac"),
+            ("genbal", "glo_cono", "glo_acno"),
+            ("genbud", "glb_cono", "glb_acno"),
+            ("genint", "cti_cono", "cti_acno"),
+            ("genjlt", "gjt_cono", "gjt_acno"),
+            ("genmst", "glm_cono", "glm_acno"),
+            ("genrcc", "grc_cono", "grc_acno"),
+            ("genrcc", "grc_acoy", "grc_aacc"),
+            ("genrct", "grt_cono", "grt_acno"),
+            ("genrpt", "glr_cono", "glr_from"),
+            ("genrpt", "glr_cono", "glr_to"),
+            ("gentrn", "glt_cono", "glt_acno"),
+            ("memctc", "mcc_cono", "mcc_glac"),
+            ("rcactl", "cte_cono", "cte_glbnk"),
+            ("rtlprm", "rtp_cono", "rtp_rtlacc"),
+            ("rtlprm", "rtp_cono", "rtp_incacc"),
+            ("strgrp", "gpm_cono", "gpm_sales"),
+            ("strgrp", "gpm_cono", "gpm_costs"),
+            ("strmf1", "st1_cono", "st1_sls"),
+            ("strmf1", "st1_cono", "st1_cos"),
+            ("wagedc", "ced_eglco", "ced_eglno"),
+            ("wagedc", "ced_rglco", "ced_rglno"),
+            ("wagtf2", "wt2_gl_econo", "wt2_gl_eacno"),
+            ("wagtf2", "wt2_gl_rcono", "wt2_gl_racno")]
+        tabs = []
+        tables = copyList(self.tables)
+        for tab in tables:
+            chk = sql.getRec(tables="ftable", where=[("ft_tabl", "=", tab[0])])
+            if not chk:
+                self.tables.remove(tab)
+                continue
+            if not tab[0] in tabs:
+                tabs.append(tab[0])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
+        if self.sql.error:
+            return
+        return True
+
+    def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "General Ledger Merge Accounts into Control")
+        glm = {
+            "stype": "R",
+            "tables": ("genmst",),
+            "cols": (
+                ("glm_acno", "", 0, "Acc-Num"),
+                ("glm_desc", "", 0, "Description", "Y")),
+            "where": [("glm_cono", "=", self.opts["conum"])],
+            "order": "glm_desc"}
+        self.fld = (
+            (("T",0,0,0),"IUI",7,"Control Number","Control Account Number",
+                "","Y",self.doCtlAcc,glm,None,("notzero",)),
+            (("T",0,0,0),"ONA",30,""))
+        tnd = ((self.doEnd,"y"), )
+        txt = (self.doExit, )
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+            tend=tnd, txit=txt)
+
+    def doCtlAcc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="genmst", where=[("glm_cono", "=",
+            self.opts["conum"]), ("glm_acno", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Account Number, Does Not exist"
+        self.ctlacc = w
+        self.gtype = acc[self.sql.genmst_col.index("glm_type")]
+        self.df.loadEntry(frt, pag, p+1, data=acc[3])
+
+    def doEnd(self):
+        self.df.closeProcess()
+        recs = getSingleRecords(self.opts["mf"], "genmst", ("glm_acno",
+            "glm_desc"), where=[("glm_cono", "=", self.opts["conum"]),
+            ("glm_acno", "<>", self.ctlacc), ("glm_type", "=", self.gtype)])
+        if not recs:
+            showError(self.opts["mf"].body, "Error", "No Accounts Selected")
+            self.opts["mf"].closeLoop()
+            return
+        for rec in recs:
+            self.doMerge(rec[self.sql.genmst_col.index("glm_acno")])
+        self.opts["mf"].dbm.commitDbase(ask=True)
+        self.opts["mf"].closeLoop()
+
+    def doMerge(self, oldacc):
+        # Delete Record
+        self.sql.delRec("genmst", where=[("glm_cono", "=", self.opts["conum"]),
+            ("glm_acno", "=", oldacc)])
+        # Create and Delete genbal and genbud
+        recs = self.sql.getRec(tables="genbal", where=[("glo_cono", "=",
+            self.opts["conum"]), ("glo_acno", "=", oldacc)])
+        for rec in recs:
+            trdt = rec[self.sql.genbal_col.index("glo_trdt")]
+            cyr = rec[self.sql.genbal_col.index("glo_cyr")]
+            acc = self.sql.getRec(tables="genbal", where=[("glo_cono", "=",
+                self.opts["conum"]), ("glo_acno", "=", self.ctlacc),
+                ("glo_trdt", "=", trdt)], limit=1)
+            if acc:
+                bal = acc[self.sql.genbal_col.index("glo_cyr")]
+                bal = float(ASD(bal) + ASD(cyr))
+                self.sql.updRec("genbal", cols=["glo_cyr"], data=[bal],
+                    where=[("glo_cono", "=", self.opts["conum"]),
+                    ("glo_acno", "=", self.ctlacc),
+                    ("glo_trdt", "=", trdt)])
+            else:
+                self.sql.insRec("genbal", data=[self.opts["conum"],
+                    self.ctlacc, trdt, cyr])
+            self.sql.delRec("genbal", data=rec)
+        recs = self.sql.getRec(tables="genbud", where=[("glb_cono", "=",
+            self.opts["conum"]), ("glb_acno", "=", oldacc)])
+        for rec in recs:
+            curdt = rec[self.sql.genbud_col.index("glb_curdt")]
+            tramt = rec[self.sql.genbud_col.index("glb_tramt")]
+            acc = self.sql.getRec(tables="genbud", where=[("glb_cono", "=",
+                self.opts["conum"]), ("glb_acno", "=", self.ctlacc),
+                ("glb_curdt", "=", curdt)], limit=1)
+            if acc:
+                bal = acc[self.sql.genbud_col.index("glb_tramt")]
+                bal = float(ASD(bal) + ASD(tramt))
+                self.sql.updRec("genbud", cols=["glb_curdt"], data=[bal],
+                    where=[("glb_cono", "=", self.opts["conum"]),
+                    ("glb_acno", "=", self.ctlacc),
+                    ("glb_curdt", "=", curdt)])
+            else:
+                self.sql.insRec("genbud", data=[self.opts["conum"],
+                    self.ctlacc, curdt, tramt])
+            self.sql.delRec("genbud", data=rec)
+        # Change All tables
+        for num, tab in enumerate(self.tables):
+            new = []
+            if tab[0] == "genrpt":
+                whr = [(tab[1], "in", (0, self.opts["conum"]))]
+            else:
+                whr = [(tab[1], "=", self.opts["conum"])]
+            if tab[0] == "ctlnot":
+                whr.extend([
+                    ("not_sys", "=", "GEN"),
+                    (tab[2], "=", str(oldacc))])
+            elif tab[0] == "ctlvtf":
+                whr.extend([
+                    (tab[2], "=", str(oldacc)),
+                    (tab[3], "=", "G")])
+            else:
+                whr.append((tab[2], "=", oldacc))
+            recs = self.sql.getRec(tables=tab[0], where=whr)
+            if not recs:
+                continue
+            # Delete records
+            self.sql.delRec(tab[0], where=whr)
+            # Make changes
+            col = getattr(self.sql, "%s_col" % tab[0])
+            pos = col.index(tab[2])
+            cpy = copyList(recs)
+            for rec in cpy:
+                rec[pos] = self.ctlacc
+                new.append(rec)
+            if new:
+                self.sql.insRec(tab[0], data=new)
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== removed file 'gen/gl6060_rne.py'
--- gen/gl6060_rne.py	2014-12-30 15:37:38 +0000
+++ gen/gl6060_rne.py	1970-01-01 00:00:00 +0000
@@ -1,115 +0,0 @@
-#! /usr/bin/python
-
-"""
-SYNOPSIS
-    General Ledger Batch Deletion Utility.
-
-    This file is part of Tartan Systems (TARTAN).
-
-AUTHOR
-    Written by Paul Malherbe, <paul@tartan.co.za>
-
-COPYING
-    Copyright (C) 2004-2015 Paul Malherbe.
-"""
-
-from TartanClasses import TartanDialog, Sql
-from tartanWork import gltrtp
-
-class gl6060:
-    def __init__(self, **opts):
-        self.opts = opts
-        if self.setVariables():
-            self.mainProcess()
-            self.opts["mf"].startLoop()
-
-    def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "gentrn", "ctlvtf"])
-        if self.sql.error:
-            return
-        return True
-
-    def mainProcess(self):
-        tit = ("Batch Deletions",)
-        data = []
-        for n, t in enumerate(gltrtp):
-            data.append((n+1, t[1]))
-        ttp = {
-            "stype": "C",
-            "titl": "Transaction Types",
-            "head": ("C", "Type"),
-            "data": data}
-        self.bat = {
-            "stype": "R",
-            "tables": ("gentrn",),
-            "cols": (
-                ("glt_batch", "", 0, "BatchNo"),
-                ("glt_curdt", "", 0, "Curr-Dt")),
-            "where": [("glt_cono", "=", self.opts["conum"])],
-            "whera": [
-                ["T", "glt_curdt", 0],
-                ["T", "glt_type", 1]],
-            "group": "glt_batch",
-            "order": "glt_batch"}
-        r1s = (("Yes", "Y"), ("No", "N"))
-        fld = (
-            (("T",0,0,0),("IRB",r1s),0,"All Companies","",
-                "N","N",self.doAllCoy,None,None,None),
-            (("T",0,1,0),"I@glt_type",0,"","",
-                "","N",self.doType,ttp,None,("notzero",)),
-            (("T",0,2,0),"I@glt_batch",0,"","",
-                "","N",self.doBatch,self.bat,None,("notblank",)),
-            (("T",0,3,0),"I@glt_curdt",0,"","",
-                "","N",self.doCurdt,None,None,("efld",)))
-        tnd = ((self.doEnd,"y"),)
-        txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], tops=False, title=tit,
-            eflds=fld, tend=tnd, txit=txt)
-
-    def doAllCoy(self, frt, pag, r, c, p, i, w):
-        self.allcoy = w
-
-    def doType(self, frt, pag, r, c, p, i, w):
-        if w > len(gltrtp):
-            return "Invalid Transaction Type"
-        self.trtp = w
-
-    def doBatch(self, frt, pag, r, c, p, i, w):
-        if self.allcoy == "N":
-            self.genw = [("glt_cono", "=", self.opts["conum"])]
-            self.vatw = [("vtt_cono", "=", self.opts["conum"])]
-        else:
-            self.genw = []
-            self.vatw = []
-        self.genw.extend([
-            ("glt_type", "=", self.trtp),
-            ("glt_batch", "=", w)])
-        self.vatw.extend([
-            ("vtt_styp", "=", "G"),
-            ("vtt_ttyp", "=", self.trtp),
-            ("vtt_batch", "=", w)])
-        chk = self.sql.getRec(tables="gentrn", cols=["count(*)"],
-            where=self.genw, limit=1)
-        if not chk[0]:
-            return "Invalid Batch Number"
-
-    def doCurdt(self, frt, pag, r, c, p, i, w):
-        self.genw.append(("glt_curdt", "=", w))
-        self.vatw.append(("vtt_curdt", "=", w))
-        chk = self.sql.getRec(tables="gentrn", cols=["count(*)"],
-            where=self.genw, limit=1)
-        if not chk[0]:
-            return "Invalid Current date"
-
-    def doEnd(self):
-        self.df.closeProcess()
-        self.sql.delRec("gentrn", where=self.genw)
-        self.sql.delRec("ctlvtf", where=self.vatw)
-        self.opts["mf"].dbm.commitDbase(ask=True)
-        self.opts["mf"].closeLoop()
-
-    def doExit(self):
-        self.df.closeProcess()
-        self.opts["mf"].closeLoop()
-
-# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'gen/glc110.py'
--- gen/glc110.py	2015-08-25 15:02:35 +0000
+++ gen/glc110.py	2015-09-19 13:48:07 +0000
@@ -88,7 +88,8 @@
             if lonctl and lonctl["cln_glint"] == "Y":
                 self.glctrl.extend([
                     ("lon_ctl", "Loans Control"),
-                    ("lon_int", "Loans Interest")])
+                    ("int_pay", "Interest Paid"),
+                    ("int_rec", "Interest Received")])
         if mod.count("ML"):
             memctl = gc.getCtl("memctl", self.opts["conum"], error=False)
             if memctl and memctl["mcm_glint"] == "Y":
@@ -134,6 +135,7 @@
             "stype": "C",
             "titl": "Select Control",
             "head": ("Code", "Description"),
+            "typs": (("NA", 10), ("NA", 30)),
             "data": self.glctrl}
         glm = {
             "stype": "R",

=== modified file 'gen/glc210.py'
--- gen/glc210.py	2015-08-25 15:02:35 +0000
+++ gen/glc210.py	2015-09-19 13:15:52 +0000
@@ -56,23 +56,28 @@
                 ("glm_acno", "", 0, "Acc-Num"),
                 ("glm_desc", "", 0, "Description", "Y")),
             "whera": [["T", "glm_cono", 0, 0]]}
-        data = self.sql.getRec(tables=["genint", "genmst"], cols=["cti_cono",
+        data = self.sql.getRec(tables=["genint", "genmst"], cols=["cti_inco",
             "glm_desc"], where=[("cti_cono", "=", self.opts["conum"]),
-            ("glm_cono=cti_inco",)], order="cti_inco")
+            ("glm_cono=cti_cono",), ("glm_acno=cti_acno",)], order="cti_inco")
         self.gl3 = {
             "stype": "C",
             "titl": "Existing Companies",
             "head": ("Coy","Name"),
+            "typs": (("UI", 3), ("NA", 30)),
             "data": data}
         fld = (
             (("T",0,0,0,14),"IUI",3,"Coy-Num","Company Number",
                 "","Y",self.doCoyNum,coy,None,None),
             (("T",0,0,17),"ONA",30,""),
             (("T",0,1,0,10),"IUI",7,"Acc-Num-1","G/L Account Number",
-                "","N",self.doAccNum1,gl1,self.doDelete,("notzero",)),
+                "","N",self.doAccNum1,gl1,self.doDelete,("notzero",),None,
+                "The above company's account number in company %s." %
+                self.opts["conum"]),
             (("T",0,1,17),"ONA",30,""),
             (("T",0,2,0,10),"IUI",7,"Acc-Num-2","G/L Account Number",
-                "","N",self.doAccNum2,gl2,None,("notzero",)),
+                "","N",self.doAccNum2,gl2,None,("notzero",),None,
+                "Company %s's account number in the above company." %
+                self.opts["conum"]),
             (("T",0,2,17),"ONA",30,""))
         but = (
             ("Show All",self.gl3,None,0,("T",0,1),("T",0,2)),

=== modified file 'lon/ln1010.py'
--- lon/ln1010.py	2015-08-25 15:02:35 +0000
+++ lon/ln1010.py	2015-09-15 10:40:31 +0000
@@ -2,7 +2,7 @@
 
 """
 SYNOPSIS
-    Booking Contacts Maintenance.
+    Loan Accounts Maintenance.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -15,7 +15,7 @@
 
 import time
 from TartanClasses import GetCtl, Sql, TartanDialog
-from tartanFunctions import askQuestion, getNextCode
+from tartanFunctions import askQuestion, genAccNum
 
 class ln1010:
     def __init__(self, **opts):
@@ -46,11 +46,20 @@
                 ("lm1_acno", "", 0, "Code"),
                 ("lm1_name", "", 0, "Surame", "Y"),
                 ("lm1_email", "", 0, "Email Address"))}
-        self.fld = (
-            (("T",0,0,0),"IUI",7,"Account Number","",
-                "","Y",self.doAcno,con,None,None),
-            (("T",0,1,0),"ITX",30,"Name","",
-                "","N",None,None,self.doDelete,("notblank",)),
+        if "args" in self.opts:
+            fld = [
+                (("T",0,0,0),"OUA",7,"Account Code"),
+                (("T",0,1,0),"ITX",30,"Name","",
+                    "","N",self.doName,None,None,("notblank",))]
+            self.newacc = True
+            self.acno = None
+        else:
+            fld = [
+                (("T",0,0,0),"IUA",7,"Account Code","",
+                    "","Y",self.doAcno,con,None,None),
+                (("T",0,1,0),"ITX",30,"Name","",
+                    "","N",self.doName,None,self.doDelete,("notblank",))]
+        fld.extend([
             (("T",0,2,0),"ITX",30,"Address Line 1","",
                 "","N",None,None,None,("efld",)),
             (("T",0,3,0),"ITX",30,"Address Line 2","",
@@ -66,16 +75,14 @@
             (("T",0,8,0),"ITX",20,"Mobile Number","",
                 "","N",None,None,None,("efld",)),
             (("T",0,9,0),"ITX",30,"E-Mail Address","",
-                "","N",None,None,None,("email",)))
+                "","N",None,None,None,("email",))])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,2),("T",0,1)),
             ("Quit", None, self.doExit,1,None,None))
         tnd = ((self.doAccept,"N"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt, clicks=self.doClick)
-        if "args" in self.opts:
-            self.df.doInvoke(None, 0)
 
     def doClick(self, *opts):
         if self.click:
@@ -98,16 +105,25 @@
             for num, dat in enumerate(self.oldacc[1:]):
                 self.df.loadEntry("T", 0, num, data=dat)
         else:
-            if not "args" in self.opts:
-                yn = askQuestion(self.opts["mf"].body, "New Account",
-                    "Is This a New Loan Account?", default="no")
-                if yn == "no":
-                    return "Invalid Account Number"
-            self.newacc = True
-            self.acno = getNextCode(self.sql, "lonmf1", "lm1_acno",
-                where=[("lm1_cono", "=", self.opts["conum"])],
-                start=1, last=9999999)
-            self.df.loadEntry(frt, pag, p, data=self.acno)
+            yn = askQuestion(self.opts["mf"].body, "New Account",
+                "Is This a New Loan Account?", default="no")
+            if yn == "no":
+                return "Invalid Account Number"
+
+    def doName(self, frt, pag, r, c, p, i, w):
+        if self.newacc:
+            chk = self.sql.getRec(tables="lonmf1", where=[("lm1_cono", "=",
+                self.opts["conum"]), ("lm1_name", "=", w)], limit=1)
+            if chk:
+                return "An Account With This Name Already Exists"
+            for seq in range(1, 100):
+                self.acno = genAccNum(w, seq)
+                chk = self.sql.getRec(tables="lonmf1", where=[("lm1_cono",
+                    "=", self.opts["conum"]), ("lm1_acno", "=", self.acno)],
+                    limit=1)
+                if not chk:
+                    break
+            self.df.loadEntry(frt, pag, p-1, data=self.acno)
 
     def doDelete(self, widget=None):
         chk = self.sql.getRec(tables="lonmf2", cols=["count(*)"],
@@ -122,10 +138,7 @@
             (self.opts["conum"], self.acno), "", dte, self.opts["capnm"],
             "", "", 0])
         self.opts["mf"].dbm.commitDbase()
-        if "args" in self.opts:
-            self.doExit()
-        else:
-            self.df.focusField("T", 0, 1)
+        self.df.focusField("T", 0, 1)
 
     def doAccept(self, widget=None):
         frt, pag, col, mes = self.df.doCheckFields()
@@ -148,10 +161,10 @@
                         "%03i%-7s" % (self.opts["conum"], self.acno),
                         self.sql.lonmf1_col[num], dte, self.opts["capnm"],
                         str(dat), str(data[num]), 0])
-        self.opts["mf"].dbm.commitDbase()
         if "args" in self.opts:
             self.doExit()
         else:
+            self.opts["mf"].dbm.commitDbase()
             self.df.focusField("T", 0, 1)
 
     def doExit(self, widget=None):

=== modified file 'lon/ln2010.py'
--- lon/ln2010.py	2015-08-25 15:02:35 +0000
+++ lon/ln2010.py	2015-09-30 09:51:48 +0000
@@ -2,7 +2,7 @@
 
 """
 SYNOPSIS
-    New Loans Capture.
+    Loans's Ledger Data Capture.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -15,181 +15,431 @@
 
 import time
 from TartanClasses import ASD, Batches, GetCtl, Sql, TartanDialog
-from tartanFunctions import askQuestion, callModule
+from tartanFunctions import askQuestion, callModule, chkGenAcc, getNextCode
+from tartanFunctions import showError
+from tartanWork import lntrtp
 
 class ln2010:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
-            self.dataHeader()
+            self.drawDialog()
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["genmst", "gentrn", "lonmf1",
-            "lonmf2", "lonrte", "lontrn"], prog=__name__)
+        # Create SQL Object
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmst", "lonmf1", "lonmf2",
+            "lonrte", "lontrn", "genint", "genmst", "gentrn"], prog=__name__)
         if self.sql.error:
             return
+        # Check for Intercompany Facility
+        if not self.sql.getRec(tables="ctlmst", cols=["count(*)"],
+                where=[("ctm_cono", "<>", self.opts["conum"])], limit=1)[0]:
+            self.incoac = False
+        else:
+            itg = self.sql.getRec(tables="genint", cols=["cti_inco"],
+                where=[("cti_cono", "=", self.opts["conum"])])
+            if itg:
+                self.incoac = [self.opts["conum"]]
+                [self.incoac.append(coy[0]) for coy in itg]
+            else:
+                self.incoac = False
         self.gc = GetCtl(self.opts["mf"])
         lonctl = self.gc.getCtl("lonctl", self.opts["conum"])
         if not lonctl:
             return
         self.glint = lonctl["cln_glint"]
+        self.drte = lonctl["cln_drte"]
+        self.crte = lonctl["cln_crte"]
         if self.glint == "Y":
             ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
                 return
-            if self.gc.chkRec(self.opts["conum"], ctlctl, ["lon_ctl"]):
+            ctls = ["lon_ctl", "lon_int"]
+            if self.gc.chkRec(self.opts["conum"], ctlctl, ctls):
                 return
             self.lonctl = ctlctl["lon_ctl"]
-        self.bh = Batches(self.opts["mf"], self.opts["conum"],
-            self.opts["conam"], self.opts["period"], "LON", 2,
-            glint=self.glint)
-        self.bh.doBatchHeader()
+            self.lonint = ctlctl["lon_int"]
+        self.batchHeader()
         if not self.bh.batno:
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        self.allcoy = self.opts["conum"]
+        self.taxdf = self.gc.getCtl("ctlmst", self.opts["conum"])["ctm_taxdf"]
         return True
 
-    def dataHeader(self):
+    def batchHeader(self):
+        self.bh = Batches(self.opts["mf"], self.opts["conum"],
+            self.opts["conam"], self.opts["period"], "LON",
+            self.opts["rtn"], glint=self.glint)
+        self.bh.doBatchHeader()
+        if not self.bh.batno:
+            return
+        if self.opts["rtn"] == 4:
+            self.bh.batval = float(ASD(0) - ASD(self.bh.batval))
+
+    def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "New Loans Capture (%s)" % __name__)
+            "Loans " + lntrtp[self.opts["rtn"] - 1][1] + \
+            " Data Capture (%s)" % __name__)
         lm1 = {
             "stype": "R",
             "tables": ("lonmf1",),
             "cols": (
                 ("lm1_acno", "", 0, "Acc-Num"),
-                ("lm1_name", "", 0, "Name", "Y")),
-            "where": [("lm1_cono", "=", self.opts["conum"])]}
-        fld = (
+                ("lm1_name", "", 0, "Name", "Y"))}
+        lm2 = {
+            "stype": "R",
+            "tables": ("lonmf2",),
+            "cols": (
+                ("lm2_loan", "", 0, "Ln"),
+                ("lm2_desc", "", 0, "Description", "Y")),
+            "where": [("lm2_cono", "=", self.opts["conum"])],
+            "whera": [("C", "lm2_acno", 0)]}
+        coy = {
+            "stype": "R",
+            "tables": ("ctlmst",),
+            "cols": (
+                ("ctm_cono", "", 0, "Coy"),
+                ("ctm_name", "", 0, "Name", "Y"))}
+        glm = {
+            "stype": "R",
+            "tables": ("genmst",),
+            "cols": (
+                ("glm_acno", "", 0, "Acc-Num"),
+                ("glm_desc", "", 0, "Description", "Y")),
+            "whera": [["C", "glm_cono", 0, 2]]}
+        fld = [
             (("T",0,0,0),"OUI",9,"Batch %s Quantity" % self.bh.batno),
             (("T",0,0,0),"OSD",13.2,"Value"),
-            (("C",0,0,0),"IUI",7,"Acc-Num","Account Number",
-                "","N",self.doAcc,lm1,None,None),
-            (("C",0,0,1),"ONA",20,"Name"),
-            (("C",0,0,2),"OUI",2,"Ln"),
-            (("C",0,0,3),"INA",30,"Description","",
-                "","N",self.doDesc,None,None,None),
-            (("C",0,0,4),"ID1",10,"Start-Date","",
-                "","N",self.doSdate,None,None,None),
-            (("C",0,0,5),"INa",9,"Reference","Reference Number",
-                "","N",self.doRef,None,None,("notblank",)),
-            (("C",0,0,7),"IUD",6.2,"Rate-%","Interest Rate",
-                "","N",self.doInt,None,None,None),
-            (("C",0,0,8),"IUD",12.2,"Loan-Amount","Loan Amount",
-                "","N",self.doAmt,None,None,("notzero",)),
-            (("C",0,0,9),"IUI",3,"Mth","Period in Months",
-                "","N",self.doMth,None,None,("efld",)),
-            (("C",0,0,10),"OUD",12.2,"Repayment"))
-        but = (("Interrogate",None,self.querySln,0,("C",0,1),("C",0,2)),)
-        cnd = ((self.endPage,"y"), )
-        cxt = (self.exitPage, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, butt=but,
-            cend=cnd, cxit=cxt)
+            (("C",1,0,0),"INA",7,"Acc-Num","Account Code",
+                "","Y",self.doLonAcc,lm1,None,("efld",)),
+            (("C",1,0,1),"ONA",10,"Name"),
+            (("C",1,0,2),"IUI",2,"LN","Loan Number",
+                "","N",self.doLonNum,lm2,None,("efld",)),
+            (("C",1,0,3),"ITX",(12,30),"Description","",
+                "","N",self.doLonDes,None,None,("notblank",)),
+            (("C",1,0,4),"ID1",10,"Date","Transaction Date",
+                "r","N",self.doTrnDat,None,None,("efld",)),
+            (("C",1,0,5),"INa",9,"Reference","Reference Number One",
+                "i","N",self.doTrnRef,None,None,("notblank",)),
+            (("C",1,0,6),"ISD",13.2,"Amount","Transaction Amount",
+                "","N",self.doTrnAmt,None,None,("notzero",))]
+        if self.opts["rtn"] in (1, 2):                   # Pay and Rec
+            fld.extend([
+                (("C",1,0,7),"IUD",6.2,"DRte-%","Debit Rate",
+                    self.drte,"N",self.doLonDrt,None,None,None),
+                (("C",1,0,8),"IUD",6.2,"CRte-%","Credit Rate",
+                    self.crte,"N",self.doLonCrt,None,None,None),
+                (("C",1,0,9),"IUI",3,"Mth","Period in Months",
+                    "","N",self.doLonMth,None,None,("efld",)),
+                (("C",1,0,10),"OUD",12.2,"Repay-Amt")])
+        if self.opts["rtn"] in (3, 4):                   # J/E and Int
+            fld.append(
+                (("C",1,0,7),"INA",30,"Details","Transaction Details",
+                    "","N",self.doTrnDet,None,None,None))
+        if self.opts["rtn"] == 3 and self.glint == "Y":  # J/E and G/L
+            fld.extend([
+                (("T",2,0,0),"OSD",13.2,"Unallocated Balance"),
+                [("C",2,0,0),"IUI",3,"Coy","Company Number",
+                    self.opts["conum"],"N",self.doCoyNum,coy,None,None],
+                (("C",2,0,1),"IUI",7,"Acc-Num","Account Number",
+                    "","N",self.doGenAcc,glm,None,None),
+                (("C",2,0,2),"ONA",19,"Description"),
+                (("C",2,0,4),"ISD",13.2,"All-Amount","Allocation Amount",
+                    "","N",self.doAllAmt,None,None,("efld",)),
+                (("C",2,0,6),"INA",30,"Details","",
+                    "","N",self.doAllDet,None,None,("notblank",))])
+            if not self.incoac:
+                fld[11][1] = "OUI"
+        but = [("Interrogate",None,self.querySln,0,("C",1,1),("C",1,2))]
+        tag = [("Transaction", None, None, None, False)]
+        cnd = [(None,"n"), (self.endPage1,"y")]
+        cxt = [None, self.exitPage1]
+        if self.opts["rtn"] == 3 and self.glint == "Y":
+            but.append(("Cancel",None,self.doCancel,0,("C",2,1),("C",1,1)))
+            tag.append(("Allocation", None, None, None, False))
+            cnd.append((self.endPage2,"y"))
+            cxt.append(self.exitPage2)
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tags=tag, cend=cnd, cxit=cxt, butt=but)
         self.df.loadEntry("T", 0, 0, data=self.bh.batqty)
         self.df.loadEntry("T", 0, 1, data=self.bh.batval)
-        self.df.focusField("C", 0, 1)
+        self.df.focusField("C", 1, 1)
 
-    def doAcc(self, frt, pag, r, c, p, i, w):
-        if not w:
+    def doLonAcc(self, frt, pag, r, c, p, i, w):
+        self.newlon = False
+        if not w and self.opts["rtn"] in (1, 2, 3):
             yn = askQuestion(self.opts["mf"].body, "New Account",
                 "Is This a New Account?", default="no")
             if yn == "no":
                 return "Invalid Account Number"
+            self.newlon = True
             w = callModule(self.opts["mf"], self.df, "ln1010",
                 coy=(self.opts["conum"], self.opts["conam"]),
                 user=self.opts["capnm"], args="auto", ret="acno")
             self.df.loadEntry(frt, pag, p, data=w)
         acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
-            where=[("lm1_cono", "=", self.opts["conum"]),
+            where=[("lm1_cono", "=", self.allcoy),
             ("lm1_acno", "=", w)], limit=1)
         if not acc:
             return "Invalid Account Number"
-        self.acno = w
+        self.lonacc = w
         self.name = acc[0]
         self.df.loadEntry("C", pag, p+1, data=self.name)
-        acc = self.sql.getRec(tables="lonmf2", cols=["lm2_loan"],
-            where=[("lm2_cono", "=", self.opts["conum"]),
-            ("lm2_acno", "=", self.acno)], order="lm2_loan")
-        if not acc:
-            self.loan = 1
+        if self.newlon:
+            self.lonnum = 1
+            self.df.loadEntry("C", pag, p+2, data=self.lonnum)
+            return "sk2"
+
+    def doLonNum(self, frt, pag, r, c, p, i, w):
+        if not w and self.opts["rtn"] in (1, 2, 3):
+            if self.newlon:
+                ok = "yes"
+            else:
+                ok = askQuestion(self.opts["mf"].body, head="New Loan",
+                    mess="Is This a New Loan?", default="no")
+            if ok == "yes":
+                self.newlon = True
+                self.lonnum = getNextCode(self.sql, "lonmf2", "lm2_loan",
+                    where=[("lm2_cono", "=", self.allcoy), ("lm2_acno",
+                    "=", self.lonacc)], start=1, last=9999999)
+                self.df.loadEntry(frt, pag, p, data=self.lonnum)
+            else:
+                return "Invalid Loan Number"
         else:
-            self.loan = len(acc) + 1
-        self.df.loadEntry("C", pag, p+2, data=self.loan)
-
-    def doDesc(self, frt, pag, r, c, p, i, w):
-        self.desc = w
-
-    def doSdate(self, frt, pag, r, c, p, i, w):
+            self.lonmf2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+                "=", self.allcoy), ("lm2_acno", "=", self.lonacc),
+                ("lm2_loan", "=", w)], limit=1)
+            if not self.lonmf2:
+                return "Invalid Loan Number"
+            self.lonnum = w
+            self.londes = self.lonmf2[self.sql.lonmf2_col.index("lm2_desc")]
+            self.londat = self.lonmf2[self.sql.lonmf2_col.index("lm2_start")]
+            self.lonmth = self.lonmf2[self.sql.lonmf2_col.index("lm2_pmths")]
+            self.lonpay = self.lonmf2[self.sql.lonmf2_col.index("lm2_repay")]
+            if self.opts["rtn"] in (1, 3) and self.lonmth:
+                showError(self.opts["mf"].body, "Fixed Loan",
+                    """This is a Fixed Period Loan.
+
+Please Create a New Loan for this Account.""")
+                return "Invalid Loan Number"
+            self.df.loadEntry(frt, pag, p+1, data=self.londes)
+            return "sk1"
+
+    def doLonDes(self, frt, pag, r, c, p, i, w):
+        self.londes = w
+
+    def doTrnDat(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
         if self.bh.multi == "N" and w / 100 > self.bh.curdt:
             return "Invalid Date, After Batch Period"
-        self.sdate = w
-
-    def doRef(self, frt, pag, r, c, p, i, w):
-        self.ref = w
-
-    def doInt(self, frt, pag, r, c, p, i, w):
-        self.rate = w
-
-    def doAmt(self, frt, pag, r, c, p, i, w):
-        self.amt = w
-
-    def doMth(self, frt, pag, r, c, p, i, w):
-        self.mth = w
-        if self.mth:
-            rte = (self.rate / 1200.0)
-            self.pay = round(((self.amt * rte) * ((1 + rte) ** self.mth)) /
-                (((1 + rte) ** self.mth) - 1), 2)
+        self.trndat = w
+
+    def doTrnRef(self, frt, pag, r, c, p, i, w):
+        self.refno = w
+
+    def doTrnAmt(self, frt, pag, r, c, p, i, w):
+        self.trnamt = w
+        if not self.newlon:
+            self.londrt = 0
+            self.loncrt = 0
+            self.lonmth = 0
+            if self.opts["rtn"] in (1, 2):
+                return "nd"
+
+    def doLonDrt(self, frt, pag, r, c, p, i, w):
+        self.londrt = w
+
+    def doLonCrt(self, frt, pag, r, c, p, i, w):
+        self.loncrt = w
+
+    def doLonMth(self, frt, pag, r, c, p, i, w):
+        self.lonmth = w
+        if self.lonmth:
+            rte = (self.londrt / 1200.0)
+            self.lonpay = round(((self.trnamt * rte) * ((1 + rte) ** w)) /
+                (((1 + rte) ** w) - 1), 2)
         else:
-            self.pay = 0
-        self.df.loadEntry(frt, pag, p+1, data=self.pay)
-
-    def endPage(self):
-        self.updateTables()
+            self.lonpay = 0
+        self.df.loadEntry(frt, pag, p+1, data=self.lonpay)
+
+    def doTrnDet(self, frt, pag, r, c, p, i, w):
+        self.trndet = w
+        if self.glint == "Y" and self.opts["rtn"] == 3:
+            self.df.colf[2][4][5] = w
+
+    def endPage1(self):
+        self.batupd = False
+        self.updateTables1()
         self.updateBatch()
-        self.opts["mf"].dbm.commitDbase()
-        self.df.advanceLine(0)
-
-    def exitPage(self):
+        if not self.val:
+            self.df.advanceLine(1)
+        elif self.opts["rtn"] in (1, 2, 4) or self.glint == "N":
+            self.opts["mf"].dbm.commitDbase()
+            self.df.selPage("Transaction")
+            self.df.advanceLine(1)
+        else:
+            self.allocated = float(0.0)
+            self.df.loadEntry("T", 2, 0, data=self.val)
+            self.df.selPage("Allocation")
+            self.df.focusField("C", 2, 1)
+
+    def updateTables1(self):
+        if self.bh.multi == "Y":
+            self.curdt = self.trndat / 100
+        else:
+            self.curdt = self.bh.curdt
+        if self.opts["rtn"] == 1:
+            self.glt = 2
+            desc = "Loan Advance"
+            self.val = self.trnamt
+        elif self.opts["rtn"] == 2:
+            self.glt = 6
+            desc = "Loan Repayment"
+            self.val = float(ASD(0) - ASD(self.trnamt))
+        elif self.opts["rtn"] == 3:
+            self.glt = 4
+            desc = self.trndet
+            self.val = self.trnamt
+        elif self.opts["rtn"] == 4:
+            self.glt = 4
+            desc = self.trndet
+            self.val = self.trnamt
+        if self.newlon:
+            # Loans Masterfile
+            self.sql.insRec("lonmf2", data=[self.opts["conum"], self.lonacc,
+                self.lonnum, self.londes, self.trndat, self.lonmth,
+                self.lonpay, 0])
+            # Loans Rate File
+            self.sql.insRec("lonrte", data=[self.opts["conum"], self.lonacc,
+                self.lonnum, self.trndat, self.londrt, self.loncrt])
+        # Loans Transaction File
+        self.sql.insRec("lontrn", data=[self.opts["conum"], self.lonacc,
+            self.lonnum, self.bh.batno, self.opts["rtn"], self.trndat,
+            self.refno, self.val, self.curdt, desc, "N", self.opts["capnm"],
+            self.sysdtw, 0])
+        if self.glint == "N":
+            return
+        # General Ledger Loans Control Account
+        data = (self.opts["conum"], self.lonctl, self.curdt, self.trndat,
+            self.glt, self.refno, self.bh.batno, self.val, 0.00, self.name,
+            "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
+        self.sql.insRec("gentrn", data=data)
+        if self.opts["rtn"] in (1, 2, 4):
+            # General Ledger Bank or Interest
+            self.val = float(ASD(0) - ASD(self.val))
+            if self.opts["rtn"] in (1, 2):
+                ctl = self.bh.acc
+            else:
+                ctl = self.lonint
+            data = (self.opts["conum"], ctl, self.curdt, self.trndat, self.glt,
+                self.refno, self.bh.batno, self.val, 0.00, "Loan - %s" %
+                self.name, "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
+            self.sql.insRec("gentrn", data=data)
+
+    def exitPage1(self):
         self.df.closeProcess()
         self.bh.doBatchTotal()
         self.opts["mf"].closeLoop()
 
-    def updateTables(self):
-        if self.bh.multi == "Y":
-            curdt = self.sdate / 100
-        else:
-            curdt = self.bh.curdt
-        # Loans Masterfile
-        self.sql.insRec("lonmf2", data=[self.opts["conum"], self.acno,
-            self.loan, self.desc, self.sdate, self.rate, self.mth, self.pay])
-        # Rate File
-        self.sql.insRec("lonrte", data=[self.opts["conum"], self.acno,
-            self.loan, self.sdate, self.rate])
-        # Loans Transaction
-        self.sql.insRec("lontrn", data=[self.opts["conum"], self.acno,
-            self.loan, self.bh.batno, 2, self.sdate, self.ref, self.amt,
-            self.amt, self.rate, self.mth, self.pay, curdt, self.desc,
-            "N", self.opts["capnm"], self.sysdtw, 0])
-        if self.glint == "N":
-            return
-        # General Ledger Staff Loans Control Account
-        data = (self.opts["conum"], self.lonctl, curdt, self.sdate, 2,
-            self.ref, self.bh.batno, self.amt, 0.00, self.name, "N",
-            "", 0, self.opts["capnm"], self.sysdtw, 0)
-        self.sql.insRec("gentrn", data=data)
-        amt = float(ASD(0) - ASD(self.amt))
-        # General Ledger Bank Account
-        data = (self.opts["conum"], self.bh.acc, curdt, self.sdate, 2,
-            self.ref, self.bh.batno, amt, 0.00, "Staff Loan - %s" % self.name,
-            "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
-        self.sql.insRec("gentrn", data=data)
-
-    def updateBatch(self):
-        self.bh.batqty = self.bh.batqty + 1
-        self.bh.batval = float(ASD(self.bh.batval) + ASD(self.amt))
+    def doCoyNum(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="ctlmst", cols=["ctm_name"],
+            where=[("ctm_cono", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Company, Missing"
+        if self.incoac and w not in self.incoac:
+            return "Invalid Company, No Intercompany Record 1"
+        if w != self.opts["conum"]:
+            acc = self.sql.getRec(tables="genint", where=[("cti_cono", "=",
+                w), ("cti_inco", "=", self.opts["conum"])], limit=1)
+            if not acc:
+                return "Invalid Company, No Intercompany Record 2"
+        self.allcoy = w
+
+    def doGenAcc(self, frt, pag, r, c, p, i, w):
+        chk = chkGenAcc(self.opts["mf"], self.allcoy, w)
+        if type(chk) is str:
+            return chk
+        self.genacc = w
+        self.df.loadEntry("C", pag, p+1, data=chk[0])
+
+    def doAllAmt(self, frt, pag, r, c, p, i, w):
+        if w == 0:
+            self.allamt = float(ASD(self.val) - ASD(self.allocated))
+            self.df.loadEntry(frt, pag, p, data=self.allamt)
+        else:
+            self.allamt = w
+
+    def doAllDet(self, frt, pag, r, c, p, i, w):
+        self.alldet = w
+
+    def doCancel(self, widget=None):
+        ok = askQuestion(self.opts["mf"].body, head="Cancel",
+            mess="Are You Certain You Want to Cancel This Entry?")
+        if ok == "yes":
+            self.opts["mf"].dbm.rollbackDbase()
+            if self.batupd:
+                self.updateBatch(rev=True)
+            self.df.clearFrame("C", 2)
+            self.df.selPage("Transaction")
+            row = int((self.df.last[1][1] - 1) / self.df.colq[1])
+            col = (row * self.df.colq[1]) + 1
+            self.df.focusField("C", 1, col)
+
+    def endPage2(self):
+        self.updateTables2()
+        self.allocated = float(ASD(self.allocated) + ASD(self.allamt))
+        if self.allocated == self.val:
+            self.opts["mf"].dbm.commitDbase()
+            self.df.clearFrame("C", 2)
+            self.df.selPage("Transaction")
+            self.df.advanceLine(1)
+        else:
+            bal = float(ASD(self.val) - ASD(self.allocated))
+            self.df.loadEntry("T", 2, 0, data=bal)
+            self.df.advanceLine(2)
+
+    def updateTables2(self):
+        val = float(ASD(0) - ASD(self.allamt))
+        # General Ledger Transaction (Allocation)
+        data = (self.allcoy, self.genacc, self.curdt, self.trndat,
+            self.glt, self.refno, self.bh.batno, val, 0.00,
+            self.alldet, "", "", 0, self.opts["capnm"], self.sysdtw, 0)
+        self.sql.insRec("gentrn", data=data)
+        # General Ledger Transaction (Intercompany)
+        if self.allcoy != self.opts["conum"]:
+            # General Ledger Transaction (Intercompany From)
+            acc = self.sql.getRec(tables="genint", cols=["cti_acno"],
+                where=[("cti_cono", "=", self.opts["conum"]),
+                ("cti_inco", "=", self.allcoy)], limit=1)[0]
+            data = (self.opts["conum"], acc, self.curdt, self.trndat,
+                self.glt, self.refno, self.bh.batno, val, 0.00,
+                self.alldet, "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
+            self.sql.insRec("gentrn", data=data)
+            # General Ledger Transaction (Intercompany To)
+            acc = self.sql.getRec(tables="genint", cols=["cti_acno"],
+                where=[("cti_cono", "=", self.allcoy), ("cti_inco", "=",
+                self.opts["conum"])], limit=1)[0]
+            val = float(ASD(0) - ASD(val))
+            data = (self.allcoy, acc, self.curdt, self.trndat, self.glt,
+                self.refno, self.bh.batno, val, 0.00, self.alldet, "N",
+                "", 0, self.opts["capnm"], self.sysdtw, 0)
+            self.sql.insRec("gentrn", data=data)
+
+    def exitPage2(self):
+        self.df.focusField("C", 2, self.df.col)
+
+    def updateBatch(self, rev=False):
+        if rev:
+            self.bh.batqty = self.bh.batqty - 1
+            self.bh.batval = float(ASD(self.bh.batval) - ASD(self.val))
+        else:
+            self.batupd = True
+            self.bh.batqty = self.bh.batqty + 1
+            self.bh.batval = float(ASD(self.bh.batval) + ASD(self.val))
         self.df.loadEntry("T", 0, 0, data=self.bh.batqty)
         self.df.loadEntry("T", 0, 1, data=self.bh.batval)
 

=== modified file 'lon/ln2020.py'
--- lon/ln2020.py	2015-08-25 15:02:35 +0000
+++ lon/ln2020.py	2015-09-15 10:45:48 +0000
@@ -2,7 +2,7 @@
 
 """
 SYNOPSIS
-    Staff Loans Data Capture.
+    Loans Raise Interest.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -14,9 +14,9 @@
 """
 
 import time
-from TartanClasses import ASD, Batches, GetCtl, LoanInterest, Sql
+from TartanClasses import GetCtl, LoanInterest, ProgressBar, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import askQuestion, callModule, chkGenAcc
+from tartanFunctions import mthendDate
 
 class ln2020:
     def __init__(self, **opts):
@@ -26,322 +26,72 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["genmst", "gentrn", "lonmf1",
-            "lonmf2", "lontrn"], prog=__name__)
-        if self.sql.error:
-            return
-        self.col = self.sql.lonmf2_col
         gc = GetCtl(self.opts["mf"])
         lonctl = gc.getCtl("lonctl", self.opts["conum"])
         if not lonctl:
             return
-        self.glint = lonctl["cln_glint"]
-        if self.glint == "Y":
+        glint = lonctl["cln_glint"]
+        tab = ["lonctl", "lonmf2", "lontrn"]
+        if glint == "Y":
             ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
                 return
-            ctls = ["lon_ctl", "lon_int"]
+            ctls = ["lon_ctl", "int_rec", "int_pay"]
             if gc.chkRec(self.opts["conum"], ctlctl, ctls):
                 return
-            self.glctls = (ctlctl["lon_ctl"], ctlctl["lon_int"])
+            self.glctl = (
+                ctlctl["lon_ctl"], ctlctl["int_rec"], ctlctl["int_pay"])
+            tab.append("gentrn")
         else:
-            self.glctls = None
-        self.batchHeader()
-        if not self.bh.batno:
+            self.glctl = None
+        self.sql = Sql(self.opts["mf"].dbm, tables=tab, prog=__name__)
+        if self.sql.error:
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
+        yr = self.sysdtw / 10000
+        mt = (self.sysdtw / 100 % 100) - 1
+        self.lme = mthendDate((yr * 10000) + (mt * 100) + 1)
         return True
 
-    def batchHeader(self):
-        self.bh = Batches(self.opts["mf"], self.opts["conum"],
-            self.opts["conam"], self.opts["period"], "LON", 5,
-            glint=self.glint)
-        self.bh.doBatchHeader()
-        if not self.bh.batno:
-            return
-
     def dataHeader(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Loans Movements (%s)" % __name__)
-        acc = {
-            "stype": "R",
-            "tables": ("lonmf1",),
-            "cols": (
-                ("lm1_acno", "", 0, "Acc-Num"),
-                ("lm1_name", "", 0, "Name")),
-            "where": [("lm1_cono", "=", self.opts["conum"])]}
-        lnm = {
-            "stype": "R",
-            "tables": ("lonmf2",),
-            "cols": (
-                ("lm2_loan", "", 0, "Ln"),
-                ("lm2_desc", "", 0, "Description", "Y")),
-            "where": [("lm2_cono", "=", self.opts["conum"])],
-            "whera": [("C", "lm2_acno", 0)],
-            "index": 0}
-        typ = {
-            "stype": "C",
-            "titl": "Transaction Types",
-            "head": ("C", "Description"),
-            "data": (
-                (1, "Interest Adjustment"),
-                (3, "Further Advance"),
-                (4, "Loan Repayment"),
-                (5, "Loan Adjustment")),
-            "index": 0}
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "Acc-Num"),
-                ("glm_desc", "", 0, "Description", "Y")),
-            "where": [("glm_cono", "=", self.opts["conum"])]}
-        fld = [
-            (("T",0,0,0),"OUI",9,"Batch %s Quantity" % self.bh.batno),
-            (("T",0,0,0),"OSD",13.2,"Value"),
-            (("C",1,0,0),"IUI",7,"Acc-Num","Account Number",
-                "","Y",self.doAcc,acc,None,None),
-            (("C",1,0,1),"ONA",20,"Name"),
-            (("C",1,0,2),"IUI",2,"Ln","Loan Number",
-                "","N",self.doLoan,lnm,None,("notzero",)),
-            (("C",1,0,3),"ONA",10,"Descript","Description",
-                "","N",None,None,None,None),
-            (("C",1,0,4),"ID1",10,"Trans-Date","Transaction Date",
-                self.sysdtw,"N",self.doTrdate,None,None,None),
-            (("C",1,0,5),"IUI",1,"T","Transaction Type",
-                "","N",self.doTyp,typ,None,("in",(1,3,4,5))),
-            (("C",1,0,6),"INa",9,"Reference","Reference Number",
-                "i","N",self.doRef,None,None,("notblank",)),
-            (("C",1,0,7),"IUD",6.2,"Rate-%","Interest Rate",
-                "","N",self.doRte,None,None,None),
-            (("C",1,0,8),"ISD",13.2,"Interest",
-                "Interest (Adds to interest raised)",
-                "","N",self.doInt,None,None,("notzero",)),
-            (("C",1,0,9),"ISD",13.2,"Amount",
-                "Amount (Adds to advances or payments)",
-                "","N",self.doAmt,None,None,("notzero",))]
-        if self.glint == "Y":
-            fld.extend([
-                [("T",2,0,0),"OSD",13.2,"Unallocated Balance"],
-                (("C",2,0,0),"IUI",7,"Acc-Num","Account Number",
-                    "","Y",self.doGenAcc,glm,None,None),
-                (("C",2,0,1),"ONA",30,"Description"),
-                (("C",2,0,2),"ISD",13.2,"All-Amt","Allocation Amount",
-                    "","N",self.doAllAmt,None,None,("efld",)),
-                (("C",2,0,3),"INA",30,"Details","",
-                    "","N",self.doAllDet,None,None,("notblank",))])
-        but = [("Interrogate",None,self.querySln,0,("C",1,1),("C",1,2))]
-        tag = [("Transaction", None, None, None, False)]
-        cnd = [(None,"n"), (self.endPage1,"y")]
-        cxt = [None, self.exitPage1]
-        if self.glint == "Y":
-            but.append(("Cancel",None,self.doCancel,0,("C",2,1),("C",1,1)))
-            tag.append(("Allocation", None, None, None))
-            cnd.append((self.endPage2,"y"))
-            cxt.append(self.exitPage2)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tags=tag,
-            cend=cnd, cxit=cxt, butt=but)
-        self.df.loadEntry("T", 0, 0, data=self.bh.batqty)
-        self.df.loadEntry("T", 0, 1, data=self.bh.batval)
-        self.df.focusField("C", 1, 1)
-
-    def doAcc(self, frt, pag, r, c, p, i, w):
-        self.acno = w
-        acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
-            where=[("lm1_cono", "=", self.opts["conum"]),
-            ("lm1_acno", "=", self.acno)], limit=1)
-        if not acc:
-            return "Invalid Account Number"
-        self.name = acc[0]
-        self.df.loadEntry("C", pag, p+1, data=self.name)
-
-    def doLoan(self, frt, pag, r, c, p, i, w):
-        self.loan = w
-        self.acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono", "=",
-            self.opts["conum"]), ("lm2_acno", "=", self.acno), ("lm2_loan",
-            "=", self.loan)], limit=1)
-        if not self.acc:
-            return "Invalid Loan Number"
-        desc = self.acc[self.col.index("lm2_desc")]
-        self.mths = self.acc[self.col.index("lm2_mths")]
-        self.rpay = self.acc[self.col.index("lm2_rpay")]
-        self.df.loadEntry("C", pag, p+1, data=desc)
+                "Staff Loans Raise Interest (%s)" % __name__)
+        fld = (
+            (("T",0,0,0),"ID1",10,"Transaction Date","",
+                self.lme,"N",self.doTrdate,None,None,None),)
+        tnd = ((self.endPage0, "y"),)
+        txt = (self.exitPage0,)
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tend=tnd,
+            txit=txt)
 
     def doTrdate(self, frt, pag, r, c, p, i, w):
+        self.trdate = w
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-        if self.bh.multi == "N" and w / 100 > self.bh.curdt:
-            return "Invalid Date, After Batch Period"
-        self.trdate = w
-
-    def doTyp(self, frt, pag, r, c, p, i, w):
-        self.typ = w
-
-    def doRef(self, frt, pag, r, c, p, i, w):
-        self.ref = w
-        self.oldr = self.acc[self.col.index("lm2_rate")]
-        self.df.loadEntry("C", pag, p+1, data=self.oldr)
-
-    def doRte(self, frt, pag, r, c, p, i, w):
-        self.newr = w
-        if self.typ in (3, 4, 5):
-            self.intp = 0
-            self.df.loadEntry(frt, pag, p+1, data=0)
-            return "sk1"
-
-    def doInt(self, frt, pag, r, c, p, i, w):
-        self.intp = w
-        self.pay = 0
-        self.df.loadEntry(frt, pag, p+1, data=0)
-        return "sk1"
-
-    def doAmt(self, frt, pag, r, c, p, i, w):
-        self.pay = w
-
-    def endPage1(self):
-        self.batupd = False
-        self.updateTables1()
-        self.updateBatch()
-        if not self.val:
-            self.df.advanceLine(1)
-        elif self.typ == 1 or self.glint == "N":
-            self.opts["mf"].dbm.commitDbase()
-            self.df.selPage("Transaction")
-            self.df.advanceLine(1)
-        else:
-            self.allocated = float(0.0)
-            self.df.loadEntry("T", 2, 0, data=self.val)
-            self.df.selPage("Allocation")
-            self.df.focusField("C", 2, 1)
-
-    def updateTables1(self):
-        if self.bh.multi == "Y":
-            self.curdt = self.trdate / 100
-        else:
-            self.curdt = self.bh.curdt
-        LoanInterest(self.sql, self.opts["conum"], self.acno, self.loan,
-            self.oldr, self.acc[self.col.index("lm2_start")],
-            self.trdate, self.bh.batno, self.curdt, capnm=self.opts["capnm"],
-            update="Y", glctls=self.glctls, ltype="O", mths=self.mths,
-            rpay=self.rpay)
-        if self.typ == 1:
-            self.glt = 4
-            desc = "Interest Adjustment"
-            self.val = self.intp
-            cap = 0.00
-        elif self.typ == 3:
-            self.glt = 2
-            desc = "Loan Advance"
-            self.val = self.pay
-            cap = self.val
-        elif self.typ == 4:
-            self.glt = 6
-            desc = "Loan Repayment"
-            self.val = float(ASD(0) - ASD(self.pay))
-            cap = 0.00
-        elif self.typ == 5:
-            self.glt = 4
-            desc = "Loan Adjustment"
-            self.val = self.pay
-            cap = 0.00
-        if not self.newr == self.oldr:
-            self.sql.updRec("lonmf2", cols=["lm2_rate"], data=[self.newr],
-                where=[("lm2_cono", "=", self.opts["conum"]), ("lm2_acno",
-                "=", self.acno), ("lm2_loan", "=", self.loan)])
-            self.insRec("lonrte", data=[self.opts["conum"], self.acno,
-                self.loan, self.trdate, self.newr])
-        self.sql.insRec("lontrn", data=[self.opts["conum"], self.acno,
-            self.loan, self.bh.batno, self.typ, self.trdate, self.ref,
-            self.val, cap, self.newr, 0, 0, self.curdt, desc, "N",
-            self.opts["capnm"], self.sysdtw, 0])
-        if self.glint == "N":
-            return
-        # General Ledger Staff Loans Control Account
-        data = (self.opts["conum"], self.glctls[0], self.curdt, self.trdate,
-            self.glt, self.ref, self.bh.batno, self.val, 0.00, self.name, "N",
-            "", 0, self.opts["capnm"], self.sysdtw, 0)
-        self.sql.insRec("gentrn", data=data)
-        self.val = float(ASD(0) - ASD(self.val))
-        if self.typ == 1:
-            # General Ledger Interest Received
-            data = (self.opts["conum"], self.glctls[1], self.curdt,
-                self.trdate, self.glt, self.ref, self.bh.batno, self.val, 0.00,
-                "Staff Loan - %s" % self.name, "N", "", 0, self.opts["capnm"],
-                self.sysdtw, 0)
-            self.sql.insRec("gentrn", data=data)
-
-    def exitPage1(self):
-        self.df.closeProcess()
-        self.bh.doBatchTotal()
-        self.opts["mf"].closeLoop()
-
-    def doGenAcc(self, frt, pag, r, c, p, i, w):
-        chk = chkGenAcc(self.opts["mf"], self.opts["conum"], w)
-        if type(chk) is str:
-            return chk
-        self.genacc = w
-        self.df.loadEntry("C", pag, p+1, data=chk[0])
-
-    def doAllAmt(self, frt, pag, r, c, p, i, w):
-        if w == 0:
-            self.allamt = float(ASD(self.val) - ASD(self.allocated))
-            self.df.loadEntry(frt, pag, p, data=self.allamt)
-        else:
-            self.allamt = w
-
-    def doAllDet(self, frt, pag, r, c, p, i, w):
-        self.alldet = w
-
-    def doCancel(self, widget=None):
-        ok = askQuestion(self.opts["mf"].body, head="Cancel",
-            mess="Are You Certain You Want to Cancel This Entry?")
-        if ok == "yes":
-            self.opts["mf"].dbm.rollbackDbase()
-            if self.batupd:
-                self.updateBatch(rev=True)
-            self.df.clearFrame("C", 2)
-            self.df.selPage("Transaction")
-            row = int((self.df.last[1][1] - 1) / self.df.colq[1])
-            col = (row * self.df.colq[1]) + 1
-            self.df.focusField("C", 1, col)
-
-    def endPage2(self):
-        self.updateTables2()
-        self.allocated = float(ASD(self.allocated) + ASD(self.allamt))
-        if self.allocated == self.val:
-            self.opts["mf"].dbm.commitDbase()
-            self.df.clearFrame("C", 2)
-            self.df.selPage("Transaction")
-            self.df.advanceLine(1)
-        else:
-            bal = float(ASD(self.val) - ASD(self.allocated))
-            self.df.loadEntry("T", 2, 0, data=bal)
-            self.df.advanceLine(2)
-
-    def updateTables2(self):
-        # General Ledger Transaction (Source)
-        data = (self.opts["conum"], self.genacc, self.curdt, self.trdate,
-            self.glt, self.ref, self.bh.batno, self.allamt, 0.00,
-            self.alldet, "N", "", 0, self.opts["capnm"], self.sysdtw, 0)
-        self.sql.insRec("gentrn", data=data)
-
-    def exitPage2(self):
-        self.df.focusField("C", 2, self.df.col)
-
-    def updateBatch(self, rev=False):
-        if rev:
-            self.bh.batqty = self.bh.batqty - 1
-            self.bh.batval = float(ASD(self.bh.batval) - ASD(self.val))
-        else:
-            self.batupd = True
-            self.bh.batqty = self.bh.batqty + 1
-            self.bh.batval = float(ASD(self.bh.batval) + ASD(self.val))
-        self.df.loadEntry("T", 0, 0, data=self.bh.batqty)
-        self.df.loadEntry("T", 0, 1, data=self.bh.batval)
-
-    def querySln(self, widget=None):
-        callModule(self.opts["mf"], self.df, "ln4010", coy=(self.opts["conum"],
-            self.opts["conam"]), period=None, user=self.opts["capnm"])
+        if not w == mthendDate(w):
+            return "Invalid Date, Not a Month End"
+
+    def endPage0(self):
+        self.df.closeProcess()
+        recs = self.sql.getRec(tables="lonmf2", where=[("lm2_cono", "=",
+            self.opts["conum"]), ("lm2_start", "<", self.trdate)],
+            order="lm2_acno, lm2_loan")
+        p = ProgressBar(self.opts["mf"].body, mxs=len(recs))
+        for num, lonmf2 in enumerate(recs):
+            p.displayProgress(num)
+            batch = "L%s" % (self.trdate / 100)
+            LoanInterest("L", self.opts["mf"].dbm, lonmf2, update="Y",
+                tdate=self.trdate, batch=batch, curdt=self.trdate / 100,
+                glctl=self.glctl, capnm=self.opts["capnm"])
+        p.closeProgress()
+        self.sql.updRec("lonctl", cols=["cln_last"], data=[self.trdate],
+            where=[("cln_cono", "=", self.opts["conum"])])
+        self.opts["mf"].dbm.commitDbase()
+        self.opts["mf"].closeLoop()
+
+    def exitPage0(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'lon/ln2030.py'
--- lon/ln2030.py	2015-08-25 15:02:35 +0000
+++ lon/ln2030.py	2015-09-15 10:45:56 +0000
@@ -2,7 +2,7 @@
 
 """
 SYNOPSIS
-    Loans Raise Interest.
+    New Loan Rate Capture.
 
     This file is part of Tartan Systems (TARTAN).
 
@@ -14,8 +14,8 @@
 """
 
 import time
-from TartanClasses import GetCtl, LoanInterest, ProgressBar, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, GetCtl, Sql, TartanDialog
+from tartanFunctions import dateDiff
 
 class ln2030:
     def __init__(self, **opts):
@@ -25,68 +25,211 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        gc = GetCtl(self.opts["mf"])
-        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        self.sql = Sql(self.opts["mf"].dbm, ["genmst", "gentrn", "lonctl",
+            "lonmf1", "lonmf2", "lonrte", "lontrn"], prog=__name__)
+        if self.sql.error:
+            return
+        self.gc = GetCtl(self.opts["mf"])
+        lonctl = self.gc.getCtl("lonctl", self.opts["conum"])
         if not lonctl:
             return
-        glint = lonctl["cln_glint"]
-        tab = ["lonctl", "lonmf2", "lontrn"]
-        if glint == "Y":
-            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+        self.glint = lonctl["cln_glint"]
+        self.drate = lonctl["cln_drte"]
+        self.crate = lonctl["cln_crte"]
+        self.lastd = lonctl["cln_last"]
+        if self.glint == "Y":
+            ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
                 return
-            ctls = ["lon_ctl", "lon_int"]
-            if gc.chkRec(self.opts["conum"], ctlctl, ctls):
+            if self.gc.chkRec(self.opts["conum"], ctlctl, ["lon_ctl"]):
                 return
-            self.glctls = (ctlctl["lon_ctl"], ctlctl["lon_int"])
-            tab.append("gentrn")
+            self.glctl = (
+                ctlctl["lon_ctl"], ctlctl["int_rec"], ctlctl["int_pay"])
         else:
-            self.glctls = None
-        self.sql = Sql(self.opts["mf"].dbm, tables=tab, prog=__name__)
-        if self.sql.error:
-            return
+            self.glctl = None
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
 
     def dataHeader(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-                "Staff Loans Raise Interest (%s)" % __name__)
+            "New Rates Capture (%s)" % __name__)
+        lm1 = {
+            "stype": "R",
+            "tables": ("lonmf1",),
+            "cols": (
+                ("lm1_acno", "", 0, "Acc-Num"),
+                ("lm1_name", "", 0, "Name", "Y")),
+            "where": [("lm1_cono", "=", self.opts["conum"])]}
+        lm2 = {
+            "stype": "R",
+            "tables": ("lonmf2",),
+            "cols": (
+                ("lm2_loan", "", 0, "Ln"),
+                ("lm2_desc", "", 0, "Description", "Y")),
+            "where": [("lm2_cono", "=", self.opts["conum"])],
+            "whera": [("C", "lm2_acno", 0, 0)]}
+        r1s = (("Yes", "Y"), ("No", "N"))
         fld = (
-            (("T",0,0,0),"ID1",10,"Transaction Date","",
-                self.sysdtw,"N",self.doTrdate,None,None,None),)
-        tnd = ((self.endPage0, "y"),)
-        txt = (self.exitPage0,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tend=tnd,
-            txit=txt)
-
-    def doTrdate(self, frt, pag, r, c, p, i, w):
-        self.trdate = w
+            (("T",0,0,0),("IRB",r1s),0,"All Current Rates","",
+                "N","N",self.doAll,None,None,None),
+            (("T",0,1,0),"ID1",10,"Effective Date","",
+                "","N",self.doSdate,None,None,("efld",)),
+            (("T",0,2,0),"IUD",6.2,"Debit  Rate - Old","",
+                self.drate,"N",self.doDRte,None,None,None),
+            (("T",0,2,0),"IUD",6.2,"New","New Debit Rate",
+                "","N",self.doDRte,None,None,None),
+            (("T",0,3,0),"IUD",6.2,"Credit Rate - Old","",
+                self.crate,"N",self.doCRte,None,None,None),
+            (("T",0,3,0),"IUD",6.2,"New","New Credit Rate",
+                "","N",self.doCRte,None,None,None),
+            (("C",0,0,0),"IUA",7,"Acc-Num","Account Number",
+                "","N",self.doAcc,lm1,None,None),
+            (("C",0,0,1),"ONA",30,"Name"),
+            (("C",0,0,2),"IUI",2,"Ln","Loan Number",
+                "","N",self.doLon,lm2,None,None),
+            (("C",0,0,3),"ONA",30,"Description"),
+            (("C",0,0,4),"ID1",10,"Date","",
+                "","N",self.doSdate,None,None,("efld",)),
+            (("C",0,0,5),"IUD",6.2,"DRte-%","Debit Rate",
+                "","N",self.doDRte,None,None,None),
+            (("C",0,0,6),"IUD",6.2,"CRte-%","Credit Rate",
+                "","N",self.doCRte,None,None,None),
+            (("C",0,0,7),"OUD",12.2,"Repayment"))
+        tnd = ((self.endPage,"y"), )
+        txt = (self.exitPage, )
+        cnd = ((self.endPage,"y"), )
+        cxt = (self.exitPage, )
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, cend=cnd, cxit=cxt)
+
+    def doAll(self, frt, pag, r, c, p, i, w):
+        self.allrte = w
+        if self.allrte == "N":
+            return "nd"
+
+    def doAcc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
+            where=[("lm1_cono", "=", self.opts["conum"]),
+            ("lm1_acno", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Account Number"
+        self.acno = w
+        self.name = acc[0]
+        self.df.loadEntry("C", pag, p+1, data=self.name)
+
+    def doLon(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono", "=",
+            self.opts["conum"]), ("lm2_acno", "=", self.acno),
+            ("lm2_loan", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Loan Number"
+        self.loan = w
+        desc = acc[self.sql.lonmf2_col.index("lm2_desc")]
+        self.start = acc[self.sql.lonmf2_col.index("lm2_start")]
+        self.pmths = acc[self.sql.lonmf2_col.index("lm2_pmths")]
+        self.df.loadEntry("C", pag, p+1, data=desc)
+
+    def doSdate(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not in Financial Period"
-
-    def endPage0(self):
-        self.df.closeProcess()
-        recs = self.sql.getRec(tables="lonmf2", cols=["lm2_acno", "lm2_loan",
-            "lm2_rate", "lm2_start", "lm2_mths", "lm2_rpay"],
-            where=[("lm2_cono", "=", self.opts["conum"]), ("lm2_rate", ">", 0),
-            ("lm2_start", "<", self.trdate)], order="lm2_acno, lm2_loan")
-        p = ProgressBar(self.opts["mf"].body, mxs=len(recs))
-        for num, dat in enumerate(recs):
-            p.displayProgress(num)
-            batch = "%03i%04i" % (self.opts["conum"], dat[3] % 1000000)
-            LoanInterest(self.sql, self.opts["conum"], dat[0], dat[1],
-                dat[2], dat[3], self.trdate, batch, self.opts["capnm"],
-                dat[3] / 100, update="Y", glctls=self.glctls, ltype="O",
-                mths=dat[4], rpay=dat[5])
-        p.closeProgress()
-        self.sql.updRec("lonctl", cols=["cln_date"], data=[self.trdate],
-            where=[("cln_cono", "=", self.opts["conum"])])
-        self.opts["mf"].dbm.commitDbase()
-        self.opts["mf"].closeLoop()
-
-    def exitPage0(self):
-        self.df.closeProcess()
-        self.opts["mf"].closeLoop()
+        if w <= self.lastd:
+            return "Invalid Date, Before Last Interest Raise Date"
+        self.sdate = w
+        self.curdt = w / 100
+
+    def doDRte(self, frt, pag, r, c, p, i, w):
+        if self.df.frt == "T" and p == 2:
+            self.oldd = w
+        else:
+            self.newd = w
+
+    def doCRte(self, frt, pag, r, c, p, i, w):
+        if self.df.frt == "T" and p == 4:
+            self.oldc = w
+        else:
+            self.newc = w
+        if self.allrte == "Y":
+            return
+        if self.pmths:
+            self.newp = self.getNewRepayment(self.acno, self.loan,
+                self.start, self.pmths)
+        else:
+            self.newp = 0
+        self.df.loadEntry(frt, pag, p+1, data=self.newp)
+
+    def endPage(self):
+        if self.df.frt == "T":
+            if self.allrte == "N":
+                self.df.focusField("C", 0, 1)
+            else:
+                self.updateTables()
+                self.opts["mf"].dbm.commitDbase(True)
+                self.exitPage()
+        else:
+            self.updateTables()
+            self.df.advanceLine(0)
+
+    def exitPage(self):
+        if self.df.frt == "C":
+            self.opts["mf"].dbm.commitDbase(True)
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
+    def updateTables(self):
+        if self.allrte == "Y":
+            self.sql.updRec("lonctl", cols=["cln_drte", "cln_crte"],
+                data=[self.newd, self.newc], where=[("cln_cono", "=",
+                self.opts["conum"])])
+            recs = self.sql.getRec(tables="lonrte", cols=["lrt_acno",
+                "lrt_loan"], where=[("lrt_cono", "=", self.opts["conum"]),
+                ("lrt_drte", "=", self.oldd), ("lrt_crte", "=", self.oldc)])
+        else:
+            recs = [[self.acno, self.loan]]
+        for rec in recs:
+            # Loans Rate Record
+            self.sql.insRec("lonrte", data=[self.opts["conum"], rec[0],
+                rec[1], self.sdate, self.newd, self.newc])
+            # Loans Masterfile
+            if self.allrte == "N":
+                newp = self.newp
+            else:
+                acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+                    "=", self.opts["conum"]), ("lm2_acno", "=", rec[0]),
+                    ("lm2_loan", "=", rec[1])], limit=1)
+                start = acc[self.sql.lonmf2_col.index("lm2_start")]
+                pmths = acc[self.sql.lonmf2_col.index("lm2_pmths")]
+                if pmths:
+                    newp = self.getNewRepayment(rec[0], rec[1], start, pmths)
+                else:
+                    newp = 0
+            self.sql.updRec("lonmf2", cols=["lm2_repay"], data=[newp],
+                where=[("lm2_cono", "=", self.opts["conum"]), ("lm2_acno",
+                "=", rec[0]), ("lm2_loan", "=", rec[1])])
+
+    def getNewRepayment(self, acno, loan, start, pmths):
+        # New Loan Repayment Amount
+        am1 = self.sql.getRec(tables="lontrn",
+            cols=["round(sum(lnt_tramt), 2)"],
+            where=[("lnt_cono", "=", self.opts["conum"]),
+            ("lnt_acno", "=", acno),
+            ("lnt_loan", "=", loan),
+            ("lnt_type", "=", 2),
+            ("lnt_trdt", "<=", self.sdate)], limit=1)
+        cap = am1[0]
+        am2 = self.sql.getRec(tables="lontrn",
+            cols=["round(sum(lnt_cpamt), 2)"],
+            where=[("lnt_cono", "=", self.opts["conum"]),
+            ("lnt_acno", "=", acno),
+            ("lnt_loan", "=", loan),
+            ("lnt_type", "<>", 2),
+            ("lnt_trdt", "<=", self.sdate)], limit=1)
+        if am2[0]:
+            cap = float(ASD(cap) - ASD(am2[0]))
+        mths = pmths - dateDiff(start, self.sdate, "months")
+        rte = (self.newd / 1200.0)
+        newp = round(((cap * rte) * ((1 + rte) ** mths)) /
+            (((1 + rte) ** mths) - 1), 2)
+        return newp
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== removed file 'lon/ln2040.py'
--- lon/ln2040.py	2015-08-25 15:02:35 +0000
+++ lon/ln2040.py	1970-01-01 00:00:00 +0000
@@ -1,171 +0,0 @@
-#! /usr/bin/python
-
-"""
-SYNOPSIS
-    New Loan Rate Capture.
-
-    This file is part of Tartan Systems (TARTAN).
-
-AUTHOR
-    Written by Paul Malherbe, <paul@tartan.co.za>
-
-COPYING
-    Copyright (C) 2004-2015 Paul Malherbe.
-"""
-
-import time
-from TartanClasses import ASD, GetCtl, LoanInterest, Sql, TartanDialog
-from tartanFunctions import dateDiff
-
-class ln2040:
-    def __init__(self, **opts):
-        self.opts = opts
-        if self.setVariables():
-            self.dataHeader()
-            self.opts["mf"].startLoop()
-
-    def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["genmst", "gentrn", "lonmf1",
-            "lonmf2", "lonrte", "lontrn"], prog=__name__)
-        if self.sql.error:
-            return
-        self.gc = GetCtl(self.opts["mf"])
-        lonctl = self.gc.getCtl("lonctl", self.opts["conum"])
-        if not lonctl:
-            return
-        self.glint = lonctl["cln_glint"]
-        if self.glint == "Y":
-            ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
-            if not ctlctl:
-                return
-            if self.gc.chkRec(self.opts["conum"], ctlctl, ["lon_ctl"]):
-                return
-            self.glctls = (ctlctl["lon_ctl"], ctlctl["lon_int"])
-        else:
-            self.glctls = None
-        t = time.localtime()
-        self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        return True
-
-    def dataHeader(self):
-        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "New Rates Capture (%s)" % __name__)
-        lm1 = {
-            "stype": "R",
-            "tables": ("lonmf1",),
-            "cols": (
-                ("lm1_acno", "", 0, "Acc-Num"),
-                ("lm1_name", "", 0, "Name", "Y")),
-            "where": [("lm1_cono", "=", self.opts["conum"])]}
-        lm2 = {
-            "stype": "R",
-            "tables": ("lonmf2",),
-            "cols": (
-                ("lm2_loan", "", 0, "Ln"),
-                ("lm2_desc", "", 0, "Description", "Y")),
-            "where": [("lm2_cono", "=", self.opts["conum"])],
-            "whera": [("T", "lm2_acno", 0, 0)]}
-        fld = (
-            (("C",0,0,0),"IUI",7,"Acc-Num","Account Number",
-                "","N",self.doAcc,lm1,None,None),
-            (("C",0,0,1),"ONA",30,"Name"),
-            (("C",0,0,2),"IUI",2,"Ln","Loan Number",
-                "","N",self.doLon,lm2,None,None),
-            (("C",0,0,3),"ONA",30,"Description"),
-            (("C",0,0,4),"ID1",10,"Date","",
-                "","N",self.doSdate,None,None,None),
-            (("C",0,0,5),"IUD",6.2,"Rate-%","Interest Rate",
-                "","N",self.doRte,None,None,None),
-            (("C",0,0,6),"OUD",12.2,"Repayment"))
-        cnd = ((self.endPage,"y"), )
-        cxt = (self.exitPage, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
-            cend=cnd, cxit=cxt)
-
-    def doAcc(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
-            where=[("lm1_cono", "=", self.opts["conum"]),
-            ("lm1_acno", "=", w)], limit=1)
-        if not acc:
-            return "Invalid Account Number"
-        self.acno = w
-        self.name = acc[0]
-        self.df.loadEntry("C", pag, p+1, data=self.name)
-
-    def doLon(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="lonmf2", where=[("lm2_cono", "=",
-            self.opts["conum"]), ("lm2_acno", "=", self.acno),
-            ("lm2_loan", "=", w)], limit=1)
-        if not acc:
-            return "Invalid Loan Number"
-        self.loan = w
-        desc = acc[self.sql.lonmf2_col.index("lm2_desc")]
-        self.start = acc[self.sql.lonmf2_col.index("lm2_start")]
-        self.oldr = acc[self.sql.lonmf2_col.index("lm2_rate")]
-        self.mths = acc[self.sql.lonmf2_col.index("lm2_mths")]
-        self.rpay = acc[self.sql.lonmf2_col.index("lm2_rpay")]
-        self.df.loadEntry("C", pag, p+1, data=desc)
-
-    def doSdate(self, frt, pag, r, c, p, i, w):
-        if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
-            return "Invalid Date, Not in Financial Period"
-        self.sdate = w
-        self.curdt = w / 100
-
-    def doRte(self, frt, pag, r, c, p, i, w):
-        if w == self.oldr:
-            return "Invalid, No Rate Change"
-        self.newr = w
-        if self.mths:
-            # New Loan Repayment Amount
-            am1 = self.sql.getRec(tables="lontrn",
-                cols=["round(sum(lnt_tramt), 2)"],
-                where=[("lnt_cono", "=", self.opts["conum"]),
-                ("lnt_acno", "=", self.acno),
-                ("lnt_loan", "=", self.loan),
-                ("lnt_type", "=", 2),
-                ("lnt_trdt", "<=", self.sdate)], limit=1)
-            cap = am1[0]
-            am2 = self.sql.getRec(tables="lontrn",
-                cols=["round(sum(lnt_cpamt), 2)"],
-                where=[("lnt_cono", "=", self.opts["conum"]),
-                ("lnt_acno", "=", self.acno),
-                ("lnt_loan", "=", self.loan),
-                ("lnt_type", "<>", 2),
-                ("lnt_trdt", "<=", self.sdate)], limit=1)
-            if am2[0]:
-                cap = float(ASD(cap) - ASD(am2[0]))
-            mths = self.mths - dateDiff(self.start, self.sdate, "months")
-            rte = (self.newr / 1200.0)
-            self.newp = round(((cap * rte) * ((1 + rte) ** mths)) /
-                (((1 + rte) ** mths) - 1), 2)
-        else:
-            self.newp = 0
-        self.df.loadEntry(frt, pag, p+1, data=self.newp)
-
-    def endPage(self):
-        self.updateTables()
-        self.opts["mf"].dbm.commitDbase()
-        self.df.advanceLine(0)
-
-    def exitPage(self):
-        self.df.closeProcess()
-        self.opts["mf"].closeLoop()
-
-    def updateTables(self):
-        if not self.mths:
-            # Raise Interest at Old Rate
-            LoanInterest(self.sql, self.opts["conum"], self.acno, self.loan,
-                self.oldr, self.acc[self.col.index("lm2_start")], self.trdate,
-                "RTE-CHG", self.curdt, capnm=self.opts["capnm"], update="Y",
-                glctls=self.glctls, ltype="O", mths=self.mths, rpay=self.rpay)
-        # Loans Masterfile
-        self.sql.updRec("lonmf2", cols=["lm2_rate", "lm2_rpay"],
-            data=[self.newr, self.newp], where=[("lm2_cono", "=",
-            self.opts["conum"]), ("lm2_acno", "=", self.acno),
-            ("lm2_loan", "=", self.loan)])
-        # Loans Rate Record
-        self.sql.insRec("lonrte", data=[self.opts["conum"], self.acno,
-            self.loan, self.sdate, self.newr])
-
-# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'lon/ln3010.py'
--- lon/ln3010.py	2015-08-26 08:52:51 +0000
+++ lon/ln3010.py	2015-09-15 11:30:30 +0000
@@ -131,18 +131,16 @@
             else:
                 self.batchHeading()
             for trn in trndat:
-                acno = CCD(trn[tc.index("lnt_acno")], "UI", 7)
+                acno = CCD(trn[tc.index("lnt_acno")], "UA", 7)
                 loan = CCD(trn[tc.index("lnt_loan")], "UI", 2)
                 trdt = CCD(trn[tc.index("lnt_trdt")], "D1", 10)
                 ref = CCD(trn[tc.index("lnt_refno")], "Na", 9)
                 amt = CCD(trn[tc.index("lnt_tramt")], "SD", 13.2)
-                per = CCD(trn[tc.index("lnt_rate")], "UD", 6.2)
                 desc = CCD(trn[tc.index("lnt_desc")], "NA", 30)
                 if self.pglin > self.fpdf.lpp:
                     self.pageHeading()
-                self.fpdf.drawText("%s %s %s %s %s %s %s" %
-                    (acno.disp, loan.disp, trdt.disp, ref.disp,
-                    per.disp, amt.disp, desc.disp))
+                self.fpdf.drawText("%s %s %s %s %s %s" % (acno.disp,
+                    loan.disp, trdt.disp, ref.disp, amt.disp, desc.disp))
                 self.btot[0] = self.btot[0] + 1
                 self.btot[1] = float(ASD(self.btot[1]) + ASD(amt.work))
                 self.pglin += 1
@@ -153,8 +151,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         else:
             showError(self.opts["mf"].body, "Batch Errors",
                 "No Batch Transactions")
@@ -183,9 +181,8 @@
             "Current Date:", self.curdt.disp,
             "Multi Allocations:", self.multi.disp))
         self.fpdf.drawText()
-        self.fpdf.drawText("%-7s %-2s %-10s %-9s %-6s %-13s %-30s" %
-            ("Acc-Num", "Ln", "Trans-Date", "Reference", "I-Rate",
-            "      Amount", "Description"))
+        self.fpdf.drawText("%-7s %-2s %-10s %-9s %-13s %-30s" % ("Acc-Num",
+            "Ln", "Trans-Date", "Reference", "      Amount", "Description"))
         self.fpdf.underLine(self.head)
         self.fpdf.setFont()
         self.pglin += 4

=== modified file 'lon/ln3020.py'
--- lon/ln3020.py	2015-08-26 08:52:51 +0000
+++ lon/ln3020.py	2015-09-15 12:23:01 +0000
@@ -159,14 +159,13 @@
             p.displayProgress(num)
             if p.quit:
                 break
-            acno = CCD(dat[col.index("lnt_acno")], "UI", 7)
+            acno = CCD(dat[col.index("lnt_acno")], "UA", 7)
             loan = CCD(dat[col.index("lnt_loan")], "UI", 2)
             batch = CCD(dat[col.index("lnt_batch")], "Na", 7)
             trtp = CCD(dat[col.index("lnt_type")], "UI", 2)
             trdt = CCD(dat[col.index("lnt_trdt")], "D1", 10)
             ref = CCD(dat[col.index("lnt_refno")], "Na", 9)
             amt = CCD(dat[col.index("lnt_tramt")], "SD", 13.2)
-            per = CCD(dat[col.index("lnt_rate")], "UD", 13.2)
             desc = CCD(dat[col.index("lnt_desc")], "NA", 42)
             if not self.trtp:
                 self.trtp = trtp.work
@@ -185,9 +184,8 @@
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading()
             if self.totsonly != "Y":
-                self.fpdf.drawText("%s %s %s %s %s %s %s" % \
-                    (acno.disp, loan.disp, ref.disp, trdt.disp,
-                    desc.disp, per.disp, amt.disp))
+                self.fpdf.drawText("%s %s %s %s %s %13s %s" % (acno.disp,
+                    loan.disp, ref.disp, trdt.disp, desc.disp, "", amt.disp))
                 self.pglin += 1
             self.bqty = self.bqty + 1
             self.bamt = float(ASD(self.bamt) + ASD(amt.work))
@@ -204,9 +202,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()
@@ -231,13 +229,7 @@
         else:
             self.fpdf.drawText("%-14s" % "Totals Summary")
             self.fpdf.drawText()
-            if self.totsonly == "Y":
-                self.fpdf.drawText(
-                "%-58s%-8s  %-13s" % \
-                ("Document Type", "Quantity", "      Amount"))
-            else:
-                self.fpdf.drawText(
-                "%-44s%-8s  %-13s" % \
+            self.fpdf.drawText("%-79s%-8s  %-13s" % \
                 ("Document Type", "Quantity", "      Amount"))
             self.fpdf.underLine(txt=self.head)
             self.fpdf.setFont()
@@ -252,17 +244,15 @@
             self.pageHeading()
             return
         self.fpdf.setFont(style="B")
-        self.fpdf.drawText("%-7s %-7s %-10s %3s" % \
-            ("Batch", batch, "    Type", lntrtp[self.trtp - 1][1]))
+        self.fpdf.drawText("%-7s %-7s %-10s %3s" % ("Batch", batch,
+            "    Type", lntrtp[self.trtp - 1][1]))
         self.fpdf.drawText()
         if self.totsonly == "Y":
-            self.fpdf.drawText("%-67s %-13s" % \
-            ("Details", "      Amount"))
+            self.fpdf.drawText("%-67s %-13s" % ("Details", "      Amount"))
         else:
             self.fpdf.drawText(
-            "%-7s %-2s %-9s %-10s %-42s %-13s %-13s" % \
-            ("Acc-Num", "Ln", "Reference", "Trans-Date", "Remarks",
-            "       I-Rate", "      Amount"))
+                "%-7s %-2s %-9s %-10s %-56s %-13s" % ("Acc-Num", "Ln",
+                "Reference", "Trans-Date", "Remarks", "      Amount"))
         self.fpdf.underLine(txt=self.head)
         self.fpdf.setFont()
         self.pglin += 4
@@ -275,7 +265,7 @@
         else:
             self.fpdf.drawText()
             self.pglin += 1
-            self.fpdf.drawText("%-29s %-58s %13s" % \
+            self.fpdf.drawText("%-31s %-56s %13s" % \
                 (" ", "Batch " + self.batch + " Totals", j.disp))
         self.pglin += 1
         if self.totsonly == "N":
@@ -292,7 +282,7 @@
                 ("Type Totals", j.disp))
             self.pglin += 2
         else:
-            self.fpdf.drawText("%-29s %-58s %13s" % \
+            self.fpdf.drawText("%-31s %-56s %13s" % \
                 (" ", "Type Totals", j.disp))
             self.pglin += 1
         self.fpdf.drawText()
@@ -311,7 +301,7 @@
                 self.fpdf.drawText("%-58s %s %s" % \
                 (lntrtp[x][1], qt.disp, am.disp))
             else:
-                self.fpdf.drawText("%-44s %s %s" % \
+                self.fpdf.drawText("%-79s %s %s" % \
                 (lntrtp[x][1], qt.disp, am.disp))
             tot[0] = tot[0] + qt.work
             tot[1] = float(ASD(tot[1]) + ASD(am.work))
@@ -322,7 +312,7 @@
             self.fpdf.drawText("%-58s %s %s" % \
             ("Grand Totals", qt.disp, am.disp))
         else:
-            self.fpdf.drawText("%-44s %s %s" % \
+            self.fpdf.drawText("%-79s %s %s" % \
             ("Grand Totals", qt.disp, am.disp))
         self.fpdf.drawText()
 

=== modified file 'lon/ln3030.py'
--- lon/ln3030.py	2015-08-26 08:52:51 +0000
+++ lon/ln3030.py	2015-09-08 11:57:40 +0000
@@ -66,77 +66,73 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        col = [
-            "lm1_acno",
-            "lm1_name",
-            "lm2_loan",
-            "lm2_desc",
-            "lm2_start",
-            "lm2_rate",
-            "lm2_mths",
-            "lm2_rpay",
-            "sum(lnt_tramt)"]
-        whr = [
-            ("lm1_cono", "=", self.opts["conum"]),
-            ("lm2_cono=lm1_cono",),
-            ("lm2_acno=lm1_acno",),
-            ("lnt_cono=lm1_cono",),
-            ("lnt_acno=lm1_acno",),
-            ("lnt_loan=lm2_loan",)]
         if self.sort == "N":
-            odr = "lm1_acno, lm2_loan"
-        else:
-            odr = "lm1_name, lm2_loan"
-        recs = self.sql.getRec(tables=["lonmf1", "lonmf2", "lontrn"], cols=col,
-            where=whr, order=odr)
-        if not recs:
-            showError(self.opts["mf"].body, "Transaction Error",
-                "No Transactions Selected")
-        else:
-            self.printReport(recs)
+            odr = "lm1_acno"
+        else:
+            odr = "lm1_name"
+        lm1 = self.sql.getRec(tables="lonmf1", where=[("lm1_cono", "=",
+            self.opts["conum"])], order=odr)
+        if not lm1:
+            showError(self.opts["mf"].body, "Loans Error",
+                "No Loans Selected")
+        else:
+            self.printReport(lm1)
         self.closeProcess()
 
     def printReport(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-        self.head = ("%03u %-30s %60s %6s" % \
+        self.head = ("%03u %-30s %81s %6s" % \
             (self.opts["conum"], self.opts["conam"], self.sysdttm, __name__))
         self.fpdf = MyFpdf(name=__name__, head=self.head)
-        tot = 0
+        tots = [0, 0, 0]
         self.pgnum = 0
         self.pglin = 999
-        for num, dat in enumerate(recs):
+        for num, rec in enumerate(recs):
             p.displayProgress(num)
             if p.quit:
                 break
-            acc = CCD(dat[0], "UI", 7)
-            nam = CCD(dat[1], "NA", 28)
-            lon = CCD(dat[2], "UI", 2)
-            des = CCD(dat[3], "NA", 30)
-            dte = CCD(dat[4], "d1", 10)
-            per = CCD(dat[5], "UD", 6.2)
-            lint = LoanInterest(self.sql, self.opts["conum"], acc.work,
-                lon.work, per.work, dte.work, self.date, "", self.curdt,
-                "", ltype="O", mths=dat[6], rpay=dat[7])
-            bal = CCD(float(ASD(dat[8]) + ASD(lint.rin)), "SD", 13.2)
-            if self.zero == "Y" and not bal.work:
-                continue
-            tot = float(ASD(tot) + ASD(bal.work))
-            if self.pglin > self.fpdf.lpp:
-                self.pageHeading()
-            self.fpdf.drawText("%s %s %s %s %s %s %s" % (acc.disp, nam.disp,
-                lon.disp, des.disp, dte.disp, per.disp, bal.disp))
-            self.pglin += 1
+            acc = CCD(rec[self.sql.lonmf1_col.index("lm1_acno")], "UA", 7)
+            nam = CCD(rec[self.sql.lonmf1_col.index("lm1_name")], "NA", 28)
+            lm2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+                "=", self.opts["conum"]), ("lm2_acno", "=", acc.work)],
+                order="lm2_loan")
+            for dat in lm2:
+                lon = CCD(dat[self.sql.lonmf2_col.index("lm2_loan")], "UI", 2)
+                des = CCD(dat[self.sql.lonmf2_col.index("lm2_desc")], "NA", 30)
+                dte = CCD(dat[self.sql.lonmf2_col.index("lm2_start")], "d1", 10)
+                lint = LoanInterest("L", self.opts["mf"].dbm, dat, update="Y",
+                    tdate=self.date, batch="Pending", curdt=self.date / 100)
+                cap = CCD(lint.cap, "SD", 13.2)
+                lbal = self.sql.getRec(tables="lontrn", cols=["sum(lnt_tramt)"],
+                    where=[("lnt_cono", "=", self.opts["conum"]), ("lnt_acno",
+                    "=", acc.work), ("lnt_loan", "=", lon.work)], limit=1)
+                bal = CCD(lbal[0], "SD", 13.2)
+                if self.zero == "Y" and not bal.work:
+                    continue
+                rin = CCD(float(ASD(bal.work) - ASD(cap.work)), "SD", 13.2)
+                tots[0] = float(ASD(tots[0]) + ASD(cap.work))
+                tots[1] = float(ASD(tots[1]) + ASD(rin.work))
+                tots[2] = float(ASD(tots[2]) + ASD(bal.work))
+                if self.pglin > self.fpdf.lpp:
+                    self.pageHeading()
+                self.fpdf.drawText("%s %s %s %s %s %s %s %s" % (acc.disp,
+                    nam.disp, lon.disp, des.disp, dte.disp, cap.disp,
+                    rin.disp, bal.disp))
+                self.pglin += 1
         p.closeProgress()
         if self.fpdf.page and not p.quit:
-            tot = CCD(tot, "SD", 13.2)
-            self.fpdf.drawText()
-            self.fpdf.drawText("%5s %-83s%s" % ("", "Total", tot.disp))
+            tots[0] = CCD(tots[0], "SD", 13.2)
+            tots[1] = CCD(tots[1], "SD", 13.2)
+            tots[2] = CCD(tots[2], "SD", 13.2)
+            self.fpdf.underLine(txt=self.head)
+            self.fpdf.drawText("%8s%-74s%13s %13s %13s" % ("", "Totals",
+                tots[0].disp, tots[1].disp, tots[2].disp))
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()
@@ -144,18 +140,15 @@
         self.pgnum += 1
         self.fpdf.drawText(self.head)
         self.fpdf.drawText()
-        self.fpdf.drawText("%-29s %-10s %55s %5s" % \
-            ("Loans Master List as at", self.sysdtd,
-                "Page", self.pgnum))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-15s%-1s%-3s%-16s%-1s%-3s%-4s%-1s%-1s" % \
-            ("(Options: Sort-", self.df.t_disp[0][0][0], "",
-            "Ignore Zero Bal-", self.df.t_disp[0][0][1], "",
-            "Csv-", self.df.t_disp[0][0][2], ")"))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-7s %-28s %-2s %-30s %-10s %-6s %-13s" % \
+        self.fpdf.drawText("%-29s %-10s %76s %5s" % \
+            ("Loans Master List as at", self.sysdtd, "Page", self.pgnum))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%s %s  %s %s)" % \
+            ("(Options: Sort:", self.sort, "Ignore-Zero-Bal:", self.zero))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-7s %-28s %-2s %-30s %-10s %13s %13s %13s" % \
             ("Acc-Num", "Name", "Ln", "Description", "Start-Date",
-            "I-Rate", "     Balance"))
+            "Capital ", "Interest ", "Balance "))
         self.fpdf.underLine(txt=self.head)
         self.fpdf.setFont()
         self.pglin = 8

=== modified file 'lon/ln3040.py'
--- lon/ln3040.py	2015-08-26 08:52:51 +0000
+++ lon/ln3040.py	2015-09-22 07:07:05 +0000
@@ -14,10 +14,11 @@
 """
 
 import time
+from TartanClasses import ASD, DrawForm, GetCtl, LoanInterest, ProgressBar
+from TartanClasses import Sql, TartanDialog
+from tartanFunctions import doPrinter, getModName, getSingleRecords, copyList
+from tartanFunctions import showError
 from tartanWork import lntrtp
-from TartanClasses import ASD, CCD, LoanInterest, MyFpdf, ProgressBar, Sql
-from TartanClasses import TartanDialog
-from tartanFunctions import doPrinter, getModName, getSingleRecords, showError
 
 class ln3040:
     def __init__(self, **opts):
@@ -27,219 +28,297 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["lonmf1", "lonmf2", "lontrn"],
-            prog=__name__)
-        if self.sql.error:
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
-            (t[0], t[1], t[2], t[3], t[4])
-        # Heading
-        self.head = ("%03u %-30s %80s %6s" % \
-            (self.opts["conum"], self.opts["conam"], self.sysdttm, __name__))
-        self.fpdf = MyFpdf(name=__name__, head=self.head)
+        self.sql = Sql(self.opts["mf"].dbm, ["ctlmes", "ctlmst", "lonmf1",
+            "lonmf2", "lontrn", "tplmst"], prog=__name__)
+        if self.sql.error:
+            return
+        #self.stpl = lonctl["ctd_tplnam"]
+        self.stpl = "statement_loan"
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Loans Statements (%s)" % __name__)
-        r1s = (("Yes","Y"),("Singles","S"))
-        r2s = (("Yes","Y"),("No","N"))
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Debtors Statements (%s)" % __name__)
+        tpm = {
+            "stype": "R",
+            "tables": ("tplmst",),
+            "cols": (
+                ("tpm_tname", "", 0, "Template"),
+                ("tpm_title", "", 0, "Title", "Y")),
+            "where": [
+                ("tpm_type", "=", "S"),
+                ("tpm_system", "=", "LON")],
+            "order": "tpm_tname"}
+        r1s = (("Yes","Y"),("No","N"))
+        r2s = (("Number","A"),("Name","N"))
         fld = (
-            (("T",0,0,0),"Id1",10,"Start Date","",
-                "","Y",self.doFdate,None,None,("efld",)),
-            (("T",0,1,0),"ID1",10,"Last Date","",
-                self.sysdtw,"Y",self.doLdate,None,None,("efld",)),
+            (("T",0,0,0),"INA",20,"Template Name","",
+                self.stpl,"Y",self.doTplNam,tpm,None,None),
+            (("T",0,1,0),"IUI",2,"Maximum Pages","",
+                1,"Y",self.doPages,None,None,None),
             (("T",0,2,0),("IRB",r1s),0,"Whole File","",
-                "S","Y",self.doWhole,None,None,None),
-            (("T",0,3,0),("IRB",r2s),0,"Ignore Paid Ups","",
-                "Y","Y",self.doPaidup,None,None,None))
+                "N","Y",self.doWhole,None,None,None),
+            (("T",0,3,0),("IRB",r2s),0,"Sort Order","",
+                "A","Y",self.doSort,None,None,None),
+            (("T",0,4,0),("IRB",r1s),0,"Include Zero Balances","",
+                "N","Y",self.doZeros,None,None,None),
+            (("T",0,5,0),"ID1",10,"Statement Date","",
+                self.sysdtw,"Y",self.doDate,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
-
-    def doFdate(self, frt, pag, r, c, p, i, w):
-        self.fdate = w
-
-    def doLdate(self, frt, pag, r, c, p, i, w):
-        self.ldate = w
-        self.curdt = w / 100
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
+
+    def doTplNam(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
+            ("tpm_type", "=", "S"), ("tpm_system", "=", "LON")], limit=1)
+        if not acc:
+            return "Invalid Template Name"
+        self.tname = w
+
+    def doPages(self, frt, pag, r, c, p, i, w):
+        self.pages = w
 
     def doWhole(self, frt, pag, r, c, p, i, w):
         self.whole = w
 
-    def doPaidup(self, frt, pag, r, c, p, i, w):
-        self.paidup = w
+    def doSort(self, frt, pag, r, c, p, i, w):
+        self.sort = w
+
+    def doZeros(self, frt, pag, r, c, p, i, w):
+        self.zeros = w
+
+    def doDate(self, frt, pag, r, c, p, i, w):
+        self.datew = w
+        self.dated = self.df.t_disp[pag][0][p]
+        self.curdt = w / 100
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        if self.whole == "S":
-            col = [
-                "lm2_acno", "lm1_name", "lm2_loan", "lm2_desc"]
-            whr = [
-                ("lm2_cono", "=", self.opts["conum"]),
-                ("lm1_cono=lm2_cono",), ("lm1_acno=lm2_acno",)]
-            dic = {}
-            dic["lm2_acno"] = self.sql.lonmf2_dic["lm2_acno"]
-            dic["lm2_loan"] = self.sql.lonmf2_dic["lm2_loan"]
-            dic["lm2_desc"] = self.sql.lonmf2_dic["lm2_desc"]
-            dic["lm1_sname"] = self.sql.lonmf1_dic["lm1_sname"]
-            dic["lm1_fname"] = self.sql.lonmf1_dic["lm1_fname"]
-            dat = self.sql.getRec(tables=["lonmf2", "lonmf1"], cols=col,
-                where=whr, order="lm2_acno, lm2_loan")
-            get = getSingleRecords(self.opts["mf"], "lonmf2", col,
-                where=dat, ttype="D", dic=dic)
-            if get:
-                acc = []
-                for g in get:
-                    acc.append(g[0])
-                whr = [
-                    ("lm2_cono", "=", self.opts["conum"]),
-                    ("lm2_acno", "in", acc)]
-                odr = "lm2_acno, lm2_loan"
-                recs = self.sql.getRec(tables="lonmf2", where=whr, order=odr)
+        self.emadd = self.df.repeml[2]
+        if self.whole == "N":
+            recs = getSingleRecords(self.opts["mf"], "lonmf1",
+                ("lm1_acno", "lm1_name"), where=[("lm1_cono",
+                "=", self.opts["conum"])])
+        else:
+            whr = [("lm1_cono", "=", self.opts["conum"])]
+            if self.sort == "A":
+                odr = "lm1_acno"
             else:
-                recs = None
-        else:
-            whr = [("lm2_cono", "=", self.opts["conum"])]
-            odr = "lm2_acno, lm2_loan"
-            recs = self.sql.getRec(tables="lonmf2", where=whr, order=odr)
+                odr = "lm1_name"
+            recs = self.sql.getRec(tables="lonmf1", where=whr, order=odr)
         if not recs:
             showError(self.opts["mf"].body, "Error",
                 "No Accounts Selected")
         else:
+            self.form = DrawForm(self.opts["mf"].dbm, self.tname,
+                wrkdir=self.opts["mf"].rcdic["wrkdir"])
+            self.doLoadStatic()
+            self.form.doNewDetail()
             p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
-            for num, acc in enumerate(recs):
+            for num, rec in enumerate(recs):
                 p.displayProgress(num)
                 if p.quit:
-                        break
-                self.doProcess(acc)
+                    break
+                self.doProcess(rec)
             p.closeProgress()
-            if self.fpdf.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.df.repeml[1] == "N" or self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
-    def doProcess(self, acc):
-        self.pgnum = 0
-        self.totbal = 0
-        dic = self.sql.lonmf2_dic
-        self.acc = CCD(acc[dic["lm2_acno"][1]], "UI", 7)
-        whr = [
-            ("lm1_cono", "=", self.opts["conum"]),
-            ("lm1_acno", "=", self.acc.work)]
-        col = ("lm1_name",)
-        mst = self.sql.getRec(tables="lonmf1", where=whr, cols=col, limit=1)
-        self.nam = CCD(mst[0], "NA", 58)
-        self.lon = CCD(acc[dic["lm2_loan"][1]], "UI", 2)
-        self.des = CCD(acc[dic["lm2_desc"][1]], "NA", 30)
-        rte = acc[dic["lm2_rate"][1]]
-        stt = acc[dic["lm2_start"][1]]
-        mth = acc[dic["lm2_mths"][1]]
-        pay = acc[dic["lm2_rpay"][1]]
-        # Raise pending interest
-        LoanInterest(self.sql, self.opts["conum"], self.acc.work,
-            self.lon.work, rte, stt, self.ldate, "Pending", self.curdt,
-            "", update="Y", ltype="O", mths=mth, rpay=pay)
+    def doLoadStatic(self):
+        cmc = self.sql.ctlmst_col
+        ctm = self.sql.getRec(tables="ctlmst", where=[("ctm_cono", "=",
+            self.opts["conum"])], limit=1)
+        for fld in cmc:
+            dat = ctm[cmc.index(fld)]
+            if fld in self.form.tptp:
+                if fld == "ctm_logo":
+                    self.form.letterhead(cmc, ctm, fld, dat)
+                    continue
+                self.form.tptp[fld][1] = dat
+        if "letterhead" in self.form.tptp:
+            self.form.letterhead(cmc, ctm, "letterhead", None)
+        self.form.document_date(self.dated)
+        self.form.bank_details(cmc, ctm, 0)
+
+    def doProcess(self, lm1):
+        l1c = self.sql.lonmf1_col
+        tdc = self.form.sql.tpldet_col
+        self.acno = lm1[l1c.index("lm1_acno")]
+        self.emlto = lm1[l1c.index("lm1_email")]
+        self.form.account_details("lm1", l1c, lm1, 1)
+        for col in l1c:
+            d = "%s_C00" % col
+            if d in self.form.newdic:
+                dat = lm1[l1c.index(col)]
+                self.form.newdic[d][tdc.index("tpd_text")] = dat
+        lonmf2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono",
+            "=", self.opts["conum"]), ("lm2_acno", "=", self.acno)],
+            order="lm2_loan")
+        for loan in lonmf2:
+            self.doStatement(tdc, loan)
+
+    def doStatement(self, tdc, lm2):
+        l2c = self.sql.lonmf2_col
+        ltc = self.sql.lontrn_col
+        self.loan = lm2[l2c.index("lm2_loan")]
+        for col in l2c:
+            d = "%s_C00" % col
+            if d in self.form.newdic:
+                dat = lm2[l2c.index(col)]
+                self.form.newdic[d][tdc.index("tpd_text")] = dat
+        # Raise Interest
+        LoanInterest("L", self.opts["mf"].dbm, lm2, update="Y",
+            tdate=self.datew, batch="Pending", curdt=self.curdt, capnm="")
+        # Get Transactions
         whr = [
             ("lnt_cono", "=", self.opts["conum"]),
-            ("lnt_acno", "=", self.acc.work),
-            ("lnt_loan", "=", self.lon.work)]
-        col = ("lnt_trdt", "lnt_type", "lnt_refno", "lnt_batch", "lnt_rate",
-            "lnt_tramt", "lnt_desc")
+            ("lnt_acno", "=", self.acno),
+            ("lnt_loan", "=", self.loan)]
         odr = "lnt_trdt, lnt_type, lnt_refno"
-        wlt = self.sql.getRec(tables="lontrn", where=whr, cols=col, order=odr)
-        if wlt:
-            self.loadBalances(wlt)
-            if self.paidup == "Y" and not self.cbal:
-                pass
+        trns = self.sql.getRec(tables="lontrn", where=whr, order=odr)
+        if not trns:
+            return
+        self.tots = 0
+        for t in trns:
+            self.tots = float(ASD(self.tots) + ASD(t[ltc.index("lnt_tramt")]))
+        if self.zeros == "N" and not self.tots:
+            return
+        if not len(trns) > self.form.maxlines:
+            self.doBody(ltc, trns, tdc)
+        else:
+            pages = len(trns) / self.form.maxlines
+            if len(trns) % self.form.maxlines:
+                pages += 1
+            if not pages > self.pages:
+                self.doBody(ltc, trns, tdc)
             else:
-                self.printHeader()
-                self.printBody(wlt)
-
-    def loadBalances(self, wlt):
-        self.obal = 0.0
-        self.cbal = 0.0
-        for x in xrange(0, len(wlt)):
-            dat = CCD(wlt[x][0], "d1", 10)
-            amt = CCD(wlt[x][5], "SD", 13.2)
-            if self.fdate and dat.work < self.fdate:
-                self.obal = float(ASD(self.obal) + ASD(float(amt.work)))
-            if dat.work <= self.ldate:
-                self.cbal = float(ASD(self.cbal) + ASD(float(amt.work)))
-
-    def pageHeading(self):
-        self.fpdf.add_page()
-        self.fpdf.setFont(style="B")
-        self.pgnum += 1
-        self.fpdf.drawText(self.head)
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-27s %-15s %2s %15s %53s %5s" % \
-            ("Loans Statements from", self.df.t_disp[0][0][0],
-            "to", self.df.t_disp[0][0][1], "Page", self.pgnum))
-        self.fpdf.underLine(txt=self.head)
-        self.fpdf.setFont()
-        self.pglin = 4
-
-    def printHeader(self):
-        self.pageHeading()
-        self.pglin += 1
-        self.fpdf.setFont(style="B")
-        mess = "%-8s %-7s %-58s %-4s %-2s %-30s" % ("Account:",
-            self.acc.disp, self.nam.disp, "Loan", self.lon.disp, self.des.disp)
-        self.fpdf.drawText(mess)
-        self.pglin += 1
-        self.fpdf.drawText()
-        self.pglin += 1
-        mess = "%-10s %-3s %-9s %-7s %-6s %-13s %-13s %-30s" % \
-            ("   Date", "Typ", "Reference", "Batch", "  Int-%",
-            "      Amount", "     Balance", "Remarks")
-        self.fpdf.drawText(mess)
-        self.pglin += 1
-        self.fpdf.underLine(txt=self.head)
-        self.pglin += 1
-        self.fpdf.setFont()
-
-    def printBody(self, wlt):
-        for trn in wlt:
-            dat = CCD(trn[0], "d1", 10)
-            bat = CCD(trn[3], "Na", 7)
-            typ = CCD(trn[1], "UI", 2)
-            ref = CCD(trn[2], "Na", 9)
-            per = CCD(trn[4], "UD", 7.2)
-            amt = CCD(trn[5], "SD", 13.2)
-            des = CCD(trn[6], "NA", 40)
-            if self.fdate and dat.work < self.fdate:
-                continue
-            if dat.work > self.ldate:
-                continue
-            if self.pglin > self.fpdf.lpp:
-                self.printHeader()
-                bal = CCD(self.obal, "SD", 13.2)
-                if bal.work:
-                    mess = "%-69s%s%-30s" % ("", bal.disp, " Brought Forward")
-                    self.fpdf.drawText(mess)
-                    self.pglin += 1
-            self.obal = float(ASD(self.obal) + ASD(float(amt.work)))
-            bal = CCD(self.obal, "SD", 13.2)
-            mess = "%s %s %s %s %s %s %s %s" % \
-                (dat.disp, lntrtp[typ.work - 1][0], ref.disp, bat.disp,
-                per.disp, amt.disp, bal.disp, des.disp)
-            self.fpdf.drawText(mess)
-            self.pglin += 1
+                bal = 0
+                lines = len(trns) - (self.pages * self.form.maxlines) + 1
+                for _ in xrange(lines):
+                    trn = trns.pop(0)
+                    bal = float(ASD(bal) + ASD(trn[ltc.index("lnt_tramt")]))
+                trn[ltc.index("lnt_type")] = 5
+                trn[ltc.index("lnt_refno")] = "B/FWD"
+                trn[ltc.index("lnt_batch")] = ""
+                trn[ltc.index("lnt_tramt")] = bal
+                trn[ltc.index("lnt_desc")] = "Balance Brought Forward"
+                trn[ltc.index("lnt_batind")] = ""
+                trns.insert(0, trn)
+                self.doBody(ltc, trns, tdc)
+        self.doTotal(tdc)
+        self.doTail(tdc)
+        if self.df.repeml[1] == "Y" and not self.emadd:
+            self.df.repeml[2] = self.emlto
+            self.doPrint()
 
     def doPrint(self):
-        if self.prtnam == "view":
-            view = "Y"
+        if self.df.repeml[1] == "Y" and not self.emadd:
+            key = "%s_%s_%s" % (self.opts["conum"], self.chn, self.acno)
         else:
-            view = "N"
-        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-            self.opts["conum"], ext="pdf")
-        self.fpdf.output(pdfnam, "F")
+            key = "%s_all_all" % self.opts["conum"]
+        pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
+            ext="pdf")
+        self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam)
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.df.repprt, repeml=self.df.repeml)
+        if self.df.repeml[1] == "Y":
+            self.form = DrawForm(self.opts["mf"].dbm, self.tname,
+                wrkdir=self.opts["mf"].rcdic["wrkdir"])
+            self.doLoadStatic()
+            self.form.doNewDetail()
+
+    def doBody(self, ltc, lnt, tdc):
+        page = 0
+        count = 0
+        text = tdc.index("tpd_text")
+        for trans in lnt:
+            if not count:
+                page += 1
+                count = self.doHeader(page)
+            if count == self.form.maxlines:
+                page = self.doCfwd(page)
+                count = self.doHeader(page)
+            for cod in self.form.body:
+                if cod == "type_code":
+                    c = "lnt_type"
+                elif cod == "line_paid":
+                    c = "paid"
+                elif cod == "line_balance":
+                    c = "balance"
+                else:
+                    c = cod
+                d = "%s_C%02i" % (cod, count)
+                if cod == "type_code":
+                    ttyp = trans[ltc.index(c)]
+                    self.form.newdic[d][text] = lntrtp[ttyp - 1][0]
+                else:
+                    self.form.newdic[d][text] = trans[ltc.index(c)]
+                self.form.doDrawDetail(self.form.newdic[d])
+            count += 1
+        for x in xrange(count, self.form.maxlines):
+            for cod in self.form.body:
+                d = "%s_C%02i" % (cod, x)
+                self.form.newdic[d][tdc.index("tpd_text")] = "BLANK"
+                self.form.doDrawDetail(self.form.newdic[d])
+
+    def doHeader(self, page):
+        self.form.add_page()
+        tdc = self.form.sql.tpldet_col
+        for key in self.form.newkey:
+            nl = copyList(self.form.newdic[key])
+            if not nl[tdc.index("tpd_place")] == "A":
+                continue
+            if nl[tdc.index("tpd_detseq")] == "lm1_acno_C00":
+                nl[tdc.index("tpd_text")] = self.acno
+            elif nl[tdc.index("tpd_detseq")] == "page_number_C00":
+                nl[tdc.index("tpd_text")] = str(page)
+            self.form.doDrawDetail(nl)
+        return 0
+
+    def doCfwd(self, page):
+        if "carried_forward" in self.form.tptp:
+            tdc = self.form.sql.tpldet_col
+            line = copyList(self.form.cfwd)
+            line[tdc.index("tpd_text")] = "Continued on Page %i" % (page + 1)
+            self.form.doDrawDetail(line)
+        return page + 1
+
+    def doTotal(self, tdc):
+        for c in self.form.total:
+            t = "%s_T00" % c
+            if c in self.form.newdic:
+                self.form.doDrawDetail(self.form.newdic[c])
+            elif t in self.form.newdic:
+                self.form.doDrawDetail(self.form.newdic[t])
+            d = "%s_C00" % c
+            if d in self.form.newdic:
+                line = self.form.newdic[d]
+                if c == "total_balance":
+                    line[tdc.index("tpd_text")] = self.tots
+                self.form.doDrawDetail(line)
+
+    def doTail(self, tdc):
+        for c in self.form.tail:
+            t = "%s_T00" % c
+            if c in self.form.newdic:
+                self.form.doDrawDetail(self.form.newdic[c])
+            elif t in self.form.newdic:
+                self.form.doDrawDetail(self.form.newdic[t])
+            d = "%s_C00" % c
+            if d in self.form.newdic:
+                self.form.doDrawDetail(self.form.newdic[d])
 
     def doExit(self):
         self.df.closeProcess()

=== added file 'lon/ln3050.py'
--- lon/ln3050.py	1970-01-01 00:00:00 +0000
+++ lon/ln3050.py	2015-09-16 07:58:24 +0000
@@ -0,0 +1,88 @@
+#! /usr/bin/env python
+
+"""
+SYNOPSIS
+    Loan's Ledger Notes Listing.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2015 Paul Malherbe.
+"""
+
+from TartanClasses import CCD, GetCtl, NotesPrint, ProgressBar, RepPrt, Sql
+from tartanFunctions import textFormat
+
+class ln3050:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+
+    def setVariables(self):
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
+            return
+        self.sql = Sql(self.opts["mf"].dbm, "lonmf1", prog=__name__)
+        if self.sql.error:
+            return
+        self.notes = NotesPrint(self.opts["mf"], self.opts["conum"],
+            self.opts["conam"], "LON")
+        if not self.notes.data:
+            return
+        return True
+
+    def mainProcess(self):
+        data = []
+        p = ProgressBar(self.opts["mf"].body, typ="Generating the Report",
+            mxs=len(self.notes.data), esc=True)
+        for num, dat in enumerate(self.notes.data):
+            p.displayProgress(num)
+            if p.quit:
+                break
+            desc = textFormat(dat[5], width=50)
+            for n, d in enumerate(desc):
+                if not n:
+                    acc = dat[2][:7].strip()
+                    lon = int(dat[2][7:])
+                    print dat[2], acc, lon
+                    nam = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
+                        where=[("lm1_cono", "=", self.opts["conum"]),
+                        ("lm1_acno", "=", acc)], limit=1)
+                    if not nam:
+                        nam = ["Unknown"]
+                    des = self.sql.getRec(tables="lonmf2", cols=["lm2_desc"],
+                        where=[("lm2_cono", "=", self.opts["conum"]),
+                        ("lm2_acno", "=", acc), ("lm2_loan", "=", lon)],
+                        limit=1)
+                    if not des:
+                        des = ["Unknown"]
+                    data.append([acc, nam[0], lon, des[0], dat[4],
+                        CCD(dat[3], "d1", 10).disp, dat[6],
+                        CCD(dat[7], "d1", 10).disp, d])
+                else:
+                    data.append(["", "", "", "", "", "", "", d])
+        p.closeProgress()
+        if not p.quit:
+            name = __name__
+            head = ["Debtor's Masterfile Notes Listing"]
+            cols = [
+                ["a", "NA",  7, "Acc-Num",     "y"],
+                ["b", "NA", 30, "Acc-Name",    "y"],
+                ["c", "UI",  2, "LN",          "y"],
+                ["d", "NA", 30, "Description", "y"],
+                ["e", "NA", 20, "User-Name",   "y"],
+                ["f", "NA", 10, "Cap-Date",    "y"],
+                ["g", "UA",  1, "F",           "y"],
+                ["h", "NA", 10, "Act-Date",    "y"],
+                ["i", "NA", 50, "Details",     "y"]]
+            RepPrt(self.opts["mf"], conum=self.opts["conum"],
+                conam=self.opts["conam"], name=name, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'lon/ln4010.py'
--- lon/ln4010.py	2015-08-26 08:52:51 +0000
+++ lon/ln4010.py	2015-09-15 13:46:50 +0000
@@ -68,21 +68,20 @@
             ("General", self.doGeneral, ("T",0,0), ("T",0,1)),
             ("Trans", self.doTrans1, ("T",0,0), ("T",0,1)))
         fld = (
-            (("T",0,0,0),"IUI",7,"Acc-Num","Account Number",
+            (("T",0,0,0),"IUA",7,"Acc-Num","Account Number",
                 "","N",self.doAcc,acc,None,("notzero",)),
             (("T",0,0,0),"ONA",40,"Name"),
-            (("T",0,1,0),"IUI",7,"Loan-Num","Loan Number",
+            (("T",0,1,0),"IUI",2,"Loan-Num","Loan Number",
                 "","N",self.doLoan,lnm,None,("notzero",)),
-            (("T",0,1,0),"ONA",40,"Desc"),
-            (("T",1,1,0),"OUD",6.2,"Interest Percentage"),
-            (("T",1,2,0),"OD1",10,"Start Date"),
-            (("T",1,3,0),"OSD",13.2,"Total Advances"),
-            (("T",1,4,0),"OSD",13.2,"Total Interest"),
-            (("T",1,5,0),"OSD",13.2,"Total Repayments"),
-            (("T",1,6,0),"OSD",13.2,"Total Adjustments"),
-            (("T",1,7,0),"OSD",13.2,"Balance"),
-            (("T",1,8,0),"Od1",10,"Last Interest Raised"),
-            (("T",1,9,0),"Od1",10,"Last Payment Received"),
+            (("T",0,1,15),"ONA",40,"Desc"),
+            (("T",1,0,0),"OD1",10,"Start Date"),
+            (("T",1,1,0),"OSD",13.2,"Total Advances"),
+            (("T",1,2,0),"OSD",13.2,"Total Interest"),
+            (("T",1,3,0),"OSD",13.2,"Total Repayments"),
+            (("T",1,4,0),"OSD",13.2,"Total Adjustments"),
+            (("T",1,5,0),"OSD",13.2,"Balance"),
+            (("T",1,6,0),"Od1",10,"Last Interest Raised"),
+            (("T",1,7,0),"Od1",10,"Last Payment Received"),
             (("T",2,0,0),("IRB",r1s),0,"History","",
                 "Y","Y",self.doTrans2,None,None,None))
         tnd = ((self.doEndTop,"N"), None, None)
@@ -108,19 +107,20 @@
         self.df.loadEntry("T", pag, p+1, data=self.name)
 
     def doLoan(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="lonmf2", cols=["lm2_desc", "lm2_rate",
-            "lm2_start", "lm2_mths", "lm2_rpay"], where=[("lm2_cono",
-            "=", self.opts["conum"]), ("lm2_acno", "=", self.acno),
+        lonmf2 = self.sql.getRec(tables="lonmf2", where=[("lm2_cono", "=",
+            self.opts["conum"]), ("lm2_acno", "=", self.acno),
             ("lm2_loan", "=", w)], limit=1)
-        if not acc:
+        if not lonmf2:
             return "Invalid Loan Number"
         self.loan = w
-        self.desc = acc[0]
+        self.desc = lonmf2[self.sql.lonmf2_col.index("lm2_desc")]
         self.df.loadEntry("T", pag, p+1, data=self.desc)
-        d = 1
-        for i in xrange(2):
-            self.df.loadEntry("T", 1, i, data=acc[d])
-            d += 1
+        start = lonmf2[self.sql.lonmf2_col.index("lm2_start")]
+        self.df.loadEntry("T", 1, 0, data=start)
+        # Raise Interest
+        LoanInterest("L", self.opts["mf"].dbm, lonmf2, update="Y",
+            tdate=self.sysdtw, batch="Pending", curdt=self.sysdtw / 100)
+        # Get Balances
         self.lon = 0.0
         self.imt = 0.0
         self.pay = 0.0
@@ -128,47 +128,37 @@
         self.bal = 0.0
         self.idt = 0
         self.pdt = 0
-        self.cap = 0.0
-        self.due = 0
-        # Raise Interest
-        rate = self.df.t_work[1][0][0]
-        start = self.df.t_work[1][0][1]
-        LoanInterest(self.sql, self.opts["conum"], self.acno, self.loan,
-            rate, start, self.sysdtw, "Pending", (self.sysdtw / 100),
-            self.opts["capnm"], update="Y", ltype="O", mths=acc[3],
-            rpay=acc[4])
-        # Get Balances
         whr = [
             ("lnt_cono", "=", self.opts["conum"]),
             ("lnt_acno", "=", self.acno),
             ("lnt_loan", "=", self.loan)]
         odr = "lnt_trdt, lnt_type"
-        self.wlt = self.sql.getRec(tables="lontrn", where=whr, order=odr)
-        if self.wlt:
+        self.lnt = self.sql.getRec(tables="lontrn", where=whr, order=odr)
+        if self.lnt:
             col = self.sql.lontrn_col
-            for rec in self.wlt:
+            for rec in self.lnt:
                 dat = CCD(rec[col.index("lnt_trdt")], "d1", 10)
                 typ = CCD(rec[col.index("lnt_type")], "UI",  2)
                 amt = CCD(rec[col.index("lnt_tramt")], "SD",13.2)
                 self.bal = float(ASD(self.bal) + ASD(amt.work))
                 if typ.work == 1:
-                    self.idt = dat.work
-                    self.imt = float(ASD(self.imt) + ASD(amt.work))
-                elif typ.work in (2, 3):
                     self.lon = float(ASD(self.lon) + ASD(amt.work))
-                elif typ.work == 4:
+                elif typ.work == 2:
                     self.pay = float(ASD(self.pay) + ASD(amt.work))
                     self.pdt = dat.work
-                elif typ.work == 5:
+                elif typ.work == 3:
                     self.adj = float(ASD(self.adj) + ASD(amt.work))
+                else:
+                    self.idt = dat.work
+                    self.imt = float(ASD(self.imt) + ASD(amt.work))
         # Load Balances
-        self.df.loadEntry("T", 1, 2, data=self.lon)
-        self.df.loadEntry("T", 1, 3, data=self.imt)
-        self.df.loadEntry("T", 1, 4, data=self.pay)
-        self.df.loadEntry("T", 1, 5, data=self.adj)
-        self.df.loadEntry("T", 1, 6, data=self.bal)
-        self.df.loadEntry("T", 1, 7, data=self.idt)
-        self.df.loadEntry("T", 1, 8, data=self.pdt)
+        self.df.loadEntry("T", 1, 1, data=self.lon)
+        self.df.loadEntry("T", 1, 2, data=self.imt)
+        self.df.loadEntry("T", 1, 3, data=self.pay)
+        self.df.loadEntry("T", 1, 4, data=self.adj)
+        self.df.loadEntry("T", 1, 5, data=self.bal)
+        self.df.loadEntry("T", 1, 6, data=self.idt)
+        self.df.loadEntry("T", 1, 7, data=self.pdt)
         self.opts["mf"].updateStatus("")
 
     def doHist(self, frt, pag, r, c, p, i, w):
@@ -189,13 +179,13 @@
         tit = "Transactions for Loan: %s %s - %s" % \
             (self.acno, self.name, self.desc)
         tab = ["lontrn"]
-        col = (("lnt_trdt", "", 0, "   Date"),
-                ("lnt_batch", "", 0, "Batch"),
-                ("lnt_type", ("XX", lntrtp), 3, "Typ"),
-                ("lnt_refno", "", 0, "Reference", "Y"),
-                ("lnt_rate", "", 0, " Int-%"),
-                ("lnt_tramt", "", 0, "      Amount"),
-                ("lnt_desc", "", 0, "Remarks"))
+        col = (
+            ("lnt_trdt", "", 0, "   Date"),
+            ("lnt_batch", "", 0, "Batch"),
+            ("lnt_type", ("XX", lntrtp), 3, "Typ"),
+            ("lnt_refno", "", 0, "Reference", "Y"),
+            ("lnt_tramt", "", 0, "      Amount"),
+            ("lnt_desc", "", 0, "Remarks"))
         whr = [
             ("lnt_cono", "=", self.opts["conum"]),
             ("lnt_acno", "=", self.acno),
@@ -245,13 +235,13 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
-            if not self.wlt:
+            if not self.lnt:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.acctot = 0
                 self.pageHeading()
@@ -259,16 +249,16 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
-            if self.wlt:
+            if self.lnt:
                 self.acctot = 0
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%-5s %-20s %-25s %s" % ("", "",
@@ -295,16 +285,15 @@
             typ = CCD(rec[self.sql.lontrn_col.index("lnt_type")], "UI", 1)
             ref = CCD(rec[self.sql.lontrn_col.index("lnt_refno")], "Na", 9)
             bat = CCD(rec[self.sql.lontrn_col.index("lnt_batch")], "Na", 7)
-            rte = CCD(rec[self.sql.lontrn_col.index("lnt_rate")], "NA", 7.2)
             amt = CCD(rec[self.sql.lontrn_col.index("lnt_tramt")], "SD", 13.2)
             det = CCD(rec[self.sql.lontrn_col.index("lnt_desc")], "NA", 30)
             if self.pglin > self.fpdf.lpp:
                 self.pageHeading()
                 self.pageHeadingTrans()
             self.acctot = float(ASD(self.acctot) + ASD(amt.work))
-            self.fpdf.drawText("%s %s %s %s %s %s %s" % (trd.disp,
+            self.fpdf.drawText("%s %s %s %s %s %s" % (trd.disp,
                 lntrtp[(typ.work - 1)][0], ref.disp, bat.disp,
-                rte.disp, amt.disp, det.disp))
+                amt.disp, det.disp))
             self.pglin += 1
 
     def pageHeading(self):
@@ -322,17 +311,16 @@
 
     def pageHeadingTrans(self):
         self.fpdf.setFont(style="B")
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-1s %-7s %s %-2s %-7s %s %-2s %-8s %s " \
-            "%-2s %-4s %s" % ("",
+        self.fpdf.drawText("%-1s %-s: %s %-2s %-s: %s" % ("",
             self.df.topf[0][0][3], self.df.t_disp[0][0][0], "",
-            self.df.topf[0][1][3], self.df.t_disp[0][0][1][:20], "",
+            self.df.topf[0][1][3], self.df.t_disp[0][0][1]))
+        self.fpdf.drawText()
+        self.fpdf.drawText("%-1s %-s: %s %-2s %-s: %s" % ("",
             self.df.topf[0][2][3], self.df.t_disp[0][0][2], "",
-            self.df.topf[0][3][3], self.df.t_disp[0][0][3][:20]))
+            self.df.topf[0][3][3], self.df.t_disp[0][0][3]))
         self.fpdf.drawText()
-        self.fpdf.drawText("%-10s %-3s %-9s %-7s %-7s %-13s %-30s" % \
-            ("   Date", "Typ", "Reference", "Batch", "Int%",
-            "      Amount", "Remarks"))
+        self.fpdf.drawText("%-10s %-3s %-9s %-7s %-13s %-30s" % ("   Date",
+            "Typ", "Reference", "Batch", "      Amount", "Remarks"))
         self.fpdf.underLine(txt=self.head)
         self.fpdf.setFont()
         self.pglin = 8

=== added file 'lon/ln6010.py'
--- lon/ln6010.py	1970-01-01 00:00:00 +0000
+++ lon/ln6010.py	2015-09-16 08:28:45 +0000
@@ -0,0 +1,149 @@
+#! /usr/bin/python
+
+"""
+SYNOPSIS
+    Loans's Ledger Account Code Change.
+
+    This file is part of Tartan Systems (TARTAN).
+
+AUTHOR
+    Written by Paul Malherbe, <paul@tartan.co.za>
+
+COPYING
+    Copyright (C) 2004-2015 Paul Malherbe.
+"""
+
+from TartanClasses import GetCtl, ProgressBar, Sql, TartanDialog
+from tartanFunctions import askQuestion, genAccNum
+
+class ln6010:
+    def __init__(self, **opts):
+        self.opts = opts
+        if self.setVariables():
+            self.mainProcess()
+            self.opts["mf"].startLoop()
+
+    def setVariables(self):
+        self.tables = (
+            ("ctlnot", "not_key"),
+            ("lonmf1", "lm1_cono", "lm1_acno"),
+            ("lonmf2", "lm2_cono", "lm2_acno"),
+            ("lonrte", "lrt_cono", "lrt_acno"),
+            ("lontrn", "lnt_cono", "lnt_acno"))
+        tabs = []
+        for tab in self.tables:
+            tabs.append(tab[0])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
+        if self.sql.error:
+            return
+        gc = GetCtl(self.opts["mf"])
+        lonctl = gc.getCtl("lonctl", self.opts["conum"])
+        if not lonctl:
+            return
+        self.autogen = "N"
+        return True
+
+    def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Loans's Ledger Key Changes")
+        lm1 = {
+            "stype": "R",
+            "tables": ("lonmf1",),
+            "cols": [
+                ("lm1_acno", "", 0, "Acc-Num"),
+                ("lm1_name", "", 0, "Name", "Y"),
+                ("lm1_addr1", "", 0, "Address Line 1")],
+            "where": [("lm1_cono", "=", self.opts["conum"])]}
+        fld = (
+            (("T",0,0,0),"I@lm1_acno",0,"Old Account","Old Account Number",
+                "","Y",self.doOldAcc,lm1,None,("notblank",)),
+            (("T",0,0,0),"O@lm1_name",0,""),
+            (("T",0,1,0),"I@lm1_acno",0,"New Account","New Account Number",
+                "","Y",self.doNewAcc,None,None,("notblank",)))
+        tnd = ((self.doProcess,"y"), )
+        txt = (self.doExit, )
+        but = [("Generate",None,self.doGenerate,0,("T",0,1),("T",0,2),
+            "Generate New Account Numbers Based on Names of Accounts")]
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tend=tnd,
+            txit=txt, butt=but)
+
+    def doOldAcc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="lonmf1", cols=["lm1_name"],
+            where=[("lm1_cono", "=", self.opts["conum"]),
+            ("lm1_acno", "=", w)], limit=1)
+        if not acc:
+            return "Invalid Account Number, Does Not exist"
+        self.oldacc = w
+        self.df.loadEntry(frt, pag, p+1, data=acc[0])
+
+    def doNewAcc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="lonmf1", where=[("lm1_cono", "=",
+            self.opts["conum"]), ("lm1_acno", "=", w)], limit=1)
+        if acc:
+            return "Invalid Account Number, Already Exists"
+        self.newacc = w
+
+    def doGenerate(self, widget=None):
+        self.opts["mf"].updateStatus("")
+        ok = askQuestion(self.opts["mf"].body, "ARE YOU SURE???",
+            "Are You Certain This Is What You Want To Do? This "\
+            "Will Automatically Generate New Account Numbers For "\
+            "All Accounts Based On The Account Names!", default="no")
+        if ok == "no":
+            self.df.focusField("T", 0, 1)
+            return
+        self.df.closeProcess()
+        self.autogen = "Y"
+        recs = self.sql.getRec(tables="lonmf1", where=[("lm1_cono", "=",
+            self.opts["conum"])], order="lm1_name")
+        col = self.sql.lonmf1_col
+        if recs:
+            p = ProgressBar(self.opts["mf"].body,
+                typ="Generating Account Numbers", mxs=len(recs))
+            for num, acc in enumerate(recs):
+                p.displayProgress(num)
+                self.oldacc = acc[col.index("lm1_acno")]
+                name = acc[col.index("lm1_name")]
+                for seq in xrange(1, 100):
+                    self.newacc = genAccNum(name, seq)
+                    if self.newacc == self.oldacc:
+                        break
+                    chk = self.sql.getRec(tables="lonmf1",
+                        where=[("lm1_cono", "=", self.opts["conum"]),
+                        ("lm1_acno", "=", self.newacc)], limit=1)
+                    if not chk:
+                        break
+                self.doProcess(focus=False)
+            p.closeProgress()
+        self.opts["mf"].dbm.commitDbase(ask=True)
+        self.opts["mf"].closeLoop()
+
+    def doProcess(self, focus=True):
+        for tab in self.tables:
+            if tab[0] == "ctlnot":
+                for seq in range(1, 100):
+                    oldnot = "%7s%02i" % (self.oldacc, seq)
+                    newnot = "%7s%02i" % (self.newacc, seq)
+                    whr = [
+                        ("not_cono", "=", self.opts["conum"]),
+                        ("not_sys", "=", "LON"),
+                        (tab[1], "=", oldnot)]
+                    col = [tab[1]]
+                    dat = [newnot]
+                    self.sql.updRec(tab[0], where=whr, data=dat, cols=col)
+            else:
+                whr = [
+                    (tab[1], "=", self.opts["conum"]),
+                    (tab[2], "=", self.oldacc)]
+                col = [tab[2]]
+                dat = [self.newacc]
+                self.sql.updRec(tab[0], where=whr, data=dat, cols=col)
+        if focus:
+            self.df.focusField("T", 0, 1)
+
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].dbm.commitDbase(ask=True)
+        self.opts["mf"].closeLoop()
+
+# vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'lon/lnc110.py'
--- lon/lnc110.py	2015-08-25 15:02:35 +0000
+++ lon/lnc110.py	2015-09-18 10:40:14 +0000
@@ -24,62 +24,95 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["genmst", "ctlctl", "lonctl",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["lonctl", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="lonctl", where=[("cln_cono", "=",
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "N", 0, 0, 0, 0]
+            self.acc = [self.opts["conum"], "N", "D", "A", "A", 0, 0, 0]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["lon_ctl", "Loans Control", 0],
-            ["lon_int", "Loans Interest", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["lon_ctl", "Loans Control", 0],
+                ["int_rec", "Interest Received", 0],
+                ["int_pay", "Interest Paid", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Loans Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),"IUD",6.2,"Interest Rate","",
-                self.acc[2],"N",None,None,None,("efld",)),
-            (("T",0,4,0),"Id1",10,"Last Interest Date","",
-                self.acc[3],"N",None,None,None,("efld",)))
+        r2s = (("Daily","D"),("Monthly","M"))
+        r3s = (("Anniversary","A"),("Financial","F"))
+        r4s = (("Annual","A"),("Bi-Annual","B"))
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
+                    self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,3,0),"ONA",30,"")]
+            seq = 4
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),("IRB",r2s),0,"Interest Method","",
+                self.acc[2],"N",None,None,None,None),
+            (("T",0,seq + 1,0),("IRB",r3s),0,"Capitalisation Base","",
+                self.acc[3],"N",None,None,None,None),
+            (("T",0,seq + 2,0),("IRB",r4s),0,"Capitalisation Freq","",
+                self.acc[4],"N",None,None,None,None),
+            (("T",0,seq + 3,0),"IUD",6.2,"Debit Rate","",
+                self.acc[5],"N",None,None,None,("efld",)),
+            (("T",0,seq + 4,0),"IUD",6.2,"Credit Rate","",
+                self.acc[6],"N",None,None,None,("efld",)),
+            (("T",0,seq + 5,0),"Id1",10.0,"Last Interest Date","",
+                self.acc[7],"N",None,None,None,("efld",))])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if n == 0:
@@ -92,9 +125,9 @@
 
     def doGlint(self, frt, pag, r, c, p, i, w):
         if w == "N":
-            for x in range(1, 5):
+            for x in range(1, 7):
                 self.df.loadEntry(frt, pag, p+x, data="")
-            return "sk4"
+            return "sk6"
 
     def doGenAcc(self, frt, pag, r, c, p, i, w):
         des = self.getDes(w)
@@ -113,21 +146,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 7:
+                if x in (1, 3, 5):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4, 6):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'mem/ml1010.py'
--- mem/ml1010.py	2015-08-26 08:52:51 +0000
+++ mem/ml1010.py	2015-09-12 16:04:29 +0000
@@ -771,12 +771,10 @@
         refno = "PF%07i" % self.refno
         curdt = trdt / 100
         # VAT Rate and Amount
-        acc = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round(((amt * rate) / 114), 2), "UD", 12.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round(((amt * vrte) / 114), 2), "UD", 12.2).work
         # Members Ledger Transaction (memtrn)
         self.sql.insRec("memtrn", data=[self.opts["conum"], memno, 1, refno,
             batch, trdt, amt, vat, curdt, ctyp, code, desc, self.taxdf,
@@ -1576,7 +1574,7 @@
                 RepPrt(self.opts["mf"], conum=self.opts["conum"],
                     conam=self.opts["conam"], name=__name__, ttype="D",
                     tables=data, heads=heads, cols=cols, trtp=["mlt_type",
-                    mltrtp], gtots=gtots, prtdia=prtdia, view=None, mail=None)
+                    mltrtp], gtots=gtots, prtdia=prtdia)
             elif self.ss.selection[0] == "S":
                 tit = ("Print Options",)
                 fld = []
@@ -1591,15 +1589,9 @@
                     date = self.nxtdt
                 else:
                     date = self.tme
-                if self.pf.repprt[1] == "V":
-                    prtnam = "view"
-                else:
-                    prtnam = self.pf.repprt[2]
-                mail = self.pf.repeml[1]
-                printm = self.pf.repeml[3]
                 callModule(self.opts["mf"], None, "ml3040",
                     coy=(self.opts["conum"], self.opts["conam"]),
-                    args=(data, date, prtnam, mail, printm))
+                    args=(data, date, self.pf.repprt, self.pf.repeml))
             else:
                 cf = PwdConfirm(self.opts["mf"], conum=self.opts["conum"],
                     system="MEM", code="MemCards")
@@ -1704,8 +1696,8 @@
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             self.tnamef, ext="pdf")
         form.output(pdfnam, "F")
-        doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, view=self.pf.repprt[1],
-            prtnam=self.pf.repprt[2], splash=False)
+        doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, splash=False,
+            repprt=self.pf.repprt)
         if self.tnameb:
             doprint = False
             form = DrawForm(self.opts["mf"].dbm, self.tnameb,
@@ -1763,7 +1755,7 @@
                     "In Order to Print the Back of the Card, Please "\
                     "Replace the Card, Reverse Side Up, in the Printer Tray.")
                 doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, splash=False,
-                    view=self.pf.repprt[1], prtnam=self.pf.repprt[2])
+                    repprt=self.pf.repprt)
         self.opts["mf"].closeLoop()
 
     def doClear(self, widget=None):

=== modified file 'mem/ml2010.py'
--- mem/ml2010.py	2015-08-25 15:02:35 +0000
+++ mem/ml2010.py	2015-09-12 16:04:52 +0000
@@ -207,12 +207,11 @@
             self.vatamt = 0
 
     def doVatCode1(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        rate = vat[0]
-        self.vatamt = round((self.trnamt * rate / (rate + 100)), 2)
+        self.vatamt = round((self.trnamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, self.vatamt)
         if self.vatamt == 0:
             return "sk1"
@@ -376,21 +375,20 @@
         if self.gc.chkRec(self.opts["conum"], ctlctl, ["vat_ctl"]):
             return "Missing or Invalid Control Record"
         self.convat = ctlctl["vat_ctl"]
-        acc = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not acc:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        self.vatrat = acc[0]
 
     def doAllAmt(self, frt, pag, r, c, p, i, w):
         if w == 0:
             allamt = float(ASD(self.trnamt) - ASD(self.allocated))
-            self.allamt = round((allamt * 100 / (100 + self.vatrat)), 2)
+            self.allamt = round((allamt * 100 / (100 + self.vatrte)), 2)
             self.df.loadEntry(frt, pag, p, data=self.allamt)
             self.allvat = float(ASD(allamt) - ASD(self.allamt))
         else:
             self.allamt = w
-            self.allvat = round((self.allamt * self.vatrat / 100), 2)
+            self.allvat = round((self.allamt * self.vatrte / 100), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.allvat)
 
     def doAllVat(self, frt, pag, r, c, p, i, w):

=== modified file 'mem/ml3010.py'
--- mem/ml3010.py	2015-08-26 08:52:51 +0000
+++ mem/ml3010.py	2015-08-28 11:26:25 +0000
@@ -151,8 +151,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'mem/ml3020.py'
--- mem/ml3020.py	2015-08-26 08:52:51 +0000
+++ mem/ml3020.py	2015-08-28 11:26:25 +0000
@@ -28,9 +28,6 @@
                 self.sperd = CCD(self.sperw, "d2", 7).disp
                 self.eperd = CCD(self.eperw, "d2", 7).disp
                 self.totsonly = "N"
-                self.view = "V"
-                self.prtnam = "view"
-                self.mail = "N"
                 self.whr = [("mlt_cono", "=", self.opts["conum"])]
                 if self.ptyp == "F":
                     self.whr.append(("mlt_curdt", "between", self.sperw,
@@ -41,9 +38,7 @@
                 if self.btyp:
                     self.whr.append(("mlt_type", "=", self.btyp))
                 self.whr.append(("mlt_batch", "=", self.batch))
-                recs = self.getRecords()
-                if recs:
-                    self.printReport(recs)
+                self.processRecords()
             else:
                 self.sper = self.opts["period"][1][0] / 100
                 self.eper = self.opts["period"][2][0] / 100
@@ -183,18 +178,16 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        recs = self.getRecords()
-        if recs:
-            self.view = self.df.repprt[1]
-            self.prtnam = self.df.repprt[2]
-            self.mail = self.df.repeml[2]
-            if self.prtnam == "export":
-                self.exportReport(recs)
-            else:
-                self.printReport(recs)
+        self.processRecords()
         self.closeProcess()
 
-    def getRecords(self):
+    def processRecords(self):
+        if "args" in self.opts:
+            self.repprt = ["N", "V", "view"]
+            self.repeml = None
+        else:
+            self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
         col = ["mlt_memno", "mlt_trdt", "mlt_type", "mlt_refno", "mlt_batch",
             "mlt_tramt", "mlt_taxamt", "mlt_desc", "mlt_taxind", "mlm_surname",
             "mlm_names"]
@@ -205,8 +198,10 @@
         if not recs:
             showError(self.opts["mf"].body, "Transaction Error",
                 "No Transactions Selected")
+        elif self.repprt[2] == "export":
+            self.exportReport(recs)
         else:
-            return recs
+            self.printReport(recs)
 
     def exportReport(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
@@ -234,7 +229,7 @@
             self.expdatas.append(line)
         p.closeProgress()
         self.grandTotal()
-        doWriteExport(xtype=self.view, name=expnam,
+        doWriteExport(xtype=self.repprt[1], name=expnam,
             heads=self.expheads, colsh=self.expcolsh, forms=self.expforms,
             datas=self.expdatas, rcdic=self.opts["mf"].rcdic)
 
@@ -307,8 +302,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.view,
-                prtnam=self.prtnam, mail=self.mail)
+                pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
+                repeml=self.repeml)
 
     def getValues(self, data):
         memno = CCD(data[0], "UI", 6)
@@ -438,7 +433,7 @@
 
     def grandTotal(self):
         tot = [0, 0, 0, 0, 0]
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             for x in xrange(0, len(mltrtp)):
                 tot[0] = float(ASD(tot[0]) + ASD(self.gdr[x]))
                 tot[1] = float(ASD(tot[1]) + ASD(self.gcr[x]))

=== modified file 'mem/ml3030.py'
--- mem/ml3030.py	2015-08-26 08:52:51 +0000
+++ mem/ml3030.py	2015-08-28 11:26:25 +0000
@@ -314,8 +314,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         acc = CCD(data[0], "UI", 6)

=== modified file 'mem/ml3040.py'
--- mem/ml3040.py	2015-08-26 08:52:51 +0000
+++ mem/ml3040.py	2015-09-22 07:08:16 +0000
@@ -66,11 +66,11 @@
         self.trtypes = []
         for q in xrange(0, len(mltrtp)):
             self.trtypes.append(mltrtp[q][0])
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Statements (%s)" % __name__)
         return True
 
     def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -154,8 +154,8 @@
                 "N","Y",self.doSort,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("N","y"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -254,15 +254,13 @@
             self.curdt = self.opts["args"][1] / 100
             self.dated = CCD(self.opts["args"][1], "D1", 10).disp
             self.pro = False
-            self.prtnam = self.opts["args"][2]
-            self.email = self.opts["args"][3]
-            self.printm = self.opts["args"][4]
+            self.repprt = self.opts["args"][2]
+            self.repeml = self.opts["args"][3]
             recs = [self.opts["args"][0]]
         else:
             self.df.closeProcess()
-            self.prtnam = self.df.repprt[2]
-            self.email = self.df.repeml[1]
-            self.printm = self.df.repeml[3]
+            self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
             whr = [("mlm_cono", "=", self.opts["conum"])]
             if self.status != "Z":    # Not All
                 whr.append(("mlm_state", "=", self.status))
@@ -298,11 +296,12 @@
                 if lnk and lnk[1] in nos:
                     recs.remove(acc)
         if recs:
+            self.emadd = self.repeml[2]
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()
             self.form.doNewDetail()
-            if self.email == "N":
+            if self.repeml[1] == "N":
                 mess = "Printing Statements"
             else:
                 mess = "Printing and Emailing Statements"
@@ -318,7 +317,10 @@
             p.closeProgress()
             if self.pro:
                 self.opts["mf"].dbm.rollbackDbase()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.repeml[1] == "N" or self.emadd:
+                self.repeml[2] = self.emadd
                 self.doPrint()
         if not "args" in self.opts:
             self.opts["mf"].closeLoop()
@@ -455,12 +457,10 @@
         refno = "PF%07i" % self.refno
         curdt = trdt / 100
         # VAT Rate and Amount
-        acc = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round(((amt * rate) / 114), 2), "UD", 12.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round(((amt * vrte) / 114), 2), "UD", 12.2).work
         # Members Ledger Transaction (memtrn)
         self.sql.insRec("memtrn", data=[self.opts["conum"], memno, 1, refno,
             batch, trdt, amt, vat, curdt, ctyp, code, desc, self.taxdf,
@@ -483,16 +483,16 @@
             return
         if self.minus == "N" and self.tbal < 0:
             return
-        self.emadd = []
+        eml = []
         kon = self.sql.getRec(tables=["memctk", "memkon"], cols=["mlk_detail"],
             where=[("mck_type", "=", "E"), ("mlk_cono", "=",
             self.opts["conum"]), ("mlk_memno", "=", self.memno),
             ("mlk_code=mck_code",)])
         for k in kon:
-            self.emadd.append(k[0])
-        if self.whole == "E" and not self.emadd:
+            eml.append(k[0])
+        if self.whole == "E" and not eml:
             return
-        elif self.whole == "P" and self.emadd:
+        elif self.whole == "P" and eml:
             return
         for col in dmc:
             d = "%s_C00" % col
@@ -548,7 +548,8 @@
             self.doBody(mlc, mlt, tdc)
         self.doTotal(tdc)
         self.doTail(tdc)
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.repeml[2] = eml
             self.doPrint()
 
     def doGetBalTrn(self):
@@ -716,25 +717,17 @@
                 self.form.doDrawDetail(self.form.newdic[d])
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s" % (self.opts["conum"], self.memno)
         else:
             key = "%s_all" % self.opts["conum"]
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.emadd:
-            mail = "N"
-        else:
-            mail = self.emadd
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             key, ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'mem/ml3050.py'
--- mem/ml3050.py	2015-02-07 06:31:11 +0000
+++ mem/ml3050.py	2015-08-28 11:26:25 +0000
@@ -66,7 +66,7 @@
                 ["g", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'mem/ml3060.py'
--- mem/ml3060.py	2015-08-26 08:52:51 +0000
+++ mem/ml3060.py	2015-08-28 11:26:25 +0000
@@ -34,12 +34,7 @@
                 self.chgtyp = "A"
                 self.cat = ""
                 self.cod = 0
-                self.view = "V"
-                self.prtnam = "view"
-                self.mail = "N"
-                chg = self.getRecords()
-                if chg:
-                    self.printReport(chg)
+                self.processRecords()
             else:
                 self.mainProcess()
                 self.opts["mf"].startLoop()
@@ -153,9 +148,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.mail = self.df.repeml[2]
         if self.reptyp == "P":
             sp = SplashScreen(self.opts["mf"].body,
                 "Preparing Report ... Please Wait")
@@ -175,17 +167,16 @@
                         "B", data[7]), "", self.dte, "", str(self.start.work),
                         str(0), 0])
             sp.closeSplash()
-        chg = self.getRecords()
-        if self.reptyp == "P":
-            self.opts["mf"].dbm.rollbackDbase()
-        if chg:
-            if self.prtnam == "export":
-                self.exportReport(chg)
-            else:
-                self.printReport(chg)
+        self.processRecords()
         self.closeProcess()
 
-    def getRecords(self):
+    def processRecords(self):
+        if "args" in self.opts:
+            self.repprt = ["N", "V", "view"]
+            self.repeml = None
+        else:
+            self.repprt = self.df.repprt
+            self.repeml = self.df.repeml
         whr = [("chg_tab", "=", "memcat")]
         if self.reptyp == "P":
             whr.append(("chg_dte", "=", self.dte))
@@ -205,11 +196,15 @@
             whr.append(("chg_key", "like", key))
         odr = "chg_key, chg_seq"
         chg = self.sql.getRec(tables="chglog", where=whr, order=odr)
+        if self.reptyp == "P":
+            self.opts["mf"].dbm.rollbackDbase()
         if not chg:
             showError(self.opts["mf"].body, "Selection Error",
                 "No Available Records")
+        elif self.repprt[2] == "export":
+            self.exportReport(chg)
         else:
-            return chg
+            self.printReport(chg)
 
     def exportReport(self, chg):
         p = ProgressBar(self.opts["mf"].body, mxs=len(chg), esc=True)
@@ -280,8 +275,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.view,
-                prtnam=self.prtnam, mail=self.mail)
+                pdfnam=pdfnam, head=self.tit, repprt=self.repprt,
+                repeml=self.repeml)
 
     def getValues(self, data):
         key = data[self.sql.chglog_col.index("chg_key")]

=== modified file 'mem/ml3070.py'
--- mem/ml3070.py	2015-08-26 08:52:51 +0000
+++ mem/ml3070.py	2015-09-12 16:05:38 +0000
@@ -323,8 +323,7 @@
             RepPrt(self.opts["mf"], name=__name__, heads=head, tables=data,
                 cols=colsh, opts=self.getDes(), conum=self.opts["conum"],
                 conam=self.opts["conam"], ttype="D", pbar="P",
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt, repeml=self.df.repeml)
 
     def doChooseFields(self):
         tit = ("Available Fields",)
@@ -857,12 +856,10 @@
         refno = "PF%07i" % self.refno
         curdt = trdt / 100
         # VAT Rate and Amount
-        acc = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round(((amt * rate) / 114), 2), "UD", 12.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round(((amt * vrte) / 114), 2), "UD", 12.2).work
         # Members Ledger Transaction (memtrn)
         self.sql.insRec("memtrn", data=[self.opts["conum"], self.memno, 1,
             refno, batch, trdt, amt, vat, curdt, ctyp, code, desc, self.taxdf,

=== modified file 'mem/ml3080.py'
--- mem/ml3080.py	2015-08-26 08:52:51 +0000
+++ mem/ml3080.py	2015-08-28 12:23:54 +0000
@@ -152,8 +152,7 @@
         rep = RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=name, tables=data,
             heads=head, cols=cols, gtots=("e", "f", "g"), ttype="D",
-            view=self.df.repprt[1], prtnam=self.df.repprt[2],
-            mail=self.df.repeml[2])
+            repprt=self.df.repprt, repeml=self.df.repeml)
         if not rep.xits:
             ask = askChoice(self.opts["mf"].body, "Suspend Members",
                 "Select Members to Suspend", butt=(("All","A"), ("Some","S"),

=== modified file 'mem/ml3100.py'
--- mem/ml3100.py	2015-08-26 08:52:51 +0000
+++ mem/ml3100.py	2015-08-28 12:24:26 +0000
@@ -144,8 +144,7 @@
             ["d", "DM", 5, "Birthday", "y"]]
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=name, tables=recs, heads=head,
-            cols=cols, ttype="D", view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            cols=cols, ttype="D", repprt=self.df.repprt, repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'mem/ml3110.py'
--- mem/ml3110.py	2015-08-26 08:52:51 +0000
+++ mem/ml3110.py	2015-08-28 11:26:25 +0000
@@ -129,9 +129,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = False
         whr = [("mlm_cono", "=", self.opts["conum"])]
         if self.state != "Z":
@@ -184,8 +181,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.view,
-                    prtnam=self.prtnam, mail=self.emadd)
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, mlm):

=== modified file 'mem/mlc110.py'
--- mem/mlc110.py	2015-08-25 15:02:35 +0000
+++ mem/mlc110.py	2015-09-18 11:28:16 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["memctl", "tplmst", "ctlctl",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["memctl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="memctl", where=[("mcm_cono", "=",
@@ -37,27 +47,19 @@
                 "", "", "", "member_cards", "", "statement_member"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["mem_ctl", "Members Control", 0],
-            ["mem_pen", "Members Penalties", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["mem_ctl", "Members Control", 0],
+                ["mem_pen", "Members Penalties", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Members Ledger Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         pth = {
             "stype":  "F",
             "types":  "dir",
@@ -89,50 +91,66 @@
                 ("tpm_system", "=", "MEM")],
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),"IUI",2,"Bonus Days","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,"")]
+            seq = 3
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),"IUI",2,"Bonus Days","",
                 self.acc[2],"N",None,None,None,("between",0,30)),
-            (("T",0,4,0),"ID1",10,"Last Month End","",
+            (("T",0,seq + 1,0),"ID1",10,"Last Month End","",
                 self.acc[3],"N",None,None,None,("efld",)),
-            (("T",0,5,0),"IFF",50,"Photo's Path","",
+            (("T",0,seq + 2,0),"IFF",50,"Photo's Path","",
                 self.acc[4],"N",None,pth,None,None,None,
                 "The Directory where Photographs are Stored."),
-            (("T",0,6,0),("IRB",r1s),0,"Access Control","",
+            (("T",0,seq + 3,0),("IRB",r1s),0,"Access Control","",
                 self.acc[5],"N",self.doAccess,None,None,None),
-            (("T",0,7,0),"INA",20,"Access Host","",
+            (("T",0,seq + 4,0),"INA",20,"Access Host","",
                 self.acc[6],"N",None,None,None,None),
-            (("T",0,8,0),"ITX",50,"Access Database","",
+            (("T",0,seq + 5,0),"ITX",50,"Access Database","",
                 self.acc[7],"N",None,None,None,None),
-            (("T",0,9,0),"ITX",50,"Access Directory","",
+            (("T",0,seq + 6,0),"ITX",50,"Access Directory","",
                 self.acc[8],"N",None,None,None,None),
-            (("T",0,10,0),"INA",20,"Access Username","",
+            (("T",0,seq + 7,0),"INA",20,"Access Username","",
                 self.acc[9],"N",None,None,None,None),
-            (("T",0,11,0),"IHA",20,"Access Password","",
+            (("T",0,seq + 8,0),"IHA",20,"Access Password","",
                 self.acc[10],"N",None,None,None,None),
-            (("T",0,12,0),"ITX",50,"Club Logo Image","",
+            (("T",0,seq + 9,0),"ITX",50,"Club Logo Image","",
                 self.acc[11],"N",None,fle,None,None),
-            (("T",0,13,0),"INA",20,"Card Front Template","",
+            (("T",0,seq + 10,0),"INA",20,"Card Front Template","",
                 self.acc[12],"N",self.doCTpl,tpc,None,("notblank",)),
-            (("T",0,14,0),"INA",20,"Card Back Template","",
+            (("T",0,seq + 11,0),"INA",20,"Card Back Template","",
                 self.acc[13],"N",self.doCTpl,tpc,None,None),
-            (("T",0,15,0),"INA",20,"Statement Template","",
-                self.acc[14],"N",self.doSTpl,tps,None,("notblank",)))
+            (("T",0,seq + 12,0),"INA",20,"Statement Template","",
+                self.acc[14],"N",self.doSTpl,tps,None,("notblank",))])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -205,21 +223,26 @@
                 self.df.focusField("T", 0, 9, err=dbf.err)
                 return
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 5:
+                if x in (1, 3):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'mem/mlm010.py'
--- mem/mlm010.py	2015-08-25 15:02:35 +0000
+++ mem/mlm010.py	2015-09-12 16:05:59 +0000
@@ -349,12 +349,10 @@
         ref = CCD("A%08i" % self.refnum, "Na", 9).work
         curdt = trdt / 100
         # VAT Rate and Amount
-        acc = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round(((amt * rate) / 114), 2), "UD", 12.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf, trdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round(((amt * vrte) / (vrte + 100)), 2), "UD", 12.2).work
         # Members Ledger Transaction (memtrn)
         data = [self.opts["conum"], self.memno, 1, ref, self.batch, trdt, amt,
             vat, curdt, ctyp, code, desc, self.taxdf, "", self.opts["capnm"],

=== modified file 'men/stdmen.py'
--- men/stdmen.py	2015-08-25 15:02:35 +0000
+++ men/stdmen.py	2015-09-30 16:29:13 +0000
@@ -135,6 +135,7 @@
     ["PYYN","gl_tb","gl6030",1,"Integrated Controls Report"],
     ["PYYN","gl_tb","gl6040",1,"Intercompany Accounts Report"],
     ["PYNN","gl_tb","gl6050",2,"Initialise Bank Reconciliation"],
+    ["PYNN","gl_tb","gl6060",6,"Merge Accounts Into a Control"],
     ["PYYY","gl_qy","gl4010",0,"Interrogation (Normal)"],
     ["PYYN","gl_qy","gl4020",1,"Interrogation (Financials)"]]
 
@@ -326,10 +327,12 @@
 lnmod = [
     ["PYNY","ln_fm","lnc110",5,"Control Record"],
     ["PYNY","ln_fm","ln1010",3,"Loans Masterfile"],
-    ["PYYY","ln_dc","ln2010",2,"New Loans",0],
-    ["PYYY","ln_dc","ln2020",2,"Movements",0],
-    ["PYYY","ln_dc","ln2030",2,"Raise Interest",0],
-    ["PYYY","ln_dc","ln2040",2,"Rate Change",0],
+    ["PYYY","ln_dc","ln2010",2,"Payments",1],
+    ["PYYY","ln_dc","ln2010",2,"Receipts",2],
+    ["PYYY","ln_dc","ln2010",2,"Journals",3],
+    ["PYYY","ln_dc","ln2010",2,"Interest Adjustments",4],
+    ["PYYY","ln_dc","ln2020",2,"Raise Interest",0],
+    ["PYYY","ln_dc","ln2030",2,"Rate Change",0],
     ["PYNN","ln_rp","ln3010",1,"Batch Error Listing"],
     ["PYYN","ln_rp","ln3020",1,"Transaction Audit Trail"],
     ["PYNN","ln_rp","ln3030",1,"Master Listing"],

=== modified file 'mst/ms0000.py'
--- mst/ms0000.py	2015-08-25 15:02:35 +0000
+++ mst/ms0000.py	2015-10-03 07:36:48 +0000
@@ -34,7 +34,7 @@
     temp = tuple(os.environ["TARVER"].split("."))
     VERSION = (int(temp[0]), int(temp[1]), int(temp[2]))
 else:
-    VERSION = (5, 0, 18)
+    VERSION = (5, 1, 0)
 if __name__ == "__main__":
     # Run Tartan
     try:

=== modified file 'mst/ms1010.py'
--- mst/ms1010.py	2015-08-25 15:02:35 +0000
+++ mst/ms1010.py	2015-09-29 14:54:02 +0000
@@ -57,9 +57,9 @@
             ("Banking",None,("T",1,2),("T",1,1)),
             ("Systems",None,("T",1,2),("T",1,1)),
             ("Logo",None,("T",1,2),("T",1,1)))
-        fld = (
-            (("T",1,0,0),"IUI",3,"Company Number","Number",
-                "","Y",self.doCoyNum,ctm,None,("notzero",)),
+        fld = [
+            [("T",1,0,0),"IUI",3,"Company Number","Number",
+                "","Y",self.doCoyNum,ctm,None,("notzero",)],
             (("T",1,1,0),"INA",30,"Name","Company Name",
                 "","N",self.doCoyNam,None,self.doDelete,("notblank",)),
             (("T",1,2,0),"INA",30,"Postal Address Line-1","Address Line-1",
@@ -131,7 +131,7 @@
             (("T",3,13,0),("IRB",r1s),0,"Bowling Club","",
                 "N","N",None,None,None,None),
             (("T",4,0,0),"IFF",75,"Letterhead Image","",
-                "","N",self.doLogo,log,None,("fle","blank")))
+                "","N",self.doLogo,log,None,("fle","blank"))]
         but = (
             ("Accept",None,self.doAccept,0,("T",1,2),(("T",1,1),("T",4,0))),
             ("Print",None,self.doPrint,0,("T",1,2),(("T",1,1),("T",4,0))),
@@ -145,6 +145,7 @@
         if self.first:
             self.opts["conum"] = 1
             self.new = True
+            self.df.topf[1][0][1] = "OUI"
             self.df.loadEntry("T", 1, 0, data=self.opts["conum"])
             self.df.focusField("T", 1, 2)
 
@@ -214,7 +215,7 @@
                 break
         if err:
             showError(self.opts["mf"].body, "Deletion Error",
-                "Records Exist for This Company, Cannot Delete!")
+                "%s Records Exist for This Company, Cannot Delete" % tab[0])
         else:
             self.sql.delRec("ctlmst", where=[("ctm_cono", "=",
                 self.opts["conum"])])

=== modified file 'mst/ms1020.py'
--- mst/ms1020.py	2014-12-30 15:37:38 +0000
+++ mst/ms1020.py	2015-08-29 11:36:27 +0000
@@ -25,7 +25,7 @@
 
     def setVariables(self):
         self.sql = Sql(self.opts["mf"].dbm, ["ctlsys", "ctlmst",
-            "ctldep", "genmst"], prog=__name__)
+            "ctldep", "genmst", "wagmst"], prog=__name__)
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
@@ -57,6 +57,9 @@
             self.co2 = 0
             self.sy2 = 0
             self.cm2 = 0
+        else:
+            self.coys = self.sql.getRec(tables="ctlmst", cols=["count(*)"],
+                limit=1)[0]
         return True
 
     def mainProcess(self):
@@ -88,19 +91,26 @@
             (("T",0,1,0),"INA",30,"Name","",
                 "","N",self.doName,None,self.doDelete,("notblank",))]
         if self.glint == "Y":
-            self.fld.extend([
-            (("T",0,2,0),"IUI",3,"Debit  Company","Debit Company",
-                self.opts["conum"],"N",self.doCoy,coy,None,("notzero",)),
-            (("T",0,3,0),"IUI",7,"       Salary","Debit Salary",
-                "","N",self.doSal,glm,None,("notzero",)),
-            (("T",0,4,0),"IUI",7,"       Commission","Debit Commission",
-                "","N",self.doCom,glm,None,("efld",)),
-            (("T",0,5,0),"IUI",3,"Credit Company","Debit Company",
-                self.opts["conum"],"N",self.doCoy,coy,None,("efld",)),
-            (("T",0,6,0),"IUI",7,"       Salary","Credit Salary",
-                "","N",self.doSal,glm,None,("efld",)),
-            (("T",0,7,0),"IUI",7,"       Commission","Credit Commission",
-                "","N",self.doCom,glm,None,("efld",))])
+            if self.coys == 1:
+                self.fld.append((("T",0,2,0),"OUI",3,"Debit  Company"))
+            else:
+                self.fld.append((("T",0,2,0),"IUI",3,"Debit  Company","",
+                    self.opts["conum"],"N",self.doCoy,coy,None,("notzero",)))
+            self.fld.extend([
+                (("T",0,3,0),"IUI",7,"       Salary A/C","",
+                    "","N",self.doSal,glm,None,("notzero",)),
+                (("T",0,4,0),"IUI",7,"       Commission A/C","",
+                    "","N",self.doCom,glm,None,("efld",))])
+            if self.coys == 1:
+                self.fld.append((("T",0,5,0),"OUI",3,"Credit Company"))
+            else:
+                self.fld.append((("T",0,5,0),"IUI",3,"Credit Company","",
+                    self.opts["conum"],"N",self.doCoy,coy,None,("notzero",)))
+            self.fld.extend([
+                (("T",0,6,0),"IUI",7,"       Salary A/C","",
+                    "","N",self.doSal,glm,None,("efld",)),
+                (("T",0,7,0),"IUI",7,"       Commission A/C","",
+                    "","N",self.doCom,glm,None,("efld",))])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,2),("T",0,0)),
             ("Cancel",None,self.doCancel,0,("T",0,2),("T",0,0)),
@@ -137,6 +147,10 @@
 
     def doName(self, frt, pag, r, c, p, i, w):
         self.name = w
+        if self.glint == "Y" and self.coys == 1:
+            self.co1 = self.opts["conum"]
+            self.df.loadEntry(frt, pag, p+1, data=self.co1)
+            return "sk1"
 
     def doCoy(self, frt, pag, r, c, p, i, w):
         coy = self.sql.getRec(tables="ctlmst", cols=["ctm_name "],
@@ -149,7 +163,7 @@
             self.co2 = w
 
     def doSal(self, frt, pag, r, c, p, i, w):
-        if w != 0:
+        if w:
             if c == 4:
                 co = self.co1
             else:
@@ -164,7 +178,7 @@
             self.sl2 = w
 
     def doCom(self, frt, pag, r, c, p, i, w):
-        if w != 0:
+        if w:
             if c == 5:
                 co = self.co1
             else:
@@ -175,10 +189,19 @@
                 return "Invalid Account Number"
         if c == 5:
             self.cm1 = w
+            if self.coys == 1:
+                self.co2 = self.opts["conum"]
+                self.df.loadEntry(frt, pag, p+1, data=self.co2)
+                return "sk1"
         else:
             self.cm2 = w
 
     def doDelete(self):
+        if self.glint == "Y":
+            chk = self.sql.getRec(tables="wagmst", where=[("wgm_dept", "=",
+                self.code)])
+            if chk:
+                return "Department is in Use, Not Deleted"
         self.sql.delRec("ctldep", where=[("dep_cono", "=", self.opts["conum"]),
             ("dep_code", "=", self.code)])
         self.opts["mf"].dbm.commitDbase()

=== modified file 'mst/ms1040.py'
--- mst/ms1040.py	2015-08-26 08:52:51 +0000
+++ mst/ms1040.py	2015-09-18 09:33:39 +0000
@@ -15,7 +15,7 @@
 
 import time
 from TartanClasses import GetCtl, RepPrt, Sql, TartanDialog
-from tartanFunctions import askQuestion
+from tartanFunctions import askQuestion, showError
 
 class ms1040:
     def __init__(self, **opts):
@@ -41,6 +41,8 @@
             if not ctlmst:
                 return
             if not ctlmst["ctm_taxno"]:
+                showError(self.opts["mf"].body, "Unregistered",
+                    "The Company Record Does Not Have a V.A.T. Number")
                 return
         self.changes = False
         return True
@@ -81,7 +83,7 @@
                 "","N",None,None,self.doDelete,("notblank",)),
             (("T",0,2,0),"IUA",1,"Category","",
                 "S","N",self.doCat,vtt,None,("in", ("C","N","S","X","Z"))),
-            (("T",0,3,0),"ID1",10,"Date","",
+            (("T",0,3,0),"Id1",10,"Date","",
                 "","N",self.doStart,vtr,None,("efld",)),
             (("T",0,4,0),"IUD",6.2,"Rate","",
                 "","N",self.doRate,None,None,("efld",)))
@@ -224,8 +226,7 @@
                 recs[num][0] = ""
                 recs[num][1] = ""
         RepPrt(self.opts["mf"], name=__name__, tables=recs, heads=[hds],
-            ttype="D", cols=col, view=self.df.repprt[1], prtdia=(("Y","V"),
-            ("Y","N")))
+            ttype="D", cols=col, prtdia=(("Y","V"), ("Y","N")))
         self.df.focusField("T", 0, 1)
 
     def doExit(self, widget=None):

=== modified file 'mst/ms3010.py'
--- mst/ms3010.py	2015-08-26 08:52:51 +0000
+++ mst/ms3010.py	2015-08-28 11:26:25 +0000
@@ -396,8 +396,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues1(self, data):
         code = data[self.sql.ctlvmf_col.index("vtm_code")]

=== modified file 'mst/ms3020.py'
--- mst/ms3020.py	2015-08-26 08:52:51 +0000
+++ mst/ms3020.py	2015-08-28 12:27:48 +0000
@@ -75,8 +75,7 @@
         odr = "pwd_cono, pwd_sys, pwd_code"
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
-            cols=cols, where=whr, order=odr, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            cols=cols, where=whr, order=odr, repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'mst/ms3030.py'
--- mst/ms3030.py	2015-08-26 08:52:51 +0000
+++ mst/ms3030.py	2015-08-28 12:28:04 +0000
@@ -79,8 +79,8 @@
         else:
             odr = "eml_dtt desc"
         RepPrt(self.opts["mf"], name=__name__, tables=["emllog"], heads=[hds],
-            cols=col, where=whr, order=odr, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            cols=col, where=whr, order=odr, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'mst/msc000.py'
--- mst/msc000.py	2015-08-25 15:02:35 +0000
+++ mst/msc000.py	2015-10-02 08:01:31 +0000
@@ -11,15 +11,15 @@
     Copyright (C) 2004-2015 Paul Malherbe.
 """
 
-import cStringIO, fpdf, getpass, gc, glob, os, sys, time
+import cStringIO, fpdf, getpass, gc, glob, os, sys, time, urllib2
 from TartanClasses import AboutTartan, CCD, Dbase, DBCreate, FileDialog
 from TartanClasses import GetCtl, GUI, MainFrame, MkWindow, PwdConfirm
 from TartanClasses import ScrollText, SelectChoice, Sql, TarBckRes
 from TartanClasses import TartanConfig, TartanDialog, TartanMenu, TartanUser
 from tartanFunctions import askQuestion, b64Convert, dateDiff, ftpDownload
 from tartanFunctions import getPeriods, getPrgPath, copyList, loadRcFile
-from tartanFunctions import parsePrg, projectDate, runModule, showError
-from tartanFunctions import showException
+from tartanFunctions import parsePrg, projectDate, runModule, sendMail
+from tartanFunctions import showError, showException
 
 class msc000:
     def __init__(self, version, opts, args):
@@ -306,13 +306,9 @@
                     ("-u", self.rcdic["dbuser"]),
                     ("-p", self.rcdic["dbpwd"]),
                     ("-s", self.sysmod),
-                    ("-w", False),
+                    ("-v", self.current[1]),
                     ("-x", True)]
                 create = DBCreate(dbm=self.db, opts=opts)
-                if not create.put:
-                    self.doExit()
-                self.oldver = (0, 0, 0)
-                self.tarUpd(True)
         self.db.openDbase()
         if not self.nocheck:
             self.doVersionCheck("get")
@@ -355,8 +351,9 @@
             self.doExit()
         if self.program:
             mods = copyList(self.usrmod)
-            mods.append(["PNNN", "mm_sy", "tb1010", 9, "Edit Tables"])
+            mods.append(["PNNN", "mm_sy", "tb1010", 9, "Amend Tables"])
             mods.append(["PNNN", "mm_sy", "tb1030", 9, "Edit Tables"])
+            mods.append(["PNNN", "mm_sy", "tb3010", 9, "Print Tables"])
             found = False
             for mod in mods:
                 if mod[2] == self.program:
@@ -551,7 +548,8 @@
                             add = False
                     if add:
                         self.usrmen.append(men)
-                for mod in self.mod:
+                mods = copyList(self.mod)
+                for mod in mods:
                     add = True
                     for sss in nos:
                         if mod[2][:2] == sss:
@@ -617,6 +615,10 @@
                 if menu:
                     self.tarmen.drawMenu()
                 return
+        try:
+            rtn = int(rtn)
+        except:
+            rtn = None
         if opendb:
             self.db.openDbase()
         if password and self.getCtlSys(["sys_pwmust"]) == "Y" and not \
@@ -647,36 +649,39 @@
             popt = {"mf": self.mf}
             text = tit
             if typ[1] == "Y":
-                if typ[1] == "Y":
-                    if typ[2] in ("L", "Y"):
-                        if self.program and self.conum:
-                            self.conoCheck(self.conum)
-                            if self.conum and typ[2] == "L":
-                                self.getLastPeriod()
-                        else:
-                            self.getCompany(typ[2])
-                        if not self.conum:
-                            error = True
-                        else:
-                            if prg in ("gl3030", "gl3040", "gl3050", "gl3080",
-                                    "gl4010", "gl4020", "gl6030", "gl6040"):
-                                check = True
-                            else:
-                                check = False
-                            per = getPeriods(self.mf, self.conum, self.finper,
-                                check=check)
-                            if per == (None, None, None):
-                                error = True
-                            else:
-                                popt["period"] = (self.finper, (per[0].work,
-                                    per[0].disp), (per[1].work, per[1].disp))
-                    else:
-                        if self.program and self.conum:
-                            self.conoCheck(self.conum)
-                        else:
-                            self.getCompany(False)
-                        if not self.conum:
-                            error = True
+                if typ[2] in ("L", "Y"):
+                    if self.program and self.conum:
+                        error = self.conoCheck(self.conum, prg=prg)
+                        if not error and typ[2] == "L":
+                            self.getLastPeriod()
+                    else:
+                        self.getCompany(prg=prg, period=typ[2])
+                    if not self.conum:
+                        error = True
+                    else:
+                        if prg in ("gl3030", "gl3040", "gl3050", "gl3080",
+                                "gl4010", "gl4020", "gl6030", "gl6040"):
+                            check = True
+                        else:
+                            check = False
+                        per = getPeriods(self.mf, self.conum, self.finper,
+                            check=check)
+                        if per == (None, None, None):
+                            error = True
+                        elif rtn and per[2] == "Y":
+                            showError(self.mf.body, "Period Error",
+                                "This Period Has Already Been Finalised")
+                            error = True
+                        else:
+                            popt["period"] = (self.finper, (per[0].work,
+                                per[0].disp), (per[1].work, per[1].disp))
+                else:
+                    if self.program and self.conum:
+                        error = self.conoCheck(self.conum, prg=prg)
+                    else:
+                        self.getCompany(prg=prg, period=False)
+                    if not self.conum:
+                        error = True
                 if not error:
                     popt["conum"] = self.conum
                     popt["conam"] = self.conam
@@ -688,10 +693,8 @@
                     popt["capnm"] = self.user["name"]
                 if prg == "ml1010":
                     popt["level"] = self.user["lvl"]
-                try:
+                if rtn:
                     popt["rtn"] = int(rtn)
-                except:
-                    pass
                 if self.xdisplay:
                     self.mf.head.configure(text=text)
                     self.mf.updateStatus("")
@@ -719,7 +722,7 @@
                 self.checkNotes()
             self.tarmen.drawMenu()
 
-    def conoCheck(self, coy, ctl=False):
+    def conoCheck(self, coy, prg=None, ctl=False):
         if self.cono and not self.cono.count(coy):
             self.conum = None
             return "Unavailable Company Number"
@@ -735,8 +738,17 @@
         self.conam = chk["ctm_name"]
         self.email = chk["ctm_email"]
         self.modul = chk["ctm_modules"]
+        # Check Module
+        mod = prg[:2].upper()
+        if mod in ("MS", "RP", "TD"):
+            return
+        for x in range(0, len(self.modul), 2):
+            if self.modul[x:x + 2] == mod:
+                return
+        return "System (%s) Not Enabled for Company %s" % (mod, self.conum)
 
-    def getCompany(self, period):
+    def getCompany(self, prg=None, period=None):
+        self.prg = prg
         self.pertyp = period
         sql = Sql(self.db, "ctlmst", prog="msc000")
         if self.cono:
@@ -823,7 +835,7 @@
         self.mf.startLoop()
 
     def coNum(self, frt, pag, r, c, p, i, w):
-        err = self.conoCheck(w)
+        err = self.conoCheck(w, prg=self.prg)
         if err:
             return err
         self.cp.loadEntry("T", pag, p+1, data=self.conam)
@@ -1036,7 +1048,7 @@
                 "","N",self.doNewP1,None,None,None,None),
             (("T",0,2,0),"IHA",30,"New Password","New Password Again",
                 "","N",self.doNewP2,None,None,None,None))
-        but = (("Cancel", None, self.doPwdEnd, 1, None, None),)
+        but = (("Cancel", None, self.doPwdExit, 1, None, None),)
         self.np = TartanDialog(self.mf, title=tit, eflds=fld, butt=but,
             tend=((self.doPwdEnd, "n"),), txit=(self.doPwdExit,))
         if not self.pwd:
@@ -1044,26 +1056,26 @@
             self.np.focusField(self.np.frt, self.np.pag, col=2)
         self.mf.startLoop()
 
-    def doOldPwd(self, frt, pag, r, c, p, i, pwd):
-        if pwd == self.pwd or pwd == b64Convert("decode", self.pwd):
+    def doOldPwd(self, frt, pag, r, c, p, i, w):
+        if w == self.pwd or w == b64Convert("decode", self.pwd):
             pass
         else:
             return "Invalid Old Password"
 
-    def doNewP1(self, frt, pag, r, c, p, i, pwd):
-        if pwd == self.pwd or pwd == b64Convert("decode", self.pwd):
+    def doNewP1(self, frt, pag, r, c, p, i, w):
+        if w == self.pwd or w == b64Convert("decode", self.pwd):
             return "Same Password"
         pwmust, pwsize = self.getCtlSys(["sys_pwmust", "sys_pwsize"])
-        if not pwd and pwmust == "Y":
+        if not w and pwmust == "Y":
             return "You Must Have a Password"
-        if pwsize and len(pwd) < pwsize:
+        if pwsize and len(w) < pwsize:
             return "Minimum of %s Characters Required" % pwsize
-        self.new = pwd
+        self.new = w
 
-    def doNewP2(self, frt, pag, r, c, p, i, pwd):
-        if pwd != self.new:
+    def doNewP2(self, frt, pag, r, c, p, i, w):
+        if w != self.new:
             return "Invalid New Password"
-        self.pwd = b64Convert("encode", pwd)
+        self.pwd = b64Convert("encode", w)
 
     def doPwdEnd(self, widget=None):
         pwmust, pwsize = self.getCtlSys(["sys_pwmust", "sys_pwsize"])
@@ -1162,18 +1174,12 @@
         self.su.setWidget(self.su.B0, "focus")
         if int(nv[0]) > self.current[0][0]:
             return
-        elif int(nv[0]) == self.current[0][0]:
+        if int(nv[0]) == self.current[0][0]:
             if int(nv[1]) > self.current[0][1]:
                 return
-            elif int(nv[1]) == self.current[0][1]:
+            if int(nv[1]) == self.current[0][1]:
                 if int(nv[2]) > self.current[0][2]:
                     return
-        # Check for Bug Fix e.g. 5.0.0.1.exe or 5.0.0.1.tgz
-        if sys.platform == "win32":
-            if len(nv) == 5:
-                return
-        elif len(nv) == 6:
-            return
         self.updfle = None
         showError(self.mf.window, "Invalid Version",
             "Not Later Than Current Version.")
@@ -1292,8 +1298,68 @@
             "usr": self.mf.rcdic["dbuser"],
             "ver": self.current[1]}
         self.doRunModule("tb1020", **popt)
-        if dbcreate:
-            self.db.closeDbase()
+        if not self.reg:
+            if not dbcreate:
+                self.db.openDbase()
+            self.doAskRegister()
+            self.db.closeDbase()
+        elif dbcreate:
+            self.db.closeDbase()
+
+    def doAskRegister(self):
+        if not self.xdisplay:
+            return
+        try:
+            urllib2.urlopen("http://tartan.co.za", timeout=2)
+        except urllib2.URLError:
+            return
+        self.svr = self.getCtlSys(["sys_msvr", "sys_mprt", "sys_msec",
+            "sys_maut", "sys_mnam", "sys_mpwd"])
+        if not self.svr[0]:
+            return
+        tit = ("User Registration",)
+        r1s = (("Yes","Y"), ("Not-Now","N"), ("Never","X"))
+        fld = (
+            (("T",0,0,0),("IRB",r1s),0,"Register","",
+                "Y","N",self.doReg,None,None,None,None, "Register to "\
+                "Receive Notification of Updates and New Releases"),
+            (("T",0,1,0),"ITX",50,"Name","Your Name",
+                "","N",None,None,None,("notblank",)),
+            (("T",0,2,0),"ITX",50,"E-Mail Address","Your E-Mail Address",
+                "","N",None,None,None,("email",)))
+        but = (("Quit", None, self.xitReg, 1, ("T",0,1), ("T",0,0)),)
+        self.rg = TartanDialog(self.mf, tops=True, title=tit, eflds=fld,
+            butt=but, tend=((self.endReg, "y"),), txit=(self.xitReg,))
+        self.mf.startLoop()
+
+    def doReg(self, frt, pag, r, c, p, i, w):
+        self.newreg = w
+        if self.newreg == "N":
+            return "xt"
+        if self.newreg == "X":
+            return "nd"
+
+    def endReg(self):
+        sql = Sql(self.db, "ctlmst", prog="msc000")
+        coy = sql.getRec(tables="ctlmst", cols=["ctm_name"],
+            where=[("ctm_cono=1",)], limit=1)[0]
+        if self.newreg == "Y":
+            nam = self.rg.t_work[0][0][1]
+            eml = self.rg.t_work[0][0][2]
+        else:
+            nam = "Unknown"
+            eml = "anonymous@unknown.org"
+        err = sendMail(self.svr, eml, "register@tartan.co.za",
+            "%s - %s - %s" % (coy, nam, eml))
+        if not err or self.newreg == "X":
+            sql = Sql(self.db, "ctlsys", prog="msc000")
+            sql.updRec("ctlsys", cols=["sys_regdet"], data=[self.newreg])
+            self.db.commitDbase()
+        self.xitReg()
+
+    def xitReg(self):
+        self.rg.closeProcess()
+        self.mf.closeLoop()
 
     def doVersionCheck(self, vtype="chk"):
         error = None
@@ -1451,8 +1517,8 @@
         files.extend(glob.glob(os.path.join(self.rcdic["wrkdir"], "*.xls")))
         if files:
             ask = askQuestion(self.mf.body, "Report Files",
-                "Do you want to keep the .pdf, .csv and .xls "\
-                "report files in the wrk directory?", default="no")
+                "Do you want to Keep the .pdf, .csv and .xls "\
+                "Report Files in the wrk Directory?", default="no")
             if ask == "no":
                 for flenam in files:
                     try:
@@ -1507,13 +1573,18 @@
         sql = Sql(self.db, "ctlsys", prog=__name__)
         if sql.error:
             return "error"
-        if sql.getRec(tables="ctlsys", limit=1):
-            return
-        self.user = {"name": "admin", "pwd": "", "lvl": 9}
-        self.execCommand("PNNY", "msc110", tit="System Record Maintenance",
-            opendb=False, menu=False, password=False)
         rec = sql.getRec(tables="ctlsys", limit=1)
         if not rec:
+            self.user = {"name": "admin", "pwd": "", "lvl": 9}
+            self.execCommand("PNNY", "msc110", tit="System Record Maintenance",
+                opendb=False, menu=False, password=False)
+            rec = sql.getRec(tables="ctlsys", limit=1)
+        if rec:
+            if "sys_regdet" in sql.ctlsys_col:
+                self.reg = rec[sql.ctlsys_col.index("sys_regdet")]
+            else:
+                self.reg = ""
+        else:
             return "error"
 
     def doCheckMst(self):
@@ -1533,6 +1604,7 @@
         chk = self.conoCheck(1, ctl=True)
         if chk:
             return "error"
+        self.doAskRegister()
 
     def getCtlSys(self, cols):
         try:

=== modified file 'mst/msc110.py'
--- mst/msc110.py	2015-08-25 15:02:35 +0000
+++ mst/msc110.py	2015-09-29 14:32:21 +0000
@@ -82,7 +82,8 @@
                 "G/L Account Numbers include Department Numbers"),
             (("T",0,15,0),"IUI",1,"Number of Digits","",
                 0,"N",None,None,None,None,None,
-                "The Number of Digits used for Department Numbers"))
+                "The Number of Digits used for Department Numbers"),
+            (("T",0,16,0),"OUA",1,"Registration Code"))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))

=== modified file 'mst/msy010.py'
--- mst/msy010.py	2015-08-25 15:02:35 +0000
+++ mst/msy010.py	2015-09-09 07:58:47 +0000
@@ -30,8 +30,8 @@
                 self.opts["mf"].startLoop()
 
     def setVariables(self):
-        gc = GetCtl(self.opts["mf"])
-        ctlsys = gc.getCtl("ctlsys", self.opts["conum"])
+        self.gc = GetCtl(self.opts["mf"])
+        ctlsys = self.gc.getCtl("ctlsys", self.opts["conum"])
         if not ctlsys:
             return
         self.years = ctlsys["sys_years"]
@@ -41,7 +41,7 @@
 
 Please select Control --> System Record Maintenance and change the Years to Keep field""")
             return
-        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        ctlmst = self.gc.getCtl("ctlmst", self.opts["conum"])
         if not ctlmst:
             return
         tab = ["ctlsys", "ctlynd", "ftable"]
@@ -51,10 +51,10 @@
         if "AR" in self.mod:
             tab.append("assctl")
         if "GL" in self.mod:
-            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            ctlctl = self.gc.getCtl("ctlctl", self.opts["conum"])
             if not ctlctl:
                 return
-            if gc.chkRec(self.opts["conum"], ctlctl, ["ret_inc"]):
+            if self.gc.chkRec(self.opts["conum"], ctlctl, ["ret_inc"]):
                 return
             self.ri_acc = ctlctl["ret_inc"]
             tab.extend(["genbal", "genmst", "gentrn"])
@@ -76,6 +76,7 @@
         self.c_per = int(self.opts["period"][0])
         self.start = self.opts["period"][1][0]
         self.end = self.opts["period"][2][0]
+        self.cur = self.opts["period"][2][0] / 100
         self.l_per = self.sql.getRec(tables="ctlynd", cols=["max(cye_period)"],
             where=[("cye_cono", "=", self.opts["conum"])], limit=1)[0]
         self.last, self.oldf = self.sql.getRec(tables="ctlynd",
@@ -89,7 +90,7 @@
                 return True
             if not cf.pwd:
                 showError(self.opts["mf"].body, "Year-End Error",
-                    "This Financial Period Has Already Been Finalised!!!")
+                    "This Period Has Already Been Finalised")
             return
         return True
 
@@ -110,41 +111,36 @@
             tend=((self.doEnd,"y"),), txit=(self.doExit,))
 
     def doDate(self, frt, pag, r, c, p, i, w):
+        if w <= self.start:
+            return "Invalid Year End Date"
         self.end = w
-        if self.end <= self.start:
-            return "Invalid Year End Date"
+        self.cur = w / 100
 
     def doFinal(self, frt, pag, r, c, p, i, w):
         if w == "Y":
             if "AR" in self.mod:
-                ass = self.sql.getRec(tables="assctl", where=[("cta_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if ass and ass[1] == "Y" and ass[3] < self.end / 100:
+                c = self.gc.getCtl("assctl", self.opts["conum"])
+                if c and c["cta_glint"] == "Y" and c["cta_lastp"] < self.cur:
                     return "Depreciation Has Not Been Raised for Assets"
             if "LN" in self.mod:
-                lon = self.sql.getRec(tables="lonctl", where=[("cln_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if lon and lon[1] == "Y" and lon[3] < self.end:
+                c = self.gc.getCtl("lonctl", self.opts["conum"])
+                if c and c["cln_glint"] == "Y" and c["cln_last"] < self.end:
                     return "Interest Has Not Been Raised for Loans"
             if "ML" in self.mod:
-                mem = self.sql.getRec(tables="memctl", where=[("mcm_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if mem and mem[1] == "Y" and mem[3] < self.end:
+                c = self.gc.getCtl("memctl", self.opts["conum"])
+                if c and c["mcm_glint"] == "Y" and c["mcm_lme"] < self.end:
                     return "A Month-End Has Not Been Completed for Members"
             if "RC" in self.mod:
-                rca = self.sql.getRec(tables="rcactl", where=[("cte_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if rca and rca[1] == "Y" and rca[3] < self.end:
+                c = self.gc.getCtl("rcactl", self.opts["conum"])
+                if c and c["cte_glint"] == "Y" and c["cte_lme"] < self.end:
                     return "A Month-End Has Not Been Completed for Rentals"
             if "RT" in self.mod:
-                rtm = self.sql.getRec(tables="rtlctl", where=[("ctr_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if rtm and rtm[1] == "Y" and rtm[2] < self.end:
+                c = self.gc.getCtl("rtlctl", self.opts["conum"])
+                if c and c["ctr_glint"] == "Y" and c["ctr_lme"] < self.end:
                     return "A Month-End Has Not Been Completed for Rentals"
             if "WG" in self.mod:
-                sln = self.sql.getRec(tables="wagctl", where=[("ctw_cono",
-                    "=", self.opts["conum"])], limit=1)
-                if sln and sln[9] == "Y" and sln[11] < self.end:
+                c = self.gc.getCtl("wagctl", self.opts["conum"])
+                if c and c["ctw_glint"] == "Y" and c["ctw_i_date"] < self.end:
                     return "Interest Has Not Been Raised for Staff Loans"
         self.final = w
 

=== modified file 'mst/msy020.py'
--- mst/msy020.py	2015-08-25 15:02:35 +0000
+++ mst/msy020.py	2015-09-09 07:58:59 +0000
@@ -36,7 +36,7 @@
             order="cye_period")
         if self.pers[0][self.sql.ctlynd_col.index("cye_final")] == "Y":
             showError(self.opts["mf"].body, "Year-End Error",
-                "This Financial Period Has Already Been Finalised!")
+                "This Period Has Already Been Finalised")
             return
         self.s_per = self.pers[0][self.sql.ctlynd_col.index("cye_start")]
         self.e_per = self.pers[0][self.sql.ctlynd_col.index("cye_end")]

=== modified file 'mst/msy030.py'
--- mst/msy030.py	2015-08-25 15:02:35 +0000
+++ mst/msy030.py	2015-09-09 07:59:11 +0000
@@ -77,7 +77,7 @@
                 return True
             if not cf.pwd:
                 showError(self.opts["mf"].body, "Year-End Error",
-                    "This Financial Period Has Already Been Finalised!!!")
+                    "This Period Has Already Been Finalised")
             return
         self.per = w
         self.df.loadEntry(frt, pag, p+1, data=start)

=== modified file 'rca/rc2010.py'
--- rca/rc2010.py	2015-08-25 15:02:35 +0000
+++ rca/rc2010.py	2015-09-12 16:07:06 +0000
@@ -16,7 +16,7 @@
 import time
 from TartanClasses import ASD, GetCtl, NotesCreate, PwdConfirm, Sql
 from TartanClasses import SelectChoice, TartanDialog
-from tartanFunctions import getVatRate, mthendDate, runModule, showPrinters
+from tartanFunctions import getVatRate, mthendDate, runModule
 from tartanWork import rcmvtp, rctrtp
 
 class rc2010:
@@ -33,13 +33,6 @@
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
-        ctlsys = gc.getCtl("ctlsys")
-        if not ctlsys:
-            return
-        if ctlsys["sys_msvr"]:
-            self.email = "Y"
-        else:
-            self.email = "N"
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         if not ctlmst:
             return
@@ -318,12 +311,11 @@
 
     def doOwnCod(self, frt, pag, r, c, p, i, w):
         pass
-    #    vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-    #    if not vat:
+    #    vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+    #    if vrte is None:
     #        return "Invalid V.A.T Code"
     #    self.vatcode = w
-    #    rate = float(vat[0])
-    #    self.trnvat = round((self.trnamt * rate / (rate + 100)), 2)
+    #    self.trnvat = round((self.trnamt * vrte / (vrte + 100)), 2)
     #    self.df.loadEntry(frt, pag, p+1, data=self.trnvat)
     #    if not self.trnvat:
     #        return "sk1"
@@ -363,13 +355,11 @@
         if self.trntyp == 1:
             # Rental Raised
             self.vatcode = self.vatdf
-            vat = getVatRate(self.sql, self.opts["conum"], self.vatcode,
+            vrte = getVatRate(self.sql, self.opts["conum"], self.vatcode,
                 self.trndat)
-            if not vat:
-                rate = 0
-            else:
-                rate = float(vat[0])
-            self.trnvat = round((w * rate / (rate + 100)), 2)
+            if vrte is None:
+                vrte = 0.0
+            self.trnvat = round((w * vrte / (vrte + 100)), 2)
             self.df.loadEntry(frt, pag, p+1, data="Rental Raised")
         else:
             # Ignore VAT at this stage
@@ -411,12 +401,11 @@
             self.allvat = 0
 
     def doAllCod(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.allcod = w
-        rate = float(vat[0])
-        self.allvat = round((self.allamt * rate / (rate + 100)), 2)
+        self.allvat = round((self.allamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.allvat)
         if not self.allvat:
             self.df.loadEntry(frt, pag, p+2, data=self.trndet)
@@ -668,13 +657,11 @@
             if self.crate:
                 # If there is a Commission Rate on the Premises Record
                 cma = float(ASD(0) - ASD(round((rta * self.crate / 100.0), 2)))
-                acc = getVatRate(self.sql, self.opts["conum"], self.taxdf,
+                vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf,
                     self.trndat)
-                if not acc:
-                    rate = 0
-                else:
-                    rate = float(acc[0])
-                cmv = round((cma * rate / 100.0), 2)
+                if vrte is None:
+                    vrte = 0.0
+                cmv = round((cma * vrte / 100.0), 2)
                 cmt = float(ASD(cma) + ASD(cmv))
                 cma = float(ASD(0) - ASD(cma))
                 tax = float(ASD(0) - ASD(cmv))
@@ -804,34 +791,23 @@
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def repModule(self, mod):
+        self.exit = False
         state = self.df.disableButtonsTags()
         self.df.setWidget(self.df.mstFrame, state="hide")
         tit = ("Date and Printer Selection",)
-        self.printers = showPrinters()
-        prt = {
-            "stype": "C",
-            "head": ("Name", "Description"),
-            "data": self.printers}
-        r1s = (("Yes","Y"),("No","N"))
-        r2s = (("Print","P"),("View","V"),("None","N"))
-        fld = [
+        fld = (
             (("T",0,0,0),"ID1",10,"Statement Date","",
-                self.sysdtw,"N",self.doPrtDate,None,None,("efld",)),
-            (("T",0,1,0),("IRB",r2s),0,"Print Choice","",
-                "P","N",self.doPrtChoice,None,None,None),
-            (("T",0,2,0),"INA",30,"Printer Name","",
-                "Default","Y",self.doPrtNam,prt,None,None)]
-        if self.email == "Y":
-            fld.append(
-            (("T",0,3,0),("IRB",r1s),0,"E-Mail","E-Mail Document",
-                "Y","N",self.doPrtMail,None,None,None))
+                self.sysdtw,"N",self.doPrtDate,None,None,("efld",)),)
         self.st = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,))
+            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,),
+            view=("N","V"), mail=("B","Y"))
         self.opts["mf"].startLoop()
-        self.sargs.extend([self.stdtw, self.stdtd, self.prtnam, self.email])
-        popt = {"mf": self.opts["mf"], "conum": self.opts["conum"],
-            "conam": self.opts["conam"], "args": self.sargs}
-        runModule(mod, **popt)
+        if not self.exit:
+            self.sargs.extend([self.stdtw, self.stdtd, self.st.repprt,
+                self.st.repeml])
+            popt = {"mf": self.opts["mf"], "conum": self.opts["conum"],
+                "conam": self.opts["conam"], "args": self.sargs}
+            runModule(mod, **popt)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
@@ -840,29 +816,11 @@
         self.stdtw = w
         self.stdtd = self.st.t_disp[0][0][0]
 
-    def doPrtChoice(self, frt, pag, r, c, p, i, w):
-        if w == "P":
-            return
-        if w == "V":
-            self.prtnam = "view"
-        else:
-            self.prtnam = "none"
-        self.st.loadEntry(frt, pag, p+1, data=self.prtnam)
-        return "sk1"
-
-    def doPrtNam(self, frt, pag, r, c, p, i, w):
-        if w not in self.printers:
-            return "Invalid Printer"
-        self.prtnam = w
-
-    def doPrtMail(self, frt, pag, r, c, p, i, w):
-        self.email = w
-
     def doPrtEnd(self):
         self.doPrtClose()
 
     def doPrtExit(self):
-        self.prtnam = "cancel"
+        self.exit = True
         self.doPrtClose()
 
     def doPrtClose(self):

=== modified file 'rca/rc3010.py'
--- rca/rc3010.py	2015-08-26 08:52:51 +0000
+++ rca/rc3010.py	2015-08-28 11:26:25 +0000
@@ -244,8 +244,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3020.py'
--- rca/rc3020.py	2015-08-26 08:52:51 +0000
+++ rca/rc3020.py	2015-08-28 11:26:25 +0000
@@ -247,8 +247,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3030.py'
--- rca/rc3030.py	2015-08-26 08:52:51 +0000
+++ rca/rc3030.py	2015-08-28 11:26:25 +0000
@@ -119,8 +119,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rc3040.py'
--- rca/rc3040.py	2015-08-26 08:52:51 +0000
+++ rca/rc3040.py	2015-08-28 11:26:25 +0000
@@ -232,8 +232,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'rca/rc3050.py'
--- rca/rc3050.py	2015-08-26 08:52:51 +0000
+++ rca/rc3050.py	2015-09-22 05:49:18 +0000
@@ -24,10 +24,10 @@
         self.opts = opts
         if self.setVariables():
             if "args" in self.opts:
-                self.acc, self.datew, self.dated, self.prtnam, \
-                    self.email = self.opts["args"]
+                self.acc, self.datew, self.dated, self.repprt, \
+                    self.repeml = self.opts["args"]
+                self.emadd = self.repeml[2]
                 self.tname = self.stpl
-                self.printm = "N"
                 self.zeros = "Y"
                 self.debit = "Y"
                 self.mesno = 0
@@ -40,7 +40,8 @@
                 self.doLoadStatic()
                 self.form.doNewDetail()
                 self.doProcess(rom)
-                if self.email == "N" and self.form.page:
+                if self.form.page and (self.repeml[1] == "N" or self.emadd):
+                    self.repeml[2] = self.emadd
                     self.doPrint()
             else:
                 self.mainProcess()
@@ -58,11 +59,11 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Rental Owners Statements (%s)" % __name__)
         return True
 
     def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Rental Owners Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -97,7 +98,7 @@
                 self.sysdtw,"Y",self.doDat,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -132,9 +133,9 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
+        self.repprt = self.df.repprt
+        self.repeml = self.df.repeml
+        self.emadd = self.df.repeml[2]
         if self.whole == "N":
             recs = getSingleRecords(self.opts["mf"], "rcaowm",
                 ("rom_acno", "rom_name"), where=[("rom_cono", "=",
@@ -158,7 +159,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.repeml[1] == "N" or self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
@@ -182,7 +186,7 @@
         otc = self.sql.rcaowt_col
         tdc = self.form.sql.tpldet_col
         self.acc = rom[omc.index("rom_acno")]
-        self.eml = rom[omc.index("rom_email")]
+        eml = rom[omc.index("rom_email")]
         tots = self.sql.getRec(tables="rcaowt", cols=["rot_type",
             "round(sum(rot_tramt), 2)"], where=[("rot_cono", "=",
             self.opts["conum"]), ("rot_acno", "=", self.acc),
@@ -247,29 +251,22 @@
             self.doBody(otc, rtt, tdc)
         self.doTotal(tdc)
         self.doTail(tdc)
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.repeml[2] = eml
             self.doPrint()
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s" % (self.opts["conum"], self.acc)
         else:
             key = "%s_all_all" % self.opts["conum"]
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             key, ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.eml:
-            mail = "N"
-        else:
-            mail = self.eml
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'rca/rc3060.py'
--- rca/rc3060.py	2015-08-26 08:52:51 +0000
+++ rca/rc3060.py	2015-09-22 05:49:32 +0000
@@ -25,9 +25,9 @@
         if self.setVariables():
             if "args" in self.opts:
                 self.own, self.prm, self.acc, self.datew, self.dated, \
-                    self.prtnam, self.email = self.opts["args"]
+                    self.repprt, self.repeml = self.opts["args"]
+                self.emadd = self.repeml[2]
                 self.tname = self.stpl
-                self.printm = "N"
                 self.zeros = "Y"
                 self.minus = "Y"
                 self.mesno = 0
@@ -42,7 +42,8 @@
                 self.doLoadStatic()
                 self.form.doNewDetail()
                 self.doProcess(rtn)
-                if self.email == "N" and self.form.page:
+                if self.form.page and (self.repeml[1] == "N" or self.emadd):
+                    self.repeml[2] = self.emadd
                     self.doPrint()
             else:
                 self.mainProcess()
@@ -60,11 +61,11 @@
             return
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
-            "Rental Tenants Statements (%s)" % __name__)
         return True
 
     def mainProcess(self):
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+            "Rental Tenants Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -99,7 +100,7 @@
                 self.sysdtw,"Y",self.doDat,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -134,9 +135,9 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
+        self.repprt = self.df.repprt
+        self.repeml = self.df.repeml
+        self.emadd = self.df.repeml[2]
         if self.whole == "N":
             recs = getSingleRecords(self.opts["mf"], "rcatnm",
                 ("rtn_owner", "rtn_code", "rtn_acno", "rtn_name"),
@@ -160,7 +161,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.repeml[1] == "N" or self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
@@ -185,7 +189,7 @@
         self.own = rtn[tmc.index("rtn_owner")]
         self.prm = rtn[tmc.index("rtn_code")]
         self.acc = rtn[tmc.index("rtn_acno")]
-        self.eml = rtn[tmc.index("rtn_email")]
+        eml = rtn[tmc.index("rtn_email")]
         acc = self.sql.getRec(tables="rcacon", cols=["rcc_cnum", "rcc_deposit",
             "rcc_status"], where=[("rcc_cono", "=", self.opts["conum"]),
             ("rcc_owner", "=", self.own), ("rcc_code", "=", self.prm),
@@ -299,30 +303,23 @@
             self.doBody(ttc, rtt, tdc)
         self.doTotal(tdc)
         self.doTail(tdc)
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.repeml[2] = eml
             self.doPrint()
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s_%s_%s" % (self.opts["conum"], self.own, self.prm,
                 self.acc)
         else:
             key = "%s_all_all_all" % self.opts["conum"]
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             key, ext="pdf")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.eml:
-            mail = "N"
-        else:
-            mail = self.eml
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'rca/rc3070.py'
--- rca/rc3070.py	2015-02-07 06:31:11 +0000
+++ rca/rc3070.py	2015-08-28 11:26:25 +0000
@@ -73,9 +73,8 @@
                 ["f", "NA", 10, "Act-Date",  "y"],
                 ["g", "NA", 50, "Details",   "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
-                conam=self.opts["conam"], name=name,
-                tables=data, heads=head, cols=cols, ttype="D",
-                view=self.notes.view, prtnam=self.notes.pnam,
-                mail=self.notes.mail)
+                conam=self.opts["conam"], name=name, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rca/rc3080.py'
--- rca/rc3080.py	2015-02-07 06:31:11 +0000
+++ rca/rc3080.py	2015-08-28 11:26:25 +0000
@@ -78,9 +78,8 @@
                 ["h", "NA", 10, "Act-Date",  "y"],
                 ["i", "NA", 50, "Details",   "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
-                conam=self.opts["conam"], name=name,
-                tables=data, heads=head, cols=cols, ttype="D",
-                view=self.notes.view, prtnam=self.notes.pnam,
-                mail=self.notes.mail)
+                conam=self.opts["conam"], name=name, tables=data, heads=head,
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rca/rc3090.py'
--- rca/rc3090.py	2015-08-26 08:52:51 +0000
+++ rca/rc3090.py	2015-08-28 12:29:03 +0000
@@ -109,8 +109,7 @@
                 ["gg", "SD", 13.2, "Admin",  "y"]]
             RepPrt(self.opts["mf"], name=__name__, tables=data, heads=head,
                 cols=cols, gtots=["dd", "ee", "ff", "gg"], ttype="D",
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt, repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'rca/rc4010.py'
--- rca/rc4010.py	2015-08-26 08:52:51 +0000
+++ rca/rc4010.py	2015-08-28 11:26:25 +0000
@@ -200,20 +200,20 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -221,7 +221,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rca/rc4020.py'
--- rca/rc4020.py	2015-08-26 08:52:51 +0000
+++ rca/rc4020.py	2015-08-28 11:26:25 +0000
@@ -303,20 +303,20 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "D":
             recs = getDeposit(self.opts["mf"], self.opts["conum"], self.depdtw,
                 self.owner, self.code, self.acno)
@@ -326,7 +326,7 @@
                 self.printDeposit(recs)
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -334,7 +334,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rca/rcc110.py'
--- rca/rcc110.py	2015-06-19 16:06:22 +0000
+++ rca/rcc110.py	2015-09-18 13:09:13 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["rcactl", "ctlctl", "chglog",
-            "tplmst"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["rcactl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="rcactl", where=[("cte_cono", "=",
@@ -36,32 +46,24 @@
                 "statement_tenant"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["rca_com", "Commission Raised", 0],
-            ["rca_dep", "Deposits Control", 0],
-            ["rca_fee", "Contract Fees", 0],
-            ["rca_own", "Owners Control", 0],
-            ["rca_orx", "Owners Charges", 0],
-            ["rca_tnt", "Tenants Control", 0],
-            ["rca_trx", "Tenants Charges", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["rca_com", "Commission Raised", 0],
+                ["rca_dep", "Deposits Control", 0],
+                ["rca_fee", "Contract Fees", 0],
+                ["rca_own", "Owners Control", 0],
+                ["rca_orx", "Owners Charges", 0],
+                ["rca_tnt", "Tenants Control", 0],
+                ["rca_trx", "Tenants Charges", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Rental System Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         ctl = {
             "stype": "R",
             "tables": ("ctlctl", "genmst"),
@@ -86,46 +88,62 @@
                 ("tpm_system", "=", "RCA")],
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
-                self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,3,0),"ONA",30,""),
-            (("T",0,4,0),"IUI",7,self.ctl[3][1],"",
-                self.ctl[3][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,4,0),"ONA",30,""),
-            (("T",0,5,0),"IUI",7,self.ctl[4][1],"",
-                self.ctl[4][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,5,0),"ONA",30,""),
-            (("T",0,6,0),"IUI",7,self.ctl[5][1],"",
-                self.ctl[5][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,6,0),"ONA",30,""),
-            (("T",0,7,0),"IUI",7,self.ctl[6][1],"",
-                self.ctl[6][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,7,0),"ONA",30,""),
-            (("T",0,8,0),"IUI",7,"G/L Bank Account","",
-                self.acc[2],"N",self.doGlbnk,ctl,None,("efld",)),
-            (("T",0,9,0),"ID1",10,"Last Month End","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
+                    self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,3,0),"ONA",30,""),
+                (("T",0,4,0),"IUI",7,self.ctl[3][1],"",
+                    self.ctl[3][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,4,0),"ONA",30,""),
+                (("T",0,5,0),"IUI",7,self.ctl[4][1],"",
+                    self.ctl[4][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,5,0),"ONA",30,""),
+                (("T",0,6,0),"IUI",7,self.ctl[5][1],"",
+                    self.ctl[5][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,6,0),"ONA",30,""),
+                (("T",0,7,0),"IUI",7,self.ctl[6][1],"",
+                    self.ctl[6][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,7,0),"ONA",30,""),
+                (("T",0,8,0),"IUI",7,"G/L Bank Account","",
+                    self.acc[2],"N",self.doGlbnk,ctl,None,("efld",))]
+            seq = 9
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),"ID1",10,"Last Month End","",
                 self.acc[3],"N",None,None,None,("efld",)),
-            (("T",0,10,0),"INA",20,"Owner Template","",
+            (("T",0,seq + 1,0),"INA",20,"Owner Template","",
                 self.acc[4],"N",self.doTplNam,tpm,None,None),
-            (("T",0,11,0),"INA",20,"Tenant Template","",
-                self.acc[5],"N",self.doTplNam,tpm,None,None))
+            (("T",0,seq + 2,0),"INA",20,"Tenant Template","",
+                self.acc[5],"N",self.doTplNam,tpm,None,None)])
         but = (("Quit",None,self.doExit,1,None,None),)
         tnd = ((self.doEnd,"Y"),)
         txt = (self.doExit,)
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and n < 2:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -178,21 +196,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.extend(["N", 0])
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3, 5, 7, 9, 11, 13):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 16:
+                if x in (1, 3, 5, 7, 9, 11, 13):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4, 6, 8, 10, 12, 14):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4, 6, 8, 10, 12, 14):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'rca/rcc220.py'
--- rca/rcc220.py	2015-08-26 08:52:51 +0000
+++ rca/rcc220.py	2015-08-28 11:26:25 +0000
@@ -99,8 +99,8 @@
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rca/rcm010.py'
--- rca/rcm010.py	2015-08-25 15:02:35 +0000
+++ rca/rcm010.py	2015-09-12 16:07:42 +0000
@@ -227,12 +227,10 @@
     def doRaiseRental(self, num):
         ref = CCD((num + 1), "Na", 9).work
         amt = CCD(self.con[8], "UD", 12.2).work
-        acc = getVatRate(self.sql, self.opts["conum"], self.vatdf, self.nxtdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round((amt * rate / 100), 2), "SD", 11.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.vatdf, self.nxtdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round((amt * vrte / 100), 2), "SD", 11.2).work
         tot = float(ASD(amt) + ASD(vat))
         data = self.con[:5]
         data.extend([1, ref, self.batch, self.nxtdt, 1, tot, vat, self.nxtcd,
@@ -262,13 +260,11 @@
             self.sql.insRec("gentrn", data=data)
         if self.prm[0]:
             cma = round((tot * self.prm[0] / 100.0), 2)
-            acc = getVatRate(self.sql, self.opts["conum"], self.taxdf,
+            vrte = getVatRate(self.sql, self.opts["conum"], self.taxdf,
                 self.nxtdt)
-            if not acc:
-                rate = 0
-            else:
-                rate = float(acc[0])
-            cmv = round((cma * rate / 100.0), 2)
+            if vrte is None:
+                vrte = 0.0
+            cmv = round((cma * vrte / 100.0), 2)
             cmt = float(ASD(cma) + ASD(cmv))
             cma = float(ASD(0) - ASD(cma))
             tax = float(ASD(0) - ASD(cmv))

=== modified file 'rtl/rt2010.py'
--- rtl/rt2010.py	2015-08-25 15:02:35 +0000
+++ rtl/rt2010.py	2015-09-12 16:07:58 +0000
@@ -224,12 +224,11 @@
             return "sk2"
 
     def doVatCod(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        vrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if vrte is None:
             return "Invalid V.A.T Code"
         self.vatcode = w
-        rate = float(vat[0])
-        self.trnvat = round((self.trnamt * rate / (rate + 100)), 2)
+        self.trnvat = round((self.trnamt * vrte / (vrte + 100)), 2)
         self.df.loadEntry(frt, pag, p+1, data=self.trnvat)
         if not self.trnvat:
             return "sk1"

=== modified file 'rtl/rt3010.py'
--- rtl/rt3010.py	2015-08-26 08:52:51 +0000
+++ rtl/rt3010.py	2015-08-28 11:26:25 +0000
@@ -156,8 +156,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'rtl/rt3020.py'
--- rtl/rt3020.py	2015-08-26 08:52:51 +0000
+++ rtl/rt3020.py	2015-08-28 11:26:25 +0000
@@ -280,8 +280,8 @@
             self.grandTotal()
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         code = CCD(data[0], "NA", 7)

=== modified file 'rtl/rt3030.py'
--- rtl/rt3030.py	2015-08-26 08:52:51 +0000
+++ rtl/rt3030.py	2015-08-28 11:26:25 +0000
@@ -228,8 +228,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def pageHeading(self):

=== modified file 'rtl/rt3040.py'
--- rtl/rt3040.py	2015-08-26 08:52:51 +0000
+++ rtl/rt3040.py	2015-09-22 05:50:35 +0000
@@ -44,7 +44,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Rental Tenants Statements (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -79,8 +79,8 @@
                 self.sysdtw,"Y",self.doDat,None,None,("efld",)))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("N","y"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -114,9 +114,7 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
+        self.emadd = self.df.repeml[2]
         if self.whole == "N":
             recs = getSingleRecords(self.opts["mf"], "rtlmst", ("rtm_code",
                 "rtm_acno", "rtm_name"), where=[("rtm_cono", "=",
@@ -140,7 +138,10 @@
                     break
                 self.doProcess(rec)
             p.closeProgress()
-            if self.email == "N" and self.form.page and not p.quit:
+            if p.quit or not self.form.page:
+                pass
+            elif self.df.repeml[1] == "N" or not self.emadd:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
@@ -166,7 +167,7 @@
         tdc = self.form.sql.tpldet_col
         self.code = rtm[rmc.index("rtm_code")]
         self.acno = rtm[rmc.index("rtm_acno")]
-        self.emadd = rtm[rmc.index("rtm_email")]
+        eml = rtm[rmc.index("rtm_email")]
         for col in rmc:
             d = "%s_00" % col
             if d in self.form.newdic:
@@ -243,7 +244,8 @@
             self.doBody(rtc, rtt, tdc)
         self.doTotal(tdc)
         self.doTail(tdc)
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y" and not self.emadd:
+            self.df.repeml[2] = eml
             self.doPrint()
 
     def doHeader(self, rtm, rmc, prm, prc, tdc):
@@ -339,25 +341,17 @@
                 self.form.doDrawDetail(self.form.newdic[d])
 
     def doPrint(self):
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y" and not self.emadd:
             key = "%s_%s_%s" % (self.opts["conum"], self.code, self.acno)
         else:
             key = "%s_all_all" % self.opts["conum"]
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or not self.emadd:
-            mail = "N"
-        else:
-            mail = self.emadd
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__, key,
             ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam, mail=mail,
-            printm=self.printm)
-        if self.email == "Y":
+            head="%s STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.df.repprt, repeml=self.df.repeml)
+        if self.df.repeml[1] == "Y":
             self.form = DrawForm(self.opts["mf"].dbm, self.tname,
                 wrkdir=self.opts["mf"].rcdic["wrkdir"])
             self.doLoadStatic()

=== modified file 'rtl/rt3050.py'
--- rtl/rt3050.py	2015-02-07 06:31:11 +0000
+++ rtl/rt3050.py	2015-08-28 11:26:25 +0000
@@ -73,7 +73,7 @@
                 ["h", "NA", 50, "Details",   "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'rtl/rt4010.py'
--- rtl/rt4010.py	2015-08-26 08:52:51 +0000
+++ rtl/rt4010.py	2015-08-28 11:26:25 +0000
@@ -256,20 +256,20 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.trn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.trn:
                 self.pageHeading()
@@ -277,7 +277,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         for x in xrange(0, len(self.df.topf[0])):

=== modified file 'rtl/rtm010.py'
--- rtl/rtm010.py	2015-08-25 15:02:35 +0000
+++ rtl/rtm010.py	2015-09-12 16:08:23 +0000
@@ -192,12 +192,10 @@
     def doRaiseRental(self, num):
         ref = CCD((num + 1), "Na", 9).work
         amt = CCD(self.rec[7], "UD", 12.2).work
-        acc = getVatRate(self.sql, self.opts["conum"], self.rec[9], self.nxtdt)
-        if not acc:
-            rate = 0
-        else:
-            rate = float(acc[0])
-        vat = CCD(round((amt * rate / 100), 2), "SD", 11.2).work
+        vrte = getVatRate(self.sql, self.opts["conum"], self.rec[9], self.nxtdt)
+        if vrte is None:
+            vrte = 0.0
+        vat = CCD(round((amt * vrte / 100), 2), "SD", 11.2).work
         tot = float(ASD(amt) + ASD(vat))
         data = self.rec[:4]
         data.extend([1, ref, self.batch, self.nxtdt, tot, vat, self.nxtcd,

=== modified file 'scp/sc2020.py'
--- scp/sc2020.py	2015-08-26 08:52:51 +0000
+++ scp/sc2020.py	2015-08-28 11:26:26 +0000
@@ -362,7 +362,7 @@
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-            view=self.df.repprt[1], prtnam=self.df.repprt[2])
+            repprt=self.df.repprt)
         if not self.reprint:
             if self.opts["test"]:
                 self.opts["mf"].dbm.commitDbase()

=== modified file 'scp/sc3010.py'
--- scp/sc3010.py	2015-08-26 08:52:51 +0000
+++ scp/sc3010.py	2015-08-28 11:26:26 +0000
@@ -91,8 +91,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def header(self):

=== modified file 'sls/si2010.py'
--- sls/si2010.py	2015-08-26 08:52:51 +0000
+++ sls/si2010.py	2015-09-28 09:21:25 +0000
@@ -16,14 +16,15 @@
 import time
 from TartanClasses import AgeAll, ASD, Balances, CCD, GetCtl, PrintInvoice
 from TartanClasses import PwdConfirm, Sql, TartanDialog
-from tartanFunctions import callModule, getVatRate, showPrinters
+from tartanFunctions import callModule, copyList, getVatRate
 
 class si2010:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
+            self.exit = False
             self.getPrinters()
-            if self.prtnam != "cancel":
+            if not self.exit:
                 self.mainProcess()
                 self.opts["mf"].startLoop()
 
@@ -41,13 +42,6 @@
             return
         # Set, Check Controls
         gc = GetCtl(self.opts["mf"])
-        ctlsys = gc.getCtl("ctlsys")
-        if not ctlsys:
-            return
-        if ctlsys["sys_msvr"]:
-            self.email = "Y"
-        else:
-            self.email = "N"
         drsctl = gc.getCtl("drsctl", self.opts["conum"])
         if not drsctl:
             return
@@ -79,7 +73,6 @@
         slsctl = gc.getCtl("slsctl", self.opts["conum"])
         if not slsctl:
             return
-        self.useadd = slsctl["ctv_useadd"]
         self.delnos = slsctl["ctv_delnos"]
         self.delval = slsctl["ctv_delval"]
         self.dtpl = slsctl["ctv_tplnam"]
@@ -109,13 +102,7 @@
                 ("tpm_type", "=", "I"),
                 ("tpm_system", "=", "INV")],
             "order": "tpm_tname"}
-        self.printers = showPrinters()
-        prt = {
-            "stype": "C",
-            "head": ("Name","Description"),
-            "data": self.printers}
         r1s = (("Yes","Y"),("No","N"))
-        r2s = (("Print","P"),("View","V"),("None","N"))
         fld = [
             (("T",0,0,0),"INA",20,"Template Name","",
                 self.dtpl,"N",self.doTplNam,tpm,None,None),
@@ -125,21 +112,11 @@
             fld.append(
                 (("T",0,2,0),("IRB",r1s),0,"Delivery Notes","Delivery Notes",
                     "Y","N",self.doDelNote,None,None,None))
-            idx = 3
         else:
             self.dnote = "N"
-            idx = 2
-        fld.extend([
-            (("T",0,idx,0),("IRB",r2s),0,"Print Choice","",
-                "P","N",self.doPrtChoice,None,None,None),
-            (("T",0,idx+1,0),"INA",30,"Printer Name","",
-                "Default","Y",self.doPrtNam,prt,None,None)])
-        if self.email == "Y":
-            fld.append(
-            (("T",0,idx+2,0),("IRB",r1s),0,"E-Mail","E-Mail Document",
-                "Y","N",self.doPrtMail,None,None,None))
-        self.df = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,))
+        self.pr = TartanDialog(self.opts["mf"], tops=True, title=tit,
+            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,),
+            view=("N","P"), mail=("N","N"))
         self.opts["mf"].startLoop()
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -153,40 +130,22 @@
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
             return "Invalid Date, Not In Financial Period"
         self.trdt = w
-        self.trdd = self.df.t_disp[0][0][1]
+        self.trdd = self.pr.t_disp[0][0][1]
         self.curdt = self.trdt / 100
         self.batch = "S%s" % self.curdt
 
     def doDelNote(self, frt, pag, r, c, p, i, w):
         self.dnote = w
 
-    def doPrtChoice(self, frt, pag, r, c, p, i, w):
-        if w == "P":
-            return
-        if w == "V":
-            self.prtnam = "view"
-        else:
-            self.prtnam = "none"
-        self.df.loadEntry(frt, pag, p+1, data=self.prtnam)
-        return "sk1"
-
-    def doPrtNam(self, frt, pag, r, c, p, i, w):
-        if w not in self.printers:
-            return "Invalid Printer"
-        self.prtnam = w
-
-    def doPrtMail(self, frt, pag, r, c, p, i, w):
-        self.email = w
-
     def doPrtEnd(self):
         self.doPrtClose()
 
     def doPrtExit(self):
-        self.prtnam = "cancel"
+        self.exit = True
         self.doPrtClose()
 
     def doPrtClose(self):
-        self.df.closeProcess()
+        self.pr.closeProcess()
         self.opts["mf"].closeLoop()
 
     def mainProcess(self):
@@ -731,6 +690,13 @@
         self.df.focusField("C", 0, 1)
 
     def doGrp(self, frt, pag, r, c, p, i, w):
+        self.grp = w
+        self.strgrp = self.doReadGroup(self.grp)
+        if not self.strgrp:
+            return "Invalid Group Code"
+        self.df.colf[pag][1][8]["where"] = [
+            ("st1_cono", "=", self.opts["conum"]),
+            ("st1_group", "=", self.grp)]
         #######################################################################
         # Get Next Line Number
         #######################################################################
@@ -739,13 +705,6 @@
             self.typs), ("si2_docno", "=", self.docno)], limit=1)
         self.newline = int(seq[0])
         #######################################################################
-        self.grp = w
-        self.strgrp = self.doReadGroup(self.grp)
-        if not self.strgrp:
-            return "Invalid Group Code"
-        self.df.colf[pag][1][8]["where"] = [
-            ("st1_cono", "=", self.opts["conum"]),
-            ("st1_group", "=", self.grp)]
 
     def doCod(self, frt, pag, r, c, p, i, w):
         strmf1 = self.sql.getRec(tables="strmf1", where=[("st1_cono", "=",
@@ -876,7 +835,7 @@
             self.recipe = self.sql.getRec(tables="slsiv3", where=[("si3_cono",
                 "=", self.opts["conum"]), ("si3_rtn", "=", self.typs),
                 ("si3_docno", "=", self.docno), ("si3_seq", "=", self.lineno)])
-            self.sql.delRec(tables="slsiv3", where=[("si3_cono", "=",
+            self.sql.delRec("slsiv3", where=[("si3_cono", "=",
                 self.opts["conum"]), ("si3_rtn", "=", self.typs), ("si3_docno",
                 "=", self.docno), ("si3_seq", "=", self.lineno)])
             self.doRecChg()
@@ -970,17 +929,17 @@
                     "","N",self.doRecQty,None,None,("notzero",)))
             but = None
         state = self.df.disableButtonsTags()
-        self.rp = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.rc = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, butt=but, tend=((self.doRecEnd,"n"),),
             txit=(self.doRecExit,))
         if self.rectyp == "chg":
-            self.rp.loadEntry("T", 0, 0, data=self.recchg[1])
-            self.rp.loadEntry("T", 0, 1, data=self.recchg[2])
-            self.rp.loadEntry("T", 0, 2, data=self.recchg[3])
-            self.rp.loadEntry("T", 0, 3, data=self.recchg[4])
-            self.rp.focusField("T", 0, 4, clr=False)
+            self.rc.loadEntry("T", 0, 0, data=self.recchg[1])
+            self.rc.loadEntry("T", 0, 1, data=self.recchg[2])
+            self.rc.loadEntry("T", 0, 2, data=self.recchg[3])
+            self.rc.loadEntry("T", 0, 3, data=self.recchg[4])
+            self.rc.focusField("T", 0, 4, clr=False)
         else:
-            self.rp.focusField("T", 0, 1)
+            self.rc.focusField("T", 0, 1)
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
 
@@ -989,7 +948,7 @@
         if not strgrp:
             return "Invalid Group Code"
         self.recgrp = w
-        self.rp.topf[pag][1][8]["where"] = [
+        self.rc.topf[pag][1][8]["where"] = [
             ("st1_cono", "=", self.opts["conum"]),
             ("st1_group", "=", self.recgrp),
             ("st1_type", "not", "in", ("J", "R"))]
@@ -1002,7 +961,7 @@
             return "Invalid Code"
         self.reccod = w
         desc = strmf1[self.sql.strmf1_col.index("st1_desc")]
-        self.rp.loadEntry(frt, pag, p+1, data=desc)
+        self.rc.loadEntry(frt, pag, p+1, data=desc)
 
     def doRecQty(self, frt, pag, r, c, p, i, w):
         self.recqty = w
@@ -1022,15 +981,14 @@
         self.doRecExit()
 
     def doRecExit(self):
-        self.rp.closeProcess()
+        self.rc.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doVat(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
-        if not vat:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.trndat)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcod = w
-        self.vatrat = float(vat[0])
         self.df.loadEntry(frt, pag, p+1, data=self.rrp)
 
     def doPri(self, frt, pag, r, c, p, i, w):
@@ -1048,7 +1006,7 @@
             if cf.flag == "no":
                 return "rf"
         self.price = w
-        rat = float(ASD(100.0) + ASD(self.vatrat))
+        rat = float(ASD(100.0) + ASD(self.vatrte))
         self.inc = round((self.price * rat / 100.0), 4)
         self.exc = round((self.price * 1), 2)
         dis = self.drsmst[self.sql.drsmst_col.index("drm_dis_per")]
@@ -1080,7 +1038,7 @@
         # Create Sales Invoice Transaction (Body)
         data = [self.opts["conum"], self.typs, self.docno, self.newline,
             self.grp, self.code, self.loc, self.uoi, self.desc,
-            self.disrat, self.qty, self.price, self.vatcod, self.vatrat,
+            self.disrat, self.qty, self.price, self.vatcod, self.vatrte,
             self.opts["capnm"], self.sysdtw]
         self.sql.insRec("slsiv2", data=data)
         if self.acttyp == "A":
@@ -1264,7 +1222,7 @@
             self.cg.setWidget(self.cg.window, state="hide")
             self.doRecipe(atype="C", lineno=self.change[0])
             self.doRecipe(atype="S", lineno=self.change[0])
-            self.cg.window.show_all()
+            self.cg.setWidget(self.cg.window, state="show")
             self.cg.loadEntry(frt, pag, p+1, data=self.rrp)
             self.cg.focusField(frt, pag, c)
 
@@ -1362,9 +1320,9 @@
             (("T",0,idx+1,0),"IUI",9,"To   Number","To Document Number",
                 "","N",None,iv1,None,("notblank",))])
         state = self.df.disableButtonsTags()
-        self.tx = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.rp = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, tend=((self.doReprntEnd, "n"),),
-            txit=(self.doReprntExit,), view=("N","V"), mail=("B","N"))
+            txit=(self.doReprntExit,), view=("N","V"), mail=("B","Y"))
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
@@ -1378,44 +1336,43 @@
                 idx = 5
             else:
                 idx = 4
-            self.tx.topf[pag][idx][5] = "P"
-            self.tx.topf[pag][idx+2][5] = "Y"
+            self.rp.topf[pag][idx][5] = "P"
+            self.rp.topf[pag][idx+2][5] = "Y"
 
     def doIv1(self, frt, pag, r, c, p, i, w):
-        self.tx.loadEntry(frt, pag, p+1, data=w)
+        self.rp.loadEntry(frt, pag, p+1, data=w)
 
     def doReprntType(self, frt, pag, r, c, p, i, w):
         if self.delnos == "Y" and not w == "I":
-            self.tx.loadEntry(frt, pag, p+1, data="N")
+            self.rp.loadEntry(frt, pag, p+1, data="N")
             return "sk1"
 
     def doReprntEnd(self):
-        self.tx.closeProcess()
+        self.rp.closeProcess()
         self.df.setWidget(self.df.mstFrame, state="hide")
-        typ = self.tx.t_work[0][0][1]
+        typ = self.rp.t_work[0][0][1]
         if self.delnos == "Y":
-            dn = self.tx.t_work[0][0][2]
+            dn = self.rp.t_work[0][0][2]
             idx = 3
         else:
             dn = "N"
             idx = 2
-        frm = self.tx.t_work[0][0][idx]
-        to = self.tx.t_work[0][0][idx+1]
-        prt = self.tx.repprt[2]
-        eml = self.tx.repeml[1:3]
+        frm = self.rp.t_work[0][0][idx]
+        to = self.rp.t_work[0][0][idx+1]
         iv1 = self.sql.getRec(tables="slsiv1", cols=["si1_docno"],
             where=[("si1_cono", "=", self.opts["conum"]), ("si1_rtn", "=",
             typ), ("si1_docno", ">=", frm), ("si1_docno", "<=", to)],
             order="si1_docno")
         if iv1:
-            PrintInvoice(self.opts["mf"], self.opts["conum"], typ, iv1,
-                prtnam=prt, tname=self.tname, email=eml, copy=self.copy,
-                dnote=dn, dvals=self.delval, useadd=self.useadd)
+            PrintInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], typ, iv1, tname=self.tname,
+                repprt=self.rp.repprt, repeml=self.rp.repeml,
+                copy=self.copy, dnote=dn, dvals=self.delval)
         self.df.setWidget(self.df.mstFrame, state="show")
         self.opts["mf"].closeLoop()
 
     def doReprntExit(self):
-        self.tx.closeProcess()
+        self.rp.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doDrsMaint(self, widget=None):
@@ -1447,17 +1404,18 @@
             pass
         else:
             if self.typs in ("O", "W"):
-                email = "N"
+                repeml = ["N", "N", "", "", "Y"]
             else:
-                email = self.email
+                repeml = copyList(self.pr.repeml)
             if self.typs == "I":
                 dnote = self.dnote
             else:
                 dnote = "N"
             self.df.setWidget(self.df.mstFrame, state="hide")
-            PrintInvoice(self.opts["mf"], self.opts["conum"], self.typs,
-                self.docno, prtnam=self.prtnam, tname=self.tname, email=email,
-                dnote=dnote, dvals=self.delval, useadd=self.useadd)
+            PrintInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], self.typs, self.docno,
+                tname=self.tname, repprt=self.pr.repprt,
+                repeml=repeml, dnote=dnote, dvals=self.delval)
             self.df.setWidget(self.df.mstFrame, state="show")
         self.df.setViewPort(self.typs, 0)
         self.df.focusField("T", 0, 1)
@@ -1501,11 +1459,11 @@
         self.qty = line[self.sql.slsiv2_col.index("si2_qty")]
         self.uoi = line[self.sql.slsiv2_col.index("si2_uoi")]
         self.vatcod = line[self.sql.slsiv2_col.index("si2_vat_code")]
-        self.vatrat = line[self.sql.slsiv2_col.index("si2_vat_rate")]
+        self.vatrte = line[self.sql.slsiv2_col.index("si2_vat_rate")]
         self.price = line[self.sql.slsiv2_col.index("si2_price")]
         self.disrat = line[self.sql.slsiv2_col.index("si2_disc_per")]
         # Calculate Values
-        rat = float(ASD(100) + ASD(self.vatrat))
+        rat = float(ASD(100) + ASD(self.vatrte))
         self.inc = round((self.price * rat / 100), 4)
         self.exc = round((self.price * 1), 2)
         dis = float(ASD(100) - ASD(self.disrat))

=== modified file 'sls/si2020.py'
--- sls/si2020.py	2015-08-25 15:02:35 +0000
+++ sls/si2020.py	2015-09-12 16:09:42 +0000
@@ -471,13 +471,14 @@
             ("st1_code", "=", self.code)], limit=1)
         desc = strmf1[self.sql.strmf1_col.index("st1_desc")]
         vatcod = strmf1[self.sql.strmf1_col.index("st1_vatcode")]
-        vatrat = getVatRate(self.sql, self.opts["conum"], vatcod,
-            self.trdt)[0]
+        vatrte = getVatRate(self.sql, self.opts["conum"], vatcod, self.trdt)
+        if vatrte is None:
+            vatrte = 0.0
         qty = CCD(1, "UI", 5)
         self.totqty += qty.work
         self.doCalSell(qty.work)
         excl = CCD(qty.work * self.rrp, "SD", 12.2)
-        rate = 1 + (vatrat / 100)
+        rate = 1 + (vatrte / 100)
         incl = CCD(round(excl.work * rate, 2), "SD", 12.2)
         self.totval = float(ASD(self.totval.work) + ASD(incl.work))
         self.totval = CCD(self.totval, "SD", 12.2)

=== modified file 'sls/si3010.py'
--- sls/si3010.py	2015-08-26 08:52:51 +0000
+++ sls/si3010.py	2015-08-28 11:26:27 +0000
@@ -203,8 +203,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         col = self.sql.slsiv1_col

=== modified file 'sls/si3020.py'
--- sls/si3020.py	2015-08-26 08:52:51 +0000
+++ sls/si3020.py	2015-08-28 11:26:27 +0000
@@ -195,8 +195,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         self.grp = CCD(data[0], "UA", 3)

=== modified file 'sls/si3030.py'
--- sls/si3030.py	2015-08-26 08:52:51 +0000
+++ sls/si3030.py	2015-08-28 11:26:27 +0000
@@ -181,8 +181,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3040.py'
--- sls/si3040.py	2015-08-26 08:52:51 +0000
+++ sls/si3040.py	2015-08-28 11:26:27 +0000
@@ -231,8 +231,8 @@
         self.grandTotal()
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         if self.df.repprt[1] == "X" or not self.tipe:
             return
         CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],

=== modified file 'sls/si3050.py'
--- sls/si3050.py	2015-08-26 08:52:51 +0000
+++ sls/si3050.py	2015-08-28 11:26:27 +0000
@@ -242,8 +242,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3060.py'
--- sls/si3060.py	2015-08-26 08:52:51 +0000
+++ sls/si3060.py	2015-08-28 11:26:27 +0000
@@ -152,8 +152,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'sls/si3070.py'
--- sls/si3070.py	2015-08-26 08:52:51 +0000
+++ sls/si3070.py	2015-08-28 11:26:27 +0000
@@ -165,8 +165,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
             CreateChart(self.opts["mf"], self.opts["conum"], self.opts["conam"],
                 [self.start, self.end], [self.tit, "Values"], None, self.mchart)
 

=== modified file 'sls/si3080.py'
--- sls/si3080.py	2015-08-26 08:52:51 +0000
+++ sls/si3080.py	2015-08-28 11:26:27 +0000
@@ -88,7 +88,7 @@
                 "","N",self.doDocno,iv1,None,("notzero",)])
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=((self.doEnd, "y"),), txit=(self.doExit,),
-            view=("N","V"), mail=("B","N"))
+            view=("N","V"), mail=("B","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -133,8 +133,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        prt = self.df.repprt[2]
-        eml = self.df.repeml[1:3]
         tab = ["slsiv1", "drsmst"]
         col = ["si1_docno", "si1_date", "si1_chain", "si1_acno", "drm_name"]
         dic = {}
@@ -162,8 +160,9 @@
                 ("si1_docno", ">=", self.frm),
                 ("si1_docno", "<=", self.to)])
         if iv1:
-            PrintInvoice(self.opts["mf"], self.opts["conum"], self.typ, iv1,
-                prtnam=prt, tname=self.tname, email=eml, copy=self.copy)
+            PrintInvoice(self.opts["mf"], self.opts["conum"],
+                self.opts["conam"], self.typ, iv1, tname=self.tname,
+                repprt=self.df.repprt, repeml=self.df.repeml, copy=self.copy)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'sls/sic110.py'
--- sls/sic110.py	2014-12-30 15:37:38 +0000
+++ sls/sic110.py	2015-09-01 11:15:55 +0000
@@ -32,8 +32,7 @@
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "P", "Y", "Y",
-                "sales_document", "N"]
+            self.acc = [self.opts["conum"], "Y", "Y", "sales_document", "N"]
         else:
             self.new = False
         return True
@@ -52,19 +51,16 @@
                 ("tpm_type", "=", "I"),
                 ("tpm_system", "=", "INV")],
             "order": "tpm_tname"}
-        r1s = (("Postal","P"),("Street","S"))
-        r2s = (("Yes","Y"),("No","N"))
+        r1s = (("Yes","Y"),("No","N"))
         self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"Address","",
-                self.acc[1],"N",None,None,None,None),
-            (("T",0,1,0),("IRB",r2s),0,"Delivery Notes","",
-                self.acc[2],"N",self.doDelNo,None,None,None),
-            (("T",0,2,0),("IRB",r2s),0,"Print Values","",
-                self.acc[3],"N",None,None,None,None),
-            (("T",0,3,0),"INA",20,"Invoice Template","",
-                self.acc[4],"N",self.doTplNam,tpl,None,None),
-            (("T",0,4,0),("IRB",r2s),0,"Point of Sale Tills","",
-                self.acc[5],"N",None,None,None,None))
+            (("T",0,0,0),("IRB",r1s),0,"Delivery Notes","",
+                self.acc[1],"N",self.doDelNo,None,None,None),
+            (("T",0,1,0),("IRB",r1s),0,"Print Values","",
+                self.acc[2],"N",None,None,None,None),
+            (("T",0,2,0),"INA",20,"Invoice Template","",
+                self.acc[3],"N",self.doTplNam,tpl,None,None),
+            (("T",0,3,0),("IRB",r1s),0,"Point of Sale Tills","",
+                self.acc[4],"N",None,None,None,None))
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))

=== modified file 'std/TartanClasses.py'
--- std/TartanClasses.py	2015-08-26 08:52:51 +0000
+++ std/TartanClasses.py	2015-10-01 16:20:07 +0000
@@ -19,6 +19,7 @@
 #   @profile(entries=40, immediate=True)
 import calendar, csv, functools, getpass, glob, gzip, os, re, shutil
 import sys, tarfile, textwrap, threading, time, urllib2, webbrowser
+from pkgutil import iter_modules
 #========================================================
 # TARTAN Standard Functions and Variables e.g. showError
 #========================================================
@@ -43,11 +44,7 @@
     XLRD = True
 except:
     XLRD = False
-try:
-    import xlwt
-    XLWT = True
-except:
-    XLWT = False
+XLWT = "xlwt" in (name for loader, name, ispkg in iter_modules())
 #========================================================
 # Openoffice import module
 #========================================================
@@ -87,7 +84,6 @@
 
     import tkColorChooser as tkcolor
     import tkFileDialog as tkfile
-    import tkFileDialog as tkfd
     import tkFont as tkfont
     from PIL import Image, ImageTk
 
@@ -554,11 +550,11 @@
 
         def _next_period(self, event=None):
             if event.keysym == "Left":
-                self.selected = projectDate(self.selected, 1, "-")
+                self.selected = projectDate(self.selected, -1)
             elif event.keysym == "Right":
                 self.selected = projectDate(self.selected, 1)
             elif event.keysym == "Up":
-                self.selected = projectDate(self.selected, 7, "-")
+                self.selected = projectDate(self.selected, -7)
             else:
                 self.selected = projectDate(self.selected, 7)
             self._idate = self.datetime(self.selected / 10000,
@@ -703,8 +699,11 @@
                 self.lbwid = True
 
         def comparison(self):
-            pattern = re.compile(self.get() + ".*", re.IGNORECASE)
-            return [w for w in self.clist if re.match(pattern, w)]
+            try:
+                pattern = re.compile(self.get() + ".*", re.IGNORECASE)
+                return [w for w in self.clist if re.match(pattern, w)]
+            except:
+                pass
 
         def list_aut(self, event):
             self.delete(0, "end")
@@ -772,7 +771,8 @@
             self.parent = parent
             if not self.parent:
                 self.geom = True
-                self.parent = MkWindow(decor=False).newwin
+                mkw = MkWindow(tk=True, remov=False, resiz=False)
+                self.parent = mkw.newwin
             else:
                 self.geom = False
             style = ttk.Style()
@@ -833,8 +833,6 @@
                     b.focus_set()
                 elif not dflt and not num:
                     b.focus_set()
-            if self.frame.winfo_toplevel().state() == "withdrawn":
-                self.frame.winfo_toplevel().deiconify()
             self.frame.update_idletasks()
             if self.geom:
                 x = int(self.frame.winfo_screenwidth()) / 2 - 200
@@ -842,6 +840,8 @@
                 w = self.frame.winfo_reqwidth()
                 h = self.frame.winfo_reqheight()
                 self.parent.geometry("%dx%d+%d+%d" % (w, h, x, y))
+            if self.frame.winfo_toplevel().state() == "withdrawn":
+                self.frame.winfo_toplevel().deiconify()
             if plc:
                 self.frame.mainloop()
 
@@ -1742,7 +1742,6 @@
     def setVariables(self):
         # Create a list of menus and a dictionary of modules
         menus = []
-        self.moddic = {}
         for m in self.mod:
             if not self.lvl is None and m[3] > self.lvl:
                 continue
@@ -1752,15 +1751,6 @@
                 mm = "mm_%s" % m[2][:2]
                 if mm not in menus:
                     menus.append(mm)
-                if len(m) == 6:
-                    mod = "%s%s" % (m[2][:-1], m[5])
-                    self.moddic[mod] = [m[0], m[4], m[5]]
-                else:
-                    mod = "%s%s" % (m[2][:-1], 0)
-                    self.moddic[mod] = [m[0], m[4], None]
-            else:
-                mod = m[2]
-                self.moddic[mod] = [m[0], m[4], None]
         self.menus = []
         for men in self.men:
             if men[0] == "MM" and men[1] in menus:
@@ -2135,7 +2125,7 @@
                 if self.cu.fetchone()[0]:
                     exists = True
         elif self.dbase == "PgSQL":
-            self.openDbase(dbname="template1", err=False)
+            self.openDbase(dbname="postgres", err=False)
             if self.db:
                 self.cu.execute("Select count(*) from pg_catalog."
                     "pg_database where datname='%s'" % self.dbname)
@@ -2170,7 +2160,7 @@
                 self.db.commit()
                 self.closeDbase()
             elif self.dbase == "PgSQL":
-                self.openDbase(dbname="template1", levl=0)
+                self.openDbase(dbname="postgres", levl=0)
                 self.cu.execute("Create database %s template template0 "
                     "encoding 'utf-8'" % self.dbname)
                 self.cu.execute("Select * from pg_catalog.pg_group "
@@ -2340,7 +2330,7 @@
                 self.cu.execute("Drop database %s" % self.dbname)
                 self.closeDbase()
             elif self.dbase == "PgSQL":
-                self.openDbase(dbname="template1", levl=0)
+                self.openDbase(dbname="postgres", levl=0)
                 self.cu.execute("Drop database %s" % self.dbname)
                 self.cu.execute("Drop group %s" % self.dbname)
                 self.closeDbase()
@@ -2588,7 +2578,7 @@
                     ("Insert into xyz values (?,?,?)", (1,2,3))
         limit = The number of records to return. None = All
         fetch = Only fetch from a previous select. True or False
-        excp  = Whether or not to show exceptions or just return 'Exception'
+        excp  = False = Show the exception, True = just return 'Exception'
         """
         def retList(ret):
             # Adjust to return [] instead of None and convert to list(s)
@@ -2647,7 +2637,7 @@
         data    = A list or a list of lists of all the column's data
         unique  = Any column which must be unique e.g. drt_ref1
         dofmt   = Whether or not to format the data before inserting
-        excp    = Whether or not to show exceptions or just return 'Exception'
+        excp    = False = Show the exception, True = just return 'Exception'
         pbar    = ProgressBar object
         """
         if table not in self.tables:
@@ -2935,13 +2925,14 @@
         else:
             return self.sqlRec((get, dat), fetch=fetch, limit=limit, excp=excp)
 
-    def updRec(self, table, where=None, data=None, cols=None, dofmt=True):
+    def updRec(self, table, where=None, data=None, cols=None, dofmt=True, excp=False):
         """
         table   = The table to update
         where   = A where statement like the getRec one
         data    = A list of data matching the columns in cols or all if no cols
         cols    = A list of columns matching 'data' else None for all
         dofmt   = Whether or not to format the data before updating
+        excp    = False = Show the exception, True = just return 'Exception'
         """
         cmd = ""
         if not where and not data:
@@ -2968,7 +2959,7 @@
             whr, ext = self.getSqlWhere(where)
             dat.extend(ext)
             cmd = "%s %s" % (cmd, whr)
-        self.sqlRec((cmd, tuple(dat)))
+        self.sqlRec((cmd, tuple(dat)), excp=excp)
 
     def delRec(self, table, cols=None, data=None, where=None):
         """
@@ -3603,6 +3594,7 @@
                        or
     -t  = String of comma separated Table Names
     -u  = Admin User
+    -v  = Tartan Version if -ci
     -w  = Commit transactions, True/False (True)
     -x  = Close the database on completion, True/False (True)
     """
@@ -3611,9 +3603,11 @@
             sys.exit()
         else:
             self.dbm = dbm
-        for dflt in [("csv", os.path.join(getPrgPath(), "csv")), ("put", "t"),
+        for dflt in [
+                ("csv", os.path.join(getPrgPath(), "csv")), ("put", "t"),
                 ("usr", ""), ("pwd", ""), ("sys", "stdsys"), ("tab", None),
-                ("cmt", True), ("xit", True), ("spl", False), ("idx", True)]:
+                ("cmt", True), ("xit", True), ("spl", False), ("idx", True),
+                ("ver", None)]:
             setattr(self, dflt[0], dflt[1])
         if opts:
             for o, v in opts:
@@ -3633,6 +3627,8 @@
                     self.tab = v.split(",")
                 elif o == "-u":
                     self.usr = v
+                elif o == "-v":
+                    self.ver = v
                 elif o == "-w":
                     self.cmt = v
                 elif o == "-x":
@@ -3644,6 +3640,11 @@
                 print "Csv File for Table %s Does Not Exist" % chk
                 return
         if self.doCreate():
+            if self.ver:
+                t = time.localtime()
+                sysdt = ((t[0] * 10000) + (t[1] * 100) + t[2])
+                self.sql.sqlRec("Insert into verupd values('%s', %s)" %
+                    (self.ver, sysdt))
             if self.cmt:
                 self.dbm.commitDbase()
             if self.xit:
@@ -3757,7 +3758,8 @@
             else:
                 tables = alltab
             if not tables:
-                showError(None, "Error", "No Valid Tables Specified")
+                showError(None, "Error",
+                    "No Valid Tables Specified (%s)" % self.tab)
                 return
             for table in tables:
                 if self.put in ("i", "t"):
@@ -4075,13 +4077,13 @@
     mail   =  An entry field asking whether you would like to email the report
               It is a tuple (flag, prnt, dflt, desc) where:
                 flag is one of the following:
-                   "Y" = Address Field (noblank)
-                   "B" = Address Field (efld)
-                   "N" = No Address Field (default N)
+                   "Y" = Address Field (noblank) - Entered Address
+                   "N" = No Address Field (default N) - Address from account
+                   "B" = Address Field (efld) - Combination of both
                 prnt  is "Y" or "N" to choose to view/print emailed docs or not
                 dflt is the default answer
                 desc is the description to replace the default description
-              A list self.repeml is created having 4 fields as follows:
+              A list self.repeml is created having up to 5 fields as follows:
                 1) "Y" or "N" mail widget created
                 2) query widget contents
                 3) address widget contents
@@ -4230,7 +4232,7 @@
                     "head": ("Name", "Description"),
                     "data": printers}
                 row += 1
-                rvs = [("View","V"),("Print","P")]
+                rvs = [("View","V"),("Print","P"),("None","N")]
                 mes = """Select what to do with the generated report.
 
 View   - The generated report will be opened in the default
@@ -4258,7 +4260,7 @@
                     dflt = self.mail[2]
                     desc = self.mail[3]
                 else:
-                    desc = "E-Mail Report"
+                    desc = "Email Document"
                 if len(self.mail) == 3:
                     dflt = self.mail[2]
                 else:
@@ -4290,7 +4292,7 @@
                     row += 1
                     a = [("T",0,row,col),"ITX",50,"E-Mail Address","",
                         "","N",self.setAddr,adr,None]
-                    if self.mail[0] == "Y":
+                    if self.mail[0].lower() == "y":
                         a.append(("email", False))
                     else:
                         a.append(("email", True))
@@ -4303,7 +4305,7 @@
                 if self.mail[1].lower() == "y":
                     row += 1
                     self.eflds.append((("T",0,row,col),("IRB",yns),0,
-                        "View/Print Emailed Document","","Y","Y",
+                        "View/Print Emailed Document","","N","Y",
                         self.setPrint,None,None,None))
         if not self.eflds:
             return
@@ -4529,7 +4531,11 @@
             self.repprt[2] = "view"
             self.loadEntry(frt, pag, p+1, data="")
             return "sk1"
-        if w in ("C", "X"):
+        elif w == "N":
+            self.repprt[2] = "none"
+            self.loadEntry(frt, pag, p+1, data="None")
+            return "sk1"
+        elif w in ("C", "X"):
             self.repprt[2] = "export"
             self.loadEntry(frt, pag, p+1, data="")
             if self.repeml[0] == "N":
@@ -4580,9 +4586,9 @@
         if w == "Y":
             def doMess(mess):
                 if mess:
-                    self.repprt[1][3] = mess.get("1.0", "end")
+                    self.repeml[3] = mess.get("1.0", "end")
                 else:
-                    self.repprt[1][3] = ""
+                    self.repeml[3] = ""
                 fram.destroy()
                 self.master.quit()
             fram = MyFrame(self.master)
@@ -4591,18 +4597,18 @@
             mess = MyText(fram, width=80, height=20)
             mess.pack(fill="both", expand="yes")
             bbox = ButtonBox(fram)
-            b0 = bbox.addButton("Continue", (doMess, mess))
-            b1 = bbox.addButton("Cancel", (doMess, None))
+            bbox.addButton("Continue", (doMess, mess))
+            bbox.addButton("Cancel", (doMess, None))
             fram.place(anchor="center", relx=0.5, rely=0.5)
             mess.focus_set()
             self.master.mainloop()
-            if not self.repprt[1][3].strip():
+            if not self.repeml[3].strip():
                 return "Invalid Message"
         else:
-            self.repprt[1][3] = ""
+            self.repeml[3] = ""
 
     def setPrint(self, frt, pag, r, c, p, i, w):
-        self.repeml[3] = w
+        self.repeml[4] = w
 
     def drawScreens(self):
         if not self.tops:
@@ -5690,35 +5696,34 @@
         """
         if frt == "T":
             fld = self.topEntry[pag][pos]
-            idx = pos % self.topq[pag]
             if not data is None:
-                if type(self.topf[pag][idx][1]) in (list, tuple):
-                    if self.topf[pag][idx][1][0][1:] == "CB":
+                if type(self.topf[pag][pos][1]) in (list, tuple):
+                    if self.topf[pag][pos][1][0][1:] == "CB":
                         d = CCD(data, "CB", 0)
-                    elif self.topf[pag][idx][1][0][1:] == "RB":
+                    elif self.topf[pag][pos][1][0][1:] == "RB":
                         d = CCD(data, "NA", 1)
                     if d.err or d.work == 0:
                         d.disp = ""
                 else:
-                    d = CCD(data, self.topf[pag][idx][1],
-                        self.topf[pag][idx][2][1])
+                    d = CCD(data, self.topf[pag][pos][1],
+                        self.topf[pag][pos][2][1])
                     if d.err or d.work == 0:
                         d.disp = ""
-                self.t_disp[pag][0][idx] = d.disp
-                self.t_work[pag][0][idx] = d.work
-            if type(self.topf[pag][idx][1]) in (list, tuple):
-                if self.topf[pag][idx][1][0][1:] == "CB":
+                self.t_disp[pag][0][pos] = d.disp
+                self.t_work[pag][0][pos] = d.work
+            if type(self.topf[pag][pos][1]) in (list, tuple):
+                if self.topf[pag][pos][1][0][1:] == "CB":
                     self.doCheckButton(fld, "load", data)
-                elif self.topf[pag][idx][1][0][1:] == "RB":
+                elif self.topf[pag][pos][1][0][1:] == "RB":
                     self.doRadioButton(fld, "load", data)
             else:
                 state = fld.cget("state")
                 fld.configure(state="normal")
-                disp = self.t_disp[pag][0][idx]
-                if self.topf[pag][idx][1][1:] == "TV":
+                disp = self.t_disp[pag][0][pos]
+                if self.topf[pag][pos][1][1:] == "TV":
                     fld.delete("1.0", "end")
                     fld.insert("1.0", disp.rstrip())
-                elif self.topf[pag][idx][1][1:] == "Tv":
+                elif self.topf[pag][pos][1][1:] == "Tv":
                     fld.delete("1.0", "end")
                     fld.insert("1.0", disp.rstrip())
                 else:
@@ -6162,7 +6167,7 @@
 
     def doValidation(self, frt, pag, idx, wrk):
         if frt == "T":
-            des = self.topf[pag][idx][4]
+            des = self.topf[pag][idx][4].strip()
             val = self.topv[pag][idx]
             if type(self.topf[pag][idx][1]) in (list, tuple):
                 if self.topf[pag][idx][1][0][1:] == "CB":
@@ -6880,7 +6885,7 @@
                             size[x] = len(str(d[x]))
                     except:
                         pass
-            self.cols = []
+            cols = []
             search = False
             for n, c in enumerate(self.data[0]):
                 if self.head:
@@ -6901,25 +6906,25 @@
                 if srch == "Y":
                     search = True
                 if self.mode.upper() == "M" and n == 0:
-                    self.cols.append([str(n), desc, siz, "CB", srch])
+                    cols.append([str(n), desc, siz, "CB", srch])
                 else:
-                    self.cols.append([str(n), desc, siz, typ, srch])
+                    cols.append([str(n), desc, siz, typ, srch])
                 if not self.mode.upper() == "M":
                     if type(c) == tuple or type(c) == list:
                         if len(c) > 3:
                             srch = c[4].upper()
             if self.mode.upper() == "M":
                 if self.selc is None:
-                    self.cols[n][4] = "Y"
+                    cols[n][4] = "Y"
                 else:
-                    self.cols[self.selc+1][4] = "Y"
+                    cols[self.selc+1][4] = "Y"
             elif not search:
                 # Make the last column searchable if no searchable columns set
-                self.cols[n][4] = "Y"
+                cols[n][4] = "Y"
             if len(self.data) > 50:
                 # Set decoration mode to True
                 self.deco = True
-            sc = SelectChoice(self.scrn, self.titl, self.cols, self.data,
+            sc = SelectChoice(self.scrn, self.titl, cols, self.data,
                 sort=False, butt=self.butt)
             if self.butt and sc.button:
                 sc.button(sc.selection)
@@ -7954,7 +7959,7 @@
         r2s = (("Left", "L"), ("Centre", "C"), ("Right", "R"))
         r3s = (("Yes", "Y"), ("No", "N"))
         r4s = (("In-Line", "I"), ("List", "L"), ("None", "N"))
-        r5s = (("Yes", "Y"), ("No", "N"), ("Multimedia", "M"))
+        r5s = (("Multimedia", "M"), ("Internal", "Y"), ("None", "N"))
         r6s = (("Red", "R"), ("Green", "G"), ("Blue", "B"), ("Custom", "C"))
         tag = (
             ("DataBase",None,("T",1,1),("T",3,0)),
@@ -8654,8 +8659,8 @@
     def doAllocate(self):
         # Scrolled Selection
         self.lb = SelectChoice(self.mf.window, "Available Transactions",
-            self.cols, self.work, deco=False, sort=False, loop=False,
-            cmnd=self.enterAll, posn=self.posn, addh=80, escape=False)
+            self.cols, self.work, sort=False, loop=False, cmnd=self.enterAll,
+            posn=self.posn, addh=80, escape=False)
         # Allocation Fields
         hbox = MyFrame(self.lb.window)
         hbox.pack(fill="x", expand="yes")
@@ -9259,7 +9264,7 @@
         elif self.sys == "LON":
             self.ttp = lntrtp
             self.nam = lntrtp[self.rtn-1][1]
-            if self.rtn in (2, 4) and self.glint == "Y":
+            if self.rtn in (1, 2) and self.glint == "Y":
                 self.bankctl = True
         elif self.sys == "MEM":
             self.ttp = mltrtp
@@ -9272,8 +9277,8 @@
             if self.rtn in (2, 3) and self.glint == "Y":
                 self.bankctl = True
         elif self.sys == "SLN":
-            self.ttp = lntrtp
-            self.nam = lntrtp[self.rtn-1][1]
+            self.ttp = sltrtp
+            self.nam = sltrtp[self.rtn-1][1]
             if self.rtn in (2, 4) and self.glint == "Y":
                 self.bankctl = True
         elif self.sys == "STR":
@@ -10220,6 +10225,8 @@
         if self.rpt_dic["glr_obal"] == "Y" and self.vcode not in ("B", "X"):
             o_lyr, o_cyr = self.getObal()
             self.val[1] = float(ASD(self.val[1]) + ASD(o_lyr))
+            if self.varcd == "P":
+                self.val[5] = float(ASD(self.val[5]) + ASD(o_lyr))
             self.val[4] = float(ASD(self.val[4]) + ASD(o_cyr))
             self.mth[0] = float(ASD(self.mth[0]) + ASD(o_cyr))
             self.mth[13] = float(ASD(self.mth[13]) + ASD(o_cyr))
@@ -10663,9 +10670,9 @@
 Debtor's Ledger -> File Maintenance -> Control Record
 
 and Create It.""",
-            "genctl": """Missing genctl Record for Company %s, Please Run
+            "lonctl": """Missing lonctl Record for Company %s, Please Run
 
-General Ledger -> File Maintenance -> Control Record
+Loan's Ledger -> File Maintenance -> Control Record
 
 and Create It.""",
             "memctl": """Missing memctl Record for Company %s, Please Run
@@ -10780,199 +10787,402 @@
     """
     Used to calculate interest on a loan:
 
-    coy    - Company number
-    acno   - Employee or Account number
-    loan   - Loan number
-    rate   - Interest rate
-    start  - Starting date of the loan
-    tdate  - Transaction date
+    sys    - The system, L for loans and S for staff loans
+    dbm    - The Sql class
+    lonmf2 - The loans record
+    update - Update tables, Y or N
     batch  - Batch number
     curdt  - Current date
-    update - Update tables, Y or N
-    glctls - G/L control accounts, [control, interest]
-    ltype  - The type of account, (S)taff or (O)rdinary
+    tdate  - Transaction date
+    refno  - Reference Number
+    glctl  - G/L control accounts, [control, dr_interest, cr_interest]
+    capnm  - The name of the data capturer
     """
-    def __init__(self, sql, coy, acno, loan, rate, start, tdate, batch, curdt, capnm, update="N", glctls=None, ltype="S", mths=None, rpay=None):
-        self.sql = sql
-        self.conum = coy
-        self.acno = acno
-        self.loan = loan
-        self.rate = rate
-        self.start = start
+    def __init__(self, sys, dbm, lonrec, update="N", batch="", curdt=0, tdate=0, refno="", glctl=[], capnm=""):
+        self.sys = sys
+        self.dbm = dbm
+        self.lonrec = lonrec
+        self.update = update
+        self.batch = batch
+        self.curdt = curdt
         self.tdate = tdate
-        self.batch = batch
-        self.curdt = curdt
+        self.refno = refno
+        self.glctl = glctl
         self.capnm = capnm
-        self.update = update
-        self.glctls = glctls
-        self.ltype = ltype
-        self.mths = mths
-        self.rpay = rpay
-        self.setVariables()
-        self.doProcess()
+        if self.setVariables():
+            if self.pmths:
+                self.doFixed()
+            else:
+                self.doVariable()
 
     def setVariables(self):
+        tabs = ["ctlynd"]
+        if self.glctl:
+            tabs.append("gentrn")
+        if self.sys == "L":
+            tabs.extend(["lonctl", "lonmf2", "lontrn", "lonrte"])
+        else:
+            tabs.extend(["wagctl", "waglmf", "wagltf"])
+        self.sql = Sql(self.dbm, tabs, prog=__name__)
+        if self.sql.error:
+            return
+        if self.sys == "L":
+            self.cono = self.lonrec[self.sql.lonmf2_col.index("lm2_cono")]
+            self.acno = self.lonrec[self.sql.lonmf2_col.index("lm2_acno")]
+            self.loan = self.lonrec[self.sql.lonmf2_col.index("lm2_loan")]
+            self.start = self.lonrec[self.sql.lonmf2_col.index("lm2_start")]
+            self.pmths = self.lonrec[self.sql.lonmf2_col.index("lm2_pmths")]
+            self.repay = self.lonrec[self.sql.lonmf2_col.index("lm2_repay")]
+            self.lcap = self.lonrec[self.sql.lonmf2_col.index("lm2_lcap")]
+        else:
+            self.cono = self.lonrec[self.sql.waglmf_col.index("wlm_cono")]
+            self.acno = self.lonrec[self.sql.waglmf_col.index("wlm_empno")]
+            self.loan = self.lonrec[self.sql.waglmf_col.index("wlm_loan")]
+            self.start = self.lonrec[self.sql.waglmf_col.index("wlm_start")]
+            self.srate = self.lonrec[self.sql.waglmf_col.index("wlm_rate")]
+            self.pmths = 0
+            self.repay = 0
+            self.lcap = 0
+        if not self.pmths:
+            # Calculate last capitalisation date
+            if self.sys == "L":
+                ctl = self.sql.getRec(tables="lonctl",
+                    where=[("cln_cono", "=", self.cono)], limit=1)
+                if not ctl:
+                    return
+                self.ityp = ctl[self.sql.lonctl_col.index("cln_ityp")]
+                self.capb = ctl[self.sql.lonctl_col.index("cln_capb")]
+                self.capf = ctl[self.sql.lonctl_col.index("cln_capf")]
+                self.lint = ctl[self.sql.lonctl_col.index("cln_last")]
+            else:
+                ctl = self.sql.getRec(tables="wagctl",
+                    where=[("ctw_cono", "=", self.cono)], limit=1)
+                if not ctl:
+                    return
+                self.ityp = "D"
+                self.capb = "F"
+                self.capf = "A"
+                self.lint = ctl[self.sql.wagctl_col.index("ctw_i_date")]
+            if not self.lint or self.lint < self.start:
+                self.lint = self.start
+            if not self.lcap:
+                if self.capb == "A":                        # Anniversary
+                    nxtd = self.start
+                    tmpd = nxtd
+                    while tmpd < self.lint:
+                        nxtd = tmpd
+                        if self.capf == "A":
+                            tmpd = projectDate(tmpd, 1, typ="years")
+                        else:
+                            tmpd = projectDate(tmpd, 6, typ="months")
+                    self.lcap = nxtd
+                else:                                       # Financial
+                    periods = self.sql.getRec(tables="ctlynd",
+                        cols=["cye_period", "cye_start", "cye_end"],
+                        where=[("cye_cono", "=", self.cono)],
+                        order="cye_period")
+                    for num, per in enumerate(periods):
+                        if self.tdate >= per[1] and self.tdate <= per[2]:
+                            break
+                    self.lcap = periods[num - 1][2]
+                if self.capf == "B":                        # Bi-Annual
+                    nxt = projectDate(self.lcap, 6, typ="months")
+                    if self.lint >= nxt:
+                        self.lcap = nxt
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
-        self.rin = 0
-        self.tin = 0
-        self.cap = 0
-        self.bal = 0
+        if not self.refno:
+            self.refno = "Pending"
+        return True
 
-    def doProcess(self):
-        if self.ltype == "S":
-            trn = self.sql.getRec(tables="wagltf", cols=["wlt_trdt", "wlt_type",
-                "wlt_amt"], where=[("wlt_cono", "=", self.conum), ("wlt_empno",
-                "=", self.acno), ("wlt_loan", "=", self.loan)],
-                order="wlt_trdt, wlt_type")
-        elif not self.mths:
-            trn = self.sql.getRec(tables="lontrn", cols=["lnt_trdt", "lnt_type",
-                "lnt_tramt"], where=[("lnt_cono", "=", self.conum), ("lnt_acno",
-                "=", self.acno), ("lnt_loan", "=", self.loan)],
-                order="lnt_trdt, lnt_type")
-        else:
-            # Fixed deduction loan
-            cpymth = copyList(mthnam)
-            for mth in range(self.mths):
-                yy = self.start / 10000
-                mm = self.start / 100 % 100
-                dd = self.start % 100
-                mm += 1
-                if mm > 12:
-                    mm = 1
-                    yy += 1
-                if mm == 2:
-                    if not yy % 4:
-                        cpymth[2][2] = 29
-                    else:
-                        cpymth[2][2] = 28
-                if dd > mthnam[mm][2]:
-                    dd = mthnam[mm][2]
-                date = (yy * 10000) + (mm * 100) + dd
-                if date > self.tdate:
-                    break
-                am1 = self.sql.getRec(tables="lontrn",
-                    cols=["round(sum(lnt_tramt), 2)"],
-                    where=[("lnt_cono", "=", self.conum),
-                    ("lnt_acno", "=", self.acno),
-                    ("lnt_loan", "=", self.loan),
-                    ("lnt_type", "=", 2),
-                    ("lnt_trdt", "<=", date)], limit=1)
-                cap = am1[0]
-                am2 = self.sql.getRec(tables="lontrn",
-                    cols=["round(sum(lnt_cpamt), 2)"],
-                    where=[("lnt_cono", "=", self.conum),
-                    ("lnt_acno", "=", self.acno),
-                    ("lnt_loan", "=", self.loan),
-                    ("lnt_type", "<>", 2),
-                    ("lnt_trdt", "<=", date)], limit=1)
-                if am2[0]:
-                    cap = float(ASD(cap) - ASD(am2[0]))
-                trn = self.sql.getRec(tables="lontrn", where=[("lnt_cono",
-                    "=", self.conum), ("lnt_acno", "=", self.acno),
-                    ("lnt_loan", "=", self.loan), ("lnt_type", "=", 1),
-                    ("lnt_trdt", "=", date)])
-                if not trn:
-                    rte = self.sql.getRec(tables="lonrte", cols=["lrt_rate"],
-                        where=[("lrt_cono", "=", self.conum), ("lrt_acno", "=",
-                        self.acno), ("lrt_loan", "=", self.loan), ("lrt_start",
-                        "<=", date)])[-1][0]
-                    rat = (rte / 1200.0)
-                    ita = round(cap * rat, 2)
-                    amt = float(ASD(self.rpay) - ASD(ita))
-                    self.rin = float(ASD(self.rin) + ASD(ita))
-                    if mth == self.mths - 1:
-                        # Final Month
-                        chk = float(ASD(amt) - ASD(cap))
-                        if chk:
-                            ita = float(ASD(ita) + ASD(chk))
-                    desc = "%0.2f @ %0.2f for 1 month" % (cap, rte)
+    def doFixed(self):
+        # Fixed Period Loan
+        cpymth = copyList(mthnam)
+        self.cap = self.sql.getRec(tables="lontrn",
+            cols=["round(sum(lnt_tramt), 2)"],
+            where=[("lnt_cono", "=", self.cono),
+            ("lnt_acno", "=", self.acno),
+            ("lnt_loan", "=", self.loan),
+            ("lnt_type", "<>", 4),
+            ("lnt_trdt", "<=", self.tdate)],
+            limit=1)[0]
+        for mth in range(self.pmths):
+            yy = self.start / 10000
+            mm = self.start / 100 % 100
+            dd = self.start % 100
+            mm += (mth + 1)
+            while mm > 12:
+                mm -= 12
+                yy += 1
+            if mm == 2:
+                if not yy % 4:
+                    cpymth[2][2] = 29
+                else:
+                    cpymth[2][2] = 28
+            if dd > mthnam[mm][2]:
+                dd = mthnam[mm][2]
+            date = (yy * 10000) + (mm * 100) + dd
+            date = projectDate(date, -1, typ="days")
+            if date > self.tdate:
+                break
+            trn = self.sql.getRec(tables="lontrn", where=[("lnt_cono",
+                "=", self.cono), ("lnt_acno", "=", self.acno),
+                ("lnt_loan", "=", self.loan), ("lnt_type", "=", 4),
+                ("lnt_trdt", "=", date)], limit=1)
+            if not trn:
+                rte = self.sql.getRec(tables="lonrte", cols=["lrt_drte",
+                    "lrt_crte"], where=[("lrt_cono", "=", self.cono),
+                    ("lrt_acno", "=", self.acno), ("lrt_loan", "=",
+                    self.loan), ("lrt_start", "<=", date)])[-1]
+                if self.cap > 0:
+                    rte = rte[0]
+                else:
+                    rte = rte[1]
+                rat = (rte / 1200.0)
+                ita = round(self.cap * rat, 2)
+                amt = float(ASD(self.repay) - ASD(ita))
+                if mth == self.pmths - 1:
+                    # Final Month
+                    chk = float(ASD(amt) - ASD(self.cap))
+                    if chk:
+                        ita = float(ASD(ita) + ASD(chk))
+                if self.update == "Y":
+                    desc = "%0.2f @ %0.2f for 1 month" % (self.cap, rte)
                     # Loans Transaction
-                    self.sql.insRec("lontrn", data=[self.conum, self.acno,
-                        self.loan, self.batch, 1, date, mth + 1, ita, amt,
-                        rte, 0, 0, date / 100, desc, "", self.capnm,
-                        self.sysdtw, 0])
-                    if self.glctls:
+                    self.sql.insRec("lontrn", data=[self.cono, self.acno,
+                        self.loan, self.batch, 4, date, mth + 1, ita,
+                        date / 100, desc, "", self.capnm, self.sysdtw, 0])
+                    if self.glctl:
                         # General Ledger
-                        credit = float(ASD(0) - ASD(ita))
-                        vals = ((self.glctls[0], ita), (self.glctls[1], credit))
+                        iti = float(ASD(0) - ASD(ita))
+                        if iti < 0:
+                            ctl = self.glctl[1]
+                        else:
+                            ctl = self.glctl[2]
+                        vals = ((self.glctl[0], ita), (ctl, iti))
                         for val in vals:
-                            whr = [("glt_cono", "=", self.conum),
+                            whr = [("glt_cono", "=", self.cono),
                                 ("glt_acno", "=", val[0]),
                                 ("glt_curdt", "=", date / 100),
                                 ("glt_trdt", "=", date),
                                 ("glt_type", "=", 4),
-                                ("glt_refno", "=", "AutoInt"),
+                                ("glt_refno", "=", self.refno),
                                 ("glt_batch", "=", self.batch)]
-                            data = self.sql.getRec(tables="gentrn", where=whr,
-                                limit=1)
+                            data = self.sql.getRec(tables="gentrn",
+                                where=whr, limit=1)
                             if data:
                                 col = self.sql.gentrn_col
                                 tramt = data[col.index("glt_tramt")]
                                 tramt = float(ASD(tramt) + ASD(val[1]))
                                 data[col.index("glt_tramt")] = tramt
-                                self.sql.updRec("gentrn", where=whr, data=data)
+                                self.sql.updRec("gentrn", where=whr,
+                                    data=data)
                             else:
-                                data = [self.conum, val[0], date / 100, date,
-                                    4, "AutoInt", self.batch, val[1], 0.00,
-                                    "Interest on Loans", "", "", 0, self.capnm,
-                                    self.sysdtw, 0]
+                                data = [self.cono, val[0], date / 100,
+                                    date, 4, self.refno, self.batch, val[1],
+                                    0.00, "Interest on Loans", "", "", 0,
+                                    self.capnm, self.sysdtw, 0]
                                 self.sql.insRec("gentrn", data=data)
-                self.start = date
-            return
-        start = self.start
-        nxtd = projectDate(self.start, 365)
-        while nxtd < self.tdate:
-            nxtd = projectDate(nxtd, 365)
-        for x in xrange(0, len(trn)):
-            dat = CCD(trn[x][0], "d1", 10)
-            typ = CCD(trn[x][1], "UI", 2)
-            amt = CCD(trn[x][2], "SD", 13.2)
-            self.bal = float(ASD(self.bal) + ASD(amt.work))
-            self.cap = float(ASD(self.cap) + ASD(amt.work))
-            if typ.work == 1:
-                if dat.work < nxtd:
-                    self.tin = float(ASD(self.tin) + ASD(amt.work))
-                    self.cap = float(ASD(self.cap) - ASD(amt.work))
-                start = dat.work
-        nxtd = projectDate(self.start, 365)
-        while nxtd < start:
-            nxtd = projectDate(nxtd, 365)
-        if nxtd <= self.tdate:
-            days = dateDiff(start, nxtd, ptype="days")
-            self.raiseInterest(nxtd, days)
-            start = nxtd
-        days = dateDiff(start, self.tdate, ptype="days")
-        return self.raiseInterest(self.tdate, days)
-
-    def raiseInterest(self, dte, days):
-        rin = round((self.cap * self.rate * days / 36500), 2)
-        if rin < 0:
-            rin = 0
+                self.cap = float(ASD(self.cap) - ASD(amt))
+            else:
+                ita = trn[self.sql.lontrn_col.index("lnt_tramt")]
+                amt = float(ASD(self.repay) - ASD(ita))
+                self.cap = float(ASD(self.cap) - ASD(amt))
+
+    def doVariable(self):
+        if self.lint and self.lint > self.start:
+            start = projectDate(self.lint, 1)
+        else:
+            start = self.start
+        # Extract Balances
+        self.cap = 0
+        self.rin = 0
+        if self.sys == "L":
+            trns = self.sql.getRec(tables="lontrn", where=[("lnt_cono", "=",
+                self.cono), ("lnt_acno", "=", self.acno), ("lnt_loan", "=",
+                self.loan), ("lnt_trdt", "<=", self.lint)], order="lnt_trdt")
+            for trn in trns:
+                typ = trn[self.sql.lontrn_col.index("lnt_type")]
+                dte = trn[self.sql.lontrn_col.index("lnt_trdt")]
+                amt = trn[self.sql.lontrn_col.index("lnt_tramt")]
+                if typ == 4 and dte > self.lcap:
+                    self.rin = float(ASD(self.rin) + ASD(amt))
+                else:
+                    self.cap = float(ASD(self.cap) + ASD(amt))
+        else:
+            trns = self.sql.getRec(tables="wagltf", where=[("wlt_cono", "=",
+                self.cono), ("wlt_empno", "=", self.acno), ("wlt_loan", "=",
+                self.loan), ("wlt_trdt", "<=", self.lint)], order="wlt_trdt")
+            for trn in trns:
+                typ = trn[self.sql.wagltf_col.index("wlt_type")]
+                dte = trn[self.sql.wagltf_col.index("wlt_trdt")]
+                amt = trn[self.sql.wagltf_col.index("wlt_amt")]
+                if typ == 4 and dte > self.lcap:
+                    self.rin = float(ASD(self.rin) + ASD(amt))
+                else:
+                    self.cap = float(ASD(self.cap) + ASD(amt))
+        if self.ityp == "D":
+            if self.sys == "L":
+                trns = self.sql.getRec(tables="lontrn", cols=["lnt_trdt",
+                    "lnt_type", "lnt_tramt"], where=[("lnt_cono", "=",
+                    self.cono), ("lnt_acno", "=", self.acno), ("lnt_loan",
+                    "=", self.loan), ("lnt_trdt", ">", self.lint)],
+                    order="lnt_trdt")
+            else:
+                trns = self.sql.getRec(tables="wagltf", cols=["wlt_trdt",
+                    "wlt_type", "wlt_amt"], where=[("wlt_cono", "=",
+                    self.cono), ("wlt_empno", "=", self.acno), ("wlt_loan",
+                    "=", self.loan), ("wlt_trdt", ">", self.lint)],
+                    order="wlt_trdt")
+        else:
+            bals = {}
+            if self.sys == "L":
+                trns = self.sql.getRec(tables="lontrn", cols=["lnt_curdt",
+                    "lnt_type", "sum(lnt_tramt)"], where=[("lnt_cono", "=",
+                    self.cono), ("lnt_acno", "=", self.acno), ("lnt_loan",
+                    "=", self.loan), ("lnt_trdt", ">", self.lint)],
+                    group="lnt_curdt", order="lnt_curdt")
+            else:
+                trns = self.sql.getRec(tables="wagltf", cols=["wlt_curdt",
+                    "wlt_type", "sum(wlt_amt)"], where=[("wlt_cono", "=",
+                    self.cono), ("wlt_acno", "=", self.acno), ("wlt_loan",
+                    "=", self.loan), ("wlt_trdt", ">", self.lint)],
+                    group="wlt_curdt", order="wlt_curdt")
+            for trn in trns:
+                if not trn[0] in bals:
+                    bals[trn[0]] = [0, 0]
+                if trn[1] == 4:
+                    bals[trn[0]][1] = trn[2]
+                else:
+                    bals[trn[0]][0] = trn[2]
+        if self.sys == "L":
+            # Extract Rates
+            rates = self.sql.getRec(tables="lonrte", cols=["lrt_start",
+                "lrt_drte", "lrt_crte"], where=[("lrt_cono", "=", self.cono),
+                ("lrt_acno", "=", self.acno), ("lrt_loan", "=", self.loan),
+                ("lrt_start", "<=", self.tdate)], order="lrt_start")
+        else:
+            rates = [[self.start, self.srate, 0]]
+        # Extract Capitalisation Dates
+        capdt = []
+        lcap = self.lcap
+        while lcap < self.tdate:
+            if self.capf == "A":
+                lcap = projectDate(lcap, 1, typ="years")
+            else:
+                lcap = projectDate(lcap, 6, typ="months")
+            if lcap <= self.tdate:
+                capdt.append((projectDate(lcap, -1, typ="days"), True))
+            else:
+                capdt.append((self.tdate, False))
+        # Raise Interest
+        for self.ncap in capdt:
+            if self.ncap[0] <= start:
+                continue
+            if self.ityp == "D":
+                # Daily
+                while start < self.ncap[0]:
+                    usetrn = False
+                    for trn in trns:
+                        if trn[0] <= start or trn[0] > self.ncap[0]:
+                            continue
+                        trns.remove(trn)
+                        endd = trn[0]
+                        usetrn = True
+                        break
+                    if not usetrn:
+                        endd = self.ncap[0]
+                    lr = rates[0]
+                    for rate in rates:
+                        if rate[0] > start and rate[0] < endd:
+                            self.raiseInterest(start, rate[0], lr[1], lr[2])
+                            start = projectDate(rate[0], 1, typ="days")
+                        lr = rate
+                    for x in range(len(rates) - 1, -1, -1):
+                        rate = rates[x]
+                        if rate[0] <= endd:
+                            break
+                    self.raiseInterest(start, endd, rate[1], rate[2])
+                    if usetrn:
+                        if trn[1] == 4:
+                            self.rin = float(ASD(self.rin) + ASD(trn[2]))
+                        else:
+                            self.cap = float(ASD(self.cap) + ASD(trn[2]))
+                    start = projectDate(endd, 1, typ="days")
+            else:
+                # Monthly
+                while start < self.ncap[0]:
+                    endd = mthendDate(start)
+                    for x in range(len(rates) - 1, -1, -1):
+                        rate = rates[x]
+                        if rate[0] <= endd:
+                            break
+                    curdt = endd / 100
+                    if curdt in bals:
+                        self.cap = float(ASD(self.cap) + ASD(bals[curdt][0]))
+                        self.rin = float(ASD(self.rin) + ASD(bals[curdt][1]))
+                    self.raiseInterest(start, endd, rate[1], rate[2])
+                    start = projectDate(endd, 1, typ="days")
+        if self.update == "Y":
+            self.sql.updRec("lonmf2", cols=["lm2_lcap"], data=[self.lcap],
+                where=[("lm2_cono", "=", self.cono), ("lm2_acno", "=",
+                self.acno), ("lm2_loan", "=", self.loan)])
+
+    def raiseInterest(self, fdte, tdte, drte, crte):
+        """
+        fdte   - The from date
+        tdte   - The to date
+        drte   - The debit interest rate
+        crte   - The credit interest rate
+        """
+        if self.cap > 0:
+            rte = drte
+            if self.glctl:
+                ctl = self.glctl[1]
+        else:
+            rte = crte
+            if self.glctl:
+                ctl = self.glctl[2]
+        if self.ityp == "D":
+            period = dateDiff(fdte, tdte, "days") + 1
+        else:
+            period = 1
+        if self.ityp == "D":
+            rin = round((self.cap * rte * period / 36500), 2)
+            desc = "%0.2f @ %0.2f for %s day" % (self.cap, rte, period)
+        else:
+            rin = round((self.cap * rte / 1200), 2)
+            desc = "%0.2f @ %0.2f for %s month" % (self.cap, rte, period)
+        if period > 1:
+            desc += "s"
         self.rin = float(ASD(self.rin) + ASD(rin))
-        self.tin = float(ASD(self.tin) + ASD(rin))
-        self.bal = float(ASD(self.cap) + ASD(rin))
-        self.cap = float(ASD(self.cap) + ASD(rin))
+        # Capitalisation
+        if tdte == self.ncap[0] and self.ncap[1]:
+            self.cap = float(ASD(self.cap) + ASD(self.rin))
+            self.rin = 0
+            self.lcap = self.ncap[0]
+        # Update Tables
         if rin and self.update == "Y":
-            desc = "%0.2f @ %0.2f for %s days" % (self.cap, self.rate, days)
-            if self.ltype == "S":
-                data = [self.conum, self.acno, self.loan, self.batch, 1, dte,
-                    "AutoInt", rin, 0, 0, self.rate, self.curdt,
-                    desc, "", self.capnm, self.sysdtw, 0]
+            # Loans Transaction
+            if self.sys == "L":
+                data = [self.cono, self.acno, self.loan, self.batch, 4,
+                    tdte, self.refno, rin, self.curdt, desc, "",
+                    self.capnm, self.sysdtw, 0]
+                self.sql.insRec("lontrn", data=data)
+            else:
+                data = [self.cono, self.acno, self.loan, self.batch, 4,
+                    tdte, self.refno, rin, self.curdt, desc, "",
+                    self.capnm, self.sysdtw, 0]
                 self.sql.insRec("wagltf", data=data)
-            else:
-                data = [self.conum, self.acno, self.loan, self.batch, 1, dte,
-                    "AutoInt", rin, 0, self.rate, 0, 0, self.curdt,
-                    desc, "", self.capnm, self.sysdtw, 0]
-                self.sql.insRec("lontrn", data=data)
-            if self.glctls:
-                credit = float(ASD(0) - ASD(rin))
-                vals = ((self.glctls[0], rin), (self.glctls[1], credit))
+            if self.glctl:
+                # General Ledger
+                iti = float(ASD(0) - ASD(rin))
+                vals = ((self.glctl[0], rin), (ctl, iti))
                 for val in vals:
-                    whr = [("glt_cono", "=", self.conum), ("glt_acno", "=",
+                    whr = [("glt_cono", "=", self.cono), ("glt_acno", "=",
                         val[0]), ("glt_curdt", "=", self.curdt), ("glt_trdt",
-                        "=", dte), ("glt_type", "=", 4), ("glt_refno", "=",
-                        "AutoInt"), ("glt_batch", "=", self.batch)]
+                        "=", tdte), ("glt_type", "=", 4), ("glt_refno", "=",
+                        self.refno), ("glt_batch", "=", self.batch)]
                     data = self.sql.getRec(tables="gentrn", where=whr, limit=1)
                     if data:
                         tramt = data[self.sql.gentrn_col.index("glt_tramt")]
@@ -10980,31 +11190,34 @@
                         data[self.sql.gentrn_col.index("glt_tramt")] = tramt
                         self.sql.updRec("gentrn", where=whr, data=data)
                     else:
-                        data = [self.conum, val[0], self.curdt, dte,
-                            4, "AutoInt", self.batch, val[1], 0.00,
-                            "Interest on Loans", "", "", 0,
-                            self.capnm, self.sysdtw, 0]
-                        self.sql.insRec("gentrn", data=data)
+                        self.sql.insRec("gentrn", data=[self.cono, val[0],
+                            self.curdt, tdte, 4, self.refno, self.batch, val[1],
+                            0.00, "Interest on Loans", "", "", 0, self.capnm,
+                            self.sysdtw, 0])
 
 class PrintOrder:
     """
     Used to print stores orders using
     the ctlmst, crsmst, strpom and strpot tables
     """
-    def __init__(self, mf, conum, docs, **args):
+    def __init__(self, mf, conum, conam, docs, **args):
         self.mf = mf
         self.conum = conum
+        self.conam = conam
         if type(docs) in (int, str):
             self.docs = [[docs]]
         else:
             self.docs = docs
         defaults = {
-            "prtnam": "Default",
             "tname": "purchase_order",
-            "email": "n",
+            "repprt": ["N", "V", "view"],
+            "repeml": ["N", "N", "", "", "Y"],
             "copy": "n"}
         for nam in args:
-            defaults[nam] = args[nam]
+            if nam in ("repprt", "repeml"):
+                defaults[nam] = copyList(args[nam])
+            else:
+                defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
         if self.setVariables():
@@ -11015,10 +11228,10 @@
             "strpot"], prog=__name__)
         if self.sql.error:
             return False
-        if type(self.email) == str:
+        if self.repeml:
+            self.emadd = self.repeml[2]
+        else:
             self.emadd = ""
-        else:
-            self.email, self.emadd = self.email
         return True
 
     def doProcess(self):
@@ -11036,6 +11249,8 @@
             # strpom
             pom = self.sql.getRec(tables="strpom", where=[("pom_cono", "=",
                 self.conum), ("pom_ordno", "=", self.docno.work)], limit=1)
+            if not pom:
+                continue
             for fld in pmc:
                 if fld in self.form.tptp:
                     self.form.tptp[fld][1] = pom[pmc.index(fld)]
@@ -11059,9 +11274,9 @@
                 self.conum), ("crm_acno", "=", pom[pmc.index("pom_acno")])],
                 limit=1)
             # If no email address supplied, use orders address else accounts
-            self.eml = crm[cmc.index("crm_ord_email")]
-            if not self.eml:
-                self.eml = crm[cmc.index("crm_acc_email")]
+            eml = crm[cmc.index("crm_ord_email")]
+            if not eml:
+                eml = crm[cmc.index("crm_acc_email")]
             for fld in cmc:
                 if fld in self.form.tptp:
                     d = "%s_C00" % fld
@@ -11070,15 +11285,19 @@
             self.form.document_date(pom[pmc.index("pom_date")])
             pot = self.sql.getRec(tables="strpot", where=[("pot_cono", "=",
                 self.conum), ("pot_ordno", "=", self.docno.work)])
+            if not pot:
+                continue
             self.doBody(ptc, pot, tdc)
             self.doTotal(tdc)
             self.doTail(tdc)
-            if self.email.lower() == "y" and not self.emadd:
-                self.doPrint(self.eml)
+            if self.repeml[1] == "Y" and not self.emadd:
+                self.repeml[2] = eml
+                self.doPrint()
                 sp.refreshSplash()
         sp.closeSplash()
-        if self.email.lower() == "n" or self.emadd:
-            self.doPrint(self.emadd)
+        if self.repeml[1] == "N" or self.emadd:
+            self.repeml[2] = self.emadd
+            self.doPrint()
 
     def doBody(self, ptc, pot, tdc):
         page = 0
@@ -11192,29 +11411,26 @@
                 line[tdc.index("tpd_text")] = self.doGetData(mrgcod)
                 self.form.doDrawDetail(line, fmat=False)
 
-    def doPrint(self, mail):
+    def doPrint(self):
         pfx = "PurOrd"
-        if self.email.lower() == "y" and not self.emadd:
+        head = "%s PURCHASE ORDER" % self.conam.upper()
+        if self.repeml[1] == "Y" and not self.emadd:
+            head = "%s %s" % (head, self.docno.work)
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
                 "%s_%s" % (self.conum, self.docno.work), ext="pdf")
         else:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
                 "%s_all" % self.conum, ext="pdf")
-        if self.prtnam == "view":
-            view = "V"
-        else:
-            view = "P"
-        if self.email.lower() == "y" and not self.emadd:
-            head = "Purchase Order %s" % self.docno.work
-        elif len(self.docs) == 1:
-            head = "Purchase Order %s" % self.docno.work
-        else:
-            head = "Purchase Orders %s - %s" % (self.docs[0][0],
-                self.docs[-1][0])
+            if len(self.docs) == 1:
+                head = "%s %s" % (head, self.docno.work)
+            else:
+                head += "S"
+                for doc in self.docs:
+                    head += " %s" % doc[0]
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            view=view, prtnam=self.prtnam, mail=mail)
-        if self.email.lower() == "y" and not self.emadd:
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
             self.form.doNewDetail()
@@ -11290,24 +11506,28 @@
         return ""
 
 class PrintInvoice:
-    def __init__(self, mf, conum, dtype, docs, **args):
+    def __init__(self, mf, conum, conam, dtype, docs, **args):
         self.mf = mf
         self.conum = conum
+        self.conam = conam
         self.dtype = dtype
         if type(docs) in (int, str):
             self.docs = [[docs]]
         else:
             self.docs = docs
         defaults = {
-            "prtnam": "Default",
             "tname": "sales_document",
+            "repprt": ["N", "V", "view"],
+            "repeml": ["N", "N", "", "", "Y"],
             "dnote": "n",
             "dvals": "n",
-            "email": "n",
             "copy": "n",
             "splash": True}
         for nam in args:
-            defaults[nam] = args[nam]
+            if nam in ("repprt", "repeml"):
+                defaults[nam] = copyList(args[nam])
+            else:
+                defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
         if self.setVariables():
@@ -11318,10 +11538,10 @@
             "slsiv2"], prog=__name__)
         if self.sql.error:
             return False
-        if type(self.email) == str:
+        if self.repeml:
+            self.emadd = self.repeml[2]
+        else:
             self.emadd = ""
-        else:
-            self.email, self.emadd = self.email
         return True
 
     def doProcess(self):
@@ -11371,14 +11591,14 @@
                 ("drm_acno", "=", si1[s1c.index("si1_acno")])], limit=1)
             if self.dtype == "Q":
                 # If sales address else accounts
-                self.eml = drm[dmc.index("drm_sls_email")]
-                if not self.eml:
-                    self.eml = drm[dmc.index("drm_acc_email")]
+                eml = drm[dmc.index("drm_sls_email")]
+                if not eml:
+                    eml = drm[dmc.index("drm_acc_email")]
             else:
                 # If use accounts address else sales
-                self.eml = drm[dmc.index("drm_acc_email")]
-                if not self.eml:
-                    self.eml = drm[dmc.index("drm_sls_email")]
+                eml = drm[dmc.index("drm_acc_email")]
+                if not eml:
+                    eml = drm[dmc.index("drm_sls_email")]
             for fld in dmc:
                 if fld in self.form.tptp:
                     d = "%s_C00" % fld
@@ -11400,14 +11620,16 @@
                 self.doTail(tdc)
                 if "document_type" in self.form.tptp:
                     self.form.tptp["document_type"][1] = dat
-            if self.email.lower() == "y" and not self.emadd:
-                self.doPrint(self.eml)
+            if self.repeml[1] == "Y" and not self.emadd:
+                self.repeml[2] = eml
+                self.doPrint()
                 if self.splash:
                     sp.refreshSplash()
         if self.splash:
             sp.closeSplash()
-        if self.email.lower() == "n" or self.emadd:
-            self.doPrint(self.emadd)
+        if self.repeml[1] == "N" or self.emadd:
+            self.repeml[2] = self.emadd
+            self.doPrint()
 
     def doBody(self, s2c, si2, tdc):
         page = 0
@@ -11534,7 +11756,7 @@
                     line[tdc.index("tpd_text")] = self.doGetData(mrgcod)
                 self.form.doDrawDetail(line, fmat=False)
 
-    def doPrint(self, mail):
+    def doPrint(self):
         if self.dtype in ("C", "D", "I"):
             pfx = "InvCrn"
         elif self.dtype == "O":
@@ -11543,36 +11765,33 @@
             pfx = "WrkOrd"
         elif self.dtype == "Q":
             pfx = "SlsQte"
-        if self.email.lower() == "y" and not self.emadd:
-            pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_%s" % (self.conum, self.docno.work), ext="pdf")
-        else:
-            pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
-                "%s_all" % self.conum, ext="pdf")
         if self.dtype == "I":
-            head = "Invoice"
+            head = "%s INVOICE" % self.conam.upper()
         elif self.dtype == "C":
-            head = "Credit Note"
+            head = "%s CREDIT NOTE" % self.conam.upper()
         elif self.dtype == "O":
-            head = "Sales Order"
+            head = "%s SALES ORDER" % self.conam.upper()
         elif self.dtype == "W":
-            head = "Works Order"
+            head = "%s WORKS ORDER" % self.conam.upper()
         elif self.dtype == "Q":
-            head = "Quotation"
-        if self.email.lower() == "y" and not self.emadd:
-            head = "%s %s" % (head, self.docno.work)
-        elif len(self.docs) == 1:
-            head = "%s %s" % (head, self.docno.work)
-        else:
-            head = "%s %s - %s" % (head, self.docs[0][0], self.docs[-1][0])
-        if self.prtnam == "view":
-            view = "V"
-        else:
-            view = "P"
+            head = "%s QUOTATION" % self.conam.upper()
+        if self.repeml[1] == "Y" and not self.emadd:
+            head = "%s %s" % (head, self.docno.work)
+            pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
+                "%s_%s" % (self.conum, self.docno.work), ext="pdf")
+        else:
+            if len(self.docs) == 1:
+                head = "%s %s" % (head, self.docno.work)
+            else:
+                head += "S"
+                for doc in self.docs:
+                    head += " %s" % doc[0]
+            pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
+                "%s_all" % self.conum, ext="pdf")
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            view=view, prtnam=self.prtnam, mail=mail)
-        if self.email.lower() == "y":
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y" and not self.emadd:
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
             self.form.doNewDetail()
@@ -11665,35 +11884,36 @@
     """
     mf: Mainframe object
     conum:  Company number
+    conam:  Company name
     dtype:  Document type
     docs:   List of document numbers
     args:
-            prtnam - The name of the printer
             tname  - The template to use
-            email  - Whether to email the documentand can be:
-                       y = Email to the email address of the contact
-                       n = No email
-                       ["y", "an-address"] = Email to own address or an-address
-                       ["n", "an-address"] = Email to an-address
+            repprt - Printing options
+            repeml - Emailing options
             copy   - Print a Copy document
             splash - Whether to display a splach screen
     """
-    def __init__(self, mf, conum, dtype, docs, **args):
+    def __init__(self, mf, conum, conam, dtype, docs, **args):
         self.mf = mf
         self.conum = conum
+        self.conam = conam
         self.dtype = dtype
         if type(docs) in (int, str):
             self.docs = [[docs]]
         else:
             self.docs = docs
         defaults = {
-            "prtnam": "Default",
             "tname": "booking_invoice",
-            "email": "n",
+            "repprt": ["N", "V", "view"],
+            "repeml": ["N", "N", "", "", "Y"],
             "copy": "n",
             "splash": True}
         for nam in args:
-            defaults[nam] = args[nam]
+            if nam in ("repprt", "repeml"):
+                defaults[nam] = copyList(args[nam])
+            else:
+                defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
         if self.setVariables():
@@ -11704,10 +11924,10 @@
             prog=__name__)
         if self.sql.error:
             return False
-        if type(self.email) == str:
+        if self.repeml:
+            self.emadd = self.repeml[2]
+        else:
             self.emadd = ""
-        else:
-            self.email, self.emadd = self.email
         return True
 
     def doProcess(self):
@@ -11761,7 +11981,7 @@
                 dat = "%1s\n%1s" % (dat, con[ccc.index("bkc_pcode")])
                 self.form.tptp["contact_details"][1] = dat
             # Document details
-            self.eml = con[ccc.index("bkc_email")]
+            eml = con[ccc.index("bkc_email")]
             self.form.document_number(docno)
             self.form.document_date(ivdt)
             for fld in mcc:
@@ -11786,14 +12006,16 @@
             self.doTotal(tdc)
             if self.dtype == "I":
                 self.doTail(tdc)
-            if self.email.lower() == "y" and not self.emadd:
-                self.doPrint(self.eml)
+            if self.repeml[1] == "Y" and not self.emadd:
+                self.repeml[2] = eml
+                self.doPrint()
                 if self.splash:
                     sp.refreshSplash()
         if self.splash:
             sp.closeSplash()
-        if self.email.lower() == "n" or self.emadd:
-            self.doPrint(self.emadd)
+        if self.repeml[1] == "N" or self.emadd:
+            self.repeml[2] = self.emadd
+            self.doPrint()
 
     def doBody(self, ttc, rtt, tdc):
         page = 0
@@ -11903,32 +12125,29 @@
                 line[tdc.index("tpd_text")] = self.doGetData(mrgcod)
                 self.form.doDrawDetail(line, fmat=False)
 
-    def doPrint(self, mail):
+    def doPrint(self):
         pfx = "InvCrn"
         if self.dtype == "I":
-            head = "Invoice"
+            head = "%s - INVOICE" % self.conam.upper()
         elif self.dtype == "C":
-            head = "Credit Note"
-        if self.email.lower() == "y" and not self.emadd:
+            head = "%s - CREDIT NOTE" % self.conam.upper()
+        if self.repeml[1] == "Y" and not self.emadd:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
                 "%s_%s" % (self.conum, self.docno.work), ext="pdf")
+            head = "%s %s" % (head, self.docno.work)
         else:
             pdfnam = getModName(self.mf.rcdic["wrkdir"], pfx,
                 "%s_all" % self.conum, ext="pdf")
-        if self.email.lower() == "y" and not self.emadd:
-            head = "%s %s" % (head, self.docno.work)
-        elif len(self.docs) == 1:
-            head = "%s %s" % (head, self.docno.work)
-        else:
-            head = "%s %s - %s" % (head, self.docs[0][0], self.docs[-1][0])
-        if self.prtnam == "view":
-            view = "V"
-        else:
-            view = "P"
+            if len(self.docs) == 1:
+                head = "%s %s" % (head, self.docno.work)
+            else:
+                head = "%sS" % head
+                for doc in self.docs:
+                    head += " %s" % doc.strip()
         self.form.output(pdfnam, "F")
         doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, head=head,
-            view=view, prtnam=self.prtnam, mail=mail)
-        if self.email.lower() == "y":
+            repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y":
             self.form = DrawForm(self.mf.dbm, self.tname)
             self.doLoadStatic()
             self.form.doNewDetail()
@@ -11948,7 +12167,7 @@
         if "letterhead" in self.form.tptp:
             self.form.letterhead(cmc, ctm, "letterhead", None)
         if "document_type" in self.form.tptp:
-            if self.copy == "y":
+            if self.copy.lower() == "y":
                 typ = "COPY"
             else:
                 typ = ""
@@ -11959,14 +12178,6 @@
             elif self.dtype == "C":
                 self.form.tptp["document_type"][1] = "%s CREDIT NOTE" % typ
         self.form.bank_details(cmc, ctm, 0)
-        if "terms" in self.form.tptp:
-            acc = self.sql.getRec(tables="ctlmes", cols=["mss_detail"],
-                where=[("mss_system", "=", "CON"), ("mss_message", "=", 1)],
-                limit=1)
-            if acc:
-                self.form.tptp["terms"][1] = acc[0]
-            else:
-                del self.form.tptp["terms"]
 
     def doHeader(self, page, tdc):
         self.form.add_page()
@@ -12016,35 +12227,38 @@
     Used to print payslips
 
     conum  : Company Number
+    conam  : Company Name
     empnos : List of Employees
     rundt  : Run Date
     progs  : Print Progressives (y/n)
     runtp  : c=Copy, o=Original, p=Preview
-    prtnam : Printer Name
     tname  : Template Name
-    email  : Email Payslips (y/n) or an email address
-    printm : Whether to View/Print emailed payslips
+    repprt : Printer Name
+    repeml : Printer Name
     message: Message to Print
     export : The open file object for Best Upload
     bestac : Standard Bank Best Account Code
     """
-    def __init__(self, mf, conum, empnos, rundt, **args):
+    def __init__(self, mf, conum, conam, empnos, rundt, **args):
         self.mf = mf
         self.conum = conum
+        self.conam = conam
         self.empnos = empnos
         self.rundt = CCD(rundt, "D1", 10.0)
         defaults = {
             "progs": "n",
             "runtp": "c",
-            "prtnam": "Default",
             "tname": "payslip",
-            "email": "n",
-            "printm": "n",
+            "repprt": ["N", "V", "view"],
+            "repeml": ["N", "N", "", "", "Y"],
             "message": None,
             "export": None,
             "bestac": None}
         for nam in args:
-            defaults[nam] = args[nam]
+            if nam in ("repprt", "repeml"):
+                defaults[nam] = copyList(args[nam])
+            else:
+                defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
         if self.setVariables():
@@ -12063,12 +12277,11 @@
         if m < 3:
             y = y - 1
         self.start = (y * 10000) + 301
+        if self.repeml:
+            self.emadd = self.repeml[2]
+        else:
+            self.emadd = ""
         self.etotal = 0
-        if self.email and self.email.count("@"):
-            self.emadd = self.email
-            self.email = "y"
-        else:
-            self.emadd = ""
         return True
 
     def doProcess(self):
@@ -12079,11 +12292,8 @@
         for emp in self.empnos:
             self.doPayslip(emp)
         sp.closeSplash()
-        if self.emadd or self.email.lower() == "n" and self.form.page:
-            key = "%s_all" % self.conum
-            self.pdfnam = getModName(self.mf.rcdic["wrkdir"], "payslip", key,
-                ext="pdf")
-            self.form.output(self.pdfnam, "F")
+        if self.repeml[1] == "N" or self.emadd:
+            self.repeml[2] = self.emadd
             self.doPrint()
 
     def doLoadStatic(self):
@@ -12130,7 +12340,7 @@
         self.bbranch = wgm[wmc.index("wgm_bbranch")]
         self.bacno = wgm[wmc.index("wgm_bacno")]
         self.bname = wgm[wmc.index("wgm_bname")]
-        self.eml = wgm[wmc.index("wgm_emadd")]
+        eml = wgm[wmc.index("wgm_emadd")]
         tmpdic = self.form.newdic.copy()
         for fld in wmc:
             if fld in self.form.tptp:
@@ -12186,16 +12396,9 @@
                 int(self.empno), int(self.bacno), "", self.btype,
                 value, self.bname, "", self.conam[:15], ""))
             self.etotal = float(ASD(self.etotal) + ASD(self.total))
-        if not self.emadd and self.email.lower() == "y":
-            if self.form.page:
-                key = "%s_%s" % (self.conum, self.empno)
-                self.pdfnam = getModName(self.mf.rcdic["wrkdir"], "payslip",
-                    key, ext="pdf")
-                self.form.output(self.pdfnam, "F")
-                self.doPrint()
-            self.form = DrawForm(self.mf.dbm, self.tname)
-            self.doLoadStatic()
-            self.form.doNewDetail()
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.repeml[2] = eml
+            self.doPrint()
 
     def doLoadDic(self, typ, tdc, tmpdic):
         if typ == "E":
@@ -12243,20 +12446,23 @@
         return wt2
 
     def doPrint(self):
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email.lower() == "y":
-            if self.emadd:
-                mail = self.emadd
-            else:
-                mail = self.eml
-        else:
-            mail = ""
-        self.tit = "Payslip"
-        doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam, head=self.tit,
-            view=view, prtnam=self.prtnam, mail=mail, printm=self.printm)
+        head = "%s PAYSLIP" % self.conam.upper()
+        if self.repeml[1] == "Y" and not self.emadd:
+            key = "%s_%s" % (self.conum, self.empno)
+        else:
+            key = "%s_all" % self.conum
+            if len(self.empnos) > 1:
+                head += "S"
+        head += " for %s" % self.rundt.disp
+        self.pdfnam = getModName(self.mf.rcdic["wrkdir"], "payslip", key,
+            ext="pdf")
+        self.form.output(self.pdfnam, "F")
+        doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam,
+            head=head, repprt=self.repprt, repeml=self.repeml)
+        if self.repeml[1] == "Y" and not self.emadd:
+            self.form = DrawForm(self.mf.dbm, self.tname)
+            self.doLoadStatic()
+            self.form.doNewDetail()
 
 class PrintDraw:
     def __init__(self, mf, conum, date, time, **args):
@@ -12269,9 +12475,12 @@
             "listing": "n",
             "board": "n",
             "empty": "n",
-            "prtnam": "Default"}
+            "repprt": ["N", "V", "view"]}
         for nam in args:
-            defaults[nam] = args[nam]
+            if nam in ("repprt", "repeml"):
+                defaults[nam] = copyList(args[nam])
+            else:
+                defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
         if self.setVariables():
@@ -12481,15 +12690,11 @@
                             self.fpdf.drawText(txt, x=x+32.5, y=yaxis,
                                 w=15, h=24, font=["Arial", "BI", 24],
                                 fill=1, border="TLB", ln=0)
-        if self.prtnam == "view":
-            view = "V"
-        else:
-            view = "P"
         key = "%s_%s" % (self.conum, self.date)
         pdfnam = getModName(self.mf.rcdic["wrkdir"], "draw", key, ext="pdf")
         self.fpdf.output(pdfnam, "F")
-        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam, view=view,
-            prtnam=self.prtnam)
+        doPrinter(mf=self.mf, conum=self.conum, pdfnam=pdfnam,
+            repprt=self.repprt)
 
     def pageHeading(self, htyp="A", grn="A"):
         txt = "TABS for the %s of %s" % (self.timed, self.dated)
@@ -13030,17 +13235,16 @@
                 None = No Company
     conam   :   A string indicating the Company Name e.g. "Tartan Systems"
                 None = No Company Name
+    trtp    :   A list containing [col_name, sstrtp] e.g.
+                    ["crt_type", crtrtp]
     ttype   :   A string indicating whether the tables variable contains Table
                     Names or existing Data
                 "T" = Containing Table Names
                 "D" = Containing Data
     prtdia  :   Whether to have a printer and mail dialog, default is False or
                    print and mail parameters eg [("Y","V"), ("Y","N")]
-    view    :   A string indicating whether to display the report after
-                    generating it.  "V" = View, "P" = Print or "C/X" = Export
-    prtnam  :   The printers name if not viewing
-    mail    :   A list or string indicating who to email the report to after
-                    generating it.
+    repprt  :   A list derived from TartanDialog for print options
+    repeml  :   A list derived from TartanDialog for email options
     lines   :   A number of body lines to Print Between Page Breaks
     margin  :   A number of lines to use as a Bottom Margin for Page Breaks
     pbar    :   Progress Bar Message:
@@ -13052,21 +13256,44 @@
     blank   :   Blank zero values (only if refmt = True)
     pages   :   Whether to number pages, defaults to True
     tails   :   List of lines to print at the end of the report
+    wrkdir  :   The directory to use for temporary files
     """
     def __init__(self, mf, **args):
         self.mf = mf
         defaults = {
-            "name": "report", "tables": [], "joins": [], "heads": [],
-            "tails": [], "cols": [], "stots": [], "gtots": [], "where": [],
-            "group": None, "order": None, "pdffl": None, "opts": None,
-            "conum": None, "conam": None, "ttype": "T", "prtdia": False,
-            "view": "V", "prtnam": None, "mail": None, "lines": None,
-            "blank": False, "margin": 5, "pbar": "P", "refmt": True,
-            "pages": True, "trtp": None, "wrkdir": self.mf.rcdic["wrkdir"]}
+            "blank": False,
+            "cols": [],
+            "conam": None,
+            "conum": None,
+            "group": None,
+            "gtots": [],
+            "heads": [],
+            "joins": [],
+            "lines": None,
+            "margin": 5,
+            "name": "report",
+            "opts": None,
+            "order": None,
+            "pages": True,
+            "pbar": "P",
+            "pdffl": None,
+            "prtdia": False,
+            "refmt": True,
+            "repeml": None,
+            "repprt": None,
+            "stots": [],
+            "tables": [],
+            "tails": [],
+            "trtp": None,
+            "ttype": "T",
+            "where": [],
+            "wrkdir": self.mf.rcdic["wrkdir"]}
         for nam in args:
             defaults[nam] = args[nam]
         for nam in defaults:
             setattr(self, nam, defaults[nam])
+        if not self.prtdia and not self.repprt:
+            self.repprt = ["N", "V", "view"]
         self.fonts = []
         if self.heads:
             heads = []
@@ -13094,11 +13321,10 @@
         self.mf.startLoop()
 
     def doPrtEnd(self):
+        self.repprt = copyList(self.pr.repprt)
+        self.repeml = copyList(self.pr.repeml)
         self.xits = False
         self.pr.closeProcess()
-        self.view = self.pr.repprt[1]
-        self.prtnam = self.pr.repprt[2]
-        self.mail = self.pr.repeml[2]
         self.mf.closeLoop()
 
     def doPrtExit(self):
@@ -13152,6 +13378,7 @@
             self.formLayout()
             self.printReport(recs)
         else:
+            showError(self.mf.body, "Error", "No Available Records")
             self.xits = True
 
     def setConstants(self):
@@ -13402,7 +13629,7 @@
         self.pgnum = 0
         self.pglin = 999
         self.expdatas = []
-        if not self.prtnam == "export":
+        if not self.repprt[2] == "export":
             if self.heads[0]:
                 name = self.heads[0]
             else:
@@ -13429,7 +13656,7 @@
                 if pb.quit:
                     break
             if self.ttype == "D" and recs[x] == ["BLANK"]:
-                if not self.prtnam == "export":
+                if not self.repprt[2] == "export":
                     self.fpdf.drawText()
                     self.pglin += 1
                 else:
@@ -13442,7 +13669,7 @@
             ldic = {}
             for nam in fn:
                 t = self.fd[nam][0]
-                if t == "TX" and not self.prtnam == "export":
+                if t == "TX" and not self.repprt[2] == "export":
                     t = "NA"
                 s = self.fd[nam][1]
                 if not recs[x][num]:
@@ -13485,7 +13712,7 @@
                     for sq2 in xrange(0, sq1+1):
                         self.subTotal(self.stots[sq2])
                 setattr(self, "%s_str" % self.stots[sq1][0], f)
-            if not self.prtnam == "export" and self.pglin >= self.fpdf.lpp:
+            if not self.repprt[2] == "export" and self.pglin >= self.fpdf.lpp:
                 self.pageHeading()
             for gt in self.gtots:
                 gtot = getattr(self, "%s_gtot" % gt)
@@ -13503,7 +13730,7 @@
                         stot = stot + ldic[gt].work
                     setattr(self, "%s_%s_stot" % (gt, idx), stot)
                     idx += 1
-            if not self.prtnam == "export":
+            if not self.repprt[2] == "export":
                 self.fpdf.drawText(txt=self.h5hf % tuple(fld))
                 self.pglin += 1
             else:
@@ -13514,9 +13741,10 @@
                 return
         self.grandTotal()
         try:
-            if self.prtnam == "export":
-                err = doWriteExport(rcdic=self.mf.rcdic, xtype=self.view,
-                    name=self.expnam, heads=self.expheads, colsh=self.expcolsh,
+            if self.repprt[2] == "export":
+                err = doWriteExport(rcdic=self.mf.rcdic,
+                    xtype=self.repprt[1], name=self.expnam,
+                    heads=self.expheads, colsh=self.expcolsh,
                     forms=self.expforms, datas=self.expdatas)
                 if err:
                     showError(self.mf.body, "Export Error", err)
@@ -13527,13 +13755,12 @@
                         self.fpdf.drawText(txt=tail)
                 self.fpdf.output(self.pdfnam)
                 doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam,
-                    head=self.heads[-1], view=self.view, prtnam=self.prtnam,
-                    mail=self.mail)
+                    head=self.heads[-1], repprt=self.repprt, repeml=self.repeml)
         except:
             pass
 
     def pageHeading(self, htype=None):
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             return
         self.fpdf.add_page()
         self.fpdf.setFont(style="B")
@@ -13579,7 +13806,7 @@
         self.fpdf.setFont()
 
     def subTotal(self, col):
-        if self.prtnam == "export":
+        if self.repprt[2] == "export":
             self.expdatas.append(["ULINES"])
         else:
             self.fpdf.setFont(style="B")
@@ -13589,10 +13816,10 @@
         snum = self.stots.index(col)
         sdet = getattr(self, "%s_str" % col[0])
         self.printTotals("s", snum, sdet)
-        if not self.prtnam == "export" and col[2] == "Y":
+        if not self.repprt[2] == "export" and col[2] == "Y":
             self.pglin = 999
         elif not self.tot == "g":
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 self.expdatas.append(["BLANK", [""]])
             else:
                 self.fpdf.drawText()
@@ -13603,19 +13830,19 @@
         for stot in self.stots:
             self.subTotal(stot)
         if self.gtots:
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 self.expdatas.append(["ULINES"])
             else:
                 self.fpdf.setFont(style="B")
                 self.fpdf.underLine(t="S")
             self.printTotals("g")
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 self.expdatas.append(["ULINED"])
             else:
                 self.fpdf.underLine(t="D")
                 self.fpdf.setFont()
                 self.pglin += 2
-        if not self.prtnam == "export" and self.stots:
+        if not self.repprt[2] == "export" and self.stots:
             self.printSummary()
 
     def printTotals(self, typ, snum=None, sdet=None):
@@ -13681,7 +13908,7 @@
                 self.subsum.append(fld)
             else:
                 self.gndsum.append(fld)
-            if self.prtnam == "export":
+            if self.repprt[2] == "export":
                 self.expdatas.append(["TOTAL", cld])
             else:
                 self.fpdf.drawText(txt=self.tf % tuple(fld))
@@ -13723,11 +13950,11 @@
         where  = The where statement
         keys   = The Balances class key
         pdia   = The Print Dialog, defaults to True
-        prtnam = The Printer Name
-        mail   = The Email Address
+        repprt = The Printer Details
+        repeml = The Email Details
         export = Return the details
     """
-    def __init__(self, mf, conum=None, conam=None, name=None, head=None, tabs=None, cols=None, where=None, keys=None, pdia=True, prtnam=None, mail=None, export=False):
+    def __init__(self, mf, conum=None, conam=None, name=None, head=None, tabs=None, cols=None, where=None, keys=None, pdia=True, repprt=None, repeml=None, export=False):
         self.mf = mf
         self.conum = conum
         self.conam = conam
@@ -13741,8 +13968,8 @@
         self.where = where
         self.keys = keys
         self.pdia = pdia
-        self.prtnam = prtnam
-        self.mail = mail
+        self.repprt = repprt
+        self.repeml = repeml
         self.export = export
         self.setVariables()
         self.printReport()
@@ -13778,14 +14005,24 @@
                 max1 = len(self.dics[c][4])
             if max2 < int(self.dics[c][3]):
                 max2 = int(self.dics[c][3])
-            fld.append([self.dics[c][4], CCD(recs[self.cols.index(c)],
-                self.dics[c][2], self.dics[c][3]).disp])
-        if self.tabs.count("drsmst") and self.keys:
+            if self.tabs.count("ctlmst") and c == "ctm_modules":
+                mods = recs[self.cols.index("ctm_modules")]
+                newm = ""
+                for x in range(0, len(mods), 2):
+                    if not newm:
+                        newm = mods[x:x+2]
+                    else:
+                        newm += ",%s" % mods[x:x+2]
+                fld.append([self.dics[c][4], newm])
+            else:
+                fld.append([self.dics[c][4], CCD(recs[self.cols.index(c)],
+                    self.dics[c][2], self.dics[c][3]).disp])
+        if self.tabs.count("crsmst") and self.keys:
+            bals = Balances(self.mf, "CRS", self.conum, self.curdt, self.keys)
+            more = bals.doAllBals()
+        elif self.tabs.count("drsmst") and self.keys:
             bals = Balances(self.mf, "DRS", self.conum, self.curdt, self.keys)
             more = bals.doAllBals()
-        elif self.tabs.count("crsmst") and self.keys:
-            bals = Balances(self.mf, "CRS", self.conum, self.curdt, self.keys)
-            more = bals.doAllBals()
         elif self.tabs[0] == "strmf1" and self.keys:
             bals = Balances(self.mf, "STR", self.conum, self.curdt, self.keys)
             more = bals.doStrBals()
@@ -13810,20 +14047,20 @@
         cols = [
             ["a", "NA", (max1+5), "Field Name"],
             ["b", "NA",     max2,    "Details"]]
-        if not self.export and (self.pdia or self.prtnam or self.mail):
+        if not self.export and (self.pdia or self.repprt or self.repeml):
             if not self.pdia or type(self.pdia) in (list, tuple):
                 prtdia = self.pdia
             else:
                 prtdia = (("Y","V"),("Y","N"))
             rp = RepPrt(self.mf, name=self.name, tables=fld, heads=[self.head],
                 cols=cols, conum=self.conum, conam=self.conam, prtdia=prtdia,
-                ttype="D", prtnam=self.prtnam, mail=self.mail, refmt=False)
-            self.view = rp.view
-            self.mail = rp.mail
+                ttype="D", repprt=self.repprt, repeml=self.repeml, refmt=False)
+            self.repprt = rp.repprt
+            self.repeml = rp.repeml
             self.xits = rp.xits
         else:
-            self.view = None
-            self.mail = None
+            self.repprt = None
+            self.repeml = None
             self.xits = False
             self.mess = ""
             for f in fld:
@@ -13947,9 +14184,9 @@
         self.df = TartanDialog(self.mf, title=tit, eflds=fld, rows=row,
             butt=but, tend=tnd, txit=txt, cend=cnd, cxit=cxt)
 
-    def doUserName(self, frt, pag, r, c, p, i, nam):
-        self.unam = nam
-        usr = self.sql.getRec(tables="ctlpwu", where=[("usr_name", "=", nam)],
+    def doUserName(self, frt, pag, r, c, p, i, w):
+        self.unam = w
+        usr = self.sql.getRec(tables="ctlpwu", where=[("usr_name", "=", w)],
             limit=1)
         if not usr:
             self.new_usr = "y"
@@ -13974,18 +14211,18 @@
         if self.unam == "admin":
             return "sk1"
 
-    def doFullName(self, frt, pag, r, c, p, i, nam):
-        self.fnam = nam
+    def doFullName(self, frt, pag, r, c, p, i, w):
+        self.fnam = w
 
-    def doUserPwd1(self, frt, pag, r, c, p, i, pwd):
-        if not pwd and self.pwmust == "Y":
+    def doUserPwd1(self, frt, pag, r, c, p, i, w):
+        if not w and self.pwmust == "Y":
             return "You Must Have a Password"
-        if self.pwsize and len(pwd) < self.pwsize:
+        if self.pwsize and len(w) < self.pwsize:
             return "Minimum of %s Characters Required" % self.pwsize
-        self.pwd = pwd
+        self.pwd = w
 
-    def doUserPwd2(self, frt, pag, r, c, p, i, pwd):
-        if not pwd == self.pwd:
+    def doUserPwd2(self, frt, pag, r, c, p, i, w):
+        if not w == self.pwd:
             return "Passwords Do Not Match"
         if self.unam == "admin":
             self.cpy = "N"
@@ -13993,17 +14230,17 @@
             self.lvl = 9
             return "sk4"
 
-    def doCopyUser1(self, frt, pag, r, c, p, i, cpy):
-        self.cpy = cpy
+    def doCopyUser1(self, frt, pag, r, c, p, i, w):
+        self.cpy = w
         if self.cpy == "N":
             return "sk1"
 
-    def doCopyUser2(self, frt, pag, r, c, p, i, nam):
-        usr = self.sql.getRec(tables="ctlpwu", where=[("usr_name", "=", nam)],
+    def doCopyUser2(self, frt, pag, r, c, p, i, w):
+        usr = self.sql.getRec(tables="ctlpwu", where=[("usr_name", "=", w)],
             limit=1)
         if not usr:
             return "Invalid User Name"
-        self.cnam = nam
+        self.cnam = w
         self.coy = usr[self.sql.ctlpwu_col.index("usr_coy")]
         self.lvl = usr[self.sql.ctlpwu_col.index("usr_lvl")]
         if not self.coy:
@@ -14012,16 +14249,16 @@
             self.df.loadEntry(frt, pag, p+1, data=self.coy)
         self.df.loadEntry(frt, pag, p+2, data=self.lvl)
 
-    def doValCoy(self, frt, pag, r, c, p, i, coy):
+    def doValCoy(self, frt, pag, r, c, p, i, w):
         self.coy = ""
-        if coy and not coy == "All":
-            for c in coy.replace(" ", "").split(","):
+        if w and not w == "All":
+            for c in w.replace(" ", "").split(","):
                 try:
                     chk = self.sql.getRec(tables="ctlmst", where=[("ctm_cono",
                         "=", int(c))], limit=1)
                     if not chk:
                         raise Exception
-                    elif self.coy:
+                    if self.coy:
                         self.coy = "%s,%s" % (self.coy, c)
                     else:
                         self.coy = "%s" % c
@@ -14031,8 +14268,8 @@
         else:
             self.df.loadEntry(frt, pag, i, data="All")
 
-    def doSecLvl(self, frt, pag, r, c, p, i, lvl):
-        self.lvl = lvl
+    def doSecLvl(self, frt, pag, r, c, p, i, w):
+        self.lvl = w
 
     def doWriteUser(self):
         if self.pwd:
@@ -14084,8 +14321,8 @@
                 data.append(mod)
         self.df.colf[pag][2][8]["data"] = data
 
-    def doMod(self, frt, pag, r, c, p, i, prg):
-        self.prg = prg
+    def doMod(self, frt, pag, r, c, p, i, w):
+        self.prg = w
         if not self.prg:
             if self.con:
                 return "Invalid Module, Company Exists"
@@ -14098,19 +14335,19 @@
             self.df.loadEntry(frt, pag, p+1, data=pwd)
             self.df.loadEntry(frt, pag, p+2, data=pwd)
 
-    def doPw1(self, frt, pag, r, c, p, i, pwd):
-        self.pwd = pwd
+    def doPw1(self, frt, pag, r, c, p, i, w):
+        self.pwd = w
         if not self.pwd:
             return "sk1"
 
-    def doPw2(self, frt, pag, r, c, p, i, pwd):
-        if not pwd == self.pwd:
+    def doPw2(self, frt, pag, r, c, p, i, w):
+        if not w == self.pwd:
             return "Passwords do Not Match"
 
-    def doSelRet(self, frt, pag, r, c, p, i, sel):
-        self.con = sel[0]
-        self.sys = sel[1]
-        self.prg = sel[2]
+    def doSelRet(self, frt, pag, r, c, p, i, w):
+        self.con = w[0]
+        self.sys = w[1]
+        self.prg = w[2]
         self.pwd = self.getPassword()
         self.df.loadEntry(frt, pag, p, data=self.con)
         self.df.loadEntry(frt, pag, p+1, data=self.sys)
@@ -14447,9 +14684,10 @@
             self.doBackup()
             if self.mf.window and self.smtp and self.smtp[0]:
                 if self.bu.repeml[2]:
+                    dated = CCD(self.sysdtw, "D1", 10).disp
                     err = sendMail(self.smtp, self.coys[0][2],
-                        self.bu.repeml[2],
-                        "Tartan Backup for %s" % self.coys[0][1],
+                        self.bu.repeml[2], "Tartan Backup for %s at %s" %
+                        (self.coys[0][1], dated), self.bu.repeml[3],
                         attach=self.arcfle)
                     if err:
                         showError(self.mf.window, "Error",
@@ -14712,6 +14950,7 @@
     mchart   - A list of manual chart values
     xlab     - The x-axis's label
     ylab     - The y-axis's label
+    args     - The chart arguments
     """
     def __init__(self, mf, conum, conam, periods, title, achart, mchart, xlab=None, ylab=None, args=None):
         if not PYCHART:
@@ -14805,13 +15044,11 @@
 
     def doChtEnd(self):
         if self.args:
-            view = "V"
-            prtnam = "view"
-            mail = "N"
+            self.repprt = ["N", "V", "view"]
+            self.repeml = ["N", "N", "", "", "Y"]
         else:
-            view = self.dc.repprt[1]
-            prtnam = self.dc.repprt[2]
-            mail = self.dc.repeml[2]
+            self.repprt = copyList(self.dc.repprt)
+            self.repeml = copyList(self.dc.repeml)
         if self.col == "Y":
             pychart_theme.use_color = 1
         else:
@@ -14927,7 +15164,7 @@
         are.draw(cnv)
         cnv.close()
         doPrinter(mf=self.mf, conum=self.conum, pdfnam=self.pdfnam,
-            head=self.title[0], view=view, prtnam=prtnam, mail=mail)
+            head=self.title[0], repprt=self.repprt, repeml=self.repeml)
         if not self.args:
             self.dc.focusField("T",0,1)
 
@@ -15169,9 +15406,6 @@
         self.tadate = w
 
     def doEnd(self, widget=None):
-        self.view = self.df.repprt[1]
-        self.pnam = self.df.repprt[2]
-        self.mail = self.df.repeml[2]
         self.df.closeProcess()
         tab = ["ctlnot"]
         whr = [("not_cono", "=", self.conum), ("not_sys", "=", self.sys)]
@@ -15187,6 +15421,8 @@
             whr.append(("not_adate", "<=", self.tadate))
         odr = "not_key, not_date, not_seq"
         self.data = self.sql.getRec(tables=tab, where=whr, order=odr)
+        if not self.data:
+            showError(self.mf.body, "Error", "No Notes Selected")
         self.mf.closeLoop()
 
     def doExit(self, widget=None):
@@ -15310,7 +15546,7 @@
             "stype": "C",
             "titl": "Available Sheets",
             "head": ("Name",),
-            "type": (("NA",30),),
+            "typs": (("NA",30),),
             "data": []}
         r1s = (("Yes", "Y"), ("No", "N"))
         idx = onn = len(self.impfld)
@@ -16140,10 +16376,16 @@
     def account_details(self, cod, col, mst, seq=0):
         if "account_details" in self.tptp:
             dat = mst[col.index("%s_name" % cod)]
-            dat = "%1s\n%1s" % (dat, mst[col.index("%s_add1" % cod)])
-            dat = "%1s\n%1s" % (dat, mst[col.index("%s_add2" % cod)])
-            dat = "%1s\n%1s" % (dat, mst[col.index("%s_add3" % cod)])
-            dat = "%1s\n%1s" % (dat, mst[col.index("%s_pcod" % cod)])
+            try:
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_add1" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_add2" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_add3" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_pcod" % cod)])
+            except:
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_addr1" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_addr2" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_addr3" % cod)])
+                dat = "%1s\n%1s" % (dat, mst[col.index("%s_pcode" % cod)])
             if not seq:
                 self.tptp["account_details"][1] = dat
             else:
@@ -16203,7 +16445,7 @@
 class AboutTartan:
     def __init__(self, mf, ver):
         self.mf = mf
-        self.about = MyFrame(self.mf.window, borderwidth=2, relief="ridge")
+        self.about = MyFrame(self.mf.window, borderwidth=2, bg="black")
         self.about.place(anchor="center", relx=0.5, rely=0.5)
         info = """
 Tartan Systems %s

=== modified file 'std/tartanFunctions.py'
--- std/tartanFunctions.py	2015-08-26 08:52:51 +0000
+++ std/tartanFunctions.py	2015-10-01 15:43:15 +0000
@@ -457,11 +457,13 @@
      splash = Display a Splash Screen
      head   = Heading Used as Subject of Mail
      repprt = A list containing the following:
+                Y or N widget created
                 Output Report to (V)iew, (P)rinter ot e(X)port
                 Printer Name, view, export or blank
      repeml = A list containing the following:
+                Y or N widget created
                 Y or N to email the report
-                Email addresses
+                Email addresses in a comma delimited string or a list/tuple
                 Email message
                 Whether to print/view the emailed report
      fromad = The from address if not the default company one.
@@ -472,7 +474,7 @@
     from TartanClasses import Dbase, SplashScreen, Sql
 
     # Email Document
-    if repprt[0] == "Y":
+    if repeml and repeml[1] == "Y" and repeml[2]:
         ok = None
         try:
             dbm = Dbase(mf.rcdic)
@@ -488,10 +490,10 @@
                 "ctm_email"], where=[("ctm_cono", "=", conum)], limit=1)
             if not fromad:
                 fromad = smtp[6]
-            if type(repeml[1]) == str:
-                mail = repeml[1].split(",")
+            if type(repeml[2]) == str:
+                toad = repeml[2].split(",")
             else:
-                mail = repeml[1]
+                toad = repeml[2]
             if repeml[3]:
                 if type(repeml[3]) in (list, tuple):
                     subj, mess = repeml[3]
@@ -515,19 +517,19 @@
                 if splash:
                     sp = SplashScreen(mf.body,
                         "E-Mailing the Report to:\n\n%s\n\nPlease Wait....." %
-                        mail[0])
+                        toad[0])
                 if not attach or not attach[0]:
                     att = [pdfnam]
                 else:
                     att = [pdfnam] + copyList(attach)
-                err = sendMail(smtp[0:6], fromad, mail, subj, mess, attach=att)
+                err = sendMail(smtp[0:6], fromad, toad, subj, mess, attach=att)
                 if err:
                     if skip:
                         ok = "SKIPPED"
                     else:
                         ok = askQuestion(mf.window, "E-Mail Error", "Problem "\
                             "Delivering This Message.\n\nTo: %s\nSubject: "\
-                            "%s\n\nWould You Like to Retry?" % (mail, subj))
+                            "%s\n\nWould You Like to Retry?" % (toad, subj))
                         if ok == "yes":
                             ok = None
                         else:
@@ -541,8 +543,8 @@
                 ok = "UNKNOWN"
         # Try and Log the email status into table emllog
         try:
-            for toadd in mail:
-                sql.insRec("emllog", data=[fromad.strip(), toadd.strip(),
+            for add in toad:
+                sql.insRec("emllog", data=[fromad.strip(), add.strip(),
                     subj, "%04i-%02i-%02i %02i:%02i" % time.localtime()[0:5],
                     ok], excp=True)
         except:
@@ -556,14 +558,14 @@
             return
     # Print Document
     try:
-        if repprt[0].lower() == "x" or repprt[1] == "export":
+        if repprt and (repprt[1].lower() == "x" or repprt[2] == "export"):
             return
-        if repprt[0].lower() == "v" or repprt[1] == "view":
+        if repprt and (repprt[1].lower() == "v" or repprt[2] == "view"):
             # Execute viewer command
             exe, cmd = parsePrg(mf.rcdic["vwr"])
             cmd.append(pdfnam)
             os.spawnv(os.P_WAIT, exe, tuple(cmd))
-        elif repprt[1] and repprt[1].lower() != "none":
+        elif repprt and (repprt[2] and repprt[2].lower() != "none"):
             if splash:
                 sp = SplashScreen(mf.body,
                     "Printing the Report\n\n           Please Wait....")
@@ -579,42 +581,44 @@
             exe, cmd = parsePrg(mf.rcdic["prn"])
             if sys.platform == "win32":
                 # Windows
-                if repprt[1] == "Default":
+                if repprt[2] == "Default":
                     import win32print
-                    repprt[1] = win32print.GetDefaultPrinter()
+                    repprt[2] = win32print.GetDefaultPrinter()
                 if exe.lower().count("acrord32"):
-                    cmd.extend(["/t", pfl, '"%s"' % repprt[1]])
+                    cmd.extend(["/t", pfl, '"%s"' % repprt[2]])
                 elif exe.lower().count("foxit"):
-                    cmd.extend(["/t", pfl, '"%s"' % repprt[1]])
+                    cmd.extend(["/t", pfl, '"%s"' % repprt[2]])
                 elif exe.lower() == "gsprint.exe":
-                    cmd.extend(["-printer", '"%s"' % repprt[1], pfl])
+                    cmd.extend(["-printer", '"%s"' % repprt[2], pfl])
                 elif exe.lower().count("pdfp"):
-                    cmd.extend(["-p", '"%s"' % repprt[1], pfl])
+                    cmd.extend(["-p", '"%s"' % repprt[2], pfl])
                 elif exe.lower() == "redpr.exe":
-                    cmd.extend(["-P", '"%s"' % repprt[1], pfl])
+                    cmd.extend(["-P", '"%s"' % repprt[2], pfl])
                 elif exe.lower().count("sumatra"):
-                    cmd.extend(["-print-to", '"%s"' % repprt[1], pfl])
+                    cmd.extend(["-print-to", '"%s"' % repprt[2], pfl])
                 else:
                     cmd.append(pfl)
             elif mf.rcdic["cnv"]:
                 # Linux with pdf convert
-                if repprt[1] == "Default":
+                if repprt[2] == "Default":
                     cmd.append(pfl)
                 else:
-                    cmd.extend([("-P%s" % repprt[1]), (pfl)])
-            elif repprt[1] == "Default":
+                    cmd.extend([("-P%s" % repprt[2]), (pfl)])
+            elif repprt[2] == "Default":
                 # Linux without pdf convert using default printer
                 cmd.append(pfl)
             else:
                 # Linux without pdf convert using selected printer
-                cmd.extend(["-P", repprt[1], pfl])
+                cmd.extend(["-P", repprt[2], pfl])
             os.spawnv(os.P_NOWAIT, exe, tuple(cmd))
             if splash:
                 sp.closeSplash()
     except:
         if splash:
             sp.closeSplash()
-        showException(mf.window, mf.rcdic["wrkdir"], "Output Error")
+        showException(mf.window, mf.rcdic["wrkdir"],
+            "Output Error\nCnv: %s\nPrn: %s" %
+            (mf.rcdic["cnv"], mf.rcdic["prn"]))
         return
 
 def textFormat(text, width=30, blong=True):
@@ -781,48 +785,42 @@
         dd = mthnam[mm][2]
     return (yy * 10000) + (mm * 100) + dd
 
-def projectDate(date, days, act="+"):
-    """
-    Function to return a date which is the result of a date +- days
-    """
-    from tartanWork import mthnam
-
-    chkmth = copyList(mthnam)
-    adate = str(date)
-    yy = int(adate[0:4])
-    mm = int(adate[4:6])
-    if act == "+":
-        dd = int(adate[6:8]) + days
-        while days:
-            if not yy % 4:
-                chkmth[2][2] = 29
-            else:
-                chkmth[2][2] = 28
-            if dd > chkmth[mm][2]:
-                dd -= chkmth[mm][2]
-                mm += 1
-                if mm > 12:
-                    mm = 1
-                    yy += 1
-            else:
-                break
-    else:
-        dd = int(adate[6:8]) - days
-        while days:
-            if dd <= 0:
-                mm -= 1
-                if mm == 0:
-                    mm = 12
-                    yy -= 1
-                if not yy % 4:
-                    chkmth[2][2] = 29
-                else:
-                    chkmth[2][2] = 28
-                dd += chkmth[mm][2]
-            else:
-                break
-    prjdate = (yy * 10000) + (mm * 100) + dd
-    return prjdate
+def projectDate(date, period, typ="days"):
+    """
+    Function to return a date which is the result of a date +- period
+
+    typ can be days, months or years
+    """
+    import datetime
+
+    yy = date / 10000
+    mm = date / 100 % 100
+    dd = date % 100
+    mthend = False
+    if (typ == "days" and period == 365) or typ in ("months", "years"):
+        if date == mthendDate(date):
+            mthend = True
+    if typ == "days":
+        date = datetime.date(yy, mm, dd)
+        ndate = date + datetime.timedelta(days=period)
+        yy = ndate.year
+        mm = ndate.month
+        dd = ndate.day
+    elif typ == "months":
+        mm += period
+        while mm > 12:
+            mm -= 12
+            yy += 1
+        while mm < 1:
+            mm += 12
+            yy -= 1
+    else:
+        yy += period
+    date = (yy * 10000) + (mm * 100) + dd
+    if mthend:
+        return mthendDate(date)
+    else:
+        return date
 
 def paymentDate(base, stday, terms, trdt):
     """
@@ -842,11 +840,11 @@
             if stmt > 12:
                 styr += 1
                 stmt = 1
-        lmed = mthendDate((styr*10000) + (stmt*100) + 1)
+        lmed = mthendDate((styr * 10000) + (stmt * 100) + 1)
         if stday == 31 or stday > lmed % 100:
             stdt = lmed
         else:
-            stdt = (styr*10000) + (stmt*100) + stday
+            stdt = (styr * 10000) + (stmt * 100) + stday
         pyyr = stdt / 10000
         pymt = stdt / 100 % 100
         if terms in (30, 31):
@@ -854,8 +852,8 @@
             if pymt > 12:
                 pyyr += 1
                 pymt = 1
-            lmed = mthendDate((pyyr*10000) + (pymt*100) + 1)
-            paydt = (pyyr*10000) + (pymt*100) + stday
+            lmed = mthendDate((pyyr * 10000) + (pymt * 100) + 1)
+            paydt = (pyyr * 10000) + (pymt * 100) + stday
             if stday == 31 or paydt > lmed:
                 paydt = lmed
         else:
@@ -883,11 +881,9 @@
     Function to return a julian date from an iso date
     """
     cmon = [0,31,59,90,120,151,181,212,243,273,304,334]
-    adate = str(date)
-    dt = int(adate)
-    y = dt / 10000
-    m = (dt / 100) - (y * 100)
-    d = dt % 100
+    y = date / 10000
+    m = (date / 100) - (y * 100)
+    d = date % 100
     l = y / 4
     r = y % 4
     if r:
@@ -904,10 +900,8 @@
     from tartanWork import mthnam
 
     chkmth = copyList(mthnam)
-    adate = str(jdate)
-    dt = int(adate)
-    y = dt / 365
-    d = (dt % 365)
+    y = jdate / 365
+    d = (jdate % 365)
     l = y / 4
     d = d - l
     r = y % 4
@@ -1860,7 +1854,7 @@
         table.append([cols[n]] + [rows[n]] + rest[n])
     for r in table:
         if len(r) > 4 and r[4]:
-            fpdf.set_fill_color(int(255*r[4]))
+            fpdf.set_fill_color(int(255 * r[4]))
             fill = 1
         else:
             fill = 0
@@ -1879,14 +1873,14 @@
                 yy = round(y * ld, 2)
                 if len(r) > 5:
                     txt = r[5]
-                    fpdf.drawText(x=xx, y=yy, w=r[2]*cw, h=r[3]*ld,
+                    fpdf.drawText(x=xx, y=yy, w=r[2] * cw, h=r[3] * ld,
                         align=align, border="TLRB", fill=fill, txt=txt)
                 else:
                     if fill:
                         style = "DF"
                     else:
                         style = "D"
-                    fpdf.rect(xx, yy, r[2]*cw, r[3]*ld, style=style)
+                    fpdf.rect(xx, yy, r[2] * cw, r[3] * ld, style=style)
     return last, table
 
 def getDeposit(mf, conum, date, owner, code, acno):
@@ -2140,8 +2134,8 @@
         selc = list(cols).index(selcol)
     else:
         selc = None
-    sc = SChoice(mf, scrn=mf.window, deco=False, titl=title, head=head,
-        typs=types, data=lines, rows=None, retn="I", mode="M", selc=selc)
+    sc = SChoice(mf, scrn=mf.window, titl=title, head=head, typs=types,
+        data=lines, rows=None, retn="I", mode="M", selc=selc)
     mf.window.update()
     if sc.selection:
         for idx in sc.selection:
@@ -2155,7 +2149,7 @@
     recs = sql.getRec(tables="ctlvrf", cols=["vtr_rate"], where=where,
         order="vtr_date")
     if recs:
-        return recs[-1]
+        return recs[-1][0]
 
 def runModule(name, **popt):
     mod = __import__(name, globals(), locals(), [], 0)

=== modified file 'std/tartanWork.py'
--- std/tartanWork.py	2015-08-25 15:02:35 +0000
+++ std/tartanWork.py	2015-09-15 06:39:12 +0000
@@ -110,14 +110,13 @@
     ("Pmt", "Payment"),
     ("Dis", "Set-Discount")]
 #
-# Loans
-#------
+# Loans"s Ledger
+#---------------
 lntrtp = [
-    ("Int", "Interest"),
-    ("Lon", "Loans"),
-    ("Adv", "Advance"),
+    ("Pmt", "Payment"),
     ("Rec", "Receipt"),
-    ("J/E", "Journals")]
+    ("J/E", "Journal"),
+    ("Int", "Interest")]
 #
 # Member's Ledger
 #----------------
@@ -152,6 +151,15 @@
     ("Pmt", "Payment"),
     ("J/E", "Journal Entry")]
 #
+# Staff Loans
+#------------
+sltrtp = [
+    ("Int", "Interest"),
+    ("Lon", "Loans"),
+    ("Adv", "Advance"),
+    ("Rec", "Receipt"),
+    ("J/E", "Journals")]
+#
 # Stores Ledger
 #--------------
 sttrtp = [
@@ -176,6 +184,7 @@
     "remittance_advice",
     "remittance_rnehol",
     "sales_document",
+    "statement_loan",
     "statement_member",
     "statement_normal",
     "statement_other",
@@ -291,6 +300,7 @@
         "tables": {
             "BKM": ["bkmmst", "bkmcon", "bkmtrn"],
             "DRS": ["drschn", "drsmst", "drstrn"],
+            "LON": ["lonmf1", "lonmf2", "lontrn"],
             "MEM": ["memmst", "memtrn"],
             "RCA": ["rcaowm", "rcaowt", "rcaprm", "rcatnm", "rcatnt"],
             "RTL": ["rtlmst", "rtltrn", "rtlprm", "rtlcon"]},

=== modified file 'str/st1010.py'
--- str/st1010.py	2015-08-25 15:02:35 +0000
+++ str/st1010.py	2015-09-29 08:29:35 +0000
@@ -117,7 +117,7 @@
         tag = (
             ("Basic-_A",None,("T",0,0),("T",0,1)),
             ("Basic-_B",None,("T",0,0),("T",0,1)),
-            ("Recipes",self.doReadLoadRecipe,("T",1,1),("T",0,1)))
+            ("Recipes",self.doReadLoadRecipe,None,("T",0,1)))
         r1s = (("Normal","N"), ("Recipe","R"))
         r2s = (("Average","A"), ("Standard","S"), ("None","N"))
         r3s = (("Manual","M"), ("Automatic","A"), ("Zero","N"))
@@ -187,10 +187,9 @@
             clicks=self.doClick)
 
     def doClick(self, *opts):
-        if self.df.pag == 0:
+        if self.df.pag == 0 or not self.gtype:
             return
         if opts[0] == (1, 0) and not self.newcode:
-            # Type of Item
             return
         if self.click:
             self.df.loadEntry("T", self.click[0], self.click[1],
@@ -215,6 +214,7 @@
             "=", w)], limit=1)
         if not self.old1:
             self.newcode = True
+            self.gtype = None
         else:
             self.newcode = False
             d = 3
@@ -291,6 +291,10 @@
 
     def doType(self, frt, pag, r, c, p, i, w):
         self.gtype = w
+        if self.gtype == "R":
+            self.df.enableTag(2)
+        else:
+            self.df.disableTag(2)
 
     def doUoi(self, frt, pag, r, c, p, i, w):
         acc = self.getUoi(w)
@@ -456,6 +460,7 @@
                 "stype": "C",
                 "titl": titl,
                 "head": head,
+                "typs": (("NA", 3), ("NA", 20), ("NA", 30), ("SD", 10.2)),
                 "data": data}
             state = self.df.disableButtonsTags()
             self.opts["mf"].updateStatus("Select a Product to Edit")

=== modified file 'str/st2010.py'
--- str/st2010.py	2015-08-26 08:52:51 +0000
+++ str/st2010.py	2015-09-28 09:40:19 +0000
@@ -16,14 +16,15 @@
 import time
 from TartanClasses import ASD, Balances, CCD, GetCtl, PrintOrder, PwdConfirm
 from TartanClasses import Sql, TartanDialog
-from tartanFunctions import callModule, getVatRate, showError, showPrinters
+from tartanFunctions import callModule, getVatRate, showError
 
 class st2010:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
+            self.exit = False
             self.getPrinters()
-            if self.prtnam != "cancel":
+            if not self.exit:
                 self.mainProcess()
                 self.opts["mf"].startLoop()
 
@@ -34,13 +35,6 @@
         if self.sql.error:
             return
         gc = GetCtl(self.opts["mf"])
-        ctlsys = gc.getCtl("ctlsys")
-        if not ctlsys:
-            return
-        if ctlsys["sys_msvr"]:
-            self.email = "Y"
-        else:
-            self.email = "N"
         ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
         if not ctlmst:
             return
@@ -84,31 +78,17 @@
                 ("tpm_type", "=", "O"),
                 ("tpm_system", "=", "STR")],
             "order": "tpm_tname"}
-        self.printers = showPrinters()
-        prt = {
-            "stype": "C",
-            "titl": "Available Printers",
-            "head": ("Name","Description"),
-            "data": self.printers}
         r1s = (("Yes","Y"),("No","N"))
-        r2s = (("Print","P"),("View","V"),("None","N"))
-        fld = [
+        fld = (
             (("T",0,0,0),"INA",20,"Template Name","",
                 self.dtpl,"N",self.doTplNam,tpm,None,None),
             (("T",0,1,0),"ID1",10,"Order Date","",
                 self.sysdtw,"N",self.doOrdDate,None,None,("efld",)),
             (("T",0,2,0),("IRB",r1s),0,"Auto Markup","Automatic Markup",
-                self.automu,"N",self.doAutoMkUp,None,None,None),
-            (("T",0,3,0),("IRB",r2s),0,"Choice","Select Choice",
-                "P","N",self.doPrtChoice,None,None,None),
-            (("T",0,4,0),"INA",30,"Printer","Printer Name",
-                "Default","Y",self.doPrtNam,prt,None,None)]
-        if self.email == "Y":
-            fld.append(
-            (("T",0,5,0),("IRB",r1s),0,"E-Mail","E-Mail Document",
-                "Y","N",self.doPrtMail,None,None,None))
+                self.automu,"N",self.doAutoMkUp,None,None,None))
         self.pr = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,))
+            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,),
+            view=("N","P"), mail=("N","Y", "Y"))
         self.opts["mf"].startLoop()
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -129,28 +109,11 @@
     def doAutoMkUp(self, frt, pag, r, c, p, i, w):
         self.mkup = w
 
-    def doPrtChoice(self, frt, pag, r, c, p, i, w):
-        if w == "P":
-            return "ok"
-        if w == "V":
-            self.prtnam = "view"
-        else:
-            self.prtnam = "none"
-        return "sk1"
-
-    def doPrtNam(self, frt, pag, r, c, p, i, w):
-        if w not in self.printers:
-            return "Invalid Printer"
-        self.prtnam = w
-
-    def doPrtMail(self, frt, pag, r, c, p, i, w):
-        self.email = w
-
     def doPrtEnd(self):
         self.doPrtClose()
 
     def doPrtExit(self):
-        self.prtnam = "cancel"
+        self.exit = True
         self.doPrtClose()
 
     def doPrtClose(self):
@@ -301,16 +264,6 @@
                 self.df.butt[x][1] = 1
                 self.df.butt[x][2] = ["C", 0, 1]
         if self.acttyp == "N":
-            # Get and Display Next Document Number
-            ordno = self.sql.getRec(tables="strpom", cols=["max(pom_ordno)"],
-                where=[("pom_cono", "=", self.opts["conum"])], limit=1)
-            if not ordno[0]:
-                self.ordno = CCD(1, "UI", 9).work
-                self.othno = CCD(1, "Na", 9).work
-            else:
-                self.ordno = CCD((int(ordno[0]) + 1), "UI", 9).work
-                self.othno = CCD((int(ordno[0]) + 1), "Na", 9).work
-            self.df.loadEntry(self.df.frt, self.df.pag, 1, data=self.ordno)
             # Location default
             if self.locs == "N":
                 self.loc = "1"
@@ -381,6 +334,16 @@
 
     def doTopEnd(self):
         if self.acttyp == "N":
+            # Get and Display Next Document Number
+            ordno = self.sql.getRec(tables="strpom", cols=["max(pom_ordno)"],
+                where=[("pom_cono", "=", self.opts["conum"])], limit=1)
+            if not ordno[0]:
+                self.ordno = CCD(1, "UI", 9).work
+                self.othno = CCD(1, "Na", 9).work
+            else:
+                self.ordno = CCD((int(ordno[0]) + 1), "UI", 9).work
+                self.othno = CCD((int(ordno[0]) + 1), "Na", 9).work
+            self.df.loadEntry(self.df.frt, self.df.pag, 1, data=self.ordno)
             # Create Document Transaction (Head)
             self.dad1, self.dad2, self.dad3, self.dad4 = "", "", "", ""
             data = [self.opts["conum"], self.ordno, self.loc, self.trdt,
@@ -389,12 +352,13 @@
             # Write and Commit Header
             self.sql.insRec("strpom", data=data)
             self.opts["mf"].dbm.commitDbase()
+            # Clear Totals
             self.doClearTots()
         elif self.acttyp == "C":
             # Print Deletetion
-            PrintOrder(self.opts["mf"], self.opts["conum"], self.ordno,
-                prtnam=self.prtnam, tname=self.tname, email=self.email,
-                copy="d", commit=False)
+            PrintOrder(self.opts["mf"], self.opts["conum"], self.opts["conam"],
+                self.ordno, tname=self.tname, repprt=self.pr.repprt,
+                repeml=self.pr.repeml, copy="d", commit=False)
             # Update Deletetion
             self.sql.updRec("strpom", cols=["pom_delno"], data=["cancel"],
                 where=[("pom_cono", "=", self.opts["conum"]), ("pom_ordno",
@@ -512,11 +476,10 @@
         self.df.loadEntry(frt, pag, p+1, data=units)
 
     def doVat(self, frt, pag, r, c, p, i, w):
-        vat = getVatRate(self.sql, self.opts["conum"], w, self.trdt)
-        if not vat:
+        self.vatrte = getVatRate(self.sql, self.opts["conum"], w, self.trdt)
+        if self.vatrte is None:
             return "Invalid V.A.T Code"
         self.vatcod = w
-        self.vatrat = vat[0]
         # Last Cost Price
         bal = Balances(self.opts["mf"], "STR", self.opts["conum"], self.curdt,
             (self.grp, self.code, self.loc, ("P", self.opts["period"][0])))
@@ -529,7 +492,7 @@
 
     def doPri(self, frt, pag, r, c, p, i, w):
         self.price = w
-        self.inc = round((self.price * self.vatrat / 100.0), 4)
+        self.inc = round((self.price * self.vatrte / 100.0), 4)
         self.exc = round((self.price * 1), 2)
         dis = self.crsmst[self.sql.crsmst_col.index("crm_trdis")]
         self.df.loadEntry(frt, pag, p+1, data=dis)
@@ -548,7 +511,7 @@
         # Create Purchase Order Transaction (Body)
         data = [self.opts["conum"], self.ordno, self.grp, self.code,
             self.uoi, self.unt, self.desc, self.qty, self.price,
-            self.disrat, self.vatcod, self.vatrat, self.opts["capnm"],
+            self.disrat, self.vatcod, self.vatrte, self.opts["capnm"],
             self.sysdtw, 0]
         self.sql.insRec("strpot", data=data)
         if self.acttyp == "A":
@@ -576,24 +539,24 @@
             (("T",0,3,0),"INA",30,"Address-4","Address Line 4",
                 "","N",None,None,None,None))
         state = self.df.disableButtonsTags()
-        self.tx = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.da = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, tend=((self.doDelEnd,"n"),), txit=(self.doDelExit,),
             focus=False)
         for x in xrange(0, len(self.deladd)):
-            self.tx.loadEntry("T", 0, 0+x, data=self.deladd[x])
-        self.tx.focusField("T", 0, 1, clr=False)
+            self.da.loadEntry("T", 0, 0+x, data=self.deladd[x])
+        self.da.focusField("T", 0, 1, clr=False)
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def doDelEnd(self):
         self.deladd = []
-        for x in xrange(0, self.tx.topq[0]):
-            self.deladd.append(self.tx.t_work[0][0][x])
+        for x in xrange(0, self.da.topq[0]):
+            self.deladd.append(self.da.t_work[0][0][x])
         self.doDelExit()
 
     def doDelExit(self):
-        self.tx.closeProcess()
+        self.da.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doMessag(self, widget=None):
@@ -613,7 +576,7 @@
                 self.message,"N",None,None,None,None))
         but = (("Accept",None,self.doMesEnd,0,("T",0,1),("T",0,0)),)
         state = self.df.disableButtonsTags()
-        self.tx = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.mg = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, tend=((self.doMesEnd,"n"),), txit=(self.doMesExit,),
             butt=but)
         self.opts["mf"].startLoop()
@@ -628,14 +591,14 @@
             if not mess:
                 return "Invalid Message Code"
             self.message = mess[self.sql.ctlmse_col.index("mss_detail")]
-            self.tx.loadEntry(frt, pag, p+1, data=self.message)
+            self.mg.loadEntry(frt, pag, p+1, data=self.message)
 
     def doMesEnd(self, widget=None):
-        wid, self.message = self.tx.getEntry("T", 0, 1)
+        wid, self.message = self.mg.getEntry("T", 0, 1)
         self.doMesExit()
 
     def doMesExit(self):
-        self.tx.closeProcess()
+        self.mg.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doEdit(self, widget=None):
@@ -654,11 +617,13 @@
                     qty.disp,
                     l[self.sql.strpot_col.index("pot_vatcod")],
                     prc.disp, dis.disp])
-            head = ("Grp", "Product-Code", "Description", " Quantity",
-                "V", "    Price", "Disc-%")
+            head = ("Grp", "Product-Code", "Description", "Quantity",
+                "V", "Price", "Disc-%")
             lin = {
                 "stype": "C",
                 "head": head,
+                "typs": (("NA", 3), ("NA", 20), ("NA", 30), ("SD", 10.2),
+                    ("UA", 1), ("SD", 9.2), ("UD", 6.2)),
                 "data": data}
             state = self.df.disableButtonsTags()
             chg = self.df.selChoice(lin)
@@ -756,37 +721,36 @@
             [("T",0,1,0),"IUI",9,"To   Number","To Document Number",
                 "","N",None,odr,None,("notzero",)])
         state = self.df.disableButtonsTags()
-        self.tx = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.rp = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, tend=((self.doReprntEnd,"n"),),
-            txit=(self.doReprntExit,), view=("N","V"), mail=("B","N"))
+            txit=(self.doReprntExit,), view=("N","V"), mail=("B","Y"))
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
 
     def doOrd(self, frt, pag, r, c, p, i, w):
-        self.tx.topf[pag][1][5] = w
+        self.rp.topf[pag][1][5] = w
 
     def doReprntEnd(self):
-        self.tx.closeProcess()
+        self.rp.closeProcess()
         self.df.setWidget(self.df.mstFrame, state="hide")
-        frm = self.tx.t_work[0][0][0]
-        if not self.tx.t_work[0][0][1]:
+        frm = self.rp.t_work[0][0][0]
+        if not self.rp.t_work[0][0][1]:
             to = frm
         else:
-            to = self.tx.t_work[0][0][1]
-        prt = self.tx.repprt[2]
-        eml = self.tx.repeml[1:3]
+            to = self.rp.t_work[0][0][1]
         odr = self.sql.getRec(tables="strpom", cols=["pom_ordno"],
             where=[("pom_cono", "=", self.opts["conum"]), ("pom_ordno", ">=",
             frm), ("pom_ordno", "<=", to)])
         if odr:
-            PrintOrder(self.opts["mf"], self.opts["conum"], odr, prtnam=prt,
-                tname=self.tname, email=eml, copy="y")
+            PrintOrder(self.opts["mf"], self.opts["conum"], self.opts["conam"],
+                odr, tname=self.tname, repprt=self.rp.repprt,
+                repeml=self.rp.repeml, copy="y")
         self.df.setWidget(self.df.mstFrame, state="show")
         self.opts["mf"].closeLoop()
 
     def doReprntExit(self):
-        self.tx.closeProcess()
+        self.rp.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doCrsMaint(self, widget=None):
@@ -817,13 +781,14 @@
         else:
             # Update Tables
             self.doUpdateTables()
-            # COMMIT Transaction
+            # Commit Transaction
             self.opts["mf"].dbm.commitDbase()
             # Print Document
             if self.acttyp == "N" or (self.acttyp == "A" and self.amend):
                 self.df.setWidget(self.df.mstFrame, state="hide")
-                PrintOrder(self.opts["mf"], self.opts["conum"], self.ordno,
-                    prtnam=self.prtnam, tname=self.tname, email=self.email,
+                PrintOrder(self.opts["mf"], self.opts["conum"],
+                    self.opts["conam"], self.ordno, tname=self.tname,
+                    repprt=self.pr.repprt, repeml=self.pr.repeml,
                     copy=self.acttyp.lower())
                 self.df.setWidget(self.df.mstFrame, state="show")
             self.df.focusField("T", 0, 1)
@@ -840,15 +805,15 @@
             (("T",0,3,0),"INA",10,"VAT Number","",
                 self.vatn,"N",self.doVatNum,None,None,None))
         state = self.df.disableButtonsTags()
-        self.tx = TartanDialog(self.opts["mf"], title=tit, tops=True,
+        self.rb = TartanDialog(self.opts["mf"], title=tit, tops=True,
             eflds=fld, tend=((self.doRibEnd,"n"),), txit=(self.doRibExit,),
             focus=False)
         if self.ribbon:
-            self.tx.loadEntry("T", 0, 0, data=self.ribbon[0])
-            self.tx.loadEntry("T", 0, 1, data=self.ribbon[1])
-            self.tx.loadEntry("T", 0, 2, data=self.ribbon[2])
-            self.tx.loadEntry("T", 0, 3, data=self.ribbon[3])
-        self.tx.focusField("T", 0, 1)
+            self.rb.loadEntry("T", 0, 0, data=self.ribbon[0])
+            self.rb.loadEntry("T", 0, 1, data=self.ribbon[1])
+            self.rb.loadEntry("T", 0, 2, data=self.ribbon[2])
+            self.rb.loadEntry("T", 0, 3, data=self.ribbon[3])
+        self.rb.focusField("T", 0, 1)
         self.opts["mf"].startLoop()
         self.df.enableButtonsTags(state=state)
         self.df.focusField(self.df.frt, self.df.pag, self.df.col)
@@ -859,12 +824,12 @@
 
     def doRibEnd(self):
         self.ribbon = []
-        for x in xrange(0, self.tx.topq[0]):
-            self.ribbon.append(self.tx.t_work[0][0][x])
+        for x in xrange(0, self.rb.topq[0]):
+            self.ribbon.append(self.rb.t_work[0][0][x])
         self.doRibExit()
 
     def doRibExit(self):
-        self.tx.closeProcess()
+        self.rb.closeProcess()
         self.opts["mf"].closeLoop()
 
     def doUpdateTables(self):
@@ -965,9 +930,9 @@
         self.price = line[self.sql.strpot_col.index("pot_price")]
         self.disrat = line[self.sql.strpot_col.index("pot_disper")]
         self.vatcod = line[self.sql.strpot_col.index("pot_vatcod")]
-        self.vatrat = line[self.sql.strpot_col.index("pot_vatrat")]
+        self.vatrte = line[self.sql.strpot_col.index("pot_vatrat")]
         # Calculate Values
-        rat = float(ASD(100) + ASD(self.vatrat))
+        rat = float(ASD(100) + ASD(self.vatrte))
         inc = round((self.price * rat / 100.0), 4)
         exc = round((self.price * 1), 2)
         dis = float(ASD(100) - ASD(self.disrat))

=== modified file 'str/st2020.py'
--- str/st2020.py	2015-08-26 08:52:51 +0000
+++ str/st2020.py	2015-08-28 11:56:02 +0000
@@ -16,14 +16,15 @@
 import time
 from TartanClasses import ASD, CCD, FileImport, GetCtl, RepPrt, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import callModule, showError, showPrinters
+from tartanFunctions import callModule, showError
 
 class st2020:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
+            self.exit = False
             self.setPrinter()
-            if self.prtnam != "cancel":
+            if not self.exit:
                 self.dataHeader()
                 self.opts["mf"].startLoop()
 
@@ -63,62 +64,16 @@
 
     def setPrinter(self):
         tit = ("Printer Selection",)
-        self.printers = showPrinters()
-        prt = {
-            "stype": "C",
-            "titl": "Available Printers",
-            "head": ("Name","Description"),
-            "data": self.printers}
-        r1s = (("Print","P"),("View","V"),("None","N"))
-        r2s = (("Yes","Y"),("No","N"))
-        fld = [
-            (("T",0,0,0),("IRB",r1s),0,"Choice","Select Choice",
-                "P","N",self.doPrtChoice,None,None,None),
-            (("T",0,1,0),"INA",30,"Printer","Printer Name",
-                "Default","Y",self.doPrtNam,prt,None,None)]
-        if self.email == "Y":
-            fld.extend([
-            (("T",0,2,0),("IRB",r2s),0,"E-Mail","E-Mail Document",
-                "N","N",self.doPrtMail,None,None,None),
-            (("T",0,3,0),"ITX",50,"Address","E-Mail Address",
-                "","N",self.doPrtAddr,None,None,("email",False))])
-        else:
-            self.email = "N"
-            self.emadd = ""
         self.pr = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,))
+            eflds=[], tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,),
+            view=("N","P"), mail=("N","Y"))
         self.opts["mf"].startLoop()
 
-    def doPrtChoice(self, frt, pag, r, c, p, i, w):
-        self.view = "N"
-        if w == "P":
-            return "ok"
-        if w == "V":
-            self.view = "Y"
-            self.prtnam = "view"
-        else:
-            self.prtnam = "none"
-        return "sk1"
-
-    def doPrtNam(self, frt, pag, r, c, p, i, w):
-        if w not in self.printers:
-            return "Invalid Printer"
-        self.prtnam = w
-
-    def doPrtMail(self, frt, pag, r, c, p, i, w):
-        self.email = w
-        if self.email == "N":
-            self.emadd = ""
-            return "sk1"
-
-    def doPrtAddr(self, frt, pag, r, c, p, i, w):
-        self.emadd = w
-
     def doPrtEnd(self):
         self.doPrtClose()
 
     def doPrtExit(self):
-        self.prtnam = "cancel"
+        self.exit = True
         self.doPrtClose()
 
     def doPrtClose(self):
@@ -404,7 +359,7 @@
     def exitPage1(self):
         if not self.cancel and self.df.col != 1:
             self.opts["mf"].dbm.commitDbase()
-            self.doPrintDoc(self.view, self.prtnam, self.emadd)
+            self.doPrintDoc(self.pr.repprt, self.pr.repeml)
         else:
             self.opts["mf"].dbm.rollbackDbase()
         self.df.focusField("T", 0, 1)
@@ -526,15 +481,14 @@
 
     def doRepEnd(self):
         self.tx.closeProcess()
-        self.doPrintDoc(self.tx.repprt[1], self.tx.repprt[2],
-            self.tx.repeml[2])
+        self.doPrintDoc(self.tx.repprt, self.tx.repeml)
         self.opts["mf"].closeLoop()
 
     def doRepExit(self):
         self.tx.closeProcess()
         self.opts["mf"].closeLoop()
 
-    def doPrintDoc(self, view, prtnam, emadd):
+    def doPrintDoc(self, repprt, repeml):
         hds = ["Goods Received Notes",
             "GRN Number: %s GRN Date: %s" % (self.grv, self.dtw)]
         col = [
@@ -551,8 +505,8 @@
         self.df.setWidget(self.df.mstFrame, state="hide")
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=["strtrn"],
-            heads=hds, cols=col, gtots=gtt, where=whr, order=odr, view=view,
-            prtnam=prtnam, mail=emadd)
+            heads=hds, cols=col, gtots=gtt, where=whr, order=odr,
+            repprt=repprt, repeml=repeml)
         self.df.setWidget(self.df.mstFrame, state="show")
 
     def doAllLoc(self, frt, pag, r, c, p, i, w):

=== modified file 'str/st2030.py'
--- str/st2030.py	2015-08-26 08:52:51 +0000
+++ str/st2030.py	2015-08-28 11:59:21 +0000
@@ -16,14 +16,15 @@
 import time
 from TartanClasses import ASD, Balances, GetCtl, PwdConfirm, RepPrt, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import chkGenAcc, showError, showPrinters
+from tartanFunctions import chkGenAcc, showError
 
 class st2030:
     def __init__(self, **opts):
         self.opts = opts
         if self.setVariables():
+            self.exit = False
             self.setPrinter()
-            if self.prtnam != "cancel":
+            if not self.exit:
                 self.dataHeader()
                 self.opts["mf"].startLoop()
 
@@ -56,42 +57,16 @@
 
     def setPrinter(self):
         tit = ("Printer Selection",)
-        self.printers = showPrinters()
-        prt = {
-            "stype": "C",
-            "titl": "Available Printers",
-            "head": ("Name","Description"),
-            "data": self.printers}
-        r1s = (("Print","P"),("View","V"),("None","N"))
-        fld = (
-            (("T",0,0,0),("IRB",r1s),0,"Choice","Select Choice",
-                "P","N",self.doPrtChoice,None,None,None),
-            (("T",0,1,0),"INA",30,"Printer","Printer Name",
-                "Default","Y",self.doPrtNam,prt,None,None))
         self.pr = TartanDialog(self.opts["mf"], tops=True, title=tit,
-            eflds=fld, tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,))
+            eflds=[], tend=((self.doPrtEnd,"y"),), txit=(self.doPrtExit,),
+            view=("N","P"))
         self.opts["mf"].startLoop()
 
-    def doPrtChoice(self, frt, pag, r, c, p, i, w):
-        self.prtvwr = w
-        if w == "P":
-            return "ok"
-        elif w == "V":
-            self.prtnam = "view"
-        else:
-            self.prtnam = "none"
-        return "sk1"
-
-    def doPrtNam(self, frt, pag, r, c, p, i, w):
-        if w not in self.printers:
-            return "Invalid Printer"
-        self.prtnam = w
-
     def doPrtEnd(self):
         self.doPrtClose()
 
     def doPrtExit(self):
-        self.prtnam = "cancel"
+        self.exit = True
         self.doPrtClose()
 
     def doPrtClose(self):
@@ -346,7 +321,7 @@
 
     def exitPage1(self):
         if self.df.col != 1:
-            self.doPrintDoc(self.prtvwr, self.prtnam)
+            self.doPrintDoc(self.pr.repprt)
         self.df.focusField("T", 0, 1)
 
     def extractCost(self):
@@ -518,14 +493,14 @@
 
     def doRepEnd(self):
         self.tx.closeProcess()
-        self.doPrintDoc(self.tx.repprt[1], self.tx.repprt[2])
+        self.doPrintDoc(self.tx.repprt)
         self.opts["mf"].closeLoop()
 
     def doRepExit(self):
         self.tx.closeProcess()
         self.opts["mf"].closeLoop()
 
-    def doPrintDoc(self, prtvwr, prtnam):
+    def doPrintDoc(self, repprt):
         hds = ["Goods Issued Notes",
             "GIN Number: %s GIN Date: %s" % (self.iss, self.ddt)]
         tab = ["strmf1", "strtrn"]
@@ -550,8 +525,7 @@
         self.df.setWidget(self.df.mstFrame, state="hide")
         RepPrt(self.opts["mf"], conum=self.opts["conum"],
             conam=self.opts["conam"], name=__name__, tables=tab, heads=hds,
-            cols=col, gtots=gtt, where=whr, order=odr, view=self.prtvwr,
-            prtnam=prtnam)
+            cols=col, gtots=gtt, where=whr, order=odr, repprt=repprt)
         self.df.setWidget(self.df.mstFrame, state="show")
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'str/st3010.py'
--- str/st3010.py	2015-08-26 08:52:51 +0000
+++ str/st3010.py	2015-08-28 11:26:27 +0000
@@ -154,8 +154,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st3020.py'
--- str/st3020.py	2015-08-26 08:52:51 +0000
+++ str/st3020.py	2015-08-28 11:26:27 +0000
@@ -241,8 +241,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st3030.py'
--- str/st3030.py	2015-08-26 08:52:51 +0000
+++ str/st3030.py	2015-09-12 14:43:31 +0000
@@ -270,8 +270,8 @@
         if self.fpdf.page and not p.quit:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def printCost(self, recs):
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
@@ -301,8 +301,8 @@
         if self.fpdf.page and not p.quit:
             self.fpdf.output(self.pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=self.pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)
@@ -325,14 +325,12 @@
         prs = [0] * 5
         vat = CCD(data[4], "NA", 1)
         if self.vatinc == "Y":
-            acc = getVatRate(self.sql, self.opts["conum"], vat.work,
+            vatrte = getVatRate(self.sql, self.opts["conum"], vat.work,
                 self.sysdtw)
-            if not acc:
-                vatper = 0
-            else:
-                vatper = acc[0]
+            if vatrte is None:
+                vatrte = 0.0
         else:
-            vatper = 0
+            vatrte = 0.0
         if self.ptype == "L":
             whr = [
                 ("stp_cono", "=", self.opts["conum"]),
@@ -345,11 +343,11 @@
                 "stp_price"], where=whr, order="stp_level")
             if prc:
                 for lev, pr in (prc):
-                    prs[lev-1] = round((pr * ((100 + vatper) / 100.0)),2)
+                    prs[lev-1] = round((pr * ((100 + vatrte) / 100.0)),2)
         elif bal[8]:
             # Markup Percentage Based on Last Cost
             pr = round((lcst.work * (1 + (bal[8] / 100.0))), 2)
-            prs[0] = round((pr * ((100 + vatper) / 100.0)),2)
+            prs[0] = round((pr * ((100 + vatrte) / 100.0)),2)
         pr = []
         for y in xrange(0, 5):
             pr.append(CCD(prs[y], "UD", 9.2))

=== modified file 'str/st3040.py'
--- str/st3040.py	2015-08-26 08:52:51 +0000
+++ str/st3040.py	2015-08-28 11:26:27 +0000
@@ -155,8 +155,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)

=== modified file 'str/st3050.py'
--- str/st3050.py	2015-08-26 08:52:51 +0000
+++ str/st3050.py	2015-08-28 11:26:27 +0000
@@ -182,8 +182,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, grp, cod, chg=False):
         if self.pgnum and self.page == "N" and chg and \

=== modified file 'str/st3060.py'
--- str/st3060.py	2015-08-26 08:52:51 +0000
+++ str/st3060.py	2015-08-28 11:26:27 +0000
@@ -196,10 +196,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):

=== modified file 'str/st3070.py'
--- str/st3070.py	2015-08-26 08:52:51 +0000
+++ str/st3070.py	2015-08-28 11:26:27 +0000
@@ -138,8 +138,8 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                    prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                    repeml=self.df.repeml)
         self.closeProcess()
 
     def printSetup(self, recs):

=== modified file 'str/st3080.py'
--- str/st3080.py	2015-08-26 08:52:51 +0000
+++ str/st3080.py	2015-08-28 11:26:27 +0000
@@ -204,8 +204,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def getValues(self, data):
         grp = CCD(data[0], "UA", 3)

=== modified file 'str/st3090.py'
--- str/st3090.py	2015-08-26 08:52:51 +0000
+++ str/st3090.py	2015-08-28 11:26:27 +0000
@@ -192,8 +192,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self, grp, cod, desc):
         self.fpdf.add_page()

=== modified file 'str/st3100.py'
--- str/st3100.py	2015-02-07 06:31:11 +0000
+++ str/st3100.py	2015-08-28 11:26:27 +0000
@@ -73,7 +73,7 @@
                 ["h", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'str/st3110.py'
--- str/st3110.py	2015-08-26 08:52:51 +0000
+++ str/st3110.py	2015-09-12 16:10:34 +0000
@@ -171,9 +171,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.emadd = self.df.repeml[2]
         self.prnt = False
         whr = [("st1_cono", "=", self.opts["conum"])]
         if self.grp:
@@ -210,8 +207,7 @@
                     self.opts["conum"], ext="pdf")
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view=self.view,
-                    prtnam=self.prtnam, mail=self.emadd)
+                    pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt)
         self.closeProcess()
 
     def doProcess(self, dat):
@@ -250,13 +246,13 @@
             price2 = CCD(0, "UD", 9.2)
         else:
             price1 = CCD(prc[0], "UD", 9.2)
-            vat = getVatRate(self.sql, self.opts["conum"], vatcod, self.date)
-            if not vat:
-                rate = CCD(0, "UD", 9.2)
+            vrte = getVatRate(self.sql, self.opts["conum"], vatcod, self.date)
+            if vrte is None:
+                vrte = CCD(0, "UD", 9.2)
             else:
-                rate = CCD(vat[0], "UD", 9.2)
+                vrte = CCD(vrte, "UD", 9.2)
             price2 = CCD(round((price1.work * float(ASD(100) + \
-                ASD(rate.work)) / 100.0), 2), "OUD", 9.2)
+                ASD(vrte.work)) / 100.0), 2), "OUD", 9.2)
         lab = "%s\n%s %s %s" % (lab, vatcod, price1.disp, price2.disp)
         self.fpdf.add_label(lab)
 

=== modified file 'str/st3120.py'
--- str/st3120.py	2015-08-26 08:52:51 +0000
+++ str/st3120.py	2015-09-01 10:45:37 +0000
@@ -76,7 +76,8 @@
             (("T",0,2,0),"IUA",3,"Product Group","",
                 "","Y",self.doGrp,grp,None,("efld",)),
             (("T",0,3,0),("IRB",r1s),0,"Include Zeros","",
-                "N","Y",self.doZero,None,None,None))
+                "N","Y",self.doZero,None,None,None,None,
+                "Include Items Which Have a Zero Order Quantity"))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
@@ -121,7 +122,7 @@
             "st1_desc", "st1_uoi"], where=whr, order="st1_group, st1_code")
         if not recs:
             showError(self.opts["mf"].body, "Processing Error",
-            "No Records Selected")
+                "No Records Selected")
         elif self.df.repprt[2] == "export":
             self.exportReport(recs)
         else:
@@ -166,7 +167,7 @@
         pad = chrs - 35 - len(self.sysdttm)
         self.head1 = self.head % (" " * pad + self.sysdttm)
         self.head2 = "Stock to Order Report as at %s%s" % (self.sysdtd, "%s%s")
-        pad = chrs - len(self.head2) + 4 - 11  # %s%s and ' Page     1'
+        pad = chrs - len(self.head2) + 4 - 11          # %s%s and ' Page     1'
         self.head2 = self.head2 % (" " * pad, " Page %5s")
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
@@ -192,9 +193,9 @@
             if self.pglin > (self.fpdf.lpp - 2):
                 self.pageHeading()
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         self.closeProcess()
 
     def getValues(self, data):
@@ -219,8 +220,11 @@
             self.repdtw, keys=(grp.work, code.work, self.loc))
         cbal, obal, bbal = bals.doStrOrds()
         tbal = float(ASD(cbal.work) + ASD(obal.work) - ASD(bbal.work))
-        if self.zero == "N" and req.work < tbal:
-            return
+        if req.work < tbal:
+            if self.zero == "N":
+                return
+            tbal = CCD(0, "SD", 12.2)
+            return (grp, code, desc, uoi, cbal, obal, bbal, tbal)
         tbal = float(ASD(req.work) - ASD(tbal))
         if tbal < st2[2]:
             tbal = st2[2]

=== modified file 'str/st5010.py'
--- str/st5010.py	2015-08-26 08:52:51 +0000
+++ str/st5010.py	2015-08-28 11:26:27 +0000
@@ -215,8 +215,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'str/st5030.py'
--- str/st5030.py	2015-08-26 08:52:51 +0000
+++ str/st5030.py	2015-10-01 10:15:48 +0000
@@ -14,9 +14,9 @@
 """
 
 import time
-from TartanClasses import ASD, Balances, CCD, GetCtl, MyFpdf, ProgressBar, Sql
+from TartanClasses import ASD, Balances, CCD, GetCtl, ProgressBar, RepPrt, Sql
 from TartanClasses import TartanDialog
-from tartanFunctions import getModName, doPrinter, showError
+from tartanFunctions import doPrinter, showError
 
 class st5030:
     def __init__(self, **opts):
@@ -44,13 +44,22 @@
     def mainProcess(self):
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Stock Take Variance Report (%s)" % __name__)
+        loc = {
+            "stype": "R",
+            "tables": ("strloc",),
+            "cols": (
+                ("srl_loc", "", 0, "L"),
+                ("srl_desc", "", 0, "Description", "Y")),
+            "where": [("srl_cono", "=", self.opts["conum"])]}
         fld = (
             (("T",0,0,0),"ID1",10,"Reporting Date","",
-                self.sysdtw,"Y",self.doDate,None,None,("efld",)),)
+                self.sysdtw,"Y",self.doDate,None,None,("efld",)),
+            (("T",0,1,0),"IUA",1,"Location","",
+                "","Y",self.doLoc,loc,None,("efld",)),)
         tnd = ((self.doEnd,"Y"), )
-        txt = (self.closeProcess, )
+        txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+            tend=tnd, txit=txt, view=("Y","V"), mail=("Y","N"))
 
     def doDate(self, frt, pag, r, c, p, i, w):
         if w < self.opts["period"][1][0] or w > self.opts["period"][2][0]:
@@ -58,10 +67,20 @@
         self.date = w
         self.dated = self.df.t_disp[pag][0][p]
 
+    def doLoc(self, frt, pag, r, c, p, i, w):
+        acc = self.sql.getRec(tables="strloc", cols=["srl_desc"],
+            where=[("srl_cono", "=", self.opts["conum"]), ("srl_loc", "=", w)],
+            limit=1)
+        if not acc:
+            return "Invalid Location Code"
+        self.loc = w
+        self.locd = acc[0]
+
     def doEnd(self):
         self.df.closeProcess()
-        recs = self.sql.getRec(tables="strvar", where=[("stv_cono", "=",
-            self.opts["conum"])], order="stv_group, stv_code, stv_loc")
+        recs = self.sql.getRec(tables="strvar", where=[("stv_cono",
+            "=", self.opts["conum"]), ("stv_loc", "=", self.loc)],
+            order="stv_group, stv_code")
         if not recs:
             showError(self.opts["mf"].body, "Processing Error",
                 "No Records Selected")
@@ -70,78 +89,56 @@
         self.opts["mf"].closeLoop()
 
     def printReport(self, recs):
+        data = []
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
         self.head = ("%03u %-30s %31s %33s %31s %6s" % (self.opts["conum"],
             self.opts["conam"], "", self.sysdttm, "", __name__))
-        self.fpdf = MyFpdf(name=__name__, head=self.head)
-        self.pgnum = 0
-        self.pglin = 999
         for num, dat in enumerate(recs):
             p.displayProgress(num)
             if p.quit:
                 break
-            grp = CCD(dat[self.sql.strvar_col.index("stv_group")], "UA", 3)
-            code = CCD(dat[self.sql.strvar_col.index("stv_code")], "NA", 20)
-            loc = CCD(dat[self.sql.strvar_col.index("stv_loc")], "UA", 1)
-            sbin = CCD(dat[self.sql.strvar_col.index("stv_bin")], "UA", 8)
-            qty1 = CCD(dat[self.sql.strvar_col.index("stv_qty")], "SD", 12.2)
-            prc1 = CCD(dat[self.sql.strvar_col.index("stv_ucost")], "UD", 12.2)
-            self.loc = loc.work
-            self.locd = loc.disp
+            grp = dat[self.sql.strvar_col.index("stv_group")]
+            code = dat[self.sql.strvar_col.index("stv_code")]
+            sbin = dat[self.sql.strvar_col.index("stv_bin")]
+            qty1 = dat[self.sql.strvar_col.index("stv_qty")]
+            prc = dat[self.sql.strvar_col.index("stv_ucost")]
             bals = Balances(self.opts["mf"], "STR", self.opts["conum"],
-                (self.date/100), keys=(grp.work, code.work, loc.work, ("P",
-                self.opts["period"][0])))
+                (self.date / 100), keys=(grp, code, self.loc,
+                ("P", self.opts["period"][0])))
             m_ob, m_mv, m_cb, y_ob, y_mv, y_cb, ac, lc = bals.doStrBals()
-            fqbal = CCD(y_cb[0], "SD", 12.2)
+            fq = y_cb[0]
             if ac:
-                fprice = CCD(ac, "SD", 12.2)
+                fp = ac
             else:
-                fprice = CCD(lc, "SD", 12.2)
-            diff = CCD(float(ASD(fqbal.work) - ASD(qty1.work)), "SD", 12.2)
+                fp = lc
+            diff = float(ASD(fq) - ASD(qty1))
             rslt = self.sql.getRec(tables="strmf1", cols=["st1_desc",
                 "st1_uoi"], where=[("st1_cono", "=", self.opts["conum"]),
-                ("st1_group", "=", grp.work), ("st1_code", "=", code.work)],
+                ("st1_group", "=", grp), ("st1_code", "=", code)],
                 limit=1)
-            desc = CCD(rslt[0], "NA", 30)
-            uoi = CCD(rslt[1], "NA", 10)
-            if self.pglin > self.fpdf.lpp:
-                self.pageHeading()
-            self.fpdf.drawText("%s %s %s %s %s %s %s %s %s %s" % \
-                (grp.disp, code.disp, desc.disp, uoi.disp, sbin.disp,
-                fprice.disp, prc1.disp, fqbal.disp, qty1.disp, diff.disp))
-            self.pglin += 1
+            desc = rslt[0]
+            uoi = rslt[1]
+            data.append([grp, code, desc, uoi, sbin, fp, prc, fq, qty1, diff])
         p.closeProgress()
-        if self.fpdf.page and not p.quit:
-            pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
-                self.opts["conum"], ext="pdf")
-            self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
-        self.closeProcess()
-
-    def pageHeading(self):
-        self.fpdf.add_page()
-        self.fpdf.setFont(style="B")
-        self.pgnum += 1
-        self.fpdf.drawText(self.head)
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-32s %-10s %89s %5s" % ("Stock Take Variance "\
-            "Report as at", self.date, "Page", self.pgnum))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-8s %s  %s" % ("Location", self.loc, self.locd))
-        self.fpdf.drawText()
-        self.fpdf.drawText("%-3s %-20s %-30s %-10s %-8s   %-12s  %-12s %-12s "\
-            "%-10s %-12s" % ("Grp", "Product-Code", "Description", "U.O.I",
-            "Bin-Loc", "File-Cost", "Stkt-Cost", "File-Qty", "Stkt-Qty",
-            "Difference"))
-        self.fpdf.underLine(txt=self.head)
-        self.fpdf.setFont()
-        self.pglin = 8
-
-    def closeProcess(self):
-        self.df.closeProcess()
-        self.opts["mf"].closeLoop()
+        if not p.quit:
+            name = __name__
+            head = ["Stock Take Variance Report as at %s" % self.dated,
+                "Location %s  %s" % (self.loc, self.locd)]
+            cols = [
+                ["a", "NA",  3,   "Grp",          "y"],
+                ["b", "NA", 20,   "Product-Code", "y"],
+                ["c", "NA", 30,   "Description",  "y"],
+                ["d", "NA", 10,   "U.O.I",        "y"],
+                ["e", "NA",  8,   "Bin-Loc",      "y"],
+                ["f", "SD", 12.2, "File-Cost",    "y"],
+                ["g", "UD", 12.2, "Stkt-Cost",    "y"],
+                ["h", "SD", 12.2, "File-Qty",     "y"],
+                ["i", "SD", 12.2, "Stkt-Qty",     "y"],
+                ["j", "SD", 12.2, "Difference",   "y"]]
+            RepPrt(self.opts["mf"], conum=self.opts["conum"],
+                conam=self.opts["conam"], name=name, tables=data,
+                heads=head, cols=cols, ttype="D", repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def extractBals(self, grp, code, loc):
         qbal = 0
@@ -154,12 +151,16 @@
             for dat in rslt:
                 qty = CCD(dat[1], "SD", 12.2)
                 cst = CCD(dat[2], "SD", 12.2)
-                qbal = float(ASD(qbal) + ASD(qty.work))
-                vbal = float(ASD(vbal) + ASD(cst.work))
+                qbal = float(ASD(qbal) + ASD(qty))
+                vbal = float(ASD(vbal) + ASD(cst))
         if vbal and qbal:
             fprc = round((vbal / qbal), 2)
         else:
             fprc = 0
         return qbal, vbal, fprc
 
+    def doExit(self):
+        self.df.closeProcess()
+        self.opts["mf"].closeLoop()
+
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'str/stc110.py'
--- str/stc110.py	2015-06-19 16:06:22 +0000
+++ str/stc110.py	2015-09-18 12:32:19 +0000
@@ -24,8 +24,18 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["strctl", "strloc", "tplmst",
-            "ctlctl", "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["strctl", "strloc", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="strctl", where=[("cts_cono", "=",
@@ -35,27 +45,20 @@
             self.acc = [self.opts["conum"], "N", "N", 1, "N", "purchase_order"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["stk_soh", "Stock on Hand", 0],
-            ["stk_susp", "Stock Reconciliation", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["stk_soh", "Stock on Hand", 0],
+                ["stk_susp", "Stock Reconciliation", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
+        self.locs = self.acc[self.sql.strctl_col.index("cts_locs")]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Stores Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -68,33 +71,49 @@
                 ("tpm_system", "=", "STR")],
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[1],"N",self.doGlint,None,None,None),
-            (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,1,0),"ONA",30,""),
-            (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,2,0),"ONA",30,""),
-            (("T",0,3,0),("IRB",r1s),0,"Multiple Locations","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,"")]
+            seq = 3
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),("IRB",r1s),0,"Multiple Locations","",
                 self.acc[2],"N",self.doLocs,None,None,None),
-            (("T",0,4,0),"IUI",1,"Number of Price Levels","",
+            (("T",0,seq + 1,0),"IUI",1,"Number of Price Levels","",
                 self.acc[3],"N",None,None,None,("between",1,5)),
-            (("T",0,5,0),("IRB",r1s),0,"Automatic Markup","",
+            (("T",0,seq + 2,0),("IRB",r1s),0,"Automatic Markup","",
                 self.acc[4],"N",None,None,None,None),
-            (("T",0,6,0),"INA",20,"Orders Template","",
-                self.acc[5],"N",self.doTplNam,tpm,None,None))
+            (("T",0,seq + 3,0),"INA",20,"Orders Template","",
+                self.acc[5],"N",self.doTplNam,tpm,None,None)])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
                 if not n:
@@ -103,8 +122,6 @@
                         s += 1
                         self.df.loadEntry("T", 0, s, data=self.getDes(c[2]))
                         s += 1
-                if n == 1:
-                    self.locs = f
             self.df.focusField("T", 0, 1, clr=False)
 
     def doGlint(self, frt, pag, r, c, p, i, w):
@@ -139,21 +156,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (1, 3):
-                y = (x - 1) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 5:
+                if x in (1, 3):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (2, 4):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'str/stc220.py'
--- str/stc220.py	2015-08-26 08:52:51 +0000
+++ str/stc220.py	2015-08-28 12:30:42 +0000
@@ -48,8 +48,7 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"],name=__name__, tables=tables, heads=heads,
             cols=col, order=odr, where=whr, conum=self.opts["conum"],
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            conam=self.opts["conam"], repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
         self.closeProcess()
 

=== modified file 'str/stc320.py'
--- str/stc320.py	2015-08-26 08:52:51 +0000
+++ str/stc320.py	2015-08-28 12:30:59 +0000
@@ -80,7 +80,7 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=data, heads=heads,
             cols=cols, conum=self.opts["conum"], conam=self.opts["conam"],
-            ttype="D", view=self.df.repprt[1], prtnam=self.df.repprt[2])
+            ttype="D", repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
         self.closeProcess()
 

=== modified file 'str/stc410.py'
--- str/stc410.py	2015-08-25 15:02:35 +0000
+++ str/stc410.py	2015-09-01 10:11:16 +0000
@@ -14,6 +14,7 @@
 """
 
 from TartanClasses import GetCtl, Sql, TartanDialog
+from tartanFunctions import showError
 
 class stc410:
     def __init__(self, **opts):
@@ -32,6 +33,8 @@
             return
         self.locs = strctl["cts_locs"]
         if self.locs == "N":
+            showError(self.opts["mf"].body, "Error",
+                "Multiple Locations Are Not Enabled")
             return
         return True
 

=== modified file 'str/stc420.py'
--- str/stc420.py	2015-08-26 08:52:51 +0000
+++ str/stc420.py	2015-08-28 12:31:17 +0000
@@ -48,8 +48,7 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=col, order=odr, where=whr, conum=self.opts["conum"],
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            conam=self.opts["conam"], repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
         self.closeProcess()
 

=== modified file 'tab/tb1020.py'
--- tab/tb1020.py	2015-08-25 15:02:35 +0000
+++ tab/tb1020.py	2015-09-19 13:56:05 +0000
@@ -386,7 +386,7 @@
             if self.opts["bar"] and self.opts["mf"] and self.opts["mf"].window:
                 pbar = "w"
                 p2 = ProgressBar(self.opts["mf"].body, inn=self.p1,
-                    typ="Updating Table %s" % self.table, mxs=len(data))
+                    typ="Converting Table %s" % self.table, mxs=len(data))
             elif self.opts["bar"] and TBAR:
                 pbar = "t"
                 p2 = TextBar(widgets=["%s: " % self.table, Percentage(),
@@ -546,6 +546,14 @@
                             new = int(old[olddic["wgm_idno"][0]])
                         except:
                             new = 0
+                    elif self.table == "waglmf" and csf[2] == "wlm_code":
+                        new = old[olddic["wlm_ded_code"][0]]
+                    elif self.table == "waglmf" and csf[2] == "wlm_rate":
+                        new = old[olddic["wlm_int_per"][0]]
+                    elif self.table == "waglmf" and csf[2] == "wlm_start":
+                        new = old[olddic["wlm_start_date"][0]]
+                    elif self.table == "waglmf" and csf[2] == "wlm_repay":
+                        new = old[olddic["wlm_ded_amt"][0]]
                     elif self.table == "wagtf1" and csf[2] == "wt1_capnm":
                         new = "Unknown"
                     elif typ[1].upper() in ("A", "X"):

=== modified file 'tab/tb3010.py'
--- tab/tb3010.py	2015-08-26 08:52:51 +0000
+++ tab/tb3010.py	2015-08-28 11:26:28 +0000
@@ -76,9 +76,6 @@
             self.sys = w
 
     def doEnd(self):
-        self.view = self.df.repprt[1]
-        self.prtnam = self.df.repprt[2]
-        self.mail = self.df.repeml[2]
         self.df.closeProcess()
         self.printReport()
         self.opts["mf"].closeLoop()
@@ -140,8 +137,8 @@
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=1, pdfnam=pdfnam,
-                head="Table Fields and Indexes", view=self.view,
-                prtnam=self.prtnam, mail=self.mail)
+                head="Table Fields and Indexes", repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def doHeading(self, htyp, table):
         self.fpdf.setFont(style="B")

=== added file 'uty/pkgprg.py'
--- uty/pkgprg.py	1970-01-01 00:00:00 +0000
+++ uty/pkgprg.py	2015-10-03 07:32:56 +0000
@@ -0,0 +1,601 @@
+#!/usr/bin/python
+
+import compileall
+import getopt
+import os
+import shutil
+import subprocess
+import sys
+import time
+from ms0000 import VERSION
+from tartanFunctions import findFile, sendMail
+
+def exeCmd(cmd):
+    ret = 1
+    cnt = 0
+    while ret and cnt < 3:
+        cnt += 1
+        ret = os.system(cmd)
+    if ret and ret < 256:
+        print "%s Command Failed" % cmd, ret
+        sys.exit()
+
+print("Packaging...")
+bd = "/home/paul"
+if not os.path.exists(bd):
+    print "Invalid Base Directory (%s)" % bd
+    sys.exit()
+newver = None
+system = "t"
+verinc = False
+windows = False
+publish = False
+email = False
+opts, args = getopt.getopt(sys.argv[1:], "b:eis:v:hwp")
+for o, v in opts:
+    if o == "-h":
+        print "Usage: pkgprg [-h help] -[b base directory] [-i increment] "\
+            "[-s system] [-v new version] [-w windows] [-p publish] "\
+            "[-e email]"
+        sys.exit()
+    elif o == "-b":
+        bd = v
+    elif o == "-e":
+        email = True
+    elif o == "-i":
+        verinc = True
+        system = "t"
+    elif o == "-p":
+        publish = True
+    elif o == "-s":
+        system = v.lower()
+    elif o == "-v":
+        newver = v
+    elif o == "-w":
+        windows = True
+
+if verinc and not system == "t":
+    print "Cannot Increment %s" % system
+    sys.exit()
+if publish and system == "r":
+    print "Cannot Publish %s" % system
+    sys.exit()
+
+pypath = findFile(start=[bd], name="Tartan-5", ftyp="d")
+if not pypath:
+    print "%s/Tartan-5 directory not found" % bd
+    sys.exit()
+
+exeCmd("rm -f `find %s -name '*.pyc'`" % pypath)
+exeCmd("rm -f `find %s -name '*.pyo'`" % pypath)
+exeCmd("rm -f `find %s -name '*.bak'`" % pypath)
+exeCmd("rm -f `find %s -name '[abcdefgh]'`" % pypath)
+exeCmd("rm -f `find %s -name '[abcdefgh].py'`" % pypath)
+os.chdir(pypath)
+
+while system not in ("b", "r", "s", "t"):
+    system = raw_input("System, (T)artan, (R)NE, (S)ections, (B)owls: ").lower()
+
+dirs = ["tab", "mst"]
+if system == "t":
+    exeCmd("mv %s/TartanExe/Tartan_5.*.tgz %s/TartanOld/" % (bd, bd))
+    if windows:
+        exeCmd("mv %s/TartanExe/Tartan_5.*.exe %s/TartanOld/" % (bd, bd))
+    system = "tartan"
+    sysmod = "stdsys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["ass", "bkm", "bwl", "crs", "drs", "gen", "lon", "mem",
+        "rca", "rtl", "sls", "str", "uty", "wag"])
+    custom = [""]
+    exclude = ["msy030", "pw1010", "si2020", "ss1010"]
+elif system == "b":
+    exeCmd("mv %s/TartanExe/Bwlclb_5.* %s/TartanOld/" % (bd, bd))
+    system = "bwlclb"
+    sysmod = "bwlsys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["bwl", "scp", "uty"])
+    custom = ["oth", ["ms1010"]]
+    exclude = ["sc2010", "sc2030", "sc1010", "sc2020", "sc3010", "scc210",
+               "tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
+               "ms3010", "ms3020", "msy010", "msy020", "msy030", "pm1010",
+               "pw1010"]
+elif system == "s":
+    exeCmd("mv %s/TartanExe/Seccmp_5.* %s/TartanOld/" % (bd, bd))
+    system = "seccmp"
+    sysmod = "scpsys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["scp"])
+    custom = ["oth", ["ms1010"]]
+    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "ms1020", "ms1030",
+               "ms3010", "ms3020", "ms3030", "msy010", "msy020", "msy030",
+               "pm1010", "pw1010"]
+elif system == "r":
+    exeCmd("mv %s/TartanExe/Rnehol_5.* %s/TartanOld/" % (bd, bd))
+    system = "rnehol"
+    sysmod = "rnesys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["ass", "crs", "drs", "gen", "lon", "rtl", "sls", "str", "uty"])
+    custom = ["rne", ["ar6020", "ar6030", "cr1010", "cr2010", "cr2020",
+              "cr2030", "cr3030", "cr3070", "cr3310", "cr3320", "cr3330",
+              "cr3340", "cr3350", "cr3360", "cr3370", "cr4010", "cr6010",
+              "gl3100", "gl3110", "gl6060", "ms1010", "tartanWork"]]
+    exclude = ["cr3080", "dr1020", "dr2030", "dr6030", "drc210", "drc220",
+               "drc310", "drc320", "drc510", "drc520", "drc610", "drc620",
+               "drc710", "drc810", "msy020", "si2020", "si3010", "si3070",
+               "sic110", "st1020", "st2010", "st2020", "st2030", "st2040",
+               "st3010", "st3020", "st3030", "st3040", "st3050", "st3060",
+               "st3070", "st3080", "st3090", "st3100", "st3110", "st3120",
+               "st4010", "st5010", "st5020", "st5030", "st5040", "st6010",
+               "st6020", "stc220", "stc320", "stc410", "stc420", "tb1010",
+               "tb1030", "tb1040", "tb3010", "tdc110", "pm1010", "pw1010"]
+elif system == "c":
+    system = "cshana"
+    sysmod = "cshsys"
+    modfle = "tarmod"
+    chgfle = "tarchg"
+    chgrst = "chgrst"
+    dirs.extend(["csh"])
+    custom = [""]
+    exclude = ["tb1010", "tb1030", "tb1040", "tb3010", "pm1010", "pw1010"]
+else:
+    sys.exit()
+
+ver = list(VERSION)
+if system == "tartan":
+    if not newver:
+        if verinc:
+            vinc = raw_input("Increment Version (y/n): ")
+        else:
+            vinc = "n"
+        if vinc.lower() == "y":
+            ver[2] = ver[2] + 1
+            newver = "%s.%s.%s" % (ver[0], ver[1], ver[2])
+    else:
+        ver = list(newver.split("."))
+        for x in range(3):
+            ver[x] = int(ver[x])
+    if newver:
+        if not os.path.isfile("%s/changes.txt" % pypath):
+            raw_input("changes.txt File Not Found! Ctl-C to Abort")
+        try:
+            old = open("%s/mst/ms0000.py" % pypath, "r")
+            lin = old.readlines()
+            old.close()
+            new = open("%s/mst/ms0000.py" % pypath, "w")
+            for l in lin:
+                s = l.split()
+                if len(s) > 1 and s[0] == "VERSION" and not l.count("int"):
+                    l = "    VERSION = %s\n" % str(tuple(ver))
+                new.write(l)
+            new.close()
+            os.chmod("%s/mst/ms0000.py" % pypath, 0755)
+            for fl in ("MB", "MD"):
+                old = open("%s/doc/%s.rst" % (pypath, fl), "r")
+                lin = old.readlines()
+                old.close()
+                new = open("%s/doc/%s.rst" % (pypath, fl), "w")
+                oldver = None
+                for l in lin:
+                    if l[:9] == ":Version:":
+                        oldver = l.split()[1].strip()
+                        l = ":Version:   %s\n" % newver
+                    elif oldver:
+                        l = l.replace(oldver, newver)
+                    new.write(l)
+                new.close()
+            old = open("%s/doc/Downloads.rst" % pypath, "r")
+            lin = old.readlines()
+            old.close()
+            new = open("%s/doc/Downloads.rst" % pypath, "w")
+            oldver = None
+            for l in lin:
+                if l.count("The latest version of Tartan is"):
+                    oldver = l.split()[6]
+                    date = time.strftime("%d %B, %Y", time.localtime())
+                    part = date.split()
+                    day = int(part[0])
+                    if day in (1, 21, 31):
+                        day = "%sst" % day
+                    elif day in (2, 22):
+                        day = "%snd" % day
+                    elif day in (3, 23):
+                        day = "%srd" % day
+                    elif day > 3 and day < 21:
+                        day = "%sth" % day
+                    elif day > 23 and day < 31:
+                        day = "%sth" % day
+                    newdte = "%s%s" % (day, date[2:])
+                    l = "The latest version of Tartan is %s and was "\
+                        "released on the %s.\n" % (newver, newdte)
+                elif oldver:
+                    l = l.replace(oldver, newver)
+                new.write(l)
+            new.close()
+            os.chmod("%s/mst/ms0000.py" % pypath, 0755)
+            # Update Bazaar version control
+            exeCmd("/usr/bin/bzr status > ver/ver_%s.%s.%s.status" % tuple(ver))
+            exeCmd("/usr/bin/bzr diff > ver/ver_%s.%s.%s.diff" % tuple(ver))
+            if os.path.isfile("%s/changes.txt" % pypath):
+                exeCmd("mv %s/changes.txt ver/ver_%s.%s.%s.changes" %
+                    (pypath, ver[0], ver[1], ver[2]))
+            # Create changes module
+            chg = open("%s/std/%s.py" % (pypath, chgfle), "w")
+            chg.write('changes = """')
+            for x in range(6):
+                for y in range(99, -1, -1):
+                    for z in range(999, -1, -1):
+                        nam = "ver_%s.%s.%s" % (x, y, z)
+                        fle = os.path.join(pypath, "ver", "%s.changes" % nam)
+                        if os.path.isfile(fle):
+                            chg.write(nam + "\n")
+                            chg.write(("=" * len(nam)) + "\n")
+                            lines = open(fle, "r")
+                            for line in lines:
+                                chg.write(line)
+                            chg.write("\n")
+            chg.write('"""')
+            chg.close()
+            # Create changes rst
+            rst = open("%s/doc/Changes.rst" % pypath, "w")
+            chg = __import__(chgfle)
+            rst.write(chg.changes)
+            rst.close()
+            # Create current file
+            cur = open("%s/TartanExe/current" % bd, "w")
+            cur.write("%s\n" % newver)
+            cur.close()
+            # Commit Bazaar
+            exeCmd("/usr/bin/bzr commit -m 'ver_%s.%s.%s'" % tuple(ver))
+            exeCmd("/usr/bin/bzr log > ver/ver_%s.%s.%s.log" % tuple(ver))
+        except:
+            print "Error Creating New Version"
+            sys.exit()
+
+print("")
+zipfle = "%s-%s" % (system, 5)
+print("Creating %s.zip in your TartanSve directory ..... Please Wait" % zipfle)
+
+if os.path.exists("%s/TartanSve/%s.zip" % (bd, zipfle)):
+    os.remove("%s/TartanSve/%s.zip" % (bd, zipfle))
+
+prg = ["%s/%s/%s" % (pypath, "std", "sitecustomize.py")]
+std = []
+rpt = []
+
+os.chdir(os.path.join(pypath, "std"))
+#cmd = "find fdb fpdf ghostscript nmb odf progressbar pyasn1 simpleodspy smb xlrd xlwt"
+cmd = "find fpdf ghostscript"
+if system in ("tartan", "rnehol"):
+    cmd += " pychart"
+if system == "rnehol":
+    cmd += " paramiko"
+proc = subprocess.Popen(cmd + " -name '*.py'", shell=True, bufsize=0,
+                        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
+                        close_fds=True)
+lst = proc.stdout.readlines()
+for x in lst:
+    t = x.split("/")
+    if t[1] in ("demos", "docs", "test"):
+        continue
+    rpt.append(x.replace("\n", ""))
+
+for pth in dirs:
+    lst = os.listdir(os.path.join(pypath, pth))
+    lst.sort()
+    for fle in lst:
+        if exclude and fle[:6] in exclude:
+            continue
+        if fle[6:] in (".py", "_%s.py" % custom[0]) and fle[5] == "0":
+            prg.append("%s/%s/%s" % (pypath, pth, fle))
+
+def storeWord(word):
+    try:
+        std.index(word+".py")
+    except:
+        std.append(word+".py")
+
+def extractModule(prg, sys):
+    for fle in prg:
+        try:
+            if sys == "p":
+                fl = open(fle, "r")
+            else:
+                fl = open("%s/%s/%s" % (pypath, "std", fle), "r")
+        except:
+            #print("ERROR", sys, fle)
+            continue
+        dd = fl.readlines()
+        qq = "n"
+        for ll in dd:
+            if ll.count('"""') == 1:
+                if qq == "n":
+                    qq = "y"
+                else:
+                    qq = "n"
+            if qq == "y":
+                continue
+            if ll[0] == "#":
+                continue
+            ll = ll.rstrip().replace(",", "")
+            if ll.find("import") != -1:
+                words = ll.split()
+                for num, wrd in enumerate(words):
+                    if wrd == "from":
+                        storeWord(words[num+1])
+                        break
+                    if wrd == "import":
+                        for x in range(num+1, len(words)):
+                            if words[x] == "as":
+                                break
+                            storeWord(words[x])
+                        break
+        fl.close()
+
+def addpage(doc, fle, last=False):
+    exeCmd("aspell -c %s --lang en_GB" % fle)
+    data = open(fle, "r")
+    for d in data.readlines():
+        doc.write(d)
+    if not last:
+        doc.write("\n")
+        doc.write(".. raw:: pdf\n")
+        doc.write("\n")
+        doc.write("    PageBreak\n")
+        doc.write("\n")
+    data.close()
+
+extractModule(prg, "p")
+extractModule(std, "s")
+for fle in std:
+    if os.path.isfile("%s/std/%s" % (pypath, fle)):
+        prg.append("%s/std/%s" % (pypath, fle))
+
+if os.path.exists("%s/tmp" % pypath):
+    shutil.rmtree("%s/tmp" % pypath)
+os.mkdir("%s/tmp" % pypath)
+# Menu and System Files
+if system == "tartan":
+    shutil.copy("%s/men/stdmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/stdsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "seccmp":
+    shutil.copy("%s/men/scpmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/scpsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "bwlclb":
+    shutil.copy("%s/men/bwlmen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/bwlsys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+elif system == "rnehol":
+    shutil.copy("%s/men/rnemen.py" % pypath, "%s/tmp/stdmen.py" % pypath)
+    shutil.copy("%s/csv/rnesys.py" % pypath, "%s/tmp/stdsys.py" % pypath)
+os.chdir("%s/tmp" % pypath)
+exeCmd("zip -rqm %s/TartanSve/%s *" % (bd, zipfle))
+os.chdir(os.path.join(pypath, "std"))
+if system == "rnehol":
+    # Extra Work File for RNE
+    prg.append("%s/std/tartanWork_rne.py" % pypath)
+# End of import_list.py
+try:
+    shutil.rmtree("%s/std/???mod.py" % pypath)
+except:
+    pass
+inc = open("%s/std/%s.py" % (pypath, modfle), "w")
+inc.write("import sys\nimport stdmen\nimport stdsys\n")
+prg.sort()
+for pp in prg:
+    nm1 = os.path.basename(pp).replace("_%s.py" % custom[0], "")
+    if custom[0] and nm1 in custom[1]:
+        shutil.copy(pp, "%s/tmp/%s.py" % (pypath, nm1))
+        exeCmd("zip -qj %s/TartanSve/%s %s/tmp/%s.py" %
+                 (bd, zipfle, pypath, nm1))
+    else:
+        exeCmd("zip -qj %s/TartanSve/%s %s" % (bd, zipfle, pp))
+    p = os.path.basename(pp).replace("_%s" % custom[0], "")
+    p = p.split(".")
+    if p[0] == "sys":
+        print pp
+    if p[0] not in ("ms0000", ) and p[1] == "py":
+        if not custom:
+            inc.write("import %s\n" % p[0])
+        else:
+            inc.write("import %s\n" % p[0].replace("_%s" % custom[0], ""))
+rpt.sort()
+for p in rpt:
+    exeCmd("zip -q %s/TartanSve/%s %s" % (bd, zipfle, p))
+    if not p.count("__init__"):
+        p = p.replace(".py", "")
+        p = p.replace("/", ".")
+        inc.write("import %s\n" % p)
+inc.close()
+exeCmd("zip -qj %s/TartanSve/%s %s/std/%s.py" %
+         (bd, zipfle, pypath, modfle))
+os.chdir(pypath)
+tabs = __import__(sysmod).tables
+tabs.extend(["ftable", "ffield"])
+for tab in tabs:
+    exeCmd("zip -q %s/TartanSve/%s csv/%s*" % (bd, zipfle, tab))
+if system == "rnehol":
+    os.mkdir("tmp/csv")
+    shutil.copy("csv/tplmst_rne.dat", "tmp/csv/tplmst.dat")
+    shutil.copy("csv/tpldet_rne.dat", "tmp/csv/tpldet.dat")
+    os.chdir("tmp")
+    exeCmd("zip %s/TartanSve/%s csv/*" % (bd, zipfle))
+    os.chdir(pypath)
+if os.path.exists("%s/tmp" % pypath):
+    shutil.rmtree("%s/tmp" % pypath)
+man = system.capitalize()
+if system == "seccmp":
+    shutil.copy("doc/SC.rst", "doc/%s.rst" % man)
+elif system == "bwlclb":
+    shutil.copy("doc/MB.rst", "doc/%s.rst" % man)
+else:
+    fles = [
+        "doc/MD.rst",
+        "doc/GL.rst"]
+    if system == "rnehol":
+        fles.extend([
+            "doc/AR.rst",
+            "doc/CR_rne.rst",
+            "doc/DR.rst",
+            "doc/RT.rst",
+            "doc/SI.rst",
+            "doc/ST.rst"])
+    else:
+        fles.extend([
+            "doc/AR.rst",
+            "doc/BK.rst",
+            "doc/BC.rst",
+            "doc/CR.rst",
+            "doc/DR.rst",
+            "doc/LN.rst",
+            "doc/ML.rst",
+            "doc/RT.rst",
+            "doc/RC.rst",
+            "doc/SI.rst",
+            "doc/ST.rst",
+            "doc/WG.rst",
+            "doc/SL.rst"])
+    fles.extend(["doc/UD.rst", "doc/HD.rst"])
+    doc = open("doc/%s.rst" % man, "w")
+    for fle in fles:
+        if fle == fles[-1]:
+            addpage(doc, fle, True)
+        else:
+            addpage(doc, fle)
+    doc.close()
+exeCmd("zip -qr %s/TartanSve/%s doc/tarlic.rst" % (bd, zipfle))
+exeCmd("rst2pdf doc/%s.rst -o doc/Manual.pdf -s doc/mystylesheet" % man)
+exeCmd("zip -qr %s/TartanSve/%s doc/Manual.pdf" % (bd, zipfle))
+if system == "tartan":
+    exeCmd("rst2pdf doc/QS.rst -o doc/QuickStart.pdf -s doc/mystylesheet")
+    exeCmd("zip -qr %s/TartanSve/%s doc/QuickStart.pdf" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s img/tartan.ico" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s snd/ding.wav" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s img/*.gif" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s img/*.png" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s uty/SumatraPDF.exe" % (bd, zipfle))
+exeCmd("zip -q %s/TartanSve/%s uty/SumatraPDF-settings.txt" % (bd, zipfle))
+# Create tgz
+if os.path.isdir("%s/prg" % bd):
+    shutil.rmtree("%s/prg" % bd)
+os.mkdir("%s/prg" % bd)
+os.chdir("%s/prg" % bd)
+exeCmd("unzip -q %s/TartanSve/%s-5" % (bd, system))
+try:
+    if os.path.isfile("fcrypt.py"):
+        os.remove("fcrypt.py")
+    if os.path.isfile("scp.py"):
+        os.remove("scp.py")
+    if os.path.isfile("tarmod.py"):
+        os.remove("tarmod.py")
+except:
+    pass
+for fle in ("fdb", "fpdf", "ghostscript", "nmb", "odf", "progressbar", "pyasn1", "pychart", "simpleodspy", "smb", "uty", "xlrd", "xlwt"):
+    try:
+        shutil.rmtree(fle)
+    except:
+        pass
+if not system == "rnehol":
+    os.remove("ms0000.py")
+    compileall.compile_dir(".", maxlevels=10, quiet=True)
+    exeCmd("rm `find . -name '*.py'`")
+    exeCmd("unzip -q %s/TartanSve/%s-5 ms0000.py" % (bd, system))
+exeCmd("tar -czf %s/TartanExe/%s_%s.%s.%s.tgz *" % (bd, system.capitalize(),
+    ver[0], ver[1], ver[2]))
+exeCmd("cp %s/TartanSve/%s-5.zip %s/TartanSve/%s_%s.%s.%s.zip" %
+    (bd, system, bd, system.capitalize(), ver[0], ver[1], ver[2]))
+if windows:
+    exeCmd("wineconsole c:/PyTartan/tartan.bat %s" % system)
+    exeCmd("mv %s/TartanExe/%s-5.exe %s/TartanExe/%s_%s.%s.%s.exe" %
+        (bd, system, bd, system.capitalize(), ver[0], ver[1], ver[2]))
+    if system == "tartan":
+        # Create CD
+        if os.path.isdir("%s/TartanCD" % bd):
+            exeCmd("rm -r %s/TartanCD" % bd)
+            exeCmd("mkdir %s/TartanCD" % bd)
+        if os.path.isdir("%s/tempcd" % bd):
+            exeCmd("rm -r %s/tempcd" % bd)
+        # Executables
+        exeCmd("mkdir %s/tempcd" % bd)
+        exeCmd("mkdir %s/tempcd/Other" % bd)
+        exeCmd("cp -p %s/TartanExe/Tartan* %s/tempcd/" % (bd, bd))
+        exeCmd("cp -pr %s/TartanWin/* %s/tempcd/Other/" % (bd, bd))
+        auto = open("%s/tempcd/AUTORUN.INF" % bd, "w")
+        auto.write("""[autorun]
+        shell\install=&Install
+        shell\install\command=Tartan_%s.%s.%s.exe
+        """ % (ver[0], ver[1], ver[2]))
+        auto.close()
+        exeCmd("todos -o %s/tempcd/AUTORUN.INF" % bd)
+        exeCmd("chmod a+x %s/tempcd/AUTORUN.INF" % bd)
+        # Add Documentation
+        exeCmd("cp -p %s/Tartan-5/doc/Manual.pdf %s/tempcd/" % (bd, bd))
+        # Make CD iso
+        exeCmd("mkisofs -r -J -l -D -V 'Tartan Systems %s.%s.%s' -p 'Paul Malherbe paul@tartan.co.za' -copyright 'Paul Malherbe' -o %s/TartanCD/Tartan.iso -graft-points /\=%s/tempcd" % (ver[0], ver[1], ver[2], bd, bd))
+        exeCmd("rm -r %s/tempcd" % bd)
+    # Publish
+    if not system == "rnehol" and publish:
+        print
+        print "Version Number is %s.%s.%s" % tuple(ver)
+        print
+        # FTP Server
+        exeCmd("ssh root@mailserver chmod a+w /srv/ftp")
+        exeCmd("ssh root@mailserver rm /srv/ftp/%s*" % system.capitalize())
+        exeCmd("rsync -artz %s/TartanExe/%s* mailserver:/srv/ftp/ --progress" % (bd, system.capitalize()))
+        exeCmd("ssh root@mailserver chmod a+rwx /srv/ftp/*")
+        exeCmd("ssh root@mailserver chmod a-w /srv/ftp")
+        # WWW Server
+        if system == "tartan":
+            exeCmd("rsync -artz %s/Tartan-5/doc/Tartan.rst root@mailserver:/var/www/tartan.co.za/htdocs/Manual/Manual.rst --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/QS.rst root@mailserver:/var/www/tartan.co.za/htdocs/Quickstart/Quickstart.rst --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/Downloads.rst root@mailserver:/var/www/tartan.co.za/htdocs/Downloads/ --progress" % bd)
+            exeCmd("rsync -artz %s/Tartan-5/doc/Changes.rst root@mailserver:/var/www/tartan.co.za/htdocs/Changes/ --progress" % bd)
+exeCmd("rm %s/Tartan-5/doc/%s.rst" % (bd, man))
+# Email Users
+if email:
+    chgfle = "%s/ver/ver_%s.%s.%s.changes" % (pypath, ver[0], ver[1], ver[2])
+    if os.path.isfile(chgfle):
+        serv = ["mailserver", 25, 0, 0, "", ""]
+        mfrm = "paul@tartan.co.za"
+        subj = "Tartan Update %s.%s.%s is Available" % tuple(ver)
+        info = open(chgfle, "rb")
+        data = info.readlines()
+        info.close()
+        text = ""
+        html = ""
+        for dat in data:
+            if not text:
+                text = dat
+            else:
+                text = "%s%s" % (text, dat)
+        html = "<pre>%s</pre>" % text
+        mess = (text, html)
+        addrs = [
+            "admin@amadlelo.co.za",
+            "admin@blueberry.co.za",
+            "brt@volmoed.co.za",
+            "chris@resinsolutions.co.za",
+            "johnv@wpcc.co.za",
+            "keith@barrowdale.co.za",
+            "lawrence@hawcweb.co.za",
+            "marindag@buildinn-el.co.za",
+            "marlene@acsonline.co.za",
+            "mel@acsaccounting.co.za",
+            "mike@annettelaing.co.za",
+            "no2pigstash@hotmail.com",
+            "paul@tartan.co.za",
+            "rene@hazeldean.co.za"]
+            #"avanhasselt@jadeworld.com"
+            #"deonk@spargs.co.za",
+            #"knorton@xsinet.co.za"
+            #"mjredman@bigpond.net.au"
+            #"tyron@i-volt.net"
+        for addr in addrs:
+            sendMail(serv, mfrm, addr, subj, mess=(text, html))
+# END

=== modified file 'uty/rp1010.py'
--- uty/rp1010.py	2015-08-26 08:52:51 +0000
+++ uty/rp1010.py	2015-08-28 12:01:00 +0000
@@ -1378,8 +1378,7 @@
             state = self.df.disableButtonsTags()
             self.rpt = RepPrt(self.opts["mf"], name=self.repnam, tables=data,
                 ttype="D", heads=heads, cols=cols, stots=stot, gtots=gtot,
-                view=self.vf.repprt[1], prtnam=self.vf.repprt[2],
-                mail=self.vf.repeml[2])
+                repprt=self.vf.repprt, repeml=self.vf.repeml)
             self.df.enableButtonsTags(state=state)
 
     def doExit(self, widget=None):

=== modified file 'uty/ss1010.py'
--- uty/ss1010.py	2015-03-06 19:01:14 +0000
+++ uty/ss1010.py	2015-09-19 14:13:00 +0000
@@ -223,6 +223,7 @@
                 "stype": "C",
                 "titl": titl,
                 "head": head,
+                "typs": (("UI", 4), ("UD", 8.2), ("UI", 7), ("UD", 5.2)),
                 "data": data}
             state = self.df.disableButtonsTags()
             self.mf.updateStatus("Select a Line to Edit")

=== modified file 'uty/td1010.py'
--- uty/td1010.py	2015-08-26 08:52:51 +0000
+++ uty/td1010.py	2015-08-28 12:01:37 +0000
@@ -636,8 +636,7 @@
                     RepPrt(self.opts["mf"], name=__name__, tables=["telmst"],
                         heads=head, cols=["tdm_name", "tdm_telno", "tdm_faxno",
                         "tdm_mobile", "tdm_email"], where=whr, order=odr,
-                        view=self.pr.repprt[1], prtnam=self.pr.repprt[2],
-                        mail=self.pr.repeml[2])
+                        repprt=self.pr.repprt, repeml=self.pr.repeml)
             elif ss.selection[1] == "D":
                 self.notes = NotesPrint(self.opts["mf"], 0, "", "TEL")
                 if not self.notes.data:
@@ -672,8 +671,8 @@
                             ["f", "NA", 50, "Details",   "y"]]
                         RepPrt(self.opts["mf"], name=name, tables=data,
                             heads=head, cols=cols, ttype="D",
-                            view=self.notes.view, prtnam=self.notes.pnam,
-                            mail=self.notes.mail)
+                            repprt=self.notes.df.repprt,
+                            repeml=self.notes.df.repeml)
             self.df.setWidget(self.df.mstFrame, state="show")
             self.df.enableButtonsTags(state=state)
             self.df.focusField(self.df.frt, self.df.pag, self.df.col)

=== modified file 'wag/sl1010.py'
--- wag/sl1010.py	2015-03-06 19:01:14 +0000
+++ wag/sl1010.py	2015-09-08 12:21:23 +0000
@@ -88,27 +88,28 @@
 
     def doEmp(self, frt, pag, r, c, p, i, w):
         self.empno = w
-        acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname"],
+        acc = self.sql.getRec(tables="wagmst", cols=["wgm_sname", "wgm_fname"],
             where=[("wgm_cono", "=", self.opts["conum"]), ("wgm_empno", "=",
             self.empno)], limit=1)
         if not acc:
             return "Invalid Employee Number"
-        self.df.loadEntry("T", pag, p+1, data=acc[0])
+        self.name = "%s, %s" % (acc[0], acc[1].split()[0])
+        self.df.loadEntry("T", pag, p+1, data=self.name)
 
     def doLoan(self, frt, pag, r, c, p, i, w):
         self.loan = w
-        acc = self.sql.getRec(tables=["wagmst", "waglmf"], cols=["wlm_empno",
-            "wgm_sname", "wlm_loan", "wlm_desc", "wlm_ded_code", "wlm_int_per",
-            "wlm_start_date", "wlm_ded_amt"], where=[("wlm_cono", "=",
-            self.opts["conum"]), ("wlm_empno", "=", self.empno), ("wlm_loan",
-            "=", self.loan), ("wgm_cono=wlm_cono",), ("wgm_empno=wlm_empno",)],
-            limit=1)
-        if not acc:
+        self.rec = self.sql.getRec(tables="waglmf", where=[("wlm_cono",
+            "=", self.opts["conum"]), ("wlm_empno", "=", self.empno),
+            ("wlm_loan", "=", self.loan), ("wgm_cono=wlm_cono",),
+            ("wgm_empno=wlm_empno",)], limit=1)
+        if not self.rec:
             return "Invalid Loan Number"
-        for num, dat in enumerate(acc):
-            self.df.loadEntry("T", 0, num, data=dat)
-        self.old = [self.opts["conum"], acc[0]]
-        self.old.extend(acc[2:])
+        wlc = self.sql.waglmf_col
+        self.df.loadEntry(frt, pag, p+1, data=self.rec[wlc.index("wlm_desc")])
+        self.df.loadEntry(frt, pag, p+2, data=self.rec[wlc.index("wlm_code")])
+        self.df.loadEntry(frt, pag, p+3, data=self.rec[wlc.index("wlm_rate")])
+        self.df.loadEntry(frt, pag, p+4, data=self.rec[wlc.index("wlm_start")])
+        self.df.loadEntry(frt, pag, p+5, data=self.rec[wlc.index("wlm_repay")])
 
     def doDed(self, frt, pag, r, c, p, i, w):
         self.code = w
@@ -124,12 +125,12 @@
             if p == 1:
                 continue
             data.append(self.df.t_work[0][0][p])
-        if data != self.old:
+        if data != self.rec:
             self.sql.updRec("waglmf", data=data, where=[("wlm_cono", "=",
                 self.opts["conum"]), ("wlm_empno", "=", self.empno),
                 ("wlm_loan", "=", self.loan)])
             dte = long("%04i%02i%02i%02i%02i%02i" % time.localtime()[:-3])
-            for num, dat in enumerate(self.old):
+            for num, dat in enumerate(self.rec):
                 if dat != data[num]:
                     self.sql.insRec("chglog", data=["waglmf", "U",
                         "%03i%05i%02i" % (self.opts["conum"], self.empno,

=== modified file 'wag/sl2010.py'
--- wag/sl2010.py	2015-08-25 15:02:35 +0000
+++ wag/sl2010.py	2015-09-08 12:20:59 +0000
@@ -15,7 +15,7 @@
 
 import time
 from TartanClasses import ASD, Batches, GetCtl, Sql, TartanDialog
-from tartanFunctions import callModule
+from tartanFunctions import callModule, getNextCode
 
 class sl2010:
     def __init__(self, **opts):
@@ -110,13 +110,9 @@
             return "Invalid Employee Number"
         self.name = "%s, %s" % (acc[0], acc[1].split()[0])
         self.df.loadEntry("C", pag, p+1, data=self.name)
-        acc = self.sql.getRec(tables="waglmf", cols=["wlm_loan"],
-            where=[("wlm_cono", "=", self.opts["conum"]), ("wlm_empno", "=",
-            self.empno)], order="wlm_loan")
-        if not acc:
-            self.loan = 1
-        else:
-            self.loan = len(acc) + 1
+        self.loan = getNextCode(self.sql, "waglmf", "wlm_loan",
+            where=[("wlm_cono", "=", self.opts["conum"]),
+            ("wlm_empno", "=", self.empno)], start=1, last=9999999)
         self.df.loadEntry("C", pag, p+2, data=self.loan)
 
     def doDesc(self, frt, pag, r, c, p, i, w):

=== modified file 'wag/sl2020.py'
--- wag/sl2020.py	2015-08-25 15:02:35 +0000
+++ wag/sl2020.py	2015-09-08 08:53:19 +0000
@@ -14,8 +14,7 @@
 """
 
 import time
-from TartanClasses import ASD, Batches, CCD, GetCtl, LoanInterest, Sql
-from TartanClasses import TartanDialog
+from TartanClasses import ASD, Batches, GetCtl, Sql, TartanDialog
 from tartanFunctions import askQuestion, callModule, chkGenAcc
 
 class sl2020:
@@ -215,8 +214,8 @@
             self.df.advanceLine(1)
         else:
             self.allocated = float(0.0)
+            self.df.selPage("Allocation")
             self.df.loadEntry("T", 2, 0, data=self.val)
-            self.df.selPage("Allocation")
             self.df.focusField("C", 2, 1)
 
     def updateTables1(self):
@@ -224,11 +223,6 @@
             self.curdt = self.trdate / 100
         else:
             self.curdt = self.bh.curdt
-        rate = CCD(self.acc[self.col.index("wlm_int_per")], "UD", 6.2)
-        strt = CCD(self.acc[self.col.index("wlm_start_date")], "d1", 10.0)
-        LoanInterest(self.sql, self.opts["conum"], self.empno, self.loan,
-            rate.work, strt.work, self.trdate, self.bh.batno, self.curdt,
-            capnm=self.opts["capnm"], update="Y", glctls=self.glctls)
         if self.typ == 1:
             self.glt = 4
             desc = "Interest Adj"

=== modified file 'wag/sl2030.py'
--- wag/sl2030.py	2015-08-25 15:02:35 +0000
+++ wag/sl2030.py	2015-09-08 12:15:23 +0000
@@ -40,9 +40,10 @@
             ctls = ["wag_slc", "wag_sli"]
             if gc.chkRec(self.opts["conum"], ctlctl, ctls):
                 return
-            self.glctls = (ctlctl["wag_slc"], ctlctl["wag_sli"])
+            self.glctl = (
+                ctlctl["wag_slc"], ctlctl["wag_sli"], ctlctl["wag_sli"])
         else:
-            self.glctls = None
+            self.glctl = None
         t = time.localtime()
         self.sysdtw = (t[0] * 10000) + (t[1] * 100) + t[2]
         return True
@@ -65,18 +66,17 @@
 
     def endPage0(self):
         self.df.closeProcess()
-        recs = self.sql.getRec(tables="waglmf", cols=["wlm_empno", "wlm_loan",
-            "wlm_int_per", "wlm_start_date"], where=[("wlm_cono", "=",
-            self.opts["conum"]), ("wlm_int_per", ">", 0), ("wlm_start_date",
-            "<", self.trdate)], order="wlm_empno, wlm_loan")
+        recs = self.sql.getRec(tables="waglmf", where=[("wlm_cono", "=",
+            self.opts["conum"]), ("wlm_rate", ">", 0), ("wlm_start", "<",
+            self.trdate)], order="wlm_empno, wlm_loan")
         p = ProgressBar(self.opts["mf"].body, mxs=len(recs))
         for num, rec in enumerate(recs):
             p.displayProgress(num)
-            curdt = int(self.trdate / 100)
-            batch = "%03i%04i" % (self.opts["conum"], curdt % 10000)
-            LoanInterest(self.sql, self.opts["conum"], rec[0], rec[1], rec[2],
-                rec[3], self.trdate, batch, self.opts["capnm"], curdt,
-                update="Y", glctls=self.glctls)
+            curdt = self.trdate / 100
+            batch = "L%s" % curdt
+            LoanInterest("S", self.opts["mf"].dbm, rec, update="Y",
+                batch=batch, curdt=curdt, tdate=self.trdate,
+                glctl=self.glctl, capnm=self.opts["capnm"])
         p.closeProgress()
         self.sql.updRec("wagctl", cols=["ctw_i_date"], data=[self.trdate],
             where=[("ctw_cono", "=", self.opts["conum"])])

=== modified file 'wag/sl3010.py'
--- wag/sl3010.py	2015-08-26 08:52:51 +0000
+++ wag/sl3010.py	2015-09-15 06:32:15 +0000
@@ -16,7 +16,7 @@
 import time
 from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import getModName, doPrinter, showError
-from tartanWork import lntrtp
+from tartanWork import sltrtp
 
 class sl3010:
     def __init__(self, **opts):
@@ -38,7 +38,7 @@
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Staff Loans Batch Error Listing (%s)" % __name__)
         data = ["All Types"]
-        for typ in lntrtp:
+        for typ in sltrtp:
             data.append(typ[1])
         btt = {
             "stype": "C",
@@ -50,7 +50,7 @@
             "tables": ("ctlbat",),
             "cols": (
                 ("btm_batno", "", 0, "Bat-Num"),
-                ("btm_rtyp", ("xx", lntrtp), 20, "Type"),
+                ("btm_rtyp", ("xx", sltrtp), 20, "Type"),
                 ("btm_curdt", "", 0, "Curr-Dt"),
                 ("btm_multi", "", 0, "M")),
             "where": [
@@ -69,7 +69,7 @@
             tend=tnd, txit=txt, view=("N","V"))
 
     def doBatTyp(self, frt, pag, r, c, p, i, w):
-        if w > len(lntrtp):
+        if w > len(sltrtp):
             return "Invalid Batch Type"
         self.rtyp = w
         if self.rtyp:
@@ -154,8 +154,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         else:
             showError(self.opts["mf"].body, "Batch Errors",
                 "No Batch Transactions")
@@ -180,7 +180,7 @@
         self.fpdf.setFont(style="B")
         self.fpdf.drawText("%-s %-s %-s %-17s %-s %-s %-s %s" %
             ("Batch:", self.batno.disp,
-            "Type:", lntrtp[self.rtyp.work - 1][1],
+            "Type:", sltrtp[self.rtyp.work - 1][1],
             "Current Date:", self.curdt.disp,
             "Multi Allocations:", self.multi.disp))
         self.fpdf.drawText()

=== modified file 'wag/sl3020.py'
--- wag/sl3020.py	2015-08-26 08:52:51 +0000
+++ wag/sl3020.py	2015-09-15 06:32:30 +0000
@@ -17,7 +17,7 @@
 from TartanClasses import ASD, CCD, GetCtl, MyFpdf, ProgressBar, Sql
 from TartanClasses import TartanDialog
 from tartanFunctions import doPrinter, getModName, showError
-from tartanWork import lntrtp
+from tartanWork import sltrtp
 
 class sl3020:
     def __init__(self, **opts):
@@ -56,7 +56,7 @@
         self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Staff Loans Audit Trail (%s)" % __name__)
         data = ["All Types"]
-        for typ in lntrtp:
+        for typ in sltrtp:
             data.append(typ[1])
         btt = {
             "stype": "C",
@@ -68,7 +68,7 @@
             "tables": ("wagltf",),
             "cols": (
                 ("wlt_batch", "", 0, "Bat-Num"),
-                ("wlt_type", ("xx", lntrtp), 20, "Type"),
+                ("wlt_type", ("xx", sltrtp), 20, "Type"),
                 ("wlt_curdt", "", 0, "Cur-Dat")),
             "where": [("wlt_cono", "=", self.opts["conum"])],
             "group": "wlt_batch, wlt_type, wlt_curdt",
@@ -107,7 +107,7 @@
         self.edatd = CCD(self.edatw, "d2", 7).disp
 
     def doBatTyp(self, frt, pag, r, c, p, i, w):
-        if w > len(lntrtp):
+        if w > len(sltrtp):
             return "Invalid Batch Type"
         self.btype = w
         if self.btype:
@@ -222,8 +222,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()
@@ -270,7 +270,7 @@
             return
         self.fpdf.setFont(style="B")
         self.fpdf.drawText("%-7s %-7s %-10s %3s" % \
-            ("Batch", batch, "    Type", lntrtp[self.trtp - 1][1]))
+            ("Batch", batch, "    Type", sltrtp[self.trtp - 1][1]))
         self.fpdf.drawText()
         if self.totsonly == "Y":
             self.fpdf.drawText("%-53s %-13s %-13s" % \
@@ -325,16 +325,16 @@
         self.totind = "Y"
         self.pageHeading()
         tot = [0,0,0,0]
-        for x in xrange(0, len(lntrtp)):
+        for x in xrange(0, len(sltrtp)):
             qt = CCD(self.gqt[x], "SI", 8)
             am = CCD(self.gam[x], "SD", 13.2)
             dd = CCD(self.gdd[x], "SD", 13.2)
             if self.totsonly == "Y":
                 self.fpdf.drawText("%-44s %s %s %s" % \
-                (lntrtp[x][1], qt.disp, am.disp, dd.disp))
+                (sltrtp[x][1], qt.disp, am.disp, dd.disp))
             else:
                 self.fpdf.drawText("%-30s %s %s %s" % \
-                (lntrtp[x][1], qt.disp, am.disp, dd.disp))
+                (sltrtp[x][1], qt.disp, am.disp, dd.disp))
             tot[0] = tot[0] + qt.work
             tot[1] = float(ASD(tot[1]) + ASD(am.work))
             tot[2] = float(ASD(tot[2]) + ASD(dd.work))

=== modified file 'wag/sl3030.py'
--- wag/sl3030.py	2015-08-26 08:52:51 +0000
+++ wag/sl3030.py	2015-09-08 12:12:54 +0000
@@ -64,10 +64,10 @@
             "wgm_fname",
             "wlm_loan",
             "wlm_desc",
-            "wlm_ded_code",
-            "wlm_start_date",
-            "wlm_int_per",
-            "wlm_ded_amt",
+            "wlm_code",
+            "wlm_start",
+            "wlm_rate",
+            "wlm_repay",
             "sum(wlt_amt)"]
         whr = [
             ("wlm_cono", "=", self.opts["conum"]),
@@ -125,9 +125,9 @@
             pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

=== modified file 'wag/sl3040.py'
--- wag/sl3040.py	2015-08-26 08:52:51 +0000
+++ wag/sl3040.py	2015-09-15 06:32:40 +0000
@@ -14,7 +14,7 @@
 """
 
 import time
-from tartanWork import lntrtp
+from tartanWork import sltrtp
 from TartanClasses import ASD, CCD, MyFpdf, ProgressBar, Sql, TartanDialog
 from tartanFunctions import doPrinter, getModName, getSingleRecords
 from tartanFunctions import showError
@@ -41,7 +41,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Staff Loans Statements (%s)" % __name__)
         r1s = (("Yes","Y"),("Singles","S"))
         r2s = (("Yes","Y"),("No","N"))
@@ -56,14 +56,15 @@
                 "Y","Y",self.doPaidup,None,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("Y","N"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doFdate(self, frt, pag, r, c, p, i, w):
         self.fdate = w
 
     def doLdate(self, frt, pag, r, c, p, i, w):
         self.ldate = w
+        self.dated = self.df.t_disp[pag][0][p]
 
     def doWhole(self, frt, pag, r, c, p, i, w):
         self.whole = w
@@ -73,7 +74,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
         if self.whole == "S":
             col = [
                 "wlm_empno", "wgm_sname", "wgm_fname", "wlm_loan", "wlm_desc"]
@@ -116,23 +116,23 @@
                         break
                 self.doProcess(emp)
             p.closeProgress()
-            if self.fpdf.page and not p.quit:
+            if self.fpdf.page and not p.quit and self.df.repeml[1] == "N":
                 self.doPrint()
         self.opts["mf"].closeLoop()
 
     def doProcess(self, emp):
         self.pgnum = 0
         self.totbal = 0
-        dic = self.sql.waglmf_dic
-        self.emp = CCD(emp[dic["wlm_empno"][1]], "UI", 5)
+        wlc = self.sql.waglmf_col
+        self.emp = CCD(emp[wlc.index("wlm_empno")], "UI", 5)
         whr = [
             ("wgm_cono", "=", self.opts["conum"]),
             ("wgm_empno", "=", self.emp.work)]
-        col = ("wgm_sname", "wgm_fname")
+        col = ("wgm_sname", "wgm_fname", "wgm_emadd")
         mst = self.sql.getRec(tables="wagmst", where=whr, cols=col, limit=1)
         self.nam = CCD(mst[0] + ", " + mst[1], "NA", 60)
-        self.lon = CCD(emp[dic["wlm_loan"][1]], "UI", 2)
-        self.des = CCD(emp[dic["wlm_desc"][1]], "NA", 30)
+        self.lon = CCD(emp[wlc.index("wlm_loan")], "UI", 2)
+        self.des = CCD(emp[wlc.index("wlm_desc")], "NA", 30)
         whr = [
             ("wlt_cono", "=", self.opts["conum"]),
             ("wlt_empno", "=", self.emp.work),
@@ -148,6 +148,9 @@
             else:
                 self.printHeader()
                 self.printBody(wlt)
+                if self.df.repeml[1] == "Y":
+                    self.df.repeml[2] = mst[2]
+                    self.doPrint()
 
     def loadBalances(self, wlt):
         self.obal = 0.0
@@ -216,21 +219,18 @@
             self.obal = float(ASD(self.obal) + ASD(float(amt.work)))
             bal = CCD(self.obal, "SD", 13.2)
             mess = "%s %s %s %s %s %s %s %s %s" % \
-                (dat.disp, lntrtp[typ.work - 1][0], ref.disp, bat.disp,
+                (dat.disp, sltrtp[typ.work - 1][0], ref.disp, bat.disp,
                 per.disp, amt.disp, ded.disp, bal.disp, des.disp)
             self.fpdf.drawText(mess)
             self.pglin += 1
 
     def doPrint(self):
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
         pdfnam = getModName(self.opts["mf"].rcdic["wrkdir"], __name__,
             self.opts["conum"], ext="pdf")
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=view, prtnam=self.prtnam)
+            head="%s LOAN STATEMENT at %s" % (self.opts["conam"], self.dated),
+            repprt=self.df.repprt, repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'wag/sl4010.py'
--- wag/sl4010.py	2015-08-26 08:52:51 +0000
+++ wag/sl4010.py	2015-09-15 06:32:50 +0000
@@ -16,8 +16,8 @@
 import time
 from TartanClasses import ASD, CCD, LoanInterest, MyFpdf, SChoice, Sql, SRec
 from TartanClasses import TartanDialog
-from tartanFunctions import getModName, doPrinter
-from tartanWork import lntrtp
+from tartanFunctions import getModName, getPeriods,  doPrinter
+from tartanWork import sltrtp
 
 class sl4010:
     def __init__(self, **opts):
@@ -36,6 +36,11 @@
         self.sysdtd = "%i/%02i/%02i" % (t[0], t[1], t[2])
         self.sysdttm = "(Printed on: %i/%02i/%02i at %02i:%02i)" % \
             (t[0], t[1], t[2], t[3], t[4])
+        # Get the current period starting date
+        period = self.sql.getRec(tables="ctlynd", cols=["max(cye_period)"],
+            where=[("cye_cono", "=", self.opts["conum"])], limit=1)[0]
+        self.opts["period"] = getPeriods(self.opts["mf"], self.opts["conum"],
+            period)[0].work
         return True
 
     def mainProcess(self):
@@ -86,8 +91,6 @@
             (("T",1,8,0),"OSD",13.2,"Balance"),
             (("T",1,9,0),"Od1",10,"Last Interest Raised"),
             (("T",1,10,0),"Od1",10,"Last Payment Received"),
-            (("T",1,11,0),"OSD",13.2,"Capital"),
-            (("T",1,12,0),"OSD",13.2,"Int-Due"),
             (("T",2,0,0),("IRB",r1s),0,"History","",
                 "Y","Y",self.doTrans2,None,None,None))
         tnd = ((self.doEndTop,"N"), None, None)
@@ -113,19 +116,23 @@
         self.df.loadEntry("T", pag, p+1, data=self.name)
 
     def doLoan(self, frt, pag, r, c, p, i, w):
-        acc = self.sql.getRec(tables="waglmf", cols=["wlm_desc",
-            "wlm_ded_code", "wlm_int_per", "wlm_start_date", "wlm_ded_amt"],
-            where=[("wlm_cono", "=", self.opts["conum"]), ("wlm_empno", "=",
-            self.empno), ("wlm_loan", "=", w)], limit=1)
-        if not acc:
+        lmc = self.sql.waglmf_col
+        rec = self.sql.getRec(tables="waglmf", where=[("wlm_cono", "=",
+            self.opts["conum"]), ("wlm_empno", "=", self.empno),
+            ("wlm_loan", "=", w)], limit=1)
+        if not rec:
             return "Invalid Loan Number"
         self.loan = w
-        self.desc = acc[0]
+        self.desc = rec[lmc.index("wlm_desc")]
         self.df.loadEntry("T", pag, p+1, data=self.desc)
-        d = 1
-        for i in xrange(4):
-            self.df.loadEntry("T", 1, i, data=acc[d])
-            d += 1
+        self.df.loadEntry("T", 1, 0, data=rec[lmc.index("wlm_code")])
+        self.df.loadEntry("T", 1, 1, data=rec[lmc.index("wlm_rate")])
+        self.df.loadEntry("T", 1, 2, data=rec[lmc.index("wlm_start")])
+        self.df.loadEntry("T", 1, 3, data=rec[lmc.index("wlm_repay")])
+        # Raise Interest
+        LoanInterest("S", self.opts["mf"].dbm, rec, update="Y",
+            curdt=self.sysdtw / 100, tdate=self.sysdtw, refno="Pending")
+        # Get Balances
         self.lon = 0.0
         self.imt = 0.0
         self.pay = 0.0
@@ -133,15 +140,6 @@
         self.bal = 0.0
         self.idt = 0
         self.pdt = 0
-        self.cap = 0.0
-        self.due = 0
-        # Raise Interest
-        rate = self.df.t_work[1][0][1]
-        start = self.df.t_work[1][0][2]
-        lint = LoanInterest(self.sql, self.opts["conum"], self.empno,
-            self.loan, rate, start, self.sysdtw, "Pending", (self.sysdtw/100),
-            self.opts["capnm"], update="Y")
-        # Get Balances
         whr = [
             ("wlt_cono", "=", self.opts["conum"]),
             ("wlt_empno", "=", self.empno),
@@ -149,14 +147,15 @@
         odr = "wlt_trdt, wlt_type"
         self.wlt = self.sql.getRec(tables="wagltf", where=whr, order=odr)
         if self.wlt:
+            col = self.sql.wagltf_col
             for rec in self.wlt:
-                dat = CCD(rec[self.sql.wagltf_col.index("wlt_trdt")], "d1", 10)
-                typ = CCD(rec[self.sql.wagltf_col.index("wlt_type")], "UI",  2)
-                amt = CCD(rec[self.sql.wagltf_col.index("wlt_amt")], "SD",13.2)
+                dat = CCD(rec[col.index("wlt_trdt")], "d1", 10)
+                typ = CCD(rec[col.index("wlt_type")], "UI",  2)
+                amt = CCD(rec[col.index("wlt_amt")], "SD",13.2)
                 self.bal = float(ASD(self.bal) + ASD(amt.work))
-                self.cap = float(ASD(self.cap) + ASD(amt.work))
                 if typ.work == 1:
                     self.idt = dat.work
+                    self.imt = float(ASD(self.imt) + ASD(amt.work))
                 elif typ.work in (2, 3):
                     self.lon = float(ASD(self.lon) + ASD(amt.work))
                 elif typ.work == 4:
@@ -166,14 +165,12 @@
                     self.adj = float(ASD(self.adj) + ASD(amt.work))
         # Load Balances
         self.df.loadEntry("T", 1, 4, data=self.lon)
-        self.df.loadEntry("T", 1, 5, data=lint.tin)
+        self.df.loadEntry("T", 1, 5, data=self.imt)
         self.df.loadEntry("T", 1, 6, data=self.pay)
         self.df.loadEntry("T", 1, 7, data=self.adj)
         self.df.loadEntry("T", 1, 8, data=self.bal)
         self.df.loadEntry("T", 1, 9, data=self.idt)
         self.df.loadEntry("T", 1, 10, data=self.pdt)
-        self.df.loadEntry("T", 1, 11, data=lint.cap)
-        self.df.loadEntry("T", 1, 12, data=float(ASD(self.bal) - ASD(lint.cap)))
         self.opts["mf"].updateStatus("")
 
     def doHist(self, frt, pag, r, c, p, i, w):
@@ -183,6 +180,35 @@
         self.df.last[0] = [0, 0]
         self.df.setWidget(self.df.topEntry[0][0], state="disabled")
 
+    def loadBalances(self):
+        whr = [
+            ("wlt_cono", "=", self.opts["conum"]),
+            ("wlt_empno", "=", self.empno),
+            ("wlt_loan", "=", self.loan)]
+        odr = "wlt_trdt, wlt_type"
+        self.wlt = self.sql.getRec(tables="wagltf", where=whr, order=odr)
+        if self.wlt:
+            for rec in self.wlt:
+                dat = CCD(rec[self.sql.wagltf_col.index("wlt_trdt")], "d1", 10)
+                typ = CCD(rec[self.sql.wagltf_col.index("wlt_type")], "UI",  2)
+                amt = CCD(rec[self.sql.wagltf_col.index("wlt_amt")], "SD",13.2)
+                self.bal = float(ASD(self.bal) + ASD(amt.work))
+                self.cap = float(ASD(self.cap) + ASD(amt.work))
+                if typ.work == 1:
+                    if dat.work >= self.opts["period"] and \
+                            dat.work >= self.df.t_work[1][0][3]:
+                        self.cap = float(ASD(self.cap) - ASD(amt.work))
+                        self.due = float(ASD(self.due) + ASD(amt.work))
+                    self.imt = float(ASD(self.imt) + ASD(amt.work))
+                    self.idt = dat.work
+                elif typ.work in (2, 3):
+                    self.lon = float(ASD(self.lon) + ASD(amt.work))
+                elif typ.work == 4:
+                    self.pay = float(ASD(self.pay) + ASD(amt.work))
+                    self.pdt = dat.work
+                elif typ.work == 5:
+                    self.adj = float(ASD(self.adj) + ASD(amt.work))
+
     def doGeneral(self):
         self.opts["mf"].updateStatus("")
 
@@ -196,7 +222,7 @@
         tab = ["wagltf"]
         col = (("wlt_trdt", "", 0, "   Date"),
                 ("wlt_batch", "", 0, "Batch"),
-                ("wlt_type", ("XX", lntrtp), 3, "Typ"),
+                ("wlt_type", ("XX", sltrtp), 3, "Typ"),
                 ("wlt_ref", "", 0, "Reference", "Y"),
                 ("wlt_per", "", 0, " Int-%"),
                 ("wlt_amt", "", 0, "      Amount"),
@@ -207,7 +233,7 @@
             ("wlt_empno", "=", self.empno),
             ("wlt_loan", "=", self.loan)]
         if self.history == "N":
-            whr.append(("wlt_curdt", ">=", self.opts["period"][1][0] / 100))
+            whr.append(("wlt_curdt", ">=", self.opts["period"] / 100))
         odr = "wlt_trdt, wlt_type, wlt_ref"
         state = self.df.disableButtonsTags()
         SRec(self.opts["mf"], screen=self.df.nb.Page2, title=tit, tables=tab,
@@ -251,13 +277,13 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             if not self.wlt:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.acctot = 0
                 self.pageHeading()
@@ -265,7 +291,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             if self.wlt:
                 self.acctot = 0
@@ -274,7 +300,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%-5s %-20s %-25s %s" % ("", "",
@@ -295,6 +321,8 @@
             ("wlt_empno", "=", self.empno),
             ("wlt_loan", "=", self.loan)]
         odr = "wlt_trdt, wlt_type"
+        if self.history == "N":
+            whr.append(("wlt_curdt", ">=", self.opts["period"] / 100))
         recs = self.sql.getRec(tables="wagltf", where=whr, order=odr)
         for rec in recs:
             trd = CCD(rec[self.sql.wagltf_col.index("wlt_trdt")], "D1", 10)
@@ -310,7 +338,7 @@
                 self.pageHeadingTrans()
             self.acctot = float(ASD(self.acctot) + ASD(amt.work))
             self.fpdf.drawText("%s %s %s %s %s %s %s %s" % (trd.disp,
-                lntrtp[(typ.work - 1)][0], ref.disp, bat.disp,
+                sltrtp[(typ.work - 1)][0], ref.disp, bat.disp,
                 rte.disp, amt.disp, ded.disp, det.disp))
             self.pglin += 1
 

=== modified file 'wag/wg1010.py'
--- wag/wg1010.py	2015-08-25 15:02:35 +0000
+++ wag/wg1010.py	2015-09-03 11:22:23 +0000
@@ -521,7 +521,7 @@
         if self.df.pag == 0:
             self.doCloseProcess()
         elif self.df.pag == 1:
-            self.df.focusField("T", 0, 4)
+            self.df.focusField("T", 0, 3)
         elif self.df.pag == 2:
             self.df.selPage("General")
         elif self.df.pag == 3:

=== modified file 'wag/wg2020.py'
--- wag/wg2020.py	2015-08-26 08:52:51 +0000
+++ wag/wg2020.py	2015-09-08 12:17:44 +0000
@@ -57,9 +57,9 @@
         self.sql = Sql(self.opts["mf"].dbm, tables=tabs, prog=__name__)
         if self.sql.error:
             return
-        accs = self.sql.getRec(tables="waglmf", cols=["wlm_ded_code"],
+        accs = self.sql.getRec(tables="waglmf", cols=["wlm_code"],
             where=[("wlm_cono", "=", self.opts["conum"])],
-            group="wlm_ded_code")
+            group="wlm_code")
         self.lonacc = []
         for acc in accs:
             self.lonacc.append(acc[0])
@@ -76,7 +76,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Salaries and Wages Payslips (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -124,8 +124,8 @@
                 "Y","N",self.doPreview,None,None,None))
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","V"), mail=("B","Y"))
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
+            tend=tnd, txit=txt, view=("N","V"), mail=("N","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
         acc = self.sql.getRec(tables="tplmst", where=[("tpm_tname", "=", w),
@@ -205,12 +205,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        if self.df.repeml[2]:
-            self.email = self.df.repeml[2]
-        else:
-            self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
         if self.bestac:
             self.export = open(os.path.join(self.opts["mf"].rcdic["wrkdir"],
                 "best%03d_%s.txt" % (self.opts["conum"], self.paydt)), "w")
@@ -589,9 +583,9 @@
                 elif ebase == 5:
                     emt = round((eamt * self.hrate * ct1), 2)
                 elif ebase == 6:
-                    emt = round((eamt * int(self.uifpay) / 100), 2)
+                    emt = round((self.allow[5] * int(self.uifpay) / 100), 2)
                 elif ebase == 7:
-                    emt = round((eamt * int(self.sdlpay) / 100), 2)
+                    emt = round((self.allow[7] * int(self.sdlpay) / 100), 2)
                 else:
                     emt = 0
             elif self.ded[cod][0]:
@@ -659,9 +653,9 @@
                 elif rbase == 5:
                     rmt = round((ramt * self.hrate * ct1), 2)
                 elif ebase == 6:
-                    rmt = round((ramt * self.uifpay / 100), 2)
+                    rmt = round((self.allow[6] * self.uifpay / 100), 2)
                 elif ebase == 7:
-                    rmt = round((ramt * self.sdlpay / 100), 2)
+                    rmt = round((self.allow[8] * self.sdlpay / 100), 2)
                 else:
                     rmt = 0
             elif self.ded[cod][1]:
@@ -842,10 +836,8 @@
                 ("wlm_loan", "=", loan)], limit=1)
             if not lmf:
                 continue
-            dcode = lmf[self.sql.waglmf_col.index("wlm_ded_code")]
-            irate = lmf[self.sql.waglmf_col.index("wlm_int_per")]
-            sdate = lmf[self.sql.waglmf_col.index("wlm_start_date")]
-            damnt = lmf[self.sql.waglmf_col.index("wlm_ded_amt")]
+            dcode = lmf[self.sql.waglmf_col.index("wlm_code")]
+            damnt = lmf[self.sql.waglmf_col.index("wlm_repay")]
             if not damnt:
                 return  # No deduction amount
             ced = self.sql.getRec(tables="wagedc", where=[("ced_cono", "=",
@@ -861,17 +853,13 @@
                 eglco = self.opts["conum"]
             if mthly == "Y" and self.mthly == "N":
                 return
-            if self.preview == "Y":
-                upd = "N"
-            else:
-                upd = "Y"
-            lint = LoanInterest(self.sql, self.opts["conum"], self.empno,
-                loan, irate, sdate, self.rundt, "Payslip", self.curdt,
-                self.opts["capnm"], update=upd, glctls=self.slctls)
-            if not lint.bal > 0:
+            lint = LoanInterest("S", self.opts["mf"].dbm, lmf, update="N",
+                tdate=self.rundt)
+            bal = float(ASD(lint.cap) + ASD(lint.rin))
+            if not bal > 0:
                 continue
-            if damnt > lint.bal:
-                ded = lint.bal
+            if damnt > bal:
+                ded = bal
             else:
                 ded = damnt
             if totpay <= ded:
@@ -909,10 +897,11 @@
             runtp = "p"
         else:
             runtp = "o"
-        psl = PrintPayslip(self.opts["mf"], self.opts["conum"], self.empnos,
-            self.rundt, progs="y", runtp=runtp, prtnam=self.prtnam,
-            tname=self.tname, email=self.email, printm=self.printm,
-            message=self.mess, export=self.export, bestac=self.bestac)
+        psl = PrintPayslip(self.opts["mf"], self.opts["conum"],
+            self.opts["conam"], self.empnos, self.rundt, progs="y",
+            runtp=runtp, repprt=self.df.repprt, tname=self.tname,
+            repeml=self.df.repeml, message=self.mess,
+            export=self.export, bestac=self.bestac)
         self.etotal = float(ASD(self.etotal) + ASD(psl.etotal))
 
     def doIntegration(self):

=== modified file 'wag/wg3010.py'
--- wag/wg3010.py	2015-08-26 08:52:51 +0000
+++ wag/wg3010.py	2015-09-03 11:44:50 +0000
@@ -49,7 +49,7 @@
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld, tend=tnd,
-            txit=txt, view=("N","V"), mail=("Y","N"))
+            txit=txt, view=("N","V"), mail=("Y","Y"))
 
     def doRptTyp(self, frt, pag, r, c, p, i, w):
         self.typ = w
@@ -124,8 +124,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                pdfnam=pdfnam, head=self.head, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2])
+                pdfnam=pdfnam, head=self.head, repprt=self.df.repprt,
+                repeml=self.df.repeml)
         else:
             cols = [
                 ["wgm_empno",  "UI",  5, "EmpNo", "y"],
@@ -136,9 +136,8 @@
                 ["wgm_term",   "d1", 10, "Term-Date", "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=__name__, tables=tabs,
-                heads=[self.head], cols=cols, where=whr, order=odr, opts=opts,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                heads=[self.head], cols=cols, where=whr, order=odr,
+                opts=opts, repprt=self.df.repprt, repeml=self.df.repeml)
         self.closeProcess()
 
     def header(self):

=== modified file 'wag/wg3020.py'
--- wag/wg3020.py	2015-08-26 08:52:51 +0000
+++ wag/wg3020.py	2015-09-03 11:45:04 +0000
@@ -103,8 +103,8 @@
                 self.opts["conum"], ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view=self.df.repprt[1],
-                prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+                head=self.tit, repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def doPageHeading(self):
         self.fpdf.add_page()

=== modified file 'wag/wg3030.py'
--- wag/wg3030.py	2015-08-26 08:52:51 +0000
+++ wag/wg3030.py	2015-09-03 15:45:06 +0000
@@ -25,8 +25,8 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["wagedc", "wagmst", "wagtf2"],
-            prog=__name__)
+        self.sql = Sql(self.opts["mf"].dbm, ["wagtxa", "wagedc", "wagmst",
+            "wagtf2"], prog=__name__)
         if self.sql.error:
             return
         t = time.localtime()
@@ -56,6 +56,12 @@
             return "Invalid Date"
         self.edatew = w
         self.edated = self.df.t_disp[pag][0][i]
+        yr = w / 10000
+        mt = w / 100 % 100
+        if mt > 2:
+            yr += 1
+        self.txa = self.sql.getRec(tables="wagtxa",
+            where=[("wta_year", "=", yr)], limit=1)
 
     def doEnd(self):
         self.df.closeProcess()
@@ -103,13 +109,13 @@
                     else:
                         emp[num][0] = float(ASD(emp[num][0]) + ASD(p[1]))
                         emp[num][1] = float(ASD(emp[num][1]) + ASD(edl))
-        uifr = 0
+        uifr = float(ASD(self.txa[6]) + ASD(self.txa[7]))
         uifa = 0
+        uifp = 0
         cod = self.sql.getRec(tables="wagedc", cols=["ced_code", "ced_eamt",
             "ced_ramt"], where=[("ced_cono", "=", self.opts["conum"]),
             ("ced_type", "=", "D"), ("ced_ebase", "=", 6)], limit=1)
         if cod:
-            uifr = float(ASD(cod[1]) + ASD(cod[2]))
             amt = self.sql.getRec(tables="wagtf2", cols=["sum(wt2_eamt)",
                 "sum(wt2_ramt)"], where=[("wt2_cono", "=", self.opts["conum"]),
                 ("wt2_type", "=", "D"), ("wt2_code", "=", cod[0]),
@@ -119,9 +125,10 @@
         txbl = CCD(txbl, "SD", 13.2)
         paye = CCD(paye, "SD", 13.2)
         sdlp = CCD(sdl, "SD", 13.2)
-        sdla = CCD((int(sdl)/100.0), "SD", 13.2)
-        uifa = CCD(uifa, "SD", 13.2)
-        uifp = CCD(int(uifa.work*100.0)/uifr, "SD", 13.2)
+        sdla = CCD((int(sdl) / 100.0), "SD", 13.2)
+        if uifa:
+            uifa = CCD(uifa, "SD", 13.2)
+            uifp = CCD(int(uifa.work * 100.0) / uifr, "SD", 13.2)
         # Print the Report
         self.fpdf.add_page()
         self.fpdf.setFont(style="B")
@@ -158,8 +165,8 @@
             self.fpdf.drawText("%2s %-30s %13s %13s" % (k, n, t.disp, s.disp))
         self.fpdf.output(pdfnam, "F")
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-            head=self.tit, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
         self.opts["mf"].closeLoop()
 
     def doExit(self):

=== modified file 'wag/wg3040.py'
--- wag/wg3040.py	2015-08-26 08:52:51 +0000
+++ wag/wg3040.py	2015-09-03 11:45:49 +0000
@@ -127,14 +127,11 @@
             ["wt2_ramt", "SD", 13.2, "Employer-Amt", "Y"]])
         stots = [["ced_desc", "Total", "%s" % self.newpg]]
         gtots = ["wt2_eamt", "wt2_ramt"]
-        view = self.df.repprt[1]
-        prtnam = self.df.repprt[2]
-        mail = self.df.repeml[2]
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=name, tables=tables, heads=heads,
             opts=opts, cols=cols, stots=stots, gtots=gtots,
             conum=self.opts["conum"], conam=self.opts["conam"], ttype="D",
-            view=view, prtnam=prtnam, mail=mail)
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'wag/wg3050.py'
--- wag/wg3050.py	2015-08-26 08:52:51 +0000
+++ wag/wg3050.py	2015-09-03 11:46:39 +0000
@@ -28,7 +28,7 @@
     def setVariables(self):
         self.sql = Sql(self.opts["mf"].dbm, ["ctlsys", "ctlmst", "wagctl",
             "wagedc", "wagmst", "wagirp", "wagtf2", "wagrcv", "wagtxa",
-            "wagtxr"], prog=__name__)
+            "wagtxr", "wagtf1"], prog=__name__)
         if self.sql.error:
             return
         t = time.localtime()
@@ -99,7 +99,7 @@
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
         self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
-            tend=tnd, txit=txt, view=("N","P"), mail=("B","N"))
+            tend=tnd, txit=txt, view=("N","P"), mail=("B","Y"))
 
     def doType(self, frt, pag, r, c, p, i, w):
         if w == "L":
@@ -196,8 +196,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        self.email = self.df.repeml[1]
         self.emldf = self.df.repeml[2]
         self.error = False
         self.doWriteHeader()
@@ -205,7 +203,7 @@
             self.opts["mf"].dbm.rollbackDbase()
             self.closeProcess()
             return
-        if self.email == "N":
+        if self.df.repeml[1] == "N":
             self.printSetup()
         if not self.eemp:
             self.eemp = 99999
@@ -226,10 +224,10 @@
         else:
             recs = self.sql.getRec(tables="wagmst", where=whr,
                 order="wgm_cono, wgm_empno")
-            if not recs:
-                showError(self.opts["mf"].body, "Error",
-                    "No Employees Selected")
-        if recs:
+        if not recs:
+            showError(self.opts["mf"].body, "Error",
+                "No Employees Selected")
+        else:
             p = ProgressBar(self.opts["mf"].body, mxs=len(recs), esc=True)
             for num, rec in enumerate(recs):
                 p.displayProgress(num)
@@ -255,7 +253,8 @@
                         self.opts["mf"].dbm.rollbackDbase()
                     else:
                         self.opts["mf"].dbm.commitDbase()
-                    if self.email == "N":
+                    if self.df.repeml[1] == "N" or self.emldf:
+                        self.df.repeml[2] = self.emldf
                         self.doPrint()
         self.closeProcess()
 
@@ -436,7 +435,7 @@
             group="wt2_type, ced_ror, ced_taxcode",
             order="wt2_type desc, ced_ror")
         if wt2:
-            if self.email == "Y":
+            if self.df.repeml[1] == "Y":
                 self.printSetup()
             self.printHeader()
             if self.error:
@@ -476,7 +475,8 @@
             if self.preview == "N":
                 self.sql.insRec("wagirp", data=[self.opts["conum"], self.taxyr,
                     self.lastreg, self.emp, self.lastirp])
-            if self.email == "Y":
+            if self.df.repeml[1] == "Y" and not self.emldf:
+                self.df.repeml[2] = self.emadd
                 self.doPrint()
 
     def doEarningCode(self, trtp, trn):
@@ -589,7 +589,7 @@
 
     def printSetup(self):
         pth = self.opts["mf"].rcdic["wrkdir"]
-        if self.email == "Y":
+        if self.df.repeml[1] == "Y":
             key = "%s_%s" % (self.com, self.emp)
             self.pdfnam = getModName(pth, __name__, key, ext="pdf")
         elif not self.pdfnam:
@@ -840,19 +840,9 @@
 
     def doPrint(self):
         self.fpdf.output(self.pdfnam, "F")
-        if self.prtnam == "view":
-            view = "Y"
-        else:
-            view = "N"
-        if self.email == "N" or (not self.emadd and not self.emldf):
-            mail = "N"
-        elif self.emldf:
-            mail = self.emldf
-        else:
-            mail = self.emadd.work
         doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-            pdfnam=self.pdfnam, head=self.tit, view=view, prtnam=self.prtnam,
-            mail=mail)
+            pdfnam=self.pdfnam, head=self.tit, repprt=self.df.repprt,
+            repeml=self.df.repeml)
 
     def doExit(self):
         self.df.closeProcess()

=== modified file 'wag/wg3060.py'
--- wag/wg3060.py	2015-02-07 06:31:11 +0000
+++ wag/wg3060.py	2015-09-03 11:46:55 +0000
@@ -70,7 +70,7 @@
                 ["g", "NA", 50, "Details",     "y"]]
             RepPrt(self.opts["mf"], conum=self.opts["conum"],
                 conam=self.opts["conam"], name=name, tables=data, heads=head,
-                cols=cols, ttype="D", view=self.notes.view,
-                prtnam=self.notes.pnam, mail=self.notes.mail)
+                cols=cols, ttype="D", repprt=self.notes.df.repprt,
+                repeml=self.notes.df.repeml)
 
 # vim:set ts=4 sw=4 sts=4 expandtab:

=== modified file 'wag/wg3070.py'
--- wag/wg3070.py	2015-08-26 08:52:51 +0000
+++ wag/wg3070.py	2015-09-03 11:47:07 +0000
@@ -43,7 +43,7 @@
         return True
 
     def mainProcess(self):
-        self.tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
+        tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
             "Salaries and Wages Payslips Reprint (%s)" % __name__)
         tpm = {
             "stype": "R",
@@ -79,7 +79,7 @@
                 "","N",self.doDept,None,None,None))
         tnd = ((self.doEnd,"y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=self.tit, eflds=fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             tend=tnd, txit=txt, view=("N","V"), mail=("B","Y"))
 
     def doTplNam(self, frt, pag, r, c, p, i, w):
@@ -111,12 +111,6 @@
 
     def doEnd(self):
         self.df.closeProcess()
-        self.prtnam = self.df.repprt[2]
-        if self.df.repeml[2]:
-            self.email = self.df.repeml[2]
-        else:
-            self.email = self.df.repeml[1]
-        self.printm = self.df.repeml[3]
         # Export File for Bank
         if self.bestac:
             self.export = open(os.path.join(self.opts["mf"].rcdic["wrkdir"],
@@ -154,10 +148,10 @@
         self.opts["mf"].closeLoop()
 
     def doPrint(self):
-        psl = PrintPayslip(self.opts["mf"], self.opts["conum"], self.empnos,
-            self.rundt, progs="y", runtp="c", prtnam=self.prtnam,
-            tname=self.tname, email=self.email, printm=self.printm,
-            export=self.export, bestac=self.bestac)
+        psl = PrintPayslip(self.opts["mf"], self.opts["conum"],
+            self.opts["conam"], self.empnos, self.rundt, progs="y",
+            runtp="c", tname=self.tname, repprt=self.df.repprt,
+            repeml=self.df.repeml, export=self.export, bestac=self.bestac)
         self.etotal = float(ASD(self.etotal) + ASD(psl.etotal))
 
     def doExit(self):

=== modified file 'wag/wg4010.py'
--- wag/wg4010.py	2015-08-26 08:52:51 +0000
+++ wag/wg4010.py	2015-09-03 11:47:31 +0000
@@ -39,10 +39,11 @@
             self.taxyr = t[0]
         else:
             self.taxyr = t[0] + 1
-        self.startb = None
-        self.startt = None
-        self.endb = None
-        self.endt = None
+        self.startb = self.startt = (((self.taxyr - 1) * 10000) + 301)
+        if not self.taxyr % 4:
+            self.endb = self.endt = ((self.taxyr * 10000) + 229)
+        else:
+            self.endb = self.endt = ((self.taxyr * 10000) + 228)
         return True
 
     def mainProcess(self):
@@ -289,21 +290,21 @@
             self.opts["conum"], ext="pdf")
         if self.pr_opts == "I":
             self.fpdf.output(pdfnam, "F")
-            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"], pdfnam=pdfnam,
-                head=self.tit, view="V")
+            doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
+                pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "A":
             self.wagtrn = self.doGetTrans()
             if not self.wagtrn:
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
             else:
                 self.pageHeading()
                 self.pageHeadingTrans()
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
         elif self.pr_opts == "T":
             self.wagtrn = self.doGetTrans()
             if self.wagtrn:
@@ -312,7 +313,7 @@
                 self.printTrans()
                 self.fpdf.output(pdfnam, "F")
                 doPrinter(mf=self.opts["mf"], conum=self.opts["conum"],
-                    pdfnam=pdfnam, head=self.tit, view="V")
+                    pdfnam=pdfnam, head=self.tit, repprt=["N", "V", "view"])
 
     def printInfo(self):
         self.fpdf.drawText("%26s %-25s %s" % \

=== modified file 'wag/wgc110.py'
--- wag/wgc110.py	2015-08-25 15:02:35 +0000
+++ wag/wgc110.py	2015-09-18 12:26:23 +0000
@@ -24,40 +24,42 @@
             self.opts["mf"].startLoop()
 
     def setVariables(self):
-        self.sql = Sql(self.opts["mf"].dbm, ["wagctl", "tplmst", "ctlctl",
-            "chglog"], prog=__name__)
+        gc = GetCtl(self.opts["mf"])
+        ctlmst = gc.getCtl("ctlmst", self.opts["conum"])
+        mods = ctlmst["ctm_modules"]
+        self.genleg = False
+        for x in range(0, len(mods), 2):
+            if mods[x:x + 2] == "GL":
+                self.genleg = True
+                break
+        tabs = ["wagctl", "tplmst", "chglog"]
+        if self.genleg:
+            tabs.extend(["ctlctl", "genmst"])
+        self.sql = Sql(self.opts["mf"].dbm, tabs, prog=__name__)
         if self.sql.error:
             return
         self.acc = self.sql.getRec(tables="wagctl", where=[("ctw_cono", "=",
             self.opts["conum"])], limit=1)
         if not self.acc:
             self.new = True
-            self.acc = [self.opts["conum"], "", "", "", 0, 0, 0, 0, "N", "N",
+            self.acc = [self.opts["conum"], "N", 0, "", "", 0, 0, 0, 0, "N",
                 0, 0, "", 61, "payslip"]
         else:
             self.new = False
-        gc = GetCtl(self.opts["mf"])
-        ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
-        self.ctl = [
-            ["wag_ctl", "Salaries Control", 0],
-            ["wag_slc", "Staff Loans Control", 0],
-            ["wag_sli", "Staff Loans Interest", 0]]
-        for num, ctl in enumerate(self.ctl):
-            if ctl[0] in ctlctl:
-                self.ctl[num][2] = ctlctl[ctl[0]]
+        if self.genleg:
+            self.ctl = [
+                ["wag_ctl", "Salaries Control", 0],
+                ["wag_slc", "Staff Loans Control", 0],
+                ["wag_sli", "Staff Loans Interest", 0]]
+            ctlctl = gc.getCtl("ctlctl", self.opts["conum"])
+            for num, ctl in enumerate(self.ctl):
+                if ctl[0] in ctlctl:
+                    self.ctl[num][2] = ctlctl[ctl[0]]
         return True
 
     def drawDialog(self):
         tit = ("%03i %s" % (self.opts["conum"], self.opts["conam"]),
                 "Wages Control File Maintenance (%s)" % __name__)
-        glm = {
-            "stype": "R",
-            "tables": ("genmst",),
-            "cols": (
-                ("glm_acno", "", 0, "G/L-Num"),
-                ("glm_desc", "", 30, "Description")),
-            "where": [
-                ("glm_cono", "=", self.opts["conum"])]}
         tpm = {
             "stype": "R",
             "tables": ("tplmst",),
@@ -70,57 +72,73 @@
                 ("tpm_system", "=", "WAG")],
             "order": "tpm_tname"}
         r1s = (("Yes","Y"),("No","N"))
-        self.fld = (
-            (("T",0,0,0),"IUI",10,"Registration Number","",
-                self.acc[1],"N",None,None,None,("notzero",)),
-            (("T",0,1,0),"INA",10,"SDL Number","",
-                self.acc[2],"N",None,None,None,("notblank",)),
-            (("T",0,2,0),"INA",10,"UIF Number","",
+        if self.genleg:
+            glm = {
+                "stype": "R",
+                "tables": ("genmst",),
+                "cols": (
+                    ("glm_acno", "", 0, "G/L-Num"),
+                    ("glm_desc", "", 30, "Description")),
+                "where": [
+                    ("glm_cono", "=", self.opts["conum"])]}
+            fld = [
+                (("T",0,0,0),("IRB",r1s),0,"G/L Integration","",
+                    self.acc[1],"N",self.doGlint,None,None,None),
+                (("T",0,1,0),"IUI",7,self.ctl[0][1],"",
+                    self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,1,0),"ONA",30,""),
+                (("T",0,2,0),"IUI",7,self.ctl[1][1],"",
+                    self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,2,0),"ONA",30,""),
+                (("T",0,3,0),"IUI",7,self.ctl[2][1],"",
+                    self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
+                (("T",0,3,0),"ONA",30,"")]
+            seq = 4
+        else:
+            fld = []
+            seq = 0
+        fld.extend([
+            (("T",0,seq,0),"IUI",10,"Registration Number","",
+                self.acc[2],"N",None,None,None,("notzero",)),
+            (("T",0,seq + 1,0),"INA",10,"SDL Number","",
                 self.acc[3],"N",None,None,None,("notblank",)),
-            (("T",0,3,0),"IUI",4,"Trade Number","",
-                self.acc[4],"N",None,None,None,("notzero",)),
-            (("T",0,4,0),"IUD",9.5,"Daily Hours","",
-                self.acc[7],"N",None,None,None,("notzero",)),
-            (("T",0,5,0),"IUD",9.5,"Weekly Hours","",
-                self.acc[6],"N",self.doHrs,None,None,("notzero",)),
-            (("T",0,6,0),"IUD",9.5,"Monthly Hours","",
+            (("T",0,seq + 2,0),"INA",10,"UIF Number","",
+                self.acc[4],"N",None,None,None,("notblank",)),
+            (("T",0,seq + 3,0),"IUI",4,"Trade Number","",
                 self.acc[5],"N",None,None,None,("notzero",)),
-            (("T",0,7,0),("IRB",r1s),0,"Diplomatic Immunity","",
-                self.acc[8],"N",None,None,None,None),
-            (("T",0,8,0),("IRB",r1s),0,"G/L Integration","",
-                self.acc[9],"N",self.doGlint,None,None,None),
-            (("T",0,9,0),"IUI",7,self.ctl[0][1],"",
-                self.ctl[0][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,9,0),"ONA",30,""),
-            (("T",0,10,0),"IUI",7,self.ctl[1][1],"",
-                self.ctl[1][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,10,0),"ONA",30,""),
-            (("T",0,11,0),"IUI",7,self.ctl[2][1],"",
-                self.ctl[2][2],"N",self.doGenAcc,glm,None,("efld",)),
-            (("T",0,11,0),"ONA",30,""),
-            (("T",0,12,0),"IUD",6.2,"S/L Interest Rate","",
+            (("T",0,seq + 4,0),"IUD",6.2,"Daily Hours","",
+                self.acc[6],"N",None,None,None,("notzero",)),
+            (("T",0,seq + 5,0),"IUD",6.2,"Weekly Hours","",
+                self.acc[7],"N",self.doHrs,None,None,("notzero",)),
+            (("T",0,seq + 6,0),"IUD",6.2,"Monthly Hours","",
+                self.acc[8],"N",None,None,None,("notzero",)),
+            (("T",0,seq + 7,0),("IRB",r1s),0,"Diplomatic Immunity","",
+                self.acc[9],"N",None,None,None,None),
+            (("T",0,seq + 8,0),"IUD",6.2,"S/L Interest Rate","",
                 self.acc[10],"N",None,None,None,("efld",)),
-            (("T",0,13,0),"Id1",10,"Last Interest Date","",
+            (("T",0,seq + 9,0),"Id1",10,"Last Interest Date","",
                 self.acc[11],"N",None,None,None,("efld",)),
-            (("T",0,14,0),"INA",4,"Best Account Code","",
+            (("T",0,seq + 10,0),"INA",4,"Best Account Code","",
                 self.acc[12],"N",None,None,None,("efld",)),
-            (("T",0,15,0),"IUI",2,"Best Account Type","",
+            (("T",0,seq + 11,0),"IUI",2,"Best Account Type","",
                 self.acc[13],"N",None,None,None,("efld",)),
-            (("T",0,16,0),"INA",20,"Payslip Template","",
-                self.acc[14],"N",self.doTplNam,tpm,None,("efld",)))
+            (("T",0,seq + 12,0),"INA",20,"Payslip Template","",
+                self.acc[14],"N",self.doTplNam,tpm,None,("efld",))])
         but = (
             ("Accept",None,self.doAccept,0,("T",0,1),("T",0,0)),
             ("Quit",None,self.doExit,1,None,None))
         tnd = ((self.doEnd,"Y"), )
         txt = (self.doExit, )
-        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=self.fld,
+        self.df = TartanDialog(self.opts["mf"], title=tit, eflds=fld,
             butt=but, tend=tnd, txit=txt)
         if not self.new:
             s = 0
             for n, f in enumerate(self.acc[1:]):
+                if not self.genleg and not n:
+                    continue
                 self.df.loadEntry("T", 0, s, data=f)
                 s += 1
-                if n == 8:
+                if n == 0:
                     for c in self.ctl:
                         self.df.loadEntry("T", 0, s, data=c[2])
                         s += 1
@@ -161,21 +179,26 @@
 
     def doEnd(self):
         data = [self.opts["conum"]]
+        if not self.genleg:
+            data.append("N")
         for x, d in enumerate(self.df.t_work[0][0]):
-            if x in (9, 11, 13):
-                y = (x - 9) / 2
-                chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono", "=",
-                    self.opts["conum"]), ("ctl_code", "=", self.ctl[y][0])],
-                    limit=1)
-                if chk:
-                    self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
-                        where=[("ctl_cono", "=", self.opts["conum"]),
-                        ("ctl_code", "=", self.ctl[y][0])])
+            if self.genleg and x < 7:
+                if x in (1, 3, 5):
+                    y = (x - 1) / 2
+                    chk = self.sql.getRec(tables="ctlctl", where=[("ctl_cono",
+                        "=", self.opts["conum"]), ("ctl_code", "=",
+                        self.ctl[y][0])], limit=1)
+                    if chk:
+                        self.sql.updRec("ctlctl", cols=["ctl_conacc"], data=[d],
+                            where=[("ctl_cono", "=", self.opts["conum"]),
+                            ("ctl_code", "=", self.ctl[y][0])])
+                    else:
+                        self.sql.insRec("ctlctl", data=[self.opts["conum"],
+                            self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
+                elif x in (2, 4, 6):
+                    continue
                 else:
-                    self.sql.insRec("ctlctl", data=[self.opts["conum"],
-                        self.ctl[y][0], self.ctl[y][1], d, "", "N", "N"])
-            elif x in (10, 12, 14):
-                continue
+                    data.append(d)
             else:
                 data.append(d)
         if self.new:

=== modified file 'wag/wgc220.py'
--- wag/wgc220.py	2015-08-26 08:52:51 +0000
+++ wag/wgc220.py	2015-09-03 11:48:27 +0000
@@ -56,8 +56,7 @@
         opts = "Sort Order: %s" % self.sort
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
-            cols=cols, order=order, opts=opts, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            cols=cols, order=order, opts=opts, repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
         self.opts["mf"].closeLoop()
 

=== modified file 'wag/wgc310.py'
--- wag/wgc310.py	2015-08-25 15:02:35 +0000
+++ wag/wgc310.py	2015-09-03 15:39:21 +0000
@@ -14,7 +14,7 @@
 """
 
 from TartanClasses import GetCtl, Sql, TartanDialog
-from tartanFunctions import chkGenAcc
+from tartanFunctions import chkGenAcc, showInfo
 
 class wgc310:
     def __init__(self, **opts):
@@ -168,6 +168,12 @@
             "=", self.code)], limit=1)
         if not acc:
             self.new = True
+            if self.rtype == "D" and self.code == 1:
+                showInfo(self.opts["mf"].body, "PAYE",
+                    "This code is Reserved for PAYE Deductions")
+            elif self.rtype == "D" and self.code == 2:
+                showInfo(self.opts["mf"].body, "UIF",
+                    "This code is Reserved for UIF Deductions")
         else:
             self.new = False
             d = 3

=== modified file 'wag/wgc320.py'
--- wag/wgc320.py	2015-08-26 08:52:51 +0000
+++ wag/wgc320.py	2015-09-03 11:48:39 +0000
@@ -107,8 +107,8 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=cols, conum=self.opts["conum"], ttype="D",
-            conam=self.opts["conam"], lines=27, view=self.df.repprt[1],
-            prtnam=self.df.repprt[2], mail=self.df.repeml[2])
+            conam=self.opts["conam"], lines=(len(descs) - 1),
+            repprt=self.df.repprt, repeml=self.df.repeml)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'wag/wgc420.py'
--- wag/wgc420.py	2015-08-26 08:52:51 +0000
+++ wag/wgc420.py	2015-09-03 11:48:48 +0000
@@ -89,8 +89,7 @@
         state = self.df.disableButtonsTags()
         RepPrt(self.opts["mf"], name=__name__, tables=tables, heads=heads,
             cols=cols, conum=self.opts["conum"], ttype="D",
-            conam=self.opts["conam"], view=self.df.repprt[1],
-            prtnam=self.df.repprt[2])
+            conam=self.opts["conam"], repprt=self.df.repprt)
         self.df.enableButtonsTags(state=state)
 
     def doExit(self):

=== modified file 'wag/wgc520.py'
--- wag/wgc520.py	2015-08-26 08:52:51 +0000
+++ wag/wgc520.py	2015-09-03 11:48:56 +0000
@@ -97,8 +97,8 @@
                 ext="pdf")
             self.fpdf.output(pdfnam, "F")
             doPrinter(mf=self.opts["mf"], pdfnam=pdfnam, head=self.tit,
-                view=self.df.repprt[1], prtnam=self.df.repprt[2],
-                mail=self.df.repeml[2])
+                repprt=self.df.repprt,
+                repeml=self.df.repeml)
 
     def pageHeading(self):
         self.fpdf.add_page()

